{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/Fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/Fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/Fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/Fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/Fluid/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/Fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/Fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/Fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/Fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/Fluid/source/js/debouncer.js","path":"js/debouncer.js","modified":0,"renderable":1},{"_id":"themes/Fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/Fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/Fluid/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"themes/Fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/Fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/Fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/Fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/Fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":0,"renderable":1},{"_id":"themes/Fluid/source/img/About.png","path":"img/About.png","modified":0,"renderable":1},{"_id":"themes/Fluid/source/img/Archives.png","path":"img/Archives.png","modified":0,"renderable":1},{"_id":"themes/Fluid/source/img/Categories.jpg","path":"img/Categories.jpg","modified":0,"renderable":1},{"_id":"themes/Fluid/source/img/Home.jpg","path":"img/Home.jpg","modified":0,"renderable":1},{"_id":"themes/Fluid/source/img/Post.jpg","path":"img/Post.jpg","modified":0,"renderable":1},{"_id":"themes/Fluid/source/img/Tags.jpg","path":"img/Tags.jpg","modified":0,"renderable":1},{"_id":"themes/Fluid/source/img/shun.jpg","path":"img/shun.jpg","modified":0,"renderable":1},{"_id":"themes/Fluid/source/Home.jpg","path":"Home.jpg","modified":0,"renderable":1},{"_id":"themes/Fluid/source/Post.jpg","path":"Post.jpg","modified":0,"renderable":1},{"_id":"themes/Fluid/source/Tags.jpg","path":"Tags.jpg","modified":0,"renderable":1},{"_id":"themes/Fluid/source/About.png","path":"About.png","modified":0,"renderable":1},{"_id":"themes/Fluid/source/Archives.png","path":"Archives.png","modified":0,"renderable":1},{"_id":"themes/Fluid/source/Categories.jpg","path":"Categories.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/Fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1608117878700},{"_id":"themes/Fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1608117878703},{"_id":"source/_posts/【C#】C#两种数组定义的区别.md","hash":"4484224a70bd15af6264b7670b1845a1620fd903","modified":1574061919000},{"_id":"source/_posts/【C#】C#高级.md","hash":"131d4494511550023deda702f58802a6608e0996","modified":1574061919000},{"_id":"source/_posts/【C#】C#中级.md","hash":"43bd41b1ad644eaa199f42a62b435044e19cd225","modified":1574061919000},{"_id":"source/_posts/【C++】C++STL标准模板库.md","hash":"6640eadbfd019843693a3ab4382660716005354f","modified":1612185988526},{"_id":"source/_posts/【C++】C++中的四种个智能指针.md","hash":"0674b91ee7d9ae517ea5233effd659054948a5ae","modified":1612186248504},{"_id":"source/_posts/【C++】C++中的四种转换类型.md","hash":"75974d033dab853a910a5fc4d421fc5d540129c3","modified":1612186261805},{"_id":"source/_posts/【C++】C++函数模板的实现机制剖析.md","hash":"05fed2361f430b7ac5921c4cb582eb1706997d54","modified":1612186059525},{"_id":"source/_posts/【C++】C++进阶.md","hash":"438b5a4ac02476e3f8167f2f75cc68ce255dd756","modified":1612186237962},{"_id":"source/_posts/【C++】全局变量、静态全局变量、局部变量与静态局部变量.md","hash":"92329e44423531435fd9d37db408043335f9c97a","modified":1612186272925},{"_id":"source/_posts/【C++】C++高级.md","hash":"7f6a9e034b464f024d914f39656edac4e89434ea","modified":1612186040343},{"_id":"source/_posts/【C++】C++面向对象模型初探.md","hash":"cd0b0c8a3c18c9337e89f3c295d7c35ef089ca0b","modified":1612186231798},{"_id":"source/_posts/【Lua】Lua基础.md","hash":"267050e5c3461808f4d2df6d53c513da81a43f4d","modified":1612186337325},{"_id":"source/_posts/【Linux】Linux基础.md","hash":"4008054b877c760abf43018298786f0fc01bd15f","modified":1612186321185},{"_id":"source/_posts/【C】C的typedef的妙用.md","hash":"f3b5a9b3e0fc19834a0976e2a6440482feaf5d8a","modified":1612185979697},{"_id":"source/_posts/【Qt】Qt基础.md","hash":"d7b1d81841d91ec5edfaa13f03b3df5accb94cf7","modified":1612186351721},{"_id":"source/_posts/【MyQSL】MyQSL存储过程.md","hash":"10f91a85cbc223ebe7c92030d9fe1398ecac5ca9","modified":1612186344275},{"_id":"source/_posts/【UE4】UE4基础.md","hash":"c477ee93df860a1e01674aef6e56d57554b61441","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4组件.md","hash":"8c45a0be8104528b7bb9320a30f596e445823392","modified":1612186433153},{"_id":"source/_posts/【UE4】UE4蓝图基础.md","hash":"d7296d6ce2bd1330d0bbb607f516899047ac8f25","modified":1612185743104},{"_id":"source/_posts/【UE4】UE4联级粒子系统.md","hash":"19fc9b07e030c631740101b9f99d9af2afd75db0","modified":1612186425196},{"_id":"source/_posts/【UE4】UE4连接MySQL.md","hash":"a2468d15d0300f6ccdb3e7f915cc3210b37be829","modified":1612186417109},{"_id":"source/_posts/【UE4】UE4读写Json文件.md","hash":"00928ce9a06dd0e3ae4b2cb0cf28e62cabad7723","modified":1612186375185},{"_id":"source/_posts/【Unity3d】Animation.md","hash":"aab93c4ae10f7061653489843734a73ce626274d","modified":1612186441038},{"_id":"source/_posts/【Unity3d】Space.md","hash":"3929a253aacbfb21a1ac451c782b9f019e09ebd0","modified":1612186460804},{"_id":"source/_posts/【Unity3d】Lightmap.md","hash":"edfe3ca04fc81f9bce2560706d808b9571b1d836","modified":1612186451534},{"_id":"source/_posts/【Unity3d】Unity常用技巧笔记.md","hash":"d6f952acb256713daba70163ac76d4c8c10ebd4b","modified":1612186475317},{"_id":"source/_posts/【Unity3d】存档与读档.md","hash":"aabd716ce81f10de74b06724fc6dd957025fb180","modified":1612186482652},{"_id":"source/_posts/【Unity3d】游戏截屏.md","hash":"c01d6a982617da17a8d1530391f10bbcf8022579","modified":1612186489735},{"_id":"source/_posts/【待解决】一些待解决的难题.md","hash":"144f90c209d356170538dfdb4278c84e2bbeb143","modified":1612186505375},{"_id":"source/_posts/【程序编程】程序编程高级.md","hash":"b9015d379ee3b7ec60c7b04cb055dfee534e8389","modified":1612186499914},{"_id":"source/_posts/【日记】在武汉跑秋招的日子.md","hash":"5494d4364e67df2c6e4b298b1a4ab17a5bb619a2","modified":1612193311122},{"_id":"source/_posts/【shell】shell基础.md","hash":"1079e032bcff74cdca4c4c80c1a11d670f1ba458","modified":1612186369325},{"_id":"source/_posts/【算法】一些牛逼轰轰的算法记录.md","hash":"e0df974ce16950ac639d2e5e150a6b3245f02e0a","modified":1612186550233},{"_id":"source/_posts/【网络通信】物联网通信基础.md","hash":"277e2aec9d649abb408c408c7c3df3203a5adbe9","modified":1612186559695},{"_id":"source/_posts/【网络游戏】网络游戏基础.md","hash":"bb9f2074179dabe5d881584b55d3b812d6f286f0","modified":1612186569505},{"_id":"source/_posts/【计算机图形学】多变形填充算法原理.md","hash":"0ca81ad9a644aeb8ad1a031fbc6e116548e99988","modified":1612186536186},{"_id":"source/_posts/.git/COMMIT_EDITMSG","hash":"dad27b7fc77b981d88de93f22ad63a82f89157fb","modified":1610107962226},{"_id":"source/_posts/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1610107915994},{"_id":"source/_posts/.git/index","hash":"c087bc5b55c6cabbb08e1093d1e8afaced4bb77a","modified":1610107962223},{"_id":"source/_posts/.git/config","hash":"80de82dfd57795eed1fcbc83b7a9a318eb9e3b20","modified":1610107916012},{"_id":"source/_posts/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1610107915874},{"_id":"source/_posts/【C++】C++STL标准模板库/Snipaste_2019-10-06_10-41-56.png","hash":"810d61e3712627b3635a1d1ce1f6491557dc201b","modified":1574061919000},{"_id":"source/_posts/【C++】C++函数模板的实现机制剖析/Snipaste_2019-10-03_16-51-51.png","hash":"2a90c735ad40783b372412f70f7118ffeaf85ebe","modified":1574061919000},{"_id":"source/_posts/【C++】C++函数模板的实现机制剖析/Snipaste_2019-10-03_20-12-24.png","hash":"cad8a86adae84406c2e8817fd6ad2c2fd5978a24","modified":1574061919000},{"_id":"source/_posts/【C++】C++函数模板的实现机制剖析/Snipaste_2019-10-03_19-57-21.png","hash":"85d519d58f5f4729d5ab1352172f91204ad9a717","modified":1574061919000},{"_id":"source/_posts/【C++】C++面向对象模型初探/Snipaste_2019-10-02_09-07-09.png","hash":"9788155af506713955a83e6b75841ab266a600c1","modified":1574061919000},{"_id":"source/_posts/【C++】C++高级/Snipaste_2019-10-01_16-21-15.png","hash":"11db0bd09076d6a9c5453ffb9d727fcc69f76014","modified":1574061919000},{"_id":"source/_posts/【C++】C++函数模板的实现机制剖析/Snipaste_2019-10-03_20-08-21.png","hash":"5c01aefb45d2ffba96637150a101159fb8f2e382","modified":1574061919000},{"_id":"source/_posts/【C++】C++高级/Snipaste_2019-10-01_16-52-53.png","hash":"597bf574dfd790524a42791a734b4e6f56001648","modified":1574061919000},{"_id":"source/_posts/【C++】C++高级/Snipaste_2019-10-02_16-10-55.png","hash":"c37e3f7d89ea5eaa7f8706f7e6c403e1e240adf8","modified":1574061919000},{"_id":"source/_posts/【C++】C++高级/Snipaste_2019-09-14_16-29-43.png","hash":"a55e0855be7a6b9653d60e1aa02f35d028edf35c","modified":1574061919000},{"_id":"source/_posts/【C++】全局变量、静态全局变量、局部变量与静态局部变量/Snipaste_2019-09-11_21-35-55.png","hash":"505601dffe4500c8a647a7063482ce62106e25e4","modified":1574061919000},{"_id":"source/_posts/【C++】全局变量、静态全局变量、局部变量与静态局部变量/Snipaste_2019-09-11_21-36-28.png","hash":"07871d39f3a7ee00adf0eb647cad376c59f2f842","modified":1574061919000},{"_id":"source/_posts/【C++】C++高级/Snipaste_2019-10-06_10-03-47.png","hash":"ec465977f70b7aa59d67bac0a5ad41c61b5dd583","modified":1574061919000},{"_id":"source/_posts/【C++】C++高级/Snipaste_2019-10-02_15-50-39.png","hash":"64fa5f2de6fb00f854a93938e5079edd530ba1d5","modified":1574061919000},{"_id":"source/_posts/【C++】全局变量、静态全局变量、局部变量与静态局部变量/Snipaste_2019-09-11_21-36-38.png","hash":"f5a18dbfff19d9882af97385cfc2e516b66c6e8f","modified":1574061919000},{"_id":"source/_posts/【Linux】Linux基础/3.png","hash":"65c53fe085fb8347bb9c533cf4ce1691e9730943","modified":1574061919000},{"_id":"source/_posts/【Linux】Linux基础/1.png","hash":"e74c708ed4982ebfcf7d877f208c8c387f5e2807","modified":1574061919000},{"_id":"source/_posts/【Linux】Linux基础/4.png","hash":"db75575cba757e8f832672d4f6c1890d478df81c","modified":1574061919000},{"_id":"source/_posts/【Linux】Linux基础/6.png","hash":"18a0e386b38c07dc6a669d336b8b6550346fab90","modified":1574061919000},{"_id":"source/_posts/【Linux】Linux基础/5.png","hash":"7036239e4d1887d9c459a14a763d442e9b327797","modified":1574061919000},{"_id":"source/_posts/【Linux】Linux基础/7.png","hash":"5a78f505de229568325c94e53d986a6629093b38","modified":1574061919000},{"_id":"source/_posts/【Linux】Linux基础/8.png","hash":"9d26c95560af50e4a37d34fcf775d686a7bbe7fa","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-14_14-17-41.png","hash":"f83bcfa6debb9a1913515beab33f3d5715d5a5b4","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_10-16-42.png","hash":"8ede8469885ebf7cbc923d32805055cddf1d9252","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_10-31-54.png","hash":"3f9f6113883e9699b692866442cb0ce4cafadee2","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_10-39-37.png","hash":"5f4cd72fe0f354f694290b73ab1bdc0242a25b79","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_10-36-15.png","hash":"0044a9c1749c0453d64e75155990bc30a2b57f1c","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_10-47-10.png","hash":"71085564086326ac75335000c36b9f4dcc85dcd1","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_10-45-14.png","hash":"56a1fa9cfc719c352cfe7899f921eb3c6bd0dc88","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_11-04-47.png","hash":"ff5bf999fe1885ce5b2903b743191478f7d40f22","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_10-50-02.png","hash":"847b7161ad116c2ea0b9d2aa19a46056fcbfdc71","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_10-50-54.png","hash":"d5f88cbc7960644e0a452418da6cd899146e40c0","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_11-11-16.png","hash":"610880f8df9508b1a995c17057ed1d9c1c2e66ae","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_11-05-09.png","hash":"701a17ab4e85d5bef0637c467236642e22eadf5f","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_11-06-57.png","hash":"f975caeeaa07a96417efbbd8cb90f037164ab621","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_11-04-58.png","hash":"d14dae474a49c9debf89ae13defc9639d610fdc7","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_11-11-01.png","hash":"1005bef143ae4569261a45ccae43ee03330fb108","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_11-11-45.png","hash":"92d60d6fdf802ff58a02e62c0087562567513977","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_11-11-34.png","hash":"2e0b939a04bafefcc400cb356101a9452fedc3d6","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_11-12-10.png","hash":"57f22abebb3de28f6921173fc1cb97ef7cde8771","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_11-11-59.png","hash":"565c665097bd82963d37d3ee55ea61f19bdd5045","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_11-12-21.png","hash":"0140c32908f8bb585f9d2227f2d2d5aec3970230","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_11-12-31.png","hash":"5539e9b0014726ebd77482b9444ad7662b17b250","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_17-56-02.png","hash":"46fa4147b43c5849aef46813de50478e25bb446a","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-16_10-05-42.png","hash":"5f878e497d56e4943e2725dfa8c1feb9d3fe8bff","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_17-55-17.png","hash":"ca70a2d3894ad2068736e6a64731f8ce20d0eb45","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_18-02-03.png","hash":"86cd277b252a4cc1da93e97f5494bc87196ca565","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-16_10-40-52.png","hash":"ea43cd38cbf6d5fe5f1466c6a2559895a9cf15b1","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-16_17-06-01.png","hash":"c173ad764a607ea5124f5c58431226ba15b3f6be","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-16_17-13-58.png","hash":"49ffc8e93a439ed8da9b46daa461578935e09118","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-16_17-10-46.png","hash":"c14c3b3fb2db09bc121a82fea4f5c65b0bba8281","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-16_17-15-33.png","hash":"d68fc315e76de6efd20023d2349efc21acd1414d","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-16_21-27-20.png","hash":"83888c019cd4467ab6d76b6dab9473c8bad020d0","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-17_13-30-29.png","hash":"6ec3a520660892a2bc8e89d4912b0e4c77149668","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-17_13-46-52.png","hash":"971eb5730cde5a669cdc07b59ffae9f0a89ffbd6","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-17_13-30-49.png","hash":"018066c51f1b15f6b5b3e5b481c12b9a44fe70ae","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_10-33-38.png","hash":"64554330a54c6b95ee127c991e4888a69e429103","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-23_17-38-23.png","hash":"05d6fe4fc011f089704900b288f1bd6200556eb8","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-23_17-41-13.png","hash":"320625ad1a89a4da4b9a14518c92395ba42075ec","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_10-53-07.png","hash":"ddcb3857c76fd5c1fce4df83312e1b18d42dcec2","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_10-57-11.png","hash":"0371cb3e8f1e81e9393db23deb69500533bfa1d7","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-23_17-24-52.png","hash":"bb492205214896e665910cad73c5201b976b986a","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_11-10-28.png","hash":"36d8cc3a758a61b8b51b827df9b2aa036390d2fe","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_11-02-10.png","hash":"f4310100332d4b3fe782214afb78bde5d975c346","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_11-30-52.png","hash":"fc92e45a352a1c4b9e1abd2bd403b895e3f18e80","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_11-17-59.png","hash":"d2c402446c1775bcb6bb0a8abc811a9f7610ab7e","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_11-21-18.png","hash":"eddb2a62c1ae3a93280d41caa572d80aef68a317","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_11-26-07.png","hash":"200c62da25dc88ebdfa39e6caffea12785d9279e","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_11-42-14.png","hash":"3aa5d7c963c118ce37b5993684a9a9577005addd","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_11-50-37.png","hash":"a3b20410850873ae846e3e8f3853a7418a188710","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_11-39-53.png","hash":"0b863649f6e654b394955e3647fced1fcc956c72","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_11-46-47.png","hash":"73c6ec827855ffae563f210494d6f4b4484ce837","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_13-12-40.png","hash":"99ff8392aadd3ef46878e5257154e6eb0f381799","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-28_17-04-19.png","hash":"fcd324ec161790fe960119fdcdb9a47e925b7be7","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_13-32-38.png","hash":"bc2a709db523fc659a2fb6986296eadb53ec7570","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_13-19-47.png","hash":"3a793d0b095e18ff4df0b10cb7320e8e5195c5a6","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-29_09-09-05.png","hash":"c191952901614af5ca09f775338d2e35c7852714","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-28_17-26-35.png","hash":"50425fc1f654e3ed970fafe5165c351a9aaaadf7","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-28_17-28-37.png","hash":"c7643952253687e3672706dbe1b0acca7a06a38d","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_09-41-14.png","hash":"2ade6fef39dbba64358a5d2f79ac88f682b4efec","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_10-25-52.png","hash":"9ee3c1e6d54c5b0170248c8e7cd5b0c519be5cd6","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_10-14-27.png","hash":"d2d45fcf41738dc41f1c11eea9ba5f85e2f9c5e9","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_10-51-44.png","hash":"6641d07308c0d50c2447e8c065d5cdfc3fa45da1","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_11-50-46.png","hash":"2e70c74851578edb3a5d94b4c2a0fe7f2ee4d2bb","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_19-47-55.png","hash":"0548e3fb6a783367d0a2af3e8305aa0b36b809c7","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4联级粒子系统/Snipaste_2019-11-15_15-41-29.png","hash":"710f6dad4ba7890a60051a3bc6f89d846bf5cf5d","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-24_09-51-55.png","hash":"3c55d238b69ccbc521c5ad08b9644bda580f145d","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-24_10-45-29.png","hash":"b704a10ea2838729dfb50e5db77d366821a456bc","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-24_10-53-34.png","hash":"101791a642dca4718f7812d7a9e9f115947a74a9","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-24_10-53-06.png","hash":"56f4fee835704b79b6f3935ea110c9ba3ef1d89c","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-24_11-09-34.png","hash":"d77d66be1d8ba7b252bf66f0b90facaa57925e99","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_17-23-07.png","hash":"41905075876259d9b105a4c4d413b34401ed803e","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_17-23-27.png","hash":"0a83b862045bd256006f7c943e083d201cf05306","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_17-18-23.png","hash":"87987ac555489debfea1fec095a1953fd73b3230","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-31-36.png","hash":"ba2ee11a37f1815ffbfdab147b73161c46446795","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_17-36-36.png","hash":"7553e0f0ef41dfd9e0952f87a50f6de87f90b685","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-31-16.png","hash":"ade46d8881e3c15f1a04b83e9eb3915a541a5078","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-31-47.png","hash":"635642af09c49970dabd8e88306f7e00af24cabf","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-31-23.png","hash":"fe4f918ef3fec236da53b5a4a0fff3943cf0a7f8","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-39-15.png","hash":"60b0d897de36070faa73e5cb498e896c8035794f","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-39-52.png","hash":"8d22244bea3196a6e67057344df7a97a73649b7f","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-40-45.png","hash":"cb8e521fede3cf38da8ff0ea3a3bb5cbc21e677b","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-39-35.png","hash":"4182d56811a3252ebc9ec0d730f340c689f50c49","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-40-54.png","hash":"8c8e6b846343e5450e4a69cd7e1020ef32ac8abb","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-40-59.png","hash":"ea2148fe24979d5c8332ce1ca4f50cae63521f33","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_19-14-34.png","hash":"aefe27e9f978b8c23570c6f30c8486a6d3245b7f","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-21-48.png","hash":"a11b51e94b9331eb7936704ef2fb886b16d2c6bd","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-37-55.png","hash":"2d47aedb9096ea9c5c1601a5e792c79d86c7f789","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-46-46.png","hash":"0d398816ac7b4345f6f3495e17828c68480322a7","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-24-33.png","hash":"1b5cc46f8a19f5607b4631c232cd031640e124b8","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-42-24.png","hash":"075ccdadbc3a1c44d391288048e29f83a53dd7b8","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-50-31.png","hash":"61ffbd8f56ffb672190c3fce3fb67a7561cca07a","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-53-49.png","hash":"06caa84fa5b3d9d91a7cf9368eeed844e2023fa3","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-59-54.png","hash":"ccf34babcb3bb65373f4f93a2278449348e8a73d","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-07-44.png","hash":"dea91d3b9a042ba417e7f75da511d80a095ade41","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-07-50.png","hash":"b1d6ea713edee473f3cecd8939d2718bc8a04ff5","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-12-59.png","hash":"748732a228e6a13df384d15286c25c557afd6a51","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-21-30.png","hash":"08575e7872c9da7eda474b4170786eb2749dc79c","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-29-34.png","hash":"213cc29f7b2f03df188991824d2875b250dd5fef","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-30-00.png","hash":"c363550daba311a430d1326e3a77bbc093c991a8","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-25-34.png","hash":"d0e0e322959a40433f2b7d6b98b4a8dbe48d1830","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-27_10-32-38.png","hash":"d8bd1910293501ae25dafdd46ddbb89ae6ce9eae","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-27_10-38-13.png","hash":"4a9fe778400ae1372b3a24580cdb8fadf4e1594f","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-27_11-01-39.png","hash":"f3503da8827e583536e1bdcd679933d85dee71d1","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-27_11-28-43.png","hash":"06fd9ec3a40d13d78e36d36379c64a2a2ba75b9c","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-27_11-04-21.png","hash":"7b666b1faccf4d57fb8068daecaa2984a59b0ba3","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-28_17-00-10.png","hash":"7f1daca36a8e7ebea17b979721e7ceb8e624defd","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-28_15-51-30.png","hash":"01bca903f964a3c76edbb14de1fbd09d558269f8","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4连接MySQL/Snipaste_2019-11-05_17-54-58.png","hash":"27c07cacaa21c95831d38c452bfe6f59cf3eb9f4","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-14-47.png","hash":"18a412d7081079da2a4d60bbfd85e069312a4edf","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-02-53.png","hash":"5c57866c6623ed0b2c7b5444fd53e5f038dfa6a9","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-17-44.png","hash":"c6269a3a27c752c7ef1863d37535f8b0b76a236b","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-26-48.png","hash":"965a01ba8c647bc27a2a00bbd70d474ad8ac6a9f","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-27-48.png","hash":"32afad21d07ba21035398bbd592ceee5307bfe22","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-34-52.png","hash":"b5ceda67e3b162e555fd59450cf8a5348cfc8923","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4连接MySQL/Snipaste_2019-11-05_19-14-07.png","hash":"ec07cbdc14eb07a8c65387c1674cb920c2e14fa9","modified":1574061919000},{"_id":"source/_posts/【Unity3d】Unity常用技巧笔记/Snipaste_2019-08-27_11-35-00.png","hash":"8b2c152edbeba31889b8f5d99cb30221e9ff0cca","modified":1574061919000},{"_id":"source/_posts/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1610107915885},{"_id":"source/_posts/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1610107915932},{"_id":"source/_posts/.git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1610107915943},{"_id":"source/_posts/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1610107915961},{"_id":"source/_posts/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1610107915953},{"_id":"source/_posts/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1610107915971},{"_id":"source/_posts/.git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1610107915975},{"_id":"source/_posts/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1610107915980},{"_id":"source/_posts/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1610107915967},{"_id":"source/_posts/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1610107915987},{"_id":"source/_posts/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1610107915984},{"_id":"source/_posts/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1610107915992},{"_id":"source/_posts/.git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1610107915991},{"_id":"source/_posts/.git/logs/HEAD","hash":"a46a0fbb6ce7ac880677354a1108b97fb54030bc","modified":1610107962311},{"_id":"source/_posts/.git/refs/heads/master","hash":"749b9b9442f6662f4b48a27f4d45b7298845a8b0","modified":1610107962310},{"_id":"source/_posts/.git/objects/00/51dc339c0b42fc4405eb16bc633797d139418d","hash":"e50a5fed2902b9e86acbea354d8e085d579d08a3","modified":1610107929799},{"_id":"source/_posts/.git/objects/00/65ecb72fb0baccfe412d744a5c73d26eaa4533","hash":"f8c6e7223e4dccbb3da4957f2c89867966a8bfe9","modified":1610107929330},{"_id":"source/_posts/.git/objects/03/e5bb4d039cd3b039e266ec201ce096bb7f1c0d","hash":"ee159482ae4499df8741e9b73a6824979285f4c1","modified":1610107930719},{"_id":"source/_posts/.git/objects/00/77ea885ef97a4e5cf0090d4bce6e1ea57f13e7","hash":"68fd3f473b791bec7915146764493269ded8ff1e","modified":1610107923260},{"_id":"source/_posts/.git/objects/00/a5ca556bcad7a502f6ebf04a057e6b50b7e81c","hash":"cdde688788dafbf2b2b430ea6a494250e3ca289a","modified":1610107922921},{"_id":"source/_posts/.git/objects/07/bfdf3d7f005dd5ac1c99b2397d0550aec34356","hash":"290ade7f4f4fd05b75c18a1a10811ebb06a67c49","modified":1610107927524},{"_id":"source/_posts/.git/objects/04/1d288c1925f4199f36440bc1e5060b43ce3f3d","hash":"aa4a8da868390cbbc4bae9e822722ef08b053141","modified":1610107928616},{"_id":"source/_posts/.git/objects/04/c0918daddaf6db6c1365ee1d6e9397ed02d5c4","hash":"48bd358860194c3167af9388ba7636ba3e0edac6","modified":1610107922760},{"_id":"source/_posts/.git/objects/08/e87214bfa7292fc7774bacc660d664d9f6ded2","hash":"2e77351ba3b3a0dd6ae33bf6011d788364d69526","modified":1610107926237},{"_id":"source/_posts/.git/objects/08/feaddcc3ea76695bbc100980c201bc1a087ad9","hash":"b8ffab2e079363f1c67b31d8f818686b23d11208","modified":1610107929428},{"_id":"source/_posts/.git/objects/0a/1ff2fac6642cf91b4ccc5ee09cce86acbef9ce","hash":"9dea469fd0517e76e2455340e62bfc35b4ddb06f","modified":1610107926924},{"_id":"source/_posts/.git/objects/0c/98eaf1993cf3a02b2f6b476a26d48ae39e238c","hash":"1e4474979fb2cc69d07da60abc1b8f803c3065e6","modified":1610107961152},{"_id":"source/_posts/.git/objects/0c/ad513690da9a739d3bb58bc301ad939863c4d6","hash":"17da0f3d613ad31d8524efb1167e016302082df5","modified":1610107929776},{"_id":"source/_posts/.git/objects/0c/e39b9b931444a73f75d53aaf65bad9eee67ace","hash":"523ad8b8002a1b795cbec1b16a799a4990984add","modified":1610107930360},{"_id":"source/_posts/.git/objects/0d/783fb599bb9b5f336167220e1985339eed425f","hash":"b66453dcc1a880b651f37d592fbcca3148980fa6","modified":1610107928730},{"_id":"source/_posts/.git/objects/0f/3ac9630a39d55943648f4a6598e11137f8a01a","hash":"72b3a9ff16a2bd749897be60d42217b187d36afe","modified":1610107929062},{"_id":"source/_posts/.git/objects/0e/1c3b359f0df905c45d751a009e2db0b705aff6","hash":"5a61ae38bf957200cc1db6d97343503afb635462","modified":1610107921882},{"_id":"source/_posts/.git/objects/12/4285f1177a0d1a55cc6b99e216275cace96995","hash":"e7a51d00272091adc4ad51db3ba18b23b3b022c5","modified":1610107961230},{"_id":"source/_posts/.git/objects/10/19ac974ea6da2299c6809787f1c5fdc3acda38","hash":"0c6dccb030adc11c72d41931810de65c7c672d1d","modified":1610107931237},{"_id":"source/_posts/.git/objects/0e/4d1ef40e8566f1a780325790fcdc869249e491","hash":"83f13da4cd6575f4d0b7b1f20e8be5ae8fa96cf7","modified":1610107927898},{"_id":"source/_posts/.git/objects/15/9e2ae8763869263de9b597b88f227f96c77e39","hash":"6701130225a357d5c0e7c3a9e94e7685a056bd01","modified":1610107930240},{"_id":"source/_posts/.git/objects/13/554656ea8f44ef03112f176550e6c1caa8edda","hash":"63313767eaa6c59f9d17222861b60e3b53e12a5b","modified":1610107927027},{"_id":"source/_posts/.git/objects/15/bec9d476ed23a8aca54699f2bbf53d20dad04c","hash":"c42d981499cbd8289a11e2f336dbe0c7cfc7359a","modified":1610107925601},{"_id":"source/_posts/.git/objects/18/9815a636e875e70098cdc292dff268c68152ea","hash":"e08e43b284c324ebf8b115c4da4f1a9904d3045e","modified":1610107961470},{"_id":"source/_posts/.git/objects/1d/f04d7cffee88d4b79b4897fe7373f7b27caea2","hash":"648c03cbe9e268f124cd9cce12f2a8dfcc002110","modified":1610107925800},{"_id":"source/_posts/.git/objects/19/f114e860f68907e46e3f56d21c004144b98559","hash":"8b143c6f2df017a33fc6c22cef4e2582ad1fa5e4","modified":1610107926147},{"_id":"source/_posts/.git/objects/17/c1628ce10630cc7fe08a6b89ef65c49c96295a","hash":"dd563ff8551c571e513e0b07bba0c964fbcf4e7d","modified":1610107961286},{"_id":"source/_posts/.git/objects/1b/1589b522925a02479afa6814938edc266924b0","hash":"4542c8c6de95928cacffb62a4c170277673756e7","modified":1610107926125},{"_id":"source/_posts/.git/objects/1d/b8b4697e7bcb09422e9f040ed9b05011c15737","hash":"99e543358e60e7424765ca88fcb64746fb014921","modified":1610107929680},{"_id":"source/_posts/.git/objects/1a/8d0d519907e0658239ba09c359f2724798f919","hash":"27d29c28ee10208dec0ef207f3826fbf37bff776","modified":1610107921836},{"_id":"source/_posts/.git/objects/1f/01284885c1995f278aaf1333ace24d06153b4d","hash":"174bc018b08bbad22237d787a533d68b7ddc528e","modified":1610107961547},{"_id":"source/_posts/.git/objects/1e/aa80d779195ef7d82f87a9ceda09a295737edf","hash":"041de443a217a288740172da282a9e9da618640c","modified":1610107930395},{"_id":"source/_posts/.git/objects/21/3837221afab1a2360ae5ab229c592e3c67a783","hash":"36734667f30b0578555229ed1177f93220992f73","modified":1610107922864},{"_id":"source/_posts/.git/objects/23/5d11b0bea9edb920ad30ab1e67ef53e2c8d69b","hash":"c22029f61c5945faa35388f82719061d70dec3c3","modified":1610107926990},{"_id":"source/_posts/.git/objects/2c/18587242e958210131ffdd4d4a5eb9ef4fb790","hash":"9b08881030b7ce89d1e499bf6764a31bb2e98a6a","modified":1610107961445},{"_id":"source/_posts/.git/objects/25/f1deea363f24ef9be8f9decfb16473f8f0585c","hash":"483b6b2e09cd51071b895923c01d92903df4f8ec","modified":1610107927587},{"_id":"source/_posts/.git/objects/26/4748f4e4fcdcd21c9481e325b13efea4a15171","hash":"7ebc0828e5d7416612e40dfe5cb94ccf96d4cc4c","modified":1610107928808},{"_id":"source/_posts/.git/objects/2e/316e9b2feff133306ad0ba85918164148e26ba","hash":"92ec5df2d6e37712ce7bbad54f459a1b62d62469","modified":1610107926347},{"_id":"source/_posts/.git/objects/2d/8ea81d3cd4c293c1d24de0a1f4a1230ca6f936","hash":"4a4a6c688b777aede75cdb186374d390f1928f6c","modified":1610107922523},{"_id":"source/_posts/.git/objects/30/9f77f63fb630961ba8fc9c5313f8d81c74a6df","hash":"6f6a463eea492e393a54520036801b388a5b562f","modified":1610107927059},{"_id":"source/_posts/.git/objects/30/ceab6e40057cbc2f7edd4de2b06bbd98463db2","hash":"22ed8e907d45da9b74edde720580499c5ea6083c","modified":1610107928581},{"_id":"source/_posts/.git/objects/31/f00fdd95f783ca9918dab11b810ffa13774203","hash":"241b2deadf6f42c1b1e183b700b55ba06a12e3b7","modified":1610107924961},{"_id":"source/_posts/.git/objects/32/d4b530d3daa5f5630521b8a5c3f863ca279dbc","hash":"40ddbf2d079520b61658393a357a49353eeb4d39","modified":1610107931716},{"_id":"source/_posts/.git/objects/35/ca52feff6468ed360e87d9b9ebe37b6e7bb4dc","hash":"66f328d2b6804d543964550ae2e27c4eb945d63f","modified":1610107922832},{"_id":"source/_posts/.git/objects/37/9a82f5c04dda2c87970266c3e9375ff08d062c","hash":"2a7d951abe840011bb3da2adaf2c864443363c5e","modified":1610107926559},{"_id":"source/_posts/.git/objects/35/3ff1d5ae68e86c1f8f1e5adef8b79f32f0189b","hash":"3395b18ce305934940cddbb0a89d0f2c7fb309df","modified":1610107929305},{"_id":"source/_posts/.git/objects/3a/023d644fc8d59aec402f24e6ab6ec991398106","hash":"05f79af025d24d64ec3820f9b111e09411781ca0","modified":1610107930973},{"_id":"source/_posts/.git/objects/3b/71175d8905992a742473a9a7a6d50e4c156c20","hash":"f3aaad59c3aab806843ad06c1f0cf46c9e6d426b","modified":1610107927366},{"_id":"source/_posts/.git/objects/39/d9b2af27a2eccedfa19dd220f5d1f52c5f1b0d","hash":"579372544c553aa863a7b6f5b630f0ca413107ae","modified":1610107929274},{"_id":"source/_posts/.git/objects/3f/454d88b9e5b5140b884f0da8f2a719a8d0c5a1","hash":"99b4be24b850d31b7bd3d8f7b547b1066ce5fca8","modified":1610107927864},{"_id":"source/_posts/.git/objects/3c/bc67067a450b159e65560093b0275901a2114f","hash":"b105bdc77fc7d6637ffbac26b4e4037f3a643ac6","modified":1610107932015},{"_id":"source/_posts/.git/objects/3f/3556f9a8b9dbfc75f14e0d6eb4a4b39dbe557d","hash":"3348a8a88a62ba390defa42c4b1bbf4f0f6667df","modified":1610107924029},{"_id":"source/_posts/.git/objects/42/0f19649350f3e5abecf0521ad977003773973a","hash":"768b6fbd1266d90f5e4e17b06651df4fb5b21516","modified":1610107961007},{"_id":"source/_posts/.git/objects/42/71b19c6db4f19b911a3f5810374ece83239719","hash":"007ddf3e36dc0d43b470fdba82a0be35d59cdf3a","modified":1610107921713},{"_id":"source/_posts/.git/objects/43/209e50952297562dbfc65fe77b05e39fa0bc2f","hash":"137ed297e712cb8bab89667a3f2df8bb5109e5fe","modified":1610107925020},{"_id":"source/_posts/.git/objects/42/c11643b0b2f0cec22ec5da2e15aee61c6f3cc5","hash":"024fa87d03cd6c7d6fe904b380dc0242dc5e59a0","modified":1610107929507},{"_id":"source/_posts/.git/objects/49/4d8b9e48c2f345c2c85735aac154956adbb253","hash":"62a4125bb05b51033527e361ce5ef38cdae5b65e","modified":1610107960906},{"_id":"source/_posts/.git/objects/45/96e0ff95ec2cbc60f7c5476c159e838a4e3215","hash":"76faa0d2f7c1df9dfb4a72a3fb8ce4e2c1a97b75","modified":1610107926891},{"_id":"source/_posts/.git/objects/48/718bf20dae084ed1170399a90917a21cc45f07","hash":"94a582a0aff224ab3ecb7e2e2d8fa58c2a5a2969","modified":1610107961522},{"_id":"source/_posts/.git/objects/48/b16fb9dcae5ecc90cbaf8e224e699ad89ea0a3","hash":"e3fa7e9b378a2a02da219fc3ea1ccd52fbde03df","modified":1610107961416},{"_id":"source/_posts/.git/objects/4c/20ad7637eedd53489c2d8ed03e94335fa50f32","hash":"f20b35b417ca5fef1b949c81509f023a3e30b7a3","modified":1610107923949},{"_id":"source/_posts/.git/objects/4d/1234b2be2121958948f1f13f3e5720bc65c837","hash":"c3bce8299492f4365c40a69bd6bde6d9f2bc0a1c","modified":1610107929720},{"_id":"source/_posts/.git/objects/52/3947504e994413ae54da2e5ce7ac71c1a6af0f","hash":"7eccf1e81f62436eb6d53dc7d2efe39bba4fa3d5","modified":1610107927096},{"_id":"source/_posts/.git/objects/52/01954c1ea19da718b799bef7dfccda2b299838","hash":"cea4214e8e3212eb8a5fcc1ef01452eb70771071","modified":1610107924288},{"_id":"source/_posts/.git/objects/53/989a5d6ad2ae1a11e77e065ce6cd5c43c6a352","hash":"963f2a5537a0a0f8dd1149b7d285ffb0c6c89852","modified":1610107927653},{"_id":"source/_posts/.git/objects/58/53878246dcf5dc17c4c504349b99918e1e92bb","hash":"7e983ff5015cf5addef7b1c067a746380b8d3369","modified":1610107938650},{"_id":"source/_posts/.git/objects/58/73aaa36fca422ebd523c0ee991b1df91ab6009","hash":"c1e5ec8606ddbbdb63ec7461600b568637845fb2","modified":1610107929394},{"_id":"source/_posts/.git/objects/5b/7df9605b2b3185cab60c4ca5ad7752fb19e4b4","hash":"bb4eeef3b3d549ab716d68246cc4fbf13b633a8d","modified":1610107961686},{"_id":"source/_posts/.git/objects/5a/b961c32df140e053639345cba8e8f2049af122","hash":"2d75167418b5f2dee795abb8f68cc29b341cf81f","modified":1610107923580},{"_id":"source/_posts/.git/objects/5d/0378261f2ade8851cf39ce5e41c2837d53a380","hash":"866fd63067552ab411a1c1d35908182894cc2f98","modified":1610107927288},{"_id":"source/_posts/.git/objects/5f/af4c05c50781e9d8843bdbfae7a8171dd336fe","hash":"d68ae610a9ce440cec8017e35462abf53e4b7393","modified":1610107929539},{"_id":"source/_posts/.git/objects/5f/1efcc6f406f229a1d320d520c54da61da208d5","hash":"123e7a2263e10f0146f368f733b9d9ecaa08434d","modified":1610107927253},{"_id":"source/_posts/.git/objects/61/3d55a168c1adf8902bc5dd1584f77190b95b2e","hash":"b848213fd8935e3bd1664cf2621003484207472f","modified":1610107923664},{"_id":"source/_posts/.git/objects/5c/5b30ba6f119a1ab8d722b6d203a4943c94e65f","hash":"f2268d2f66cf06bdb24c911877bd63b0419eaf5e","modified":1610107928183},{"_id":"source/_posts/.git/objects/63/5d4a7089c2e0c6ecb797d076d85bd240e42cd9","hash":"e8086ca6f3caface8b02d7bf9d63889f34bf8b13","modified":1610107931206},{"_id":"source/_posts/.git/objects/5d/eff94c298777b872b178f5abb8b8f9a6eb5735","hash":"bfab4b0f5e0321b730a45cac4310dc599a7a346d","modified":1610107929092},{"_id":"source/_posts/.git/objects/63/75be2ee7dbb4672497d78aec35568572ac0dcf","hash":"4803778b3dedcf19af4bbd752118294cd5c46190","modified":1610107930853},{"_id":"source/_posts/.git/objects/64/bc53950986ecde536bbbfc9bc746256935d9c6","hash":"295326a8cc367d1fadc52b38873ffdd8e90cb09a","modified":1610107929987},{"_id":"source/_posts/.git/objects/68/065818ec522799fc98707a9b9b084c37829f8b","hash":"7614458d480298eff43f8bbd2dd7165a1725b6ad","modified":1610107931014},{"_id":"source/_posts/.git/objects/67/c78d6e03dea23172730b03f62344d9c8d38c9f","hash":"61f459fc00d789c43d06e63df4114e4b4355453f","modified":1610107922594},{"_id":"source/_posts/.git/objects/6e/e75eab6ef265571d9b8197368aa54e26920eca","hash":"2afec855a4adef28acc5b17827e1bdf51df3a6e7","modified":1610107926312},{"_id":"source/_posts/.git/objects/6e/ff8f18d44276bae54bfb3370f8e37dea522e7f","hash":"d09d6a0b86ab0875df1689e0db07f6ad4b50cff9","modified":1610107928098},{"_id":"source/_posts/.git/objects/6f/a42f6fda1d5cd6f178f96fe100a667200aed01","hash":"6c49358a2edf93fe82a63a3b32a9a44b51833f6e","modified":1610107930506},{"_id":"source/_posts/.git/objects/71/eda24af57e45fc78e94dcc5aa7ae785533039c","hash":"d2a3c532961a9e86946e4e9e194b2cae97dc5947","modified":1610107929642},{"_id":"source/_posts/.git/objects/73/a4b77720948f3a1065746b6d15891cbd8ccb0b","hash":"bc2a3a30842a996abbc0ce90ed651468097e5969","modified":1610107926079},{"_id":"source/_posts/.git/objects/75/a5e8ee87f2ee503142c6a2d5cf433f7caefeea","hash":"8c319271f5836efb81a3210458fb470d16c9dbfb","modified":1610107927466},{"_id":"source/_posts/.git/objects/77/ba6b9fe858e436a5940ed40c547b19944aa7f6","hash":"b74ff1ab973058159b4ac4758840f539d7c1a87a","modified":1610107938928},{"_id":"source/_posts/.git/objects/76/7dc45bb694070de0adab29bc53d58d7618c58c","hash":"e0483dc46e3cd8a01b8c3686e304cd3c056070bb","modified":1610107929361},{"_id":"source/_posts/.git/objects/7a/ef1fb5c547b0d00a84cfeac975f773aa9c0eae","hash":"17e1d6469d8accb0afc57aee0b8b9e10780adb2e","modified":1610107930585},{"_id":"source/_posts/.git/objects/7a/fea49a4496ccb2aa6bc94431c9d3bd54b29a64","hash":"89c24ff35cdb005c6a8f91cb5bc1d0abc4d6925e","modified":1610107926181},{"_id":"source/_posts/.git/objects/7b/62dcdc883c89167eaf3483c6ab2774208ce57a","hash":"a10ebe2fc22865c67dfc8d22e7a106a9dab88a00","modified":1610107931145},{"_id":"source/_posts/.git/objects/7d/04d40afe50ff188570fbfc761788ec926bbe55","hash":"6965d1362b279085e4d488f67f3b0b0141270a53","modified":1610107961585},{"_id":"source/_posts/.git/objects/78/1ab81476ae0c366ae758b40b751bb053d6a555","hash":"05c44dd1d62750b7d597e338ae13ac645d1e47ff","modified":1610107922024},{"_id":"source/_posts/.git/objects/7b/d40453f7f1790e580164d8ccf4b69d39d41a42","hash":"a9b11ea16f36a9746b535cecaba27a86f3fc1f36","modified":1610107931772},{"_id":"source/_posts/.git/objects/80/91d38de82be8206e598127cb46897773522cbb","hash":"53f910d922c392db25455b14b4a0da582084e716","modified":1610107929911},{"_id":"source/_posts/.git/objects/7e/f7dd0dc1d45ace0d0a8cb4835991b8d201e068","hash":"50937e5bdbe64d450854ef924e5372d7f9c5eca7","modified":1610107926959},{"_id":"source/_posts/.git/objects/85/bd18e4bd2e2dfe5d80e4eb9c6cab9cfc493e5c","hash":"cdf35a97f4f8c18bd7f08338bb5763d9a1dc2030","modified":1610107931845},{"_id":"source/_posts/.git/objects/84/83968a82373d84450edc4aa8f706875e56c0d0","hash":"8d10c58f34bc1691c957eb16e7a108a575a2bd1c","modified":1610107922053},{"_id":"source/_posts/.git/objects/88/529e3d0690d741f9712d1105781409de55abcc","hash":"78db7c6270dd34b9f3eadd9e9df82bb35acea2c5","modified":1610107923335},{"_id":"source/_posts/.git/objects/8a/4eca0ef02186ce981da8bc90f2caf3874f0038","hash":"59550dc0612320a6f7326c0570687c7f23a8c119","modified":1610107923452},{"_id":"source/_posts/.git/objects/8b/27148aad449a7128dda5140871f4b31f337518","hash":"1e195d3f6a0b89dca0576f48506769fa4040205b","modified":1610107961780},{"_id":"source/_posts/.git/objects/8b/09b0b4e0f666d241ae92bd6df3f9e00a0b21fb","hash":"c81af1b0b443a55c08f1ba6823172e5e11942ef4","modified":1610107927615},{"_id":"source/_posts/.git/objects/8a/85eff81c3e8d571d09d3301c182b29318db622","hash":"786b8ab8a5c043ac763e9b960f8d15610199a74d","modified":1610107928411},{"_id":"source/_posts/.git/objects/8b/eb6fa011e1f92c9eeebcd15b274f233310753d","hash":"283f2e79c7631e94447d9da05a8e294922ac9aa7","modified":1610107923497},{"_id":"source/_posts/.git/objects/8b/5a196c0baae02d0a17728c49f98f6d8748b118","hash":"d20713141de0a0218df650a8d50c2025874c56ad","modified":1610107923080},{"_id":"source/_posts/.git/objects/90/62dcf86a2245fb8d2b245508de9d99640f8162","hash":"1444d30c1c195f180832fe973a95082715ec3db9","modified":1610107925367},{"_id":"source/_posts/.git/objects/86/a91182dfb646831968f4643f6d6e2a49a7c774","hash":"72bec552c296897f53bcf67e0b59909cbe3c6819","modified":1610107929238},{"_id":"source/_posts/.git/objects/90/b4bcb330c301f21fe1208d7e53bff64a1bc06a","hash":"6c61e1024320391163a07557fda3b4aded208a98","modified":1610107938138},{"_id":"source/_posts/.git/objects/91/2f008d80c0625ef0f59062bfd58a647acd71b8","hash":"54c438dd69de9d0706865de924b7946050a76e04","modified":1610107929886},{"_id":"source/_posts/.git/objects/92/e3a33daa6589e7a4b2193d29d69cbdfbfc4ddb","hash":"0e92685e257cac7c364c721b2641ad4094ee56a6","modified":1610107921769},{"_id":"source/_posts/.git/objects/92/d52d0cd578fa72c49108a385f65d2a72417f51","hash":"2748a24b068c2c5cfee413189a2c675801060c70","modified":1610107931815},{"_id":"source/_posts/.git/objects/94/640ee600bba380cfac10d6d0bdcf7364ab5105","hash":"35ffdf43ed1c409b2af61960d15212d037b9bea4","modified":1610107961332},{"_id":"source/_posts/.git/objects/96/bfa3d7a12f7d50877b0ee5809b7ff5e47f0e6b","hash":"6cc366bc72df842fe22c684c7d0a3c6792221c05","modified":1610107923530},{"_id":"source/_posts/.git/objects/94/e2cb2c9d08831e3c3e7f4127da41db143a2066","hash":"c44dc88d4014dd9b6f8e9f00dc6108b194b83c11","modified":1610107923900},{"_id":"source/_posts/.git/objects/98/b685a6708f7158a8d174fbe9a41480d0d6da4f","hash":"a18ab2925ce79b7cb5d374da0be822faed69237f","modified":1610107930640},{"_id":"source/_posts/.git/objects/9b/66705bf9636c0a929cb7ffd2aa5b041d90a929","hash":"d9130bb9a9f6dc9d1fb67c2d4162d16df480cd0d","modified":1610107929137},{"_id":"source/_posts/.git/objects/a0/4d82cda2519d17410097795f5e682d3ca73b20","hash":"9d408012b1cef3824ebd35de49defde850eb36c8","modified":1610107928122},{"_id":"source/_posts/.git/objects/9d/f7f1661d37892d6ad683f2744ba52357fb1bb0","hash":"d0e6054fae7000c39062fa303d89a53ef2ae1a2d","modified":1610107921655},{"_id":"source/_posts/.git/objects/9c/ec83c31dbc3c400ad32d3276054c2b5e499f49","hash":"1a7b7caec796a97ba68ab44b97ee782da516d3ad","modified":1610107927548},{"_id":"source/_posts/.git/objects/a0/9ee8408ea4d6cff3ee559a2481049460bb00f4","hash":"c18e1f7ee380f9af3a22d69ad9d0f1d015018edf","modified":1610107930616},{"_id":"source/_posts/.git/objects/a0/c5cbfdbbbe9784d5341e2830878ea1154e521d","hash":"5f087004997cdb58e8bb68d51dc7ae3195814002","modified":1610107923630},{"_id":"source/_posts/.git/objects/a2/50910ebef64258897f24b9f021cc9ce08ecd18","hash":"68a9adeee628ba541cf439df36a9c71bdb093076","modified":1610107923220},{"_id":"source/_posts/.git/objects/a1/e478688c428f3d3f2a8e3e4f4b0a7a4c6a445a","hash":"74b0bda0367de4f35f44bdf432ee96c85670fa84","modified":1610107925511},{"_id":"source/_posts/.git/objects/a5/766184b151bdbd09ffe4363f5344dba4997e3f","hash":"95c9e08a61e44e3fb81e67cb3f64fbf753af02a6","modified":1610107927328},{"_id":"source/_posts/.git/objects/ab/34c7af80160bb57bac7123feff40c7d3350fff","hash":"172418e6306a0436503467f8e81b5d8ee08bfa85","modified":1610107926102},{"_id":"source/_posts/.git/objects/a6/bb67eaca999f6b9a6e9ebe20f3640bc6a307c0","hash":"6cf6ee78602850d21332e2bdf6ae5e14803c5d40","modified":1610107928210},{"_id":"source/_posts/.git/objects/a5/df8515f9cadd123d7cbbd29a9c51bea63f978c","hash":"238894264704ac38c7c5bff1cf386b1856da41ad","modified":1610107928000},{"_id":"source/_posts/.git/objects/a8/783b52718f6a48051b895888a9c5a5b4e07707","hash":"6643985238587b5352638506dcf7c59a9906f573","modified":1610107928441},{"_id":"source/_posts/.git/objects/ac/24cbf90b1fccd26402bfa7039ffa5ccd5e75ea","hash":"5dc03453a20cb6757abd1fcd439e87c44496b9b4","modified":1610107931960},{"_id":"source/_posts/.git/objects/ab/7381985a31eb7370a25f2616f69389f22446cc","hash":"98f3eb66b0c70f4416afa08821b5a8c11406f0f8","modified":1610107962243},{"_id":"source/_posts/.git/objects/ac/ca7f071993f6bbef046457216b45a575e22a31","hash":"95b96d72af843cee792633d0e781deca86173e7a","modified":1610107926381},{"_id":"source/_posts/.git/objects/af/26512a39baf739c0bde5a09885998b0a4dee89","hash":"2b8380e4799527b580d6313b8685d43588e224f8","modified":1610107930289},{"_id":"source/_posts/.git/objects/af/a6e28d7f513ec58b172508199d0482c1ca94b0","hash":"753a76bb91e5e2e1490281b5cb4e5bc74cb7663c","modified":1610107930017},{"_id":"source/_posts/.git/objects/af/11017ed80b2014c8c53387fd0424b3f74b943d","hash":"c455e6ebfa03d181bd74d6e5c796f2eecd58aa04","modified":1610107927407},{"_id":"source/_posts/.git/objects/af/b0479621fa575fd2d4440292b3f553254eee2b","hash":"d07c9ceee2ba73ec3386f56e0433805f8e52b576","modified":1610107929854},{"_id":"source/_posts/.git/objects/b0/319aeae5bb27cacce93aa064ac7f429b639616","hash":"366268e3f36e29a0997dfffb1252a2e2a57d62ba","modified":1610107961630},{"_id":"source/_posts/.git/objects/b2/de1b0a1389179b2976e27e6a75c316b04c552f","hash":"afdf2c306272d914da36c41375c202ce2ec8fa6d","modified":1610107924916},{"_id":"source/_posts/.git/objects/b2/e32f522d6ab1c430957883f03e4664a01a3b9e","hash":"e6a9890531a9f1b515512c922a13a81b2bbf5e5f","modified":1610107927175},{"_id":"source/_posts/.git/objects/b2/7d2902681c157fd94d592dbf01bd5ce23a965f","hash":"4b403e6769a0cb446f38dfd046104dd1deb10656","modified":1610107930749},{"_id":"source/_posts/.git/objects/b8/88db49d8d8191463fcea9aa4182c3e85eb68c6","hash":"f07421fae54eac5632086fd7d7884ad97091ed4e","modified":1610107961744},{"_id":"source/_posts/.git/objects/b4/5b19294242795249574d4684f49d051fd866a9","hash":"024eeff1860d6dfb894f9dc3660bbc2ccbe31d58","modified":1610107927965},{"_id":"source/_posts/.git/objects/b4/aa6ef58f6ef7bb72f2a2277ddd274033fc2010","hash":"0c5411ddb0ded8474c6937aa37d86bc6a23d91a7","modified":1610107927212},{"_id":"source/_posts/.git/objects/be/2ffeaebb1d40415901240e3e28a1032ec931da","hash":"e971b9032f11cda458b8db3860c9ca84a969c594","modified":1610107925900},{"_id":"source/_posts/.git/objects/c0/2245c80351f406fdcc50dfcbce6efeefdcefec","hash":"2bbf7f73d49bdb8b22025539b3732de03aa1289d","modified":1610107928696},{"_id":"source/_posts/.git/objects/bd/e276d76fb5f1ba52fd255fc3f6a87f41dc0a59","hash":"308d450a5c44eb02c4d5f58bba091d43385e358e","modified":1610107938382},{"_id":"source/_posts/.git/objects/bd/081de514442313e6e89caf759bd9afd22e0d13","hash":"be69f1f2d4c142757a39843bfec5b22e99099a51","modified":1610107926675},{"_id":"source/_posts/.git/objects/c0/45c61efdc94269f8d992b0585f6106d3da8929","hash":"b4d765fc62a2f476219524ea71257d38aa2b5541","modified":1610107931520},{"_id":"source/_posts/.git/objects/c1/1cd95a132456ac6b59000324927019360de549","hash":"3dbc52da90c6cc8c026e62ca08a177f061728c47","modified":1610107931881},{"_id":"source/_posts/.git/objects/bf/67139ebce38bda222ad1be4051351200ec43aa","hash":"47459f23974c2832e17631333d10fb1853039303","modified":1610107925843},{"_id":"source/_posts/.git/objects/c1/358e88d0484bc7fc9e980d907fc1285853c2d1","hash":"1b3c31cadf22ff4c69d4e34ba42d198905fbe539","modified":1610107929744},{"_id":"source/_posts/.git/objects/c0/77a3e9b72fb977d514a1f258030b784f86ee40","hash":"83b7920c1d81f496fb180606fedae99b72d97ca9","modified":1610107926762},{"_id":"source/_posts/.git/objects/c5/2d33d6afc9526d3ac77384d9fd6cf7d8f487cc","hash":"7a78f98fb9b6f5c10a01ddc0bc2400866ebf5546","modified":1610107961829},{"_id":"source/_posts/.git/objects/c9/de33bf6393ab05718fc93ec37cf4c7bfd59ee4","hash":"0b3f8847de17c0e5a95964ce7d9b7ae78213f3ae","modified":1610107925182},{"_id":"source/_posts/.git/objects/c7/b7dff1fb869d3913a52858e3a2498d60153a35","hash":"0ec9fdb944f7312d82aecb2daed43bc90558bdf9","modified":1610107922487},{"_id":"source/_posts/.git/objects/ca/d92baf93a520dcbbaf4780ce74ee91d29d636e","hash":"b7d8b17d4bc7603d0d973f8ffb2472b9d1390e54","modified":1610107930329},{"_id":"source/_posts/.git/objects/cd/c5e9ac9101752bfd6f900f2e19f58cfa1a6f47","hash":"4adcae758b980a9ab105b4e678afd1358a2b9112","modified":1610107929024},{"_id":"source/_posts/.git/objects/cc/1fc7b8ce10900707b5e8dfe7778545485dfe87","hash":"99ee5798428285126da49f8b3244549dbb33bc08","modified":1610107926868},{"_id":"source/_posts/.git/objects/cf/0fdf8057814d09bc4d48d217286660fc265138","hash":"6029b0fe1cc69e40fab3c5e1a7c1b1cf9956f8e4","modified":1610107925771},{"_id":"source/_posts/.git/objects/d0/4694ebc8518dea6061b5228bdcf05ef2adf037","hash":"1ad80a76d30716b185bb4200db80a2b45e7a0b1d","modified":1610107923869},{"_id":"source/_posts/.git/objects/d1/47820cf2d9c923f983889bb5dd7940ebe72692","hash":"cce019218f4719c3aec76034110eb356bd12527c","modified":1610107926057},{"_id":"source/_posts/.git/objects/cf/c8e0855cd34c86dcc1b46cd9ec3155133a7775","hash":"363f1cf5ff5e58ed89314acc714f40459ccbe1f0","modified":1610107928846},{"_id":"source/_posts/.git/objects/d2/a84228a9d831dd7217633922629f8a9ea446bf","hash":"59799c6805c02ed3a1e5294803d23614b670885b","modified":1610107923406},{"_id":"source/_posts/.git/objects/d1/592657fb0e0e7c5d00886563a0c78e5d464397","hash":"ad8828e7e29440efa2720c58e2265285bd253fc2","modified":1610107927780},{"_id":"source/_posts/.git/objects/d6/f90c328b19db4527cf07d19d2d36d584408ea8","hash":"5cebccd2d31a40e4cfd99a01c85bf13750a43c34","modified":1610107923142},{"_id":"source/_posts/.git/objects/d7/71d92fa0256db854001ebd937b873370cf7027","hash":"3a2a33086a472dfd415e685a4d36bc227c4c0eb1","modified":1610107925739},{"_id":"source/_posts/.git/objects/d7/aa969470e1a056cf9e1da110f6751b2302ff95","hash":"54d2d3054097d281c7cf94a0f721c0b3129498d2","modified":1610107923766},{"_id":"source/_posts/.git/objects/db/c3cf2b27ac993a8c3c2130a589a218daad2044","hash":"c9c5a708e4ce8d6912a18c38fae93e99da7f7a15","modified":1610107925564},{"_id":"source/_posts/.git/objects/de/a0cdb40b0cdaff62b10399310d6b0538903e4c","hash":"85d379c55ab041492d12f99e3576b1a5cbb8b199","modified":1610107928156},{"_id":"source/_posts/.git/objects/df/0ba69ff056496b5907dfee35f394f7c69a6971","hash":"496538ea7f5f7cab6487f6ab77159d9d9cbe8d9b","modified":1610107926270},{"_id":"source/_posts/.git/objects/e0/37420288c7f5ec19b90a3252f829bb1c0111aa","hash":"6e14d33e04bc2ba1d6b7024249e52dc22c350fc9","modified":1610107930055},{"_id":"source/_posts/.git/objects/e3/a69d2ec15c147be5522458563d3364e7b876dd","hash":"0c62dc3ee87b761af7ecfa7cd45a0f8be904e8ef","modified":1610107927720},{"_id":"source/_posts/.git/objects/e6/69a2e965a555e7d1045a10c483181439085b67","hash":"023a674e5d6d9c10d4152d896d66a57dd1749b05","modified":1610107927682},{"_id":"source/_posts/.git/objects/e9/732a94df398f7e6ce1529693c77ce6ef215ba3","hash":"ee558a7cc985691ba67ea4e34429d856057cd5a3","modified":1610107929207},{"_id":"source/_posts/.git/objects/d9/76c3ec899cfba71b51b153af7fe3183300bc7b","hash":"1adc2d5d26bac78d3b4cc92cabb02c85d6b2fcbe","modified":1610107929601},{"_id":"source/_posts/.git/objects/e6/72a1344e30ca7376352b61c96ac9dd3e5da366","hash":"646c6423ffb55bad110ab6ea4937cd7fd527ddbb","modified":1610107962145},{"_id":"source/_posts/.git/objects/ea/5ae35adffbfb35dabb31872487b863fccd19af","hash":"03f156ad34dbd6a40fa5c25808c429ad85f393a1","modified":1610107961947},{"_id":"source/_posts/.git/objects/ea/7d53683e1e4553ce60a50fb5443fcc8fbfcb7a","hash":"4e5d60f6e2d7116acbef86be3e1a13bd242cd02c","modified":1610107930428},{"_id":"source/_posts/.git/objects/e7/77dca7b8c9067ecb94aea0120ae52dfa904a7c","hash":"e17af0e0fa8496646b6c24453e9c00aad302f18a","modified":1610107926594},{"_id":"source/_posts/.git/objects/eb/5033e4f670f78c9239fdd296ab32c8a64d445f","hash":"80d1e983ad45c4003afcaabcd3bdc34a53e36849","modified":1610107928043},{"_id":"source/_posts/.git/objects/eb/695be8c89984593f9a6e298fc0957db0b20b6e","hash":"9cb6e9c062da6a6dee933070ca42a72e317c4729","modified":1610107928970},{"_id":"source/_posts/.git/objects/ed/5237f4d94aec88213ce28a140dfa8bbf3c1820","hash":"589a6176319f8c640c90e215eab8279bff73e45d","modified":1610107929833},{"_id":"source/_posts/.git/objects/ed/ed20b7892a3fe0de3da9ce2ec72e1c75acef6b","hash":"32e8b0b44fb5f15f9acf11360c5bea09838ce75d","modified":1610107930798},{"_id":"source/_posts/.git/objects/ed/a6bdba4596af32a3b41cf9ea5a80cc8e918973","hash":"b4795233f57d7a952493a181574aaa1a00994d21","modified":1610107930931},{"_id":"source/_posts/.git/objects/ee/909824a8cb1f3e47b41861934aadf057bf686b","hash":"8d6d90f3e25620376afdbfaf9f24a95bd0d3fc41","modified":1610107922970},{"_id":"source/_posts/.git/objects/ec/7b2632ecd10a39a903d4681cb2ed76949ef340","hash":"4b9c65422e222c76eaf3a293185182cb90aef258","modified":1610107926623},{"_id":"source/_posts/.git/objects/f0/f4957b7617d0a74f9fa466c178277570e126bd","hash":"e144b28f8538e0da669c045e8188e8c57df8bb95","modified":1610107928774},{"_id":"source/_posts/.git/objects/f2/6b7064f38a2715923648e71767cb71fabf723c","hash":"bc96dcc6a80dc8aafe79b23d2e8459cec4b78962","modified":1610107922889},{"_id":"source/_posts/.git/objects/f3/41cb0ad6317b61c2bbcf0abd285ac219f9beb0","hash":"501fcced4d06084804728f5416440888c15dc59a","modified":1610107923177},{"_id":"source/_posts/.git/objects/f3/dce878bc6e355952d9915d6f7fbf7dfce0881a","hash":"274ad2c00c19ccfbb90b9e146f0a773967bd5177","modified":1610107961107},{"_id":"source/_posts/.git/objects/f4/fe5abb7be599961add8f3d4e8e79b5f4828d91","hash":"3a796ce26f242e68cd1b8724c015a32c3efe8794","modified":1610107930086},{"_id":"source/_posts/.git/objects/f8/673ab71cd2f9ae56af095a0b2475e865a9284d","hash":"5dcfc4be77396f20b9b82c17bd5d2721b2ea1bfd","modified":1610107929171},{"_id":"source/_posts/.git/objects/fa/36c596bac47064af9b53569b67f37c3eb588e6","hash":"233cf23da1468e6e5160f3a317e17333d99b6c2a","modified":1610107928066},{"_id":"source/_posts/.git/objects/f8/7b797bdef0289129de98f11658c4c74f540139","hash":"b4aaa2969755b95b4bc0c4466394bd3fd158ed54","modified":1610107926018},{"_id":"source/_posts/.git/objects/f9/7d7a76cdb896f31ac63f6970723c23a1469657","hash":"1535e6b670c5e97c7acbaf9fa32942a8c2637739","modified":1610107927933},{"_id":"source/_posts/.git/objects/fc/7c5e17b0423daa2cc622c24a48d6fe20c0abfb","hash":"6cc973f9a0c66a514c5beb30b79d311af519c02a","modified":1610107938343},{"_id":"source/_posts/.git/objects/fb/f869d52c46f9d03d44a157141e6898f76f0522","hash":"6786621d121ff014193c1b5a5ca033f74fc7513c","modified":1610107926839},{"_id":"source/_posts/.git/objects/fc/0f7c1517c3db76fa432f836c281b4893ebbbd8","hash":"cd875fd30f7c63dbf7cd5de49513f5606d04ecb7","modified":1610107927749},{"_id":"source/_posts/.git/logs/refs/heads/master","hash":"a46a0fbb6ce7ac880677354a1108b97fb54030bc","modified":1610107962312},{"_id":"source/_posts/.git/objects/ff/5bcd74833bb98274300413d39e3736c4314cfd","hash":"07312d92a9c730ebe8a3ef77e0b45dc8f4886e6a","modified":1610107960950},{"_id":"source/_posts/.git/objects/fd/d2340befe082ccb1195e31ad217f035d3a4ce6","hash":"f827df056105e5e187436c314a9cf3e547255f23","modified":1610107929942},{"_id":"themes/Fluid/.editorconfig","hash":"b595159772f3ee1ef5e6780ce307270e741cb309","modified":1608117878652},{"_id":"themes/Fluid/.eslintrc","hash":"3df89453e1f63051fafc90f16a8d83951050e316","modified":1608117878653},{"_id":"source/_posts/.git/objects/fe/b11a11fb7e2bda2d123f2fb073ae97027a4007","hash":"56813998e13c8555efcd93c5b74459013e0f8afd","modified":1610107923822},{"_id":"themes/Fluid/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1608117878653},{"_id":"themes/Fluid/.gitignore","hash":"5d7e78749ba0a1efcf61253d4a9e50fc6ce0b4bc","modified":1608117878659},{"_id":"themes/Fluid/_config.yml","hash":"718d4ae12bde234ae25aff26ab3ac23085148b66","modified":1612190336536},{"_id":"themes/Fluid/LICENSE","hash":"653274b0f005f82768a7e5e17a32d38bfe38d492","modified":1608117878660},{"_id":"themes/Fluid/languages/de.yml","hash":"288f649c2c2314eb610693b18853ee74f0541e87","modified":1608117878664},{"_id":"themes/Fluid/package.json","hash":"3a77d0d197419dfe1ad759f0e5b2fb27d719965a","modified":1608117878684},{"_id":"themes/Fluid/languages/en.yml","hash":"31f2867619a768606166778d4ee51f3d00ac33a0","modified":1608117878664},{"_id":"themes/Fluid/languages/zh-CN.yml","hash":"3b92f4428d66c31610f6cde13b82ee723aff00d2","modified":1608117878665},{"_id":"themes/Fluid/languages/ja.yml","hash":"dc43be11a300893ebef47283c22f2f946ca21260","modified":1608117878665},{"_id":"themes/Fluid/layout/archive.ejs","hash":"7a1e19dec37804927f0d331d7e6c80ed03becd61","modified":1608117878681},{"_id":"themes/Fluid/layout/404.ejs","hash":"79a598e43c40d48b23076361720f1e77df466e41","modified":1608117878666},{"_id":"themes/Fluid/layout/about.ejs","hash":"22acb19c193fd215d0f5d5668fbf5ca5f5407388","modified":1608117878681},{"_id":"themes/Fluid/layout/category.ejs","hash":"dd2bd15cbd811d6ea973b6e6a17d99e36151e274","modified":1608117878682},{"_id":"themes/Fluid/layout/categories.ejs","hash":"0a8fe294cbbcc5112e360fcfdef5925fd39580bb","modified":1608117878681},{"_id":"themes/Fluid/layout/index.ejs","hash":"f061580cd54f39b510c6f4d3331ad301becca74c","modified":1608117878682},{"_id":"themes/Fluid/layout/layout.ejs","hash":"4bb0917c1e532bd55bac3dce3ec6117b38f340f7","modified":1608117878682},{"_id":"themes/Fluid/layout/links.ejs","hash":"8efaa2ab9804df1b3f72b6940b47247eb7853b66","modified":1608117878682},{"_id":"themes/Fluid/layout/page.ejs","hash":"9f4a66735082127fd0792ba747029212e63c90a1","modified":1608117878683},{"_id":"themes/Fluid/layout/tag.ejs","hash":"3a9296eb7181e8b3fb0cdc60cbafc815b98d6f51","modified":1608117878683},{"_id":"themes/Fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"beb3474d6f65c1e56700ba872c6a0d0836d4168e","modified":1608117878654},{"_id":"themes/Fluid/gulpfile.js","hash":"1ad8861ce4f702c164f908efb6c1c6504154ed2d","modified":1608117878663},{"_id":"themes/Fluid/layout/post.ejs","hash":"71a2d016bf1929943e6e849bf20c2c7434b6852e","modified":1608117878683},{"_id":"themes/Fluid/README.md","hash":"f75577ec5abe2033077dae29354d46041c7aeb96","modified":1608117878660},{"_id":"themes/Fluid/README_en.md","hash":"2b47ed68ec888dcc34fa6aad9ce95aeba6744fec","modified":1608117878661},{"_id":"themes/Fluid/layout/tags.ejs","hash":"b7c1a6d8fc1097fc16d2300260297013cb692153","modified":1608117878683},{"_id":"themes/Fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"5cc30e7b6e7b77c8b40b182ba02a5d93d37d2fc2","modified":1608117878656},{"_id":"themes/Fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"78ce211415d502c5a4398d786d5c697d34d868b9","modified":1608117878655},{"_id":"themes/Fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"7db378613df2b7d13e8c428c006399a879a4a852","modified":1608117878656},{"_id":"themes/Fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"18381d03518526d7cefd024a0bdd8d9e7c6440f5","modified":1608117878657},{"_id":"themes/Fluid/layout/_partial/archive-list.ejs","hash":"7d780309e12c437c2f8a246dd2fd0c272b8636ce","modified":1608117878667},{"_id":"themes/Fluid/layout/_partial/footer.ejs","hash":"a886be025d5e3b2c49657ba30e459f980a7cc75e","modified":1608117878674},{"_id":"themes/Fluid/layout/_partial/beian.ejs","hash":"53d9f79b4a3b71d2e89872fa138bc09611862ee4","modified":1608117878667},{"_id":"themes/Fluid/layout/_partial/css.ejs","hash":"23ead7d3e6c9a86ca0076d0ef7db98f3bb4c9b08","modified":1608117878673},{"_id":"themes/Fluid/layout/_partial/head.ejs","hash":"e0a374abd17d436e47c224519abe889050859158","modified":1608117878675},{"_id":"themes/Fluid/layout/_partial/nav.ejs","hash":"a2c16035ea5690882159f9df3a9ddb77ea74b4af","modified":1608117878675},{"_id":"themes/Fluid/layout/_partial/paginator.ejs","hash":"8191c630b3db4dd1dd8aad56defad93334a7b691","modified":1608117878676},{"_id":"themes/Fluid/layout/_partial/scripts.ejs","hash":"7026b27fe961f8f821757b84340a55ffdce7e37d","modified":1608117878679},{"_id":"themes/Fluid/layout/_partial/post-meta.ejs","hash":"3f16de8c40d87c7d23eba121dd8061757c3f9a58","modified":1608117878679},{"_id":"themes/Fluid/layout/_partial/search.ejs","hash":"bea21f1b5de61badd6c068080315c201fc80bc36","modified":1608117878680},{"_id":"themes/Fluid/layout/_partial/statistics.ejs","hash":"a70c26e415a27f07f38b9384e7eb48d1f2b30328","modified":1608117878680},{"_id":"themes/Fluid/layout/_partial/toc.ejs","hash":"76e6bc368cf46d4103ea9514699e10ec0b9a4b56","modified":1608117878680},{"_id":"themes/Fluid/scripts/events/index.js","hash":"a889022b079541f0fa5833f018c98cf81f864e4f","modified":1608117878684},{"_id":"themes/Fluid/scripts/filters/locals.js","hash":"2340a576635b16fd2456b3494f5afe89cd7764db","modified":1608117878687},{"_id":"themes/Fluid/scripts/filters/post-filter.js","hash":"1827cb42259dbfff1d072c5c8b388bf7d76e6acd","modified":1608117878687},{"_id":"themes/Fluid/scripts/generators/local-search.js","hash":"bda7fbe58082a2a02c0db066794b791b14462271","modified":1608117878688},{"_id":"themes/Fluid/scripts/generators/pages.js","hash":"a2a15ea722863aba09dcad578558432682a3b6b3","modified":1608117878688},{"_id":"themes/Fluid/scripts/helpers/page.js","hash":"49b2c6449d7be35739c6cfea3cab4e790580983a","modified":1608117878689},{"_id":"themes/Fluid/scripts/helpers/export-config.js","hash":"c0c6b38b41300c44a5e031f9cf8ad436af763762","modified":1608117878689},{"_id":"themes/Fluid/scripts/helpers/url.js","hash":"1664f8faa028898bd6f91d6db61c7dbf7463ee01","modified":1608117878689},{"_id":"themes/Fluid/scripts/helpers/utils.js","hash":"4acb213f90f1e7ba3696ef08d894a2a84807b669","modified":1608117878689},{"_id":"themes/Fluid/scripts/helpers/wordcount.js","hash":"da6144ee040fed0a9b9f45da3478bc33087b5ac9","modified":1608117878690},{"_id":"themes/Fluid/scripts/tags/checkbox.js","hash":"dac0e08eaa3614a6fd9ddbdfb4584094b1bdb30a","modified":1608117878690},{"_id":"themes/Fluid/scripts/tags/button.js","hash":"e1d0caed12e7cd9a35cf64272c41854b2901a58f","modified":1608117878690},{"_id":"themes/Fluid/scripts/tags/group-image.js","hash":"cc176cc1d7e7cc28cedf8397ae748c691d140be2","modified":1608117878691},{"_id":"themes/Fluid/scripts/tags/label.js","hash":"6c5916d86c63795c7e910bf614b0e7ece5073702","modified":1608117878691},{"_id":"themes/Fluid/scripts/tags/note.js","hash":"0410e9f982f19e71eb166da31e967a628dfbddcf","modified":1608117878692},{"_id":"themes/Fluid/scripts/tags/mermaid.js","hash":"dbfe59fde77d87b1d7d0c46480a2a729010988eb","modified":1608117878691},{"_id":"themes/Fluid/scripts/utils/join-path.js","hash":"ec068c699155565aea4aa4ab55d8a10b2947a114","modified":1608117878692},{"_id":"themes/Fluid/scripts/utils/object.js","hash":"d07abe58481ab097fc4e5b9f573cdc46bce4bfec","modified":1608117878693},{"_id":"themes/Fluid/.github/ISSUE_TEMPLATE/question.md","hash":"102213e5d6790d060c0e26b4a3a7ec744d753c52","modified":1608117878657},{"_id":"themes/Fluid/.github/workflows/lint.yaml","hash":"17f7d9aba4420011b7665275c58f838557d2434c","modified":1608117878659},{"_id":"themes/Fluid/source/css/main.styl","hash":"bf536db598434c36cc0c752196bfde46e584a92e","modified":1608117878704},{"_id":"themes/Fluid/.github/workflows/limit.yaml","hash":"bdbdb66da69ab7353b546f02150a6792f4787975","modified":1608117878658},{"_id":"themes/Fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1608117878705},{"_id":"themes/Fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1608117878706},{"_id":"themes/Fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1608117878706},{"_id":"themes/Fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1608117878705},{"_id":"themes/Fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1608117878705},{"_id":"themes/Fluid/source/css/gitalk.css","hash":"1fe60b2ab1d704f5a4f55e700dca5b8785fb390e","modified":1608117878704},{"_id":"themes/Fluid/source/js/debouncer.js","hash":"8833902327af7beac17ab97227fcd835329abfa2","modified":1608117878707},{"_id":"themes/Fluid/source/js/color-schema.js","hash":"eb64f1d74891b0d063d835a9b95b0914d5aced09","modified":1608117878707},{"_id":"themes/Fluid/source/js/events.js","hash":"3d2e05b83e49e30eec0f85e10707a27e02cc2903","modified":1608117878707},{"_id":"themes/Fluid/source/js/boot.js","hash":"1b6c093fc2e110c6d3378483fbd00e76aa52136e","modified":1608117878706},{"_id":"themes/Fluid/source/js/lazyload.js","hash":"91df93084b53aab48500ebb88019c8c523945243","modified":1608117878708},{"_id":"themes/Fluid/source/js/leancloud.js","hash":"67c04252b14c1da645952c4e299a00030440a28e","modified":1608117878708},{"_id":"themes/Fluid/source/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1608117878710},{"_id":"themes/Fluid/layout/_partial/comments/changyan.ejs","hash":"fc4890cde550b8e275492ea02b4c5e56e4a08ecf","modified":1608117878668},{"_id":"themes/Fluid/layout/_partial/comments/disqus.ejs","hash":"9c07fa38b30f5d8815ec9fff91c4b6aeed71c301","modified":1608117878669},{"_id":"themes/Fluid/layout/_partial/comments/gitalk.ejs","hash":"71564e440e0dc4338d7bb3a6d98790633f0cd640","modified":1608117878669},{"_id":"themes/Fluid/layout/_partial/comments/livere.ejs","hash":"9ba4ce6240ff29c4328e58ec88b90392e825289b","modified":1608117878670},{"_id":"themes/Fluid/layout/_partial/comments/twikoo.ejs","hash":"0bf01d77b3c6eb2831056d6627fdc15b6fcf9ba1","modified":1608117878671},{"_id":"themes/Fluid/layout/_partial/comments/utterances.ejs","hash":"8e99361e920a2add4c84a122dd319e72ab5a8c4f","modified":1608117878672},{"_id":"themes/Fluid/layout/_partial/comments/remark42.ejs","hash":"dd757f563edc9e0f2a5efb281bc4985a0a186d58","modified":1608117878671},{"_id":"themes/Fluid/layout/_partial/comments/valine.ejs","hash":"9a1e040ff2e53c3046cfce915b50729080d74e78","modified":1608117878673},{"_id":"themes/Fluid/layout/_partial/comments/waline.ejs","hash":"4a76d773037caf370f22ef8d62e8cfa138628e5a","modified":1608117878673},{"_id":"themes/Fluid/layout/_partial/plugins/analytics.ejs","hash":"d20f54bf2fd5cd274b4b9c5542eafbfec5120838","modified":1608117878677},{"_id":"themes/Fluid/layout/_partial/plugins/local-search.ejs","hash":"1daab8ac0e67db873816e96cc8535c7640d58e40","modified":1608117878677},{"_id":"themes/Fluid/layout/_partial/plugins/math.ejs","hash":"a49a0064b55cf6d8f2a61abfecd41f0083757e04","modified":1608117878678},{"_id":"themes/Fluid/layout/_partial/plugins/mermaid.ejs","hash":"fd1f78287c868ccab78b6244b66e3f9b0968c4a8","modified":1608117878678},{"_id":"themes/Fluid/layout/_partial/plugins/nprogress.ejs","hash":"98b92f77f17985035e0ec7c97e6d8624b72c9641","modified":1608117878679},{"_id":"themes/Fluid/layout/_partial/plugins/typed.ejs","hash":"c57817ceaee868d416558e56d2a8d0d418c64a2d","modified":1608117878679},{"_id":"themes/Fluid/scripts/events/lib/footnote.js","hash":"13d8466cd4c98367131b5f3d6a30b3d4ce8de26f","modified":1608117878685},{"_id":"themes/Fluid/scripts/events/lib/hello.js","hash":"374d4fec78c0d90d72bee81af244d700d7a407db","modified":1608117878685},{"_id":"themes/Fluid/scripts/events/lib/merge-configs.js","hash":"db6356abf0c997ea115a7577102188222bc7fc37","modified":1608117878686},{"_id":"themes/Fluid/scripts/events/lib/lazyload.js","hash":"01a13ac2f1960ac17935d59adb794604e29145c4","modified":1608117878686},{"_id":"themes/Fluid/scripts/events/lib/highlight.js","hash":"1d272faab76bddb8240751c7d87b1c5c8eadc4a9","modified":1608117878685},{"_id":"themes/Fluid/scripts/events/lib/preset-configs.js","hash":"995a312c52788bb7087396a5daded2bf132d4fce","modified":1608117878686},{"_id":"themes/Fluid/source/js/local-search.js","hash":"bb899b1ddb2f3c2565d846def2f742ca15407cae","modified":1608117878708},{"_id":"themes/Fluid/scripts/events/lib/version.js","hash":"1d5a3a8cbf970d9d1a28a7ae9b935cc1b7afbeff","modified":1608117878687},{"_id":"themes/Fluid/source/css/_mixins/base.styl","hash":"046979dbd8cdabd21d89f9c1d8f1bb3f2fd06d6f","modified":1608117878694},{"_id":"themes/Fluid/source/css/_functions/base.styl","hash":"171697018fd384fce0834875ca94b91f16564cac","modified":1608117878693},{"_id":"themes/Fluid/source/js/utils.js","hash":"43787e6704b24acd8f6639a527b7ae18c0adc1b3","modified":1608117878709},{"_id":"themes/Fluid/source/js/plugins.js","hash":"d7c9bde00847d5a3d8af3c94eb6ba07129ac7a3e","modified":1608117878709},{"_id":"themes/Fluid/source/css/_pages/pages.styl","hash":"92c062cf55457b6549497244d09ec34e9c0c95c2","modified":1608117878703},{"_id":"themes/Fluid/source/css/_pages/_about/about.styl","hash":"47235d222812e2f829e9bde039fa719bbced9325","modified":1608117878694},{"_id":"themes/Fluid/source/lib/hint/hint.min.css","hash":"64fa8c328dc93432ec822de2818aef21a4f63b29","modified":1608117878710},{"_id":"themes/Fluid/source/css/_variables/base.styl","hash":"6d99bc7df1b61d7043168468fa928bd3da2a9fc8","modified":1608117878703},{"_id":"themes/Fluid/source/css/_pages/_category/categories.styl","hash":"0924e35eff2ec84e2d9e4772abccda452d9463ef","modified":1608117878700},{"_id":"themes/Fluid/source/css/_pages/_base/base.styl","hash":"574a9c64f071d938a31a768451aad64b2999a1d6","modified":1608117878698},{"_id":"themes/Fluid/source/css/_pages/_base/inline.styl","hash":"c98c4be12ae65b5db335527509e89af6d1451dbd","modified":1608117878699},{"_id":"themes/Fluid/source/css/_pages/_archive/archive.styl","hash":"86926a80bf6f39a7f47789b1a8f44b5984b4683f","modified":1608117878695},{"_id":"themes/Fluid/source/css/_pages/_base/color-schema.styl","hash":"615d35d4d73f1efe114add257eb7c600571029ad","modified":1608117878698},{"_id":"themes/Fluid/source/css/_pages/_base/keyframes.styl","hash":"58a7f8f2baea2d58cf5f7edfc91314ee5d7156ca","modified":1608117878699},{"_id":"themes/Fluid/source/css/_pages/_links/links.styl","hash":"83694b28209c548ef38bee78e473b02e90cbcf9f","modified":1608117878701},{"_id":"themes/Fluid/source/css/_pages/_index/index.styl","hash":"3e8339b19dc168a8154027381ce2616faf4d8e48","modified":1608117878701},{"_id":"themes/Fluid/source/css/_pages/_base/rewrite.styl","hash":"13c24997fdd15a38784806fed36ba4e34c8a9c35","modified":1608117878699},{"_id":"themes/Fluid/source/css/_pages/_post/post.styl","hash":"080a34e90b8ebfa1c7071574ea5085436eb43f83","modified":1608117878702},{"_id":"themes/Fluid/source/css/_pages/_base/_widget/banner.styl","hash":"65f14bece44cd68a4da93e5aee3a68b51677a8ee","modified":1608117878695},{"_id":"themes/Fluid/source/css/_pages/_tag/tags.styl","hash":"29e9b72cfda2f2baf9cf2597fcd7f9e66303a9bd","modified":1608117878703},{"_id":"themes/Fluid/source/css/_pages/_post/tag_plugin.styl","hash":"81daa88456f7bc9053b08ec667b3b0ca82565059","modified":1608117878702},{"_id":"themes/Fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"fd44a4da774afc00fd49638a9fe6b9d925e52810","modified":1608117878696},{"_id":"themes/Fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"41935973a66c14ab2bea0539d4b1f15c62534fa4","modified":1608117878697},{"_id":"themes/Fluid/source/css/_pages/_base/_widget/footer.styl","hash":"dbd0a3518e5bfca92851490b34654f46bb5cfc76","modified":1608117878696},{"_id":"themes/Fluid/source/css/_pages/_base/_widget/board.styl","hash":"bb9cdde191b9b1287ba19414bab862f30be6a8a0","modified":1608117878696},{"_id":"themes/Fluid/source/css/_pages/_base/_widget/header.styl","hash":"64a2c98711b1765a7d8eb99f9e3cd0b9b0673f40","modified":1608117878697},{"_id":"source/_posts/【C++】C++STL标准模板库/Snipaste_2019-10-06_14-36-13.png","hash":"8d5ba40456eebbf1980ca791bf463eaff70e9290","modified":1574061919000},{"_id":"source/_posts/【C++】C++中的四种转换类型/Snipaste_2019-09-12_10-11-10.png","hash":"5696fb19f2d72c2161f4a1497bef9c68016373ef","modified":1574061919000},{"_id":"source/_posts/【C++】C++中的四种转换类型/Snipaste_2019-09-12_16-32-44.png","hash":"4d26c7a6c9d42f801d7a6d53af4f820e90f06f38","modified":1574061919000},{"_id":"themes/Fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"d29064ed8bdf62d5cf4eac32ebdb5d0c7075ebbd","modified":1608117878697},{"_id":"source/_posts/【C++】C++高级/Snipaste_2019-09-14_09-39-52.png","hash":"a50164c862b593399eb3791eea5c3118e0f1b4bf","modified":1574061919000},{"_id":"source/_posts/【Linux】Linux基础/2.png","hash":"dbf18a4e77773e54be17847e9e4e889c2930860e","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_10-49-05.png","hash":"ca5692c9ef6079fd5323ad6115f8b7ae5a25c270","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-16_10-06-16.png","hash":"081d2c65597bb20119bb1edc30b500f7c2822600","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-16_10-07-00.png","hash":"242bdb22dc186655f2f6d77befaf6b7cf14b1915","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-16_10-06-10.png","hash":"3d17173feaca9e015bcb4e31b504953028400123","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-17_21-18-55.png","hash":"21ada8cf0e08292df6c592b053ac53cb3448bf2a","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_11-53-42.png","hash":"73f301358405ec6f7c4f3a02cfde542fc3c723f4","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_11-56-15.png","hash":"333ce02b2e4bddece40140609827a8c683f17b69","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_10-58-31.png","hash":"af681111b549c57a38a622fb6d7034eb9007b1b1","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_11-14-32.png","hash":"e33944519a55306a3df1c2ea329cf500369e9002","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_19-48-16.png","hash":"4163e6ff5df6335d69af47e6c2771c7fb08a8797","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-24_15-11-12.png","hash":"6bed8c6af17501079ef4ad59fb1d855c5de52eb1","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-24_14-55-47.png","hash":"b5ca8383cdc6fec3e04bd5e588e885a8ea7c1f9e","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_10-58-33.png","hash":"5136b69cd4a410b42109aa2a2f27e099c1e49d30","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_19-04-57.png","hash":"b7d1622850aa9558bc381d6c98a2108ff0d5aa4c","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-02-54.png","hash":"54b0de977b1b0ceccf1947a54b60fb2ac00d863d","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_19-59-29.png","hash":"43e83aac38ad697b66bc220000a258c0bf938c05","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-27_10-35-51.png","hash":"ea10f8899c92bf55b8c07a42ecc57c33b178c49b","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4连接MySQL/Snipaste_2019-10-23_10-36-25.png","hash":"5e8cc17525a7d927da9a610282b5f183f7e05757","modified":1574061919000},{"_id":"themes/Fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"5081ec00d3a1ee1a117cf33308abf25d71d133c4","modified":1608117878698},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-28_16-45-41.png","hash":"13ae1f4e51e9a233a366471ec9a9bba7518e6c3a","modified":1574061919000},{"_id":"themes/Fluid/source/css/_pages/_base/_widget/search.styl","hash":"1f4e678d7219815ab62de1b92ec75e021247f90b","modified":1608117878698},{"_id":"source/_posts/【UE4】UE4连接MySQL/Snipaste_2019-11-05_19-12-00.png","hash":"00de89bb9c0e786e222acd6693c4c2902ff236c2","modified":1574061919000},{"_id":"source/_posts/.git/objects/08/622f8bcef868473cbdf7acf2581346455fe166","hash":"f9eaa59ccc69a29e56cd2157b3fe910e54344ed7","modified":1610107923707},{"_id":"source/_posts/.git/objects/0e/277f99ff943694f1582e9e47672270fa589f70","hash":"38eb275de599dc42bef5b717d7bd9850cb96aff0","modified":1610107926720},{"_id":"source/_posts/.git/objects/24/179750c368ced72e7283278a142d051dcec89f","hash":"5664a1cb1266ca8a3c1d6ccfa11a6ef14a50272a","modified":1610107921952},{"_id":"source/_posts/.git/objects/27/185be5fa0c8837ee9e1dea6cf1987b7aab691f","hash":"4d00fb8036555a4c3c7cb98c998434a9b2e5a4d2","modified":1610107922090},{"_id":"source/_posts/.git/objects/2b/be003064e80e1320c10ee039808dede45206d3","hash":"94235def7c11b380b48209c2bc64b27b528938f6","modified":1610107927809},{"_id":"source/_posts/.git/objects/4c/98b357d01b538660ba35eb091ed0a61a5053d4","hash":"b4fd5f8beff15d34d57df679444ce576166b34a4","modified":1610107931063},{"_id":"source/_posts/.git/objects/48/21de36eb17a0d57b097598d6008a228c447c3d","hash":"5ba9e32e29b7940f02df47b6464bac41ab0bb9fc","modified":1610107930205},{"_id":"source/_posts/.git/objects/6b/cee2731172bba9a8e4be1439563b3fea6951ab","hash":"cefd0cf22ebd789d619af76def9b4a1018902c3f","modified":1610107928479},{"_id":"source/_posts/.git/objects/6e/bddd428b14bd306a76e8c3d37a2a4a8c188b47","hash":"52bc37fa88c2f50238011ad819553c9e8ed8291c","modified":1610107925322},{"_id":"source/_posts/.git/objects/75/ebc1739961fa2c32778cd11a41651344b7e47b","hash":"8d362077a296d4bbd84d7a1cd7b0e8e4c25616bb","modified":1610107927833},{"_id":"source/_posts/.git/objects/7a/8c379b1f3deb24b417ea402009dcfc7c6fa449","hash":"5e0235a126439e78ef1669fe37ea64758657d1ea","modified":1610107928376},{"_id":"source/_posts/.git/objects/7d/33544d4478bcb9b420a889c98518c083cc9f58","hash":"3ed277be2ef87febcb47a47d4cd84c7a100dda27","modified":1610107930545},{"_id":"source/_posts/.git/objects/7e/d3f2ba1979a8b290729d9dfe07d95fc4b60297","hash":"676de8dda4b0abfc85f0ad64f26e423b3959fccd","modified":1610107930472},{"_id":"source/_posts/.git/objects/84/2b14d268e4a7bb48bbae454504998fd3340a92","hash":"109aa025aa9167d02214aefcf46d15917510f54d","modified":1610107928249},{"_id":"source/_posts/.git/objects/93/bb834af9533460f7461df86130f523e02451f9","hash":"4ca5828965256b69a8a05dce57671e2645db0d21","modified":1610107929472},{"_id":"source/_posts/.git/objects/a0/95ecfdb78ed765d3323459e9f98759f67b63f9","hash":"387797fd475fe7f908086dbd211552a1ea7f0a5b","modified":1610107927133},{"_id":"source/_posts/.git/objects/9d/ef9fb6354c624a3af87310632bd5a7c79fdb5d","hash":"44d205125953bfc3f2e1319ad5d23cb427630067","modified":1610107928904},{"_id":"source/_posts/.git/objects/a3/69064bc8eef86d7545185ff9b6a86517148c8a","hash":"68890f8ec368e9b1d5f7c616793910239a7a2f9c","modified":1610107923019},{"_id":"source/_posts/.git/objects/a6/2ab085b24f859b3a369a3f397c2fa61ffa758a","hash":"c8431bbc49a00f0f303406a797abe0a48adc6585","modified":1610107928943},{"_id":"source/_posts/.git/objects/ac/bac6f1bcd36c16dfc7ba1de134ecc9d72385a3","hash":"e7429e7b17a92dd3f1e8c5e849a6eb81dbaa511a","modified":1610107930680},{"_id":"source/_posts/.git/objects/c5/fa80bcd60a5a8ce5e0604e20a4efa047fc53e2","hash":"1bb19c1d170f7658f6ef9b119b90131a8d1f071a","modified":1610107922410},{"_id":"source/_posts/.git/objects/f0/9a4eb6cd64212d7424d511f4c97fde39f96064","hash":"b22771e0d9bc274af776c25272821ed4e889a2d7","modified":1610107926799},{"_id":"source/_posts/【C++】C++中的四种转换类型/Snipaste_2019-09-12_11-51-30.png","hash":"4a8fcaf0577f5a65d01701988de966f96c516f6a","modified":1574061919000},{"_id":"source/_posts/【C++】C++中的四种转换类型/Snipaste_2019-09-12_10-44-16.png","hash":"661f9ff0574baf2e3dcdbb515de1b6a43fe41a5d","modified":1574061919000},{"_id":"source/_posts/【C++】C++中的四种转换类型/Snipaste_2019-09-12_11-06-11.png","hash":"aa62e7231b877ae93b784cab2f17ec3213a458b3","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-14_14-17-46.png","hash":"8a8f9ce0ed85941affdbfce6b588aa3e55f7fd79","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-14_14-17-49.png","hash":"beaa3ceb15efbe13bf7a57e322245c6f71299210","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-24_11-12-38.png","hash":"e2ccdcfc20a97e8dd57e1102fe9fde71e9797e51","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-27_11-31-04.png","hash":"bd4e0537881416b948fbf9ceed44ccb07e4b85ec","modified":1574061919000},{"_id":"source/_posts/.git/objects/2b/3bf3f68f0d2ff27b0cb635b3ae2db447e4c4ed","hash":"55de5af4d969e002d24c1a2e70585fe841c641e5","modified":1610107928877},{"_id":"source/_posts/.git/objects/3b/44e60c40755f5863edbae11c1406e5797468e8","hash":"6fc9e6ff5cb63fad1062923fc973d9e6c536707b","modified":1610107922160},{"_id":"source/_posts/.git/objects/55/7ad661ca8373114f4dad262a8e368fc6d6b841","hash":"8d902d791ef3acd433cacc26dce3c37c8175e80f","modified":1610107922340},{"_id":"source/_posts/.git/objects/5b/4786fd21dabb4eae0324b488b75efd79c2d27e","hash":"0e5ba76435ecef87e48842e8f4b779e2fb5a6876","modified":1610107922246},{"_id":"source/_posts/.git/objects/97/6462e0e9947e86353dbcdc8fb8bdebd5b0b699","hash":"bc98a1a6075cbe08f3a506fe267e527f93188118","modified":1610107925240},{"_id":"source/_posts/【C++】C++函数模板的实现机制剖析/Snipaste_2019-10-03_20-07-41.png","hash":"d0cf6cb62c29ef17eb23940549bd935dc0f02fd3","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_10-23-36.png","hash":"9150ea14e4c635f103cd011dff31ad2700e24691","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_10-23-17.png","hash":"62a865df56919f2c709b44133254c670b97c6e35","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_11-03-35.png","hash":"bbc2ad95a69c21a5b99126a388ac85519def2245","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_11-10-41.png","hash":"a845cfea131a4ced491ed5542bf60ffa81b1a6b5","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_17-38-54.png","hash":"aed2953ba79a0b2e220f229ce12d430d0af7e5c9","modified":1574061919000},{"_id":"source/_posts/.git/objects/08/3b00282c6f80ac8c1b4b221fb7c8e232ed2544","hash":"b10ad2d0cf66b1396027956dd6fd28a4f3b8d856","modified":1610107930161},{"_id":"source/_posts/.git/objects/08/c0ad2758a90adfdaca831c09c8e19e67a6e2d5","hash":"ef6841f13e38bdb89abcfa6d0a16d024a290bda0","modified":1610107928289},{"_id":"source/_posts/.git/objects/15/62c7b73f2a38c52db64dd8d3c5fbb04da0173e","hash":"61b4a20b065935da87038356ed8bf7e919f31288","modified":1610107925480},{"_id":"source/_posts/.git/objects/1f/b24d43dc060af5c0af1b563a347e2e674840b8","hash":"4d6d9891d563972b496a86dd1ca05e99f33068cd","modified":1610107925439},{"_id":"source/_posts/.git/objects/72/471b25fc9adc67e78b750124ea910527c47c08","hash":"928d7ae0dcce06a689854e20e0872802396b4cbc","modified":1610107928344},{"_id":"source/_posts/.git/objects/b2/a8ba95ca6e004975828fd0fdc9d88e038d4017","hash":"4e45e49b244892488dea431508190679f8be2b87","modified":1610107922686},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-14_11-46-45.png","hash":"ac2230cfae134ce8e2e343f3c1fd94d824e82b6d","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-24_09-41-27.png","hash":"a320fe2b688f260b3107db98d0c86a425a6737b1","modified":1574061919000},{"_id":"source/_posts/.git/objects/f5/1d58733f5e5c75aef77001cb636b6d61913f6c","hash":"238afd6050ac2f224c8007469d1a05727c9fa2bc","modified":1610107925114},{"_id":"source/_posts/.git/objects/f5/a46af087f0d9b55a2681d97ffdbf43f28cb485","hash":"02a01e3187103f991e13686a10f965c329f1c2f1","modified":1610107928661},{"_id":"source/_posts/.git/objects/ba/f5e3dc5da3c40d0b3493e32d74ddb68b144d77","hash":"9bfe193f28e65b9b63bcaa53831df0ddfae061e8","modified":1610107924107},{"_id":"source/_posts/【Linux】Linux基础/9.png","hash":"f89c4f40fceffe3270865ae53802662b509ff792","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_10-59-58.png","hash":"8e5fb25c3a7a04a6f590ff39f23b864ed21baf54","modified":1574061919000},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_11-15-27.png","hash":"c7f49eaf79025d956ed59b3ebe2a68e5d8fb4115","modified":1574061919000},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/Snipaste_2019-09-08_09-15-55.png","hash":"9be0eac8c02b5ddc7f989ae4916807ab09c68099","modified":1574061919000},{"_id":"source/_posts/.git/objects/66/1218ad6a9c831aa365c09231df60fbcfbb8be4","hash":"56a2f77540c09c7032e7a24c7c22b438705671a1","modified":1610107937748},{"_id":"source/_posts/.git/objects/73/1670f8c0c7251f70f2812b5856088cc6a2fb93","hash":"930496b823c8b66ada67def491984ac7fe9f3691","modified":1610107925969},{"_id":"source/_posts/.git/objects/c1/c0f7e77a7476df20151990302d6c2ae3dcf6e5","hash":"354660c1ae51c01c602a6dcfdd329e9a6142bc88","modified":1610107926496},{"_id":"source/_posts/【UE4】UE4联级粒子系统/Snipaste_2019-11-15_15-05-48.png","hash":"9f1cb0bafafc1a76a027e7f661b1030b631dd3ef","modified":1574061919000},{"_id":"source/_posts/.git/objects/35/ca2b9017ab7f13b753e7560505a2b12eaf30f9","hash":"effb9f1e8ee34acf0f9a1a0326dd2e15b5bf36eb","modified":1610107928536},{"_id":"source/_posts/.git/objects/e3/a02bf8a72643a080a0f9ebd4da6c4b007d932a","hash":"385b1ca1ce59b1a6a468936a5e4e8057dcf473b6","modified":1610107925703},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_10-42-21.png","hash":"d0603a7887618e98b79545f1ccd6ed48680785db","modified":1574061919000},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/Snipaste_2019-09-08_09-23-19.png","hash":"71ac9b67b6dd5da0a2993341647ad05df28b1357","modified":1574061919000},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/Snipaste_2019-09-08_09-28-22.png","hash":"d0f9d0530f0295f806e047cc3ccbae6dc257e14d","modified":1574061919000},{"_id":"source/_posts/.git/objects/20/6aa19b752a8531f27f6677dab8128957b3bb9f","hash":"9c9f5144f86a3a04c972b9bff40d9e1f768709aa","modified":1610107937843},{"_id":"source/_posts/.git/objects/39/490d106f542891f9b1ef9dcadafb45aea79a3e","hash":"09ff032d27ec81ed86d756963976282d2063d260","modified":1610107937944},{"_id":"source/_posts/.git/objects/c0/c2363b56546ea34c7104ed01221e562a3e0445","hash":"810473cff867a0a194d94e99ec6b1a51bf8431e8","modified":1610107931664},{"_id":"source/_posts/【Unity3d】Space/Unity3d_Space.png","hash":"166e98471595a37ceb251a386330f2d9082747d7","modified":1574061919000},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190513.jpg","hash":"dfd693ceb839b96b0c904864c946a192ac1a28d6","modified":1574061919000},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/Snipaste_2019-09-08_09-34-22.png","hash":"4c1b8e5d02764c3fecfdb826a45ef894be9c89e8","modified":1574061919000},{"_id":"source/_posts/.git/objects/67/0d35d28e5a3d5d16f751b09f9a879fb5bd1d8c","hash":"87e0129a441a84e41a6fa9967d8449cc96df6fd5","modified":1610107938085},{"_id":"source/_posts/.git/objects/f8/b5dabb7bbbcc284681c6b5e67a76cc570f98a8","hash":"531d5c755dd17015ae7eb743dd714ab5e7fd4f24","modified":1610107933526},{"_id":"source/_posts/.git/objects/46/2d12ee6ed0f5993dd3c32de4eae050568c0e54","hash":"b5a84abd3d7abe4d3736feaadf8f0f3cbf5e5dc3","modified":1610107938266},{"_id":"source/_posts/【程序编程】程序编程高级/程序编程高级.png","hash":"580dd5da5be3387deee2b11a0abfdfb35613811c","modified":1574061919000},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190452.jpg","hash":"7d97cda11fc0f67e86a9bee5c2071dfa542cfeaa","modified":1574061919000},{"_id":"source/_posts/.git/objects/8c/6ec70b95efd7f9fa68f86e9b63ac59982926be","hash":"1b1916e2a7cdb37f1adeb2cd481cef352a71d099","modified":1610107932851},{"_id":"source/_posts/.git/objects/92/c7f633c3337e76f0105a61cb54cc69b13a061d","hash":"017e9e6fc909b00a7fc68a5398932b641c2b4df9","modified":1610107933001},{"_id":"source/_posts/.git/objects/9a/ccc720eab222ed836a4f37078ed0817f6364df","hash":"52c9fa5216d4dc5dc05f77b944af6f6492a3d6ee","modified":1610107936577},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190456.jpg","hash":"a43cbb34f7897911d11cbd288b4ec3a4730e343f","modified":1574061919000},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190626.jpg","hash":"66bfee7195531ec251fcb619807b67557e74bca7","modified":1574061919000},{"_id":"source/_posts/.git/objects/00/b66a828054ae345a12a73f2f549ac82ff3dc90","hash":"285574ab4138e355cb3aaaf48790ca61f117b9cf","modified":1610107931415},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190634.jpg","hash":"2b59287bc72f813364ac207c03578432b16e6899","modified":1574061919000},{"_id":"source/_posts/.git/objects/09/0affff35740f165cfcc5bf32633435f7f4a1d5","hash":"bed88fd6afeb32b739e2db5966602d8989f814d9","modified":1610107937090},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190518.jpg","hash":"5bfd0f313a82c1c25f119e3b46a5f8a7210ed4fe","modified":1574061919000},{"_id":"source/_posts/.git/objects/e4/81eb76ae98bf7b4b6f6f4c35adf99da0b213c7","hash":"b0232eabedd9ff1ee3ecc7316d1f6764ba878ff3","modified":1610107935491},{"_id":"source/_posts/.git/objects/e6/c7dbb58d359577a1505208f91769bf53aa3b51","hash":"fc5d200a6d8f8d581bb14ab153a000aa26eb7298","modified":1610107933657},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190604.jpg","hash":"fa70f354999954542e8de724142fb0e5f61bd8f7","modified":1574061919000},{"_id":"source/_posts/.git/objects/64/a1e0d15e0151cade12c51b233efb9701006ce0","hash":"96c100a8ff2224c5b6714b1ef91923815363dee7","modified":1610107933194},{"_id":"source/_posts/.git/objects/f1/1f1fe41aeb95d472605b18e74fe6693ffb9193","hash":"e350e40c99494c786fda93a099413d6db1dac574","modified":1610107938823},{"_id":"source/_posts/【Unity3d】Lightmap/Unity_Lightmap.png","hash":"d9f59201a5bfefae4e7a19037ec5fa83fd252fcc","modified":1574061919000},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190414.jpg","hash":"1097a0d58ff63494fc9df8063df1ba3dc68fe718","modified":1574061919000},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190500.jpg","hash":"234900faa13b3ac924602b35ec6567d43de58703","modified":1574061919000},{"_id":"source/_posts/.git/objects/95/82ddbf02e63829904d456b9a48f933325d839b","hash":"230c16500d4bd7784abf2473bf5496d9bb463389","modified":1610107933883},{"_id":"source/_posts/.git/objects/ea/9cbf7309804118ac31150e47c9d23d624971d1","hash":"78a4be17ba4612e56dbf4369c16c98efef159ea4","modified":1610107932200},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190444.jpg","hash":"68f5f3ebc70e48beff4b72328a176ef5e33c55a3","modified":1574061919000},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190532.jpg","hash":"d6f2182efaaf7e19113aee4716f90113474e60e8","modified":1574061919000},{"_id":"source/_posts/.git/objects/41/7fed64ff00fa24994b187c326af390bf46ed70","hash":"a871c3131a0b698724b2a1c6b8bf47c779e4bd34","modified":1610107932425},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190600.jpg","hash":"e2140f8b5708d2d88b5f54b4ac26eee7a55d21ac","modified":1574061919000},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190616.jpg","hash":"392aaeb7d3e95e57bddb29d75cb9db5d52a90037","modified":1574061919000},{"_id":"source/_posts/.git/objects/2c/f3ebafcbdb5dd6cf2b3f52e4f54c1c7adaace9","hash":"b279086a25154d6d7eb18807851e103e9cad62ae","modified":1610107936167},{"_id":"source/_posts/.git/objects/a8/e0447e7bd2470a96d6495d08b75f6963e6e7db","hash":"2349c51fbf74b9883929860fd9a318922df02305","modified":1610107935256},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190504.jpg","hash":"427c42dc3ce9a96a89d0d6a31f77be9b5477e401","modified":1574061919000},{"_id":"source/_posts/.git/objects/18/8de2a7d69cb9e0788401716ba8036cbde3cf8f","hash":"ccb169517f530863b21bb3b200787a73390b8087","modified":1610107938573},{"_id":"source/_posts/.git/objects/52/cb204e134bed57777da7a7f04ecd1fdc86297b","hash":"75193e3260810bf14d8677ad2e30ac9ab447039d","modified":1610107933388},{"_id":"source/_posts/.git/objects/ba/3c9a075f9b0d4d70a47e4abc504991c75b4992","hash":"14a57fe4c5c2e8863313bd25ec08b543cafcd755","modified":1610107937614},{"_id":"source/_posts/.git/objects/f4/9675a64b2927b3387c2f2d383a6c5dcae2812e","hash":"c5afe64cf25bec5f9965b7aa86b756f9fded2d43","modified":1610107937365},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190448.jpg","hash":"97c7bbd7c7fb08f7cb0ac999252619164c3e245b","modified":1574061919000},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190638.jpg","hash":"3e2d6ecaa5276c95d560b4d04cf5bbf101b39d6d","modified":1574061919000},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190641.jpg","hash":"782bbc9b28e087862b54290d339f0d86730fcb6f","modified":1574061919000},{"_id":"source/_posts/【网络通信】物联网通信基础/物联网通信技术基础.png","hash":"4cc498e86f16de8102e148fc52eaf2b362c01399","modified":1574061919000},{"_id":"source/_posts/.git/objects/d9/c1ee9b6f3bb7812dd8a92da6d447450c03c501","hash":"071930506f194fbe7be7706dc9617893ed84af32","modified":1610107932661},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190612.jpg","hash":"08ddb1df3dc127669c7866ecd39beac2ff007594","modified":1574061919000},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190622.jpg","hash":"61358bc5e08f52864424778437035cfe0d556f32","modified":1574061919000},{"_id":"source/_posts/.git/objects/e1/8ae5a90c1ecd451d0a84b9419dfe4976a1e4c5","hash":"c7cfa184b07664c5508fe7ced4fa4d95e6c950ee","modified":1610107935938},{"_id":"source/_posts/.git/objects/f1/645004f57b00ef0016d60ee7c1b1c116e5e464","hash":"51b3ebca07016265c34423243567385a7c1fb618","modified":1610107936355},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190556.jpg","hash":"28db93f05e9acbc0afc723a64de2329d76ee3909","modified":1574061919000},{"_id":"source/_posts/.git/objects/eb/971dd8cf053769612827061766fa5b97a4d88c","hash":"52ecb23fee7b4aefdeb21a357ac949d946028566","modified":1610107935036},{"_id":"source/_posts/.git/objects/bb/ece58f68e36cb192b0fd728f81d2d23348629c","hash":"c0ef25164d535e678381e25df7fa4915f9fba912","modified":1610107934778},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190552.jpg","hash":"2ab850404ffb530e81c219450521f53b2b768703","modified":1574061919000},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190542.jpg","hash":"d2ff3d6038baa9a54a0e371acd4c5801a7869d50","modified":1574061919000},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190547.jpg","hash":"7ea440b83e24df2ad4a3d33636a1498d3f84e414","modified":1574061919000},{"_id":"source/_posts/.git/objects/25/f75f6d82f3ea4132ef401eb4a5529add399c7e","hash":"7bdbd829316d2d16b60f6d6e2f9207eb5e8b0749","modified":1610107934532},{"_id":"source/_posts/.git/objects/71/77b02bd9b15986981cdea1a644e468a2d3c232","hash":"ad8ebe293836dad6b43e742d8f7f5820f6e2b271","modified":1610107934293},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190538.jpg","hash":"e6a48efcb69a1bc33c0b5d6952fd7a564d4b87b3","modified":1574061919000},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190607.jpg","hash":"6ed81df498eced4f8284e720f03c451da9a30ce3","modified":1574061919000},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190630.jpg","hash":"24b42d9c8e254f45decb91f34d1d28889617256a","modified":1574061919000},{"_id":"source/_posts/.git/objects/0b/e8ee4b1c8831ff5aa56fe46b8913f03cf47281","hash":"852433adc0ff2509f7fd531f710af24b759fad86","modified":1610107935706},{"_id":"source/_posts/.git/objects/49/4dd49f8c2838d28c8c08d052595ad22bb68eb3","hash":"b971a48cbe208d0e24827d51f4cb625b36f3c567","modified":1610107934087},{"_id":"source/_posts/.git/objects/99/44c7334fb42a72900c9e9fe116f6bf6f8bd1b1","hash":"c1edc8fd84e76d9c62e06d25a894e05575e829dc","modified":1610107936827},{"_id":"source/_posts/.git/objects/94/9e0afaa156a94b64b13511dcb8cfa87a5bec07","hash":"bde3adac459e8a8eb020ce5ee7ced2af2ce94b40","modified":1610107924513},{"_id":"source/_posts/【网络游戏】网络游戏基础/网络游戏基础.jpg","hash":"0118b0b496d409e3758320f375569426f298bb82","modified":1574061919000},{"_id":"source/_posts/.git/objects/ba/4218a654e596e84b6ec89c3714bae96770cd01","hash":"c12806bce152e83be218b21c5eb5fc1973000f73","modified":1610107924788},{"_id":"source/_posts/【Lua】Lua基础/Lua基础1.png","hash":"c1b38cf0fe6961681a41fb0521d187bbb2d2df6c","modified":1574061919000},{"_id":"source/_posts/【Lua】Lua基础/Lua基础2.png","hash":"c21f71c7832f37ea9c7fead5b84975dd441bb416","modified":1574061919000},{"_id":"public/atom.xml","hash":"e3f2f88ee093a1d26ab862f3bae092ec242cb8a4","modified":1612337248269},{"_id":"public/sitemap.xml","hash":"f001a133c6b81429a238ec072859353b16362b60","modified":1612321696751},{"_id":"public/local-search.xml","hash":"f62f6520ed7ed9bfa99865e990d6b01f790ce30e","modified":1612337248269},{"_id":"public/2019/10/14/【UE4】UE4基础/index.html","hash":"dc7a3ace67434a5b9e6b47f2a00f5ecdaed360bd","modified":1612190373658},{"_id":"public/2019/09/30/【shell】shell基础/index.html","hash":"70f67820385e807a15af3bd2056ffaa297768ad6","modified":1612190373658},{"_id":"public/2019/09/11/【C++】全局变量、静态全局变量、局部变量与静态局部变量/index.html","hash":"93abf17a01b82f24584efaa59d93b269f125abb5","modified":1612190373658},{"_id":"public/2019/09/09/【Lua】Lua基础/index.html","hash":"761147bc94ff3bcf2801d45d0222ccb4b5845194","modified":1612190373658},{"_id":"public/2019/09/11/【C#】C#两种数组定义的区别/index.html","hash":"d962c7ab2b77d43676a4e941ef3fe8a4196dc369","modified":1612190373658},{"_id":"public/2019/08/27/【Unity3d】Unity常用技巧笔记/index.html","hash":"d630152c4b7a327c6a7e1cec2da2e0429c0e9ab9","modified":1612190373658},{"_id":"public/2019/08/25/【Unity3d】Space/index.html","hash":"c6db45cab2d77c12f8cebc22b7ffe05ea7acbf2d","modified":1612190373658},{"_id":"public/2019/08/25/【Unity3d】Lightmap/index.html","hash":"e24f7271c4ac6da9ab73f32d258854f12564d35a","modified":1612190373658},{"_id":"public/2019/08/25/【网络游戏】网络游戏基础/index.html","hash":"3b58c45157ec2eb6687a176c3d340d18c79dee76","modified":1612190373658},{"_id":"public/2019/08/25/【程序编程】程序编程高级/index.html","hash":"2f4ffaed6c8a972f70df15af05f09170fd414e14","modified":1612190373658},{"_id":"public/2019/08/25/【网络通信】物联网通信基础/index.html","hash":"42080344c6301743a7ff2d3fff79a966b10ff648","modified":1612190373658},{"_id":"public/2019/08/25/【Qt】Qt基础/index.html","hash":"3f9703a4c3b233acd89ac1c9b28aaef15820c15b","modified":1612190373658},{"_id":"public/2019/08/25/【C#】C#高级/index.html","hash":"58216beb6e07108fa49fe7b972f55cb5800270a4","modified":1612190373658},{"_id":"public/2019/08/25/【C#】C#中级/index.html","hash":"b4947bb348e5defb19e272d3bf0f4aecc28a75ac","modified":1612190373658},{"_id":"public/2019/08/23/【Unity3d】游戏截屏/index.html","hash":"e82d01303d514cb3922b30f7d1a31601159f347b","modified":1612190373658},{"_id":"public/archives/index.html","hash":"a7d93311dd03fbb5d144b999bb6b34859cf031ff","modified":1612320927476},{"_id":"public/archives/page/2/index.html","hash":"3b1dbffc8c029781a4754ce339a564416c10db11","modified":1612320927476},{"_id":"public/archives/page/3/index.html","hash":"2d3dc7b3474c79c3c69b76797daf30ecca7fc700","modified":1612320927476},{"_id":"public/archives/page/4/index.html","hash":"718ee214081e741fa02699736c14dbe4bc84ef00","modified":1612320927476},{"_id":"public/archives/2019/index.html","hash":"d20a301a7bfefdf8be7b1ac893be7887bb06e463","modified":1612320927476},{"_id":"public/archives/2019/page/2/index.html","hash":"a94f23c5b06b7e9da8115f92a0e11da33c68dff3","modified":1612320927476},{"_id":"public/archives/2019/page/3/index.html","hash":"dde44c1a94d0cd312c9d00b6ba9712febcd6e618","modified":1612320927476},{"_id":"public/archives/2019/page/4/index.html","hash":"8d97fc093f0d2d0206e9b612a8d086645919f9ab","modified":1612320927476},{"_id":"public/archives/2019/08/index.html","hash":"ec3e1e57d475866f2002cb4b3f52a5e444e5f0b7","modified":1612320927476},{"_id":"public/archives/2019/08/page/2/index.html","hash":"71e696c05c19a038d8a812674d6bff1660193371","modified":1612320927476},{"_id":"public/archives/2019/09/index.html","hash":"9cd5a5a2f4b5cb84603155fd80c39879a717dcac","modified":1612320927476},{"_id":"public/archives/2019/10/index.html","hash":"5a023f56880de7f7ad5fb4b3f2d894518d9e9435","modified":1612320927476},{"_id":"public/archives/2019/10/page/2/index.html","hash":"5d602ec1ad8621835daf47abad30167feec47d40","modified":1612320927476},{"_id":"public/archives/2019/11/index.html","hash":"e3e1d21a51a2351b1a2735f13921ae3a06cc55c7","modified":1612320927476},{"_id":"public/categories/学习笔记/index.html","hash":"b8e9597222ae7dc67e9464364c37ba70ce9a5a32","modified":1612320977714},{"_id":"public/categories/学习笔记/page/2/index.html","hash":"4ec9869226d2007f943bc216597c036b7281b3b7","modified":1612320977714},{"_id":"public/categories/学习笔记/page/3/index.html","hash":"4071708b5f701df29a70cbc476c33dbf67796d56","modified":1612320977714},{"_id":"public/categories/知识记录/index.html","hash":"88430802e7281804590983612248695cd60c4247","modified":1612320927476},{"_id":"public/categories/知识记录/page/2/index.html","hash":"dd0d74c3ae88f06b2f8a2d9ea021b5295b75fc61","modified":1612320927476},{"_id":"public/categories/待解决/index.html","hash":"f61efaa4ab49fb9e13509d061a55d243e9f70a2d","modified":1612190373658},{"_id":"public/categories/日记/index.html","hash":"707799e34dd33ab6b054528db9cae2ffd0d9f49b","modified":1612273903678},{"_id":"public/tags/C/index.html","hash":"e49200095b38d1ad85f26bd974785d87fa0c1429","modified":1612190373658},{"_id":"public/tags/Linux/index.html","hash":"c38e35a47d6c5a74dfefe56263a3a9c88e2df780","modified":1612190373658},{"_id":"public/tags/MySQL/index.html","hash":"2ddbf0b615d984cc17268907055cbfb71f3bedba","modified":1612190373658},{"_id":"public/tags/Lua/index.html","hash":"27ce711f9c6805fe6d567154ef6e867108ba2998","modified":1612190373658},{"_id":"public/tags/Qt/index.html","hash":"6089e2e0c0a2b4c25968d3ff7f9c72cb029093da","modified":1612190373658},{"_id":"public/tags/UE4/index.html","hash":"4f66e0d3ffe67af3ce7281bf6eef7e3710c43af8","modified":1612190373658},{"_id":"public/tags/Unity3d/index.html","hash":"13ccd54a6993e943534a39b2dae1a362a11961f7","modified":1612190373658},{"_id":"public/tags/shell/index.html","hash":"cb1832f81629dc7c6e789ad35a7cba5b3a4ae1c0","modified":1612190373658},{"_id":"public/tags/程序问题/index.html","hash":"99574b2fae22dcbda390d7648999447bbe635b53","modified":1612190373658},{"_id":"public/tags/大事件/index.html","hash":"ad3183fb01501f8184b025dc218b654c6f3d82d3","modified":1612273903678},{"_id":"public/tags/程序编程原理/index.html","hash":"42deb147970a56aa5ee0b9dd93d5c26e947f8543","modified":1612190373658},{"_id":"public/tags/算法/index.html","hash":"ca5dc3194f80876eb5c0b05c26c7aed6e1e873a4","modified":1612190373658},{"_id":"public/tags/游戏网络/index.html","hash":"92b71b5cc1bec8d9796eaea92141500cffd353c7","modified":1612190373658},{"_id":"public/404.html","hash":"6a539afcfdafa3d498ef98a2f340985a1706c316","modified":1612190373658},{"_id":"public/tags/网络通信/index.html","hash":"6c99e9f9c7fe92fbb6e4e6ef6b2c178bd2b9b36c","modified":1612190373658},{"_id":"public/tags/图形学/index.html","hash":"12170d41aef7bb1d2fa76d4abc5f5560008cde30","modified":1612190373658},{"_id":"public/tags/index.html","hash":"b48614dafe0771f333561474c755b9e1451bcaf3","modified":1612320927476},{"_id":"public/links/index.html","hash":"339dc05c0c53aac296b417686787fc521b8267aa","modified":1612190373658},{"_id":"public/2019/11/06/【UE4】UE4组件/index.html","hash":"8fd72170e12400d168a19c61fa9c0a8f7dd0a275","modified":1612190373658},{"_id":"public/2019/11/17/【UE4】UE4联级粒子系统/index.html","hash":"1757b4593ea23758b1afc669b27b93060fbb31d5","modified":1612273903678},{"_id":"public/2019/11/06/【UE4】UE4连接MySQL/index.html","hash":"d67c86c18b5d1721c43c6d49ade6450a2c25441c","modified":1612190373658},{"_id":"public/2019/11/06/【UE4】UE4读写Json文件/index.html","hash":"b8cd1e28c914f38633c31629576e3574cfb95d07","modified":1612190373658},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/index.html","hash":"66278a4326c10d413a5266ec4ae2bf9536081913","modified":1612190373658},{"_id":"public/2019/10/21/【MyQSL】MyQSL存储过程/index.html","hash":"85cd91060430ae39984905de46cd8c3e76584e3e","modified":1612190373658},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/index.html","hash":"5d2af490e2cfc9f0a0dc93f99f3d49b764d03d4d","modified":1612193328418},{"_id":"public/2019/10/10/【待解决】一些待解决的难题/index.html","hash":"86e60f3445bcb7ec4b361939f8c60206f066c38f","modified":1612190373658},{"_id":"public/2019/10/08/【C++】C++中的四种个智能指针/index.html","hash":"8cc69f3a4faa83dd14c109df13ec35069baf5712","modified":1612190373658},{"_id":"public/2019/10/08/【算法】一些牛逼轰轰的算法记录/index.html","hash":"cc43080ba9d499ce56ad30073f235e391605ce4f","modified":1612190373658},{"_id":"public/2019/10/06/【C++】C++STL标准模板库/index.html","hash":"e8939b3de9cb1d955ba4f2f6c8c30c9b99cf620a","modified":1612190373658},{"_id":"public/2019/10/03/【C++】C++函数模板的实现机制剖析/index.html","hash":"c4d3fd921d21a05a42032f0cfc865b763ca50de1","modified":1612190373658},{"_id":"public/2019/10/03/【C】C的typedef的妙用/index.html","hash":"e28d60b536543fbf74797878baf90a5b8bce0989","modified":1612190373658},{"_id":"public/2019/10/01/【C++】C++面向对象模型初探/index.html","hash":"fb7d626d1dc21062feb38db37d52ff4d43469509","modified":1612190373658},{"_id":"public/2019/09/14/【C++】C++高级/index.html","hash":"8379ddc1e8ff51462275ecf301edae4281560374","modified":1612190373658},{"_id":"public/2019/09/12/【C++】C++中的四种转换类型/index.html","hash":"5ea5f184ec48c894060f85fa98c2089ff6e4e44d","modified":1612190373658},{"_id":"public/2019/08/25/【Linux】Linux基础/index.html","hash":"9e5e554792083f94a9a61ca1d63cbf0d3824c5ab","modified":1612190373658},{"_id":"public/2019/08/23/【C++】C++进阶/index.html","hash":"013d2fcc6803e4c321c7fae33656b18aaab68f71","modified":1612190373658},{"_id":"public/2019/08/23/【Unity3d】存档与读档/index.html","hash":"53bfde0941de42c5678696fbd68c000044a511d7","modified":1612190373658},{"_id":"public/2019/08/23/【Unity3d】Animation/index.html","hash":"0df8de2a8bec06261d1f3daedb1b5b54d50b2531","modified":1612190373658},{"_id":"public/2019/08/23/【计算机图形学】多变形填充算法原理/index.html","hash":"a2aeb2c619e28a35e9c69a4fa168f11f180b4f3b","modified":1612190373658},{"_id":"public/index.html","hash":"eecdcae64ab840c8a49dd6f17f0cbc2f2927d485","modified":1612320977714},{"_id":"public/page/2/index.html","hash":"a1ff00721fd9d8c19a1b8a8dc65fb26011bc4f08","modified":1612320927476},{"_id":"public/page/3/index.html","hash":"d6ab712bd7e600d17887192545c5d07c18c5fda9","modified":1612320927476},{"_id":"public/page/4/index.html","hash":"bcf94301a09aca23a0f9bb8b41d0b305f6f8f67a","modified":1612320927476},{"_id":"public/categories/index.html","hash":"da2b729e68ff8c8d972ed9048422914544c8bdb0","modified":1612320977714},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1611392811271},{"_id":"public/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1611392811271},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1611392811271},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1611392811271},{"_id":"public/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1611392811271},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1611392811271},{"_id":"public/2019/10/03/【C++】C++函数模板的实现机制剖析/Snipaste_2019-10-03_16-51-51.png","hash":"2a90c735ad40783b372412f70f7118ffeaf85ebe","modified":1611392811271},{"_id":"public/2019/10/03/【C++】C++函数模板的实现机制剖析/Snipaste_2019-10-03_19-57-21.png","hash":"85d519d58f5f4729d5ab1352172f91204ad9a717","modified":1611392811271},{"_id":"public/2019/10/03/【C++】C++函数模板的实现机制剖析/Snipaste_2019-10-03_20-12-24.png","hash":"cad8a86adae84406c2e8817fd6ad2c2fd5978a24","modified":1611392811271},{"_id":"public/2019/10/03/【C++】C++函数模板的实现机制剖析/Snipaste_2019-10-03_20-08-21.png","hash":"5c01aefb45d2ffba96637150a101159fb8f2e382","modified":1611392811271},{"_id":"public/2019/09/11/【C++】全局变量、静态全局变量、局部变量与静态局部变量/Snipaste_2019-09-11_21-35-55.png","hash":"505601dffe4500c8a647a7063482ce62106e25e4","modified":1611392811271},{"_id":"public/2019/09/11/【C++】全局变量、静态全局变量、局部变量与静态局部变量/Snipaste_2019-09-11_21-36-28.png","hash":"07871d39f3a7ee00adf0eb647cad376c59f2f842","modified":1611392811271},{"_id":"public/2019/09/11/【C++】全局变量、静态全局变量、局部变量与静态局部变量/Snipaste_2019-09-11_21-36-38.png","hash":"f5a18dbfff19d9882af97385cfc2e516b66c6e8f","modified":1611392811271},{"_id":"public/2019/10/01/【C++】C++面向对象模型初探/Snipaste_2019-10-02_09-07-09.png","hash":"9788155af506713955a83e6b75841ab266a600c1","modified":1611392811271},{"_id":"public/2019/08/25/【Linux】Linux基础/1.png","hash":"e74c708ed4982ebfcf7d877f208c8c387f5e2807","modified":1611392811271},{"_id":"public/2019/08/25/【Linux】Linux基础/3.png","hash":"65c53fe085fb8347bb9c533cf4ce1691e9730943","modified":1611392811271},{"_id":"public/2019/08/25/【Linux】Linux基础/4.png","hash":"db75575cba757e8f832672d4f6c1890d478df81c","modified":1611392811271},{"_id":"public/2019/08/25/【Linux】Linux基础/5.png","hash":"7036239e4d1887d9c459a14a763d442e9b327797","modified":1611392811271},{"_id":"public/2019/08/25/【Linux】Linux基础/7.png","hash":"5a78f505de229568325c94e53d986a6629093b38","modified":1611392811271},{"_id":"public/2019/08/25/【Linux】Linux基础/8.png","hash":"9d26c95560af50e4a37d34fcf775d686a7bbe7fa","modified":1611392811271},{"_id":"public/2019/08/25/【Linux】Linux基础/6.png","hash":"18a0e386b38c07dc6a669d336b8b6550346fab90","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4组件/Snipaste_2019-10-25_10-57-11.png","hash":"0371cb3e8f1e81e9393db23deb69500533bfa1d7","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4组件/Snipaste_2019-10-25_11-02-10.png","hash":"f4310100332d4b3fe782214afb78bde5d975c346","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4组件/Snipaste_2019-10-25_10-53-07.png","hash":"ddcb3857c76fd5c1fce4df83312e1b18d42dcec2","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4组件/Snipaste_2019-10-25_11-10-28.png","hash":"36d8cc3a758a61b8b51b827df9b2aa036390d2fe","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4组件/Snipaste_2019-10-25_10-33-38.png","hash":"64554330a54c6b95ee127c991e4888a69e429103","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4组件/Snipaste_2019-10-25_11-17-59.png","hash":"d2c402446c1775bcb6bb0a8abc811a9f7610ab7e","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4组件/Snipaste_2019-10-25_11-21-18.png","hash":"eddb2a62c1ae3a93280d41caa572d80aef68a317","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4组件/Snipaste_2019-10-25_11-30-52.png","hash":"fc92e45a352a1c4b9e1abd2bd403b895e3f18e80","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4组件/Snipaste_2019-10-25_11-26-07.png","hash":"200c62da25dc88ebdfa39e6caffea12785d9279e","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4组件/Snipaste_2019-10-25_11-42-14.png","hash":"3aa5d7c963c118ce37b5993684a9a9577005addd","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4组件/Snipaste_2019-10-25_11-46-47.png","hash":"73c6ec827855ffae563f210494d6f4b4484ce837","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4组件/Snipaste_2019-10-25_11-39-53.png","hash":"0b863649f6e654b394955e3647fced1fcc956c72","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4组件/Snipaste_2019-10-25_11-50-37.png","hash":"a3b20410850873ae846e3e8f3853a7418a188710","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4组件/Snipaste_2019-10-25_13-12-40.png","hash":"99ff8392aadd3ef46878e5257154e6eb0f381799","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4组件/Snipaste_2019-10-25_13-19-47.png","hash":"3a793d0b095e18ff4df0b10cb7320e8e5195c5a6","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4组件/Snipaste_2019-10-28_17-26-35.png","hash":"50425fc1f654e3ed970fafe5165c351a9aaaadf7","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4组件/Snipaste_2019-10-28_17-04-19.png","hash":"fcd324ec161790fe960119fdcdb9a47e925b7be7","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4组件/Snipaste_2019-10-25_13-32-38.png","hash":"bc2a709db523fc659a2fb6986296eadb53ec7570","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4组件/Snipaste_2019-10-29_09-09-05.png","hash":"c191952901614af5ca09f775338d2e35c7852714","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4组件/Snipaste_2019-10-28_17-28-37.png","hash":"c7643952253687e3672706dbe1b0acca7a06a38d","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4连接MySQL/Snipaste_2019-11-05_17-54-58.png","hash":"27c07cacaa21c95831d38c452bfe6f59cf3eb9f4","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-02-53.png","hash":"5c57866c6623ed0b2c7b5444fd53e5f038dfa6a9","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-17-44.png","hash":"c6269a3a27c752c7ef1863d37535f8b0b76a236b","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-14-47.png","hash":"18a412d7081079da2a4d60bbfd85e069312a4edf","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-26-48.png","hash":"965a01ba8c647bc27a2a00bbd70d474ad8ac6a9f","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-27-48.png","hash":"32afad21d07ba21035398bbd592ceee5307bfe22","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-34-52.png","hash":"b5ceda67e3b162e555fd59450cf8a5348cfc8923","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4连接MySQL/Snipaste_2019-11-05_19-14-07.png","hash":"ec07cbdc14eb07a8c65387c1674cb920c2e14fa9","modified":1611392811271},{"_id":"public/2019/11/17/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_09-41-14.png","hash":"2ade6fef39dbba64358a5d2f79ac88f682b4efec","modified":1611392811271},{"_id":"public/2019/11/17/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_10-14-27.png","hash":"d2d45fcf41738dc41f1c11eea9ba5f85e2f9c5e9","modified":1611392811271},{"_id":"public/2019/11/17/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_10-51-44.png","hash":"6641d07308c0d50c2447e8c065d5cdfc3fa45da1","modified":1611392811271},{"_id":"public/2019/11/17/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_10-25-52.png","hash":"9ee3c1e6d54c5b0170248c8e7cd5b0c519be5cd6","modified":1611392811271},{"_id":"public/2019/11/17/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_19-47-55.png","hash":"0548e3fb6a783367d0a2af3e8305aa0b36b809c7","modified":1611392811271},{"_id":"public/2019/11/17/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_11-50-46.png","hash":"2e70c74851578edb3a5d94b4c2a0fe7f2ee4d2bb","modified":1611392811271},{"_id":"public/2019/11/17/【UE4】UE4联级粒子系统/Snipaste_2019-11-15_15-41-29.png","hash":"710f6dad4ba7890a60051a3bc6f89d846bf5cf5d","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-14_14-17-41.png","hash":"f83bcfa6debb9a1913515beab33f3d5715d5a5b4","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_10-16-42.png","hash":"8ede8469885ebf7cbc923d32805055cddf1d9252","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_10-36-15.png","hash":"0044a9c1749c0453d64e75155990bc30a2b57f1c","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_10-31-54.png","hash":"3f9f6113883e9699b692866442cb0ce4cafadee2","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_10-39-37.png","hash":"5f4cd72fe0f354f694290b73ab1bdc0242a25b79","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_10-45-14.png","hash":"56a1fa9cfc719c352cfe7899f921eb3c6bd0dc88","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_10-47-10.png","hash":"71085564086326ac75335000c36b9f4dcc85dcd1","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_10-50-54.png","hash":"d5f88cbc7960644e0a452418da6cd899146e40c0","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_10-50-02.png","hash":"847b7161ad116c2ea0b9d2aa19a46056fcbfdc71","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_11-04-47.png","hash":"ff5bf999fe1885ce5b2903b743191478f7d40f22","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_11-04-58.png","hash":"d14dae474a49c9debf89ae13defc9639d610fdc7","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_11-05-09.png","hash":"701a17ab4e85d5bef0637c467236642e22eadf5f","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_11-11-01.png","hash":"1005bef143ae4569261a45ccae43ee03330fb108","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_11-06-57.png","hash":"f975caeeaa07a96417efbbd8cb90f037164ab621","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_11-11-45.png","hash":"92d60d6fdf802ff58a02e62c0087562567513977","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_11-11-16.png","hash":"610880f8df9508b1a995c17057ed1d9c1c2e66ae","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_11-12-10.png","hash":"57f22abebb3de28f6921173fc1cb97ef7cde8771","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_11-11-34.png","hash":"2e0b939a04bafefcc400cb356101a9452fedc3d6","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_11-12-21.png","hash":"0140c32908f8bb585f9d2227f2d2d5aec3970230","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_11-11-59.png","hash":"565c665097bd82963d37d3ee55ea61f19bdd5045","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_11-12-31.png","hash":"5539e9b0014726ebd77482b9444ad7662b17b250","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_17-56-02.png","hash":"46fa4147b43c5849aef46813de50478e25bb446a","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_17-55-17.png","hash":"ca70a2d3894ad2068736e6a64731f8ce20d0eb45","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_18-02-03.png","hash":"86cd277b252a4cc1da93e97f5494bc87196ca565","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-16_10-05-42.png","hash":"5f878e497d56e4943e2725dfa8c1feb9d3fe8bff","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-16_17-13-58.png","hash":"49ffc8e93a439ed8da9b46daa461578935e09118","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-16_17-10-46.png","hash":"c14c3b3fb2db09bc121a82fea4f5c65b0bba8281","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-16_17-06-01.png","hash":"c173ad764a607ea5124f5c58431226ba15b3f6be","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-16_17-15-33.png","hash":"d68fc315e76de6efd20023d2349efc21acd1414d","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-16_21-27-20.png","hash":"83888c019cd4467ab6d76b6dab9473c8bad020d0","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-16_10-40-52.png","hash":"ea43cd38cbf6d5fe5f1466c6a2559895a9cf15b1","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-17_13-30-29.png","hash":"6ec3a520660892a2bc8e89d4912b0e4c77149668","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-17_13-30-49.png","hash":"018066c51f1b15f6b5b3e5b481c12b9a44fe70ae","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-17_13-46-52.png","hash":"971eb5730cde5a669cdc07b59ffae9f0a89ffbd6","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-23_17-24-52.png","hash":"bb492205214896e665910cad73c5201b976b986a","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-23_17-41-13.png","hash":"320625ad1a89a4da4b9a14518c92395ba42075ec","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-23_17-38-23.png","hash":"05d6fe4fc011f089704900b288f1bd6200556eb8","modified":1611392811271},{"_id":"public/2019/08/27/【Unity3d】Unity常用技巧笔记/Snipaste_2019-08-27_11-35-00.png","hash":"8b2c152edbeba31889b8f5d99cb30221e9ff0cca","modified":1611392811271},{"_id":"public/2019/10/06/【C++】C++STL标准模板库/Snipaste_2019-10-06_10-41-56.png","hash":"810d61e3712627b3635a1d1ce1f6491557dc201b","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-24_09-51-55.png","hash":"3c55d238b69ccbc521c5ad08b9644bda580f145d","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-24_10-53-06.png","hash":"56f4fee835704b79b6f3935ea110c9ba3ef1d89c","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-24_10-45-29.png","hash":"b704a10ea2838729dfb50e5db77d366821a456bc","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-24_10-53-34.png","hash":"101791a642dca4718f7812d7a9e9f115947a74a9","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-24_11-09-34.png","hash":"d77d66be1d8ba7b252bf66f0b90facaa57925e99","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-25_17-23-07.png","hash":"41905075876259d9b105a4c4d413b34401ed803e","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-25_17-18-23.png","hash":"87987ac555489debfea1fec095a1953fd73b3230","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-25_17-36-36.png","hash":"7553e0f0ef41dfd9e0952f87a50f6de87f90b685","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-25_17-23-27.png","hash":"0a83b862045bd256006f7c943e083d201cf05306","modified":1611392811271},{"_id":"public/2019/09/12/【C++】C++中的四种转换类型/Snipaste_2019-09-12_10-11-10.png","hash":"5696fb19f2d72c2161f4a1497bef9c68016373ef","modified":1611392811271},{"_id":"public/2019/09/12/【C++】C++中的四种转换类型/Snipaste_2019-09-12_16-32-44.png","hash":"4d26c7a6c9d42f801d7a6d53af4f820e90f06f38","modified":1611392811271},{"_id":"public/2019/08/25/【Linux】Linux基础/2.png","hash":"dbf18a4e77773e54be17847e9e4e889c2930860e","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4组件/Snipaste_2019-10-25_11-56-15.png","hash":"333ce02b2e4bddece40140609827a8c683f17b69","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4组件/Snipaste_2019-10-25_11-53-42.png","hash":"73f301358405ec6f7c4f3a02cfde542fc3c723f4","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4连接MySQL/Snipaste_2019-10-23_10-36-25.png","hash":"5e8cc17525a7d927da9a610282b5f183f7e05757","modified":1611392811271},{"_id":"public/2019/11/06/【UE4】UE4连接MySQL/Snipaste_2019-11-05_19-12-00.png","hash":"00de89bb9c0e786e222acd6693c4c2902ff236c2","modified":1611392811271},{"_id":"public/2019/11/17/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_10-58-31.png","hash":"af681111b549c57a38a622fb6d7034eb9007b1b1","modified":1611392811271},{"_id":"public/2019/11/17/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_11-14-32.png","hash":"e33944519a55306a3df1c2ea329cf500369e9002","modified":1611392811271},{"_id":"public/2019/11/17/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_19-48-16.png","hash":"4163e6ff5df6335d69af47e6c2771c7fb08a8797","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_10-49-05.png","hash":"ca5692c9ef6079fd5323ad6115f8b7ae5a25c270","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-16_10-06-16.png","hash":"081d2c65597bb20119bb1edc30b500f7c2822600","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-16_10-06-10.png","hash":"3d17173feaca9e015bcb4e31b504953028400123","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-16_10-07-00.png","hash":"242bdb22dc186655f2f6d77befaf6b7cf14b1915","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-17_21-18-55.png","hash":"21ada8cf0e08292df6c592b053ac53cb3448bf2a","modified":1611392811271},{"_id":"public/2019/10/06/【C++】C++STL标准模板库/Snipaste_2019-10-06_14-36-13.png","hash":"8d5ba40456eebbf1980ca791bf463eaff70e9290","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-24_14-55-47.png","hash":"b5ca8383cdc6fec3e04bd5e588e885a8ea7c1f9e","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-31-16.png","hash":"ade46d8881e3c15f1a04b83e9eb3915a541a5078","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-31-36.png","hash":"ba2ee11a37f1815ffbfdab147b73161c46446795","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-31-23.png","hash":"fe4f918ef3fec236da53b5a4a0fff3943cf0a7f8","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-31-47.png","hash":"635642af09c49970dabd8e88306f7e00af24cabf","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-39-35.png","hash":"4182d56811a3252ebc9ec0d730f340c689f50c49","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-39-15.png","hash":"60b0d897de36070faa73e5cb498e896c8035794f","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-39-52.png","hash":"8d22244bea3196a6e67057344df7a97a73649b7f","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-40-54.png","hash":"8c8e6b846343e5450e4a69cd7e1020ef32ac8abb","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-40-45.png","hash":"cb8e521fede3cf38da8ff0ea3a3bb5cbc21e677b","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-40-59.png","hash":"ea2148fe24979d5c8332ce1ca4f50cae63521f33","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-25_19-14-34.png","hash":"aefe27e9f978b8c23570c6f30c8486a6d3245b7f","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-21-48.png","hash":"a11b51e94b9331eb7936704ef2fb886b16d2c6bd","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-24-33.png","hash":"1b5cc46f8a19f5607b4631c232cd031640e124b8","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-37-55.png","hash":"2d47aedb9096ea9c5c1601a5e792c79d86c7f789","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-46-46.png","hash":"0d398816ac7b4345f6f3495e17828c68480322a7","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-42-24.png","hash":"075ccdadbc3a1c44d391288048e29f83a53dd7b8","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-50-31.png","hash":"61ffbd8f56ffb672190c3fce3fb67a7561cca07a","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-59-54.png","hash":"ccf34babcb3bb65373f4f93a2278449348e8a73d","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-53-49.png","hash":"06caa84fa5b3d9d91a7cf9368eeed844e2023fa3","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-07-44.png","hash":"dea91d3b9a042ba417e7f75da511d80a095ade41","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-07-50.png","hash":"b1d6ea713edee473f3cecd8939d2718bc8a04ff5","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-12-59.png","hash":"748732a228e6a13df384d15286c25c557afd6a51","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-21-30.png","hash":"08575e7872c9da7eda474b4170786eb2749dc79c","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-25-34.png","hash":"d0e0e322959a40433f2b7d6b98b4a8dbe48d1830","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-29-34.png","hash":"213cc29f7b2f03df188991824d2875b250dd5fef","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-30-00.png","hash":"c363550daba311a430d1326e3a77bbc093c991a8","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-27_10-32-38.png","hash":"d8bd1910293501ae25dafdd46ddbb89ae6ce9eae","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-27_10-38-13.png","hash":"4a9fe778400ae1372b3a24580cdb8fadf4e1594f","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-27_11-01-39.png","hash":"f3503da8827e583536e1bdcd679933d85dee71d1","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-27_11-04-21.png","hash":"7b666b1faccf4d57fb8068daecaa2984a59b0ba3","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-27_11-28-43.png","hash":"06fd9ec3a40d13d78e36d36379c64a2a2ba75b9c","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-28_15-51-30.png","hash":"01bca903f964a3c76edbb14de1fbd09d558269f8","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-28_17-00-10.png","hash":"7f1daca36a8e7ebea17b979721e7ceb8e624defd","modified":1611392811271},{"_id":"public/2019/09/14/【C++】C++高级/Snipaste_2019-09-14_16-29-43.png","hash":"a55e0855be7a6b9653d60e1aa02f35d028edf35c","modified":1611392811271},{"_id":"public/2019/09/14/【C++】C++高级/Snipaste_2019-10-01_16-21-15.png","hash":"11db0bd09076d6a9c5453ffb9d727fcc69f76014","modified":1611392811271},{"_id":"public/2019/09/14/【C++】C++高级/Snipaste_2019-10-01_16-52-53.png","hash":"597bf574dfd790524a42791a734b4e6f56001648","modified":1611392811271},{"_id":"public/2019/09/14/【C++】C++高级/Snipaste_2019-10-02_15-50-39.png","hash":"64fa5f2de6fb00f854a93938e5079edd530ba1d5","modified":1611392811271},{"_id":"public/2019/09/14/【C++】C++高级/Snipaste_2019-10-02_16-10-55.png","hash":"c37e3f7d89ea5eaa7f8706f7e6c403e1e240adf8","modified":1611392811271},{"_id":"public/2019/09/14/【C++】C++高级/Snipaste_2019-10-06_10-03-47.png","hash":"ec465977f70b7aa59d67bac0a5ad41c61b5dd583","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-24_15-11-12.png","hash":"6bed8c6af17501079ef4ad59fb1d855c5de52eb1","modified":1611392811271},{"_id":"public/2019/09/12/【C++】C++中的四种转换类型/Snipaste_2019-09-12_10-44-16.png","hash":"661f9ff0574baf2e3dcdbb515de1b6a43fe41a5d","modified":1611392811271},{"_id":"public/2019/09/12/【C++】C++中的四种转换类型/Snipaste_2019-09-12_11-51-30.png","hash":"4a8fcaf0577f5a65d01701988de966f96c516f6a","modified":1611392811271},{"_id":"public/2019/09/12/【C++】C++中的四种转换类型/Snipaste_2019-09-12_11-06-11.png","hash":"aa62e7231b877ae93b784cab2f17ec3213a458b3","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-14_14-17-46.png","hash":"8a8f9ce0ed85941affdbfce6b588aa3e55f7fd79","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-14_14-17-49.png","hash":"beaa3ceb15efbe13bf7a57e322245c6f71299210","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-24_11-12-38.png","hash":"e2ccdcfc20a97e8dd57e1102fe9fde71e9797e51","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-25_19-04-57.png","hash":"b7d1622850aa9558bc381d6c98a2108ff0d5aa4c","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-26_10-58-33.png","hash":"5136b69cd4a410b42109aa2a2f27e099c1e49d30","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-02-54.png","hash":"54b0de977b1b0ceccf1947a54b60fb2ac00d863d","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-26_19-59-29.png","hash":"43e83aac38ad697b66bc220000a258c0bf938c05","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-27_10-35-51.png","hash":"ea10f8899c92bf55b8c07a42ecc57c33b178c49b","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-28_16-45-41.png","hash":"13ae1f4e51e9a233a366471ec9a9bba7518e6c3a","modified":1611392811271},{"_id":"public/2019/09/14/【C++】C++高级/Snipaste_2019-09-14_09-39-52.png","hash":"a50164c862b593399eb3791eea5c3118e0f1b4bf","modified":1611392811271},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1611392811271},{"_id":"public/js/boot.js","hash":"1aea6f229e2298c7c134e9f1cc94576cd3f30611","modified":1611392811271},{"_id":"public/js/debouncer.js","hash":"045f324777bdfb99d4c17b1806169f029f897a65","modified":1611392811271},{"_id":"public/js/events.js","hash":"9b3a3dfdbc64e6b367ae2ebf7700ed611ecd0d47","modified":1611392811271},{"_id":"public/js/color-schema.js","hash":"7d7444387e549e06a4a378706df92558de62e4e7","modified":1611392811271},{"_id":"public/js/leancloud.js","hash":"4701f49b3dc62939adff5cc11f6d21963df7f135","modified":1611392811271},{"_id":"public/js/lazyload.js","hash":"0df461660bbd73a79f3125ba4e9bdbc856232e6b","modified":1611392811271},{"_id":"public/js/local-search.js","hash":"13d5ef2fe68c49bd6096781034dbb26c190b5176","modified":1611392811271},{"_id":"public/js/plugins.js","hash":"e1fd90d773b3e8dfb075086f58787de21288d650","modified":1611392811271},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1611392811271},{"_id":"public/js/utils.js","hash":"3086cede8d6d96ac5f4b5236b06271599a1ebbcb","modified":1611392811271},{"_id":"public/css/main.css","hash":"08f5e8366e8512663b992aa2d6afb73096e52440","modified":1611392811271},{"_id":"public/2019/10/03/【C++】C++函数模板的实现机制剖析/Snipaste_2019-10-03_20-07-41.png","hash":"d0cf6cb62c29ef17eb23940549bd935dc0f02fd3","modified":1611392811271},{"_id":"public/2019/11/17/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_11-03-35.png","hash":"bbc2ad95a69c21a5b99126a388ac85519def2245","modified":1611392811271},{"_id":"public/2019/11/17/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_11-10-41.png","hash":"a845cfea131a4ced491ed5542bf60ffa81b1a6b5","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_10-23-17.png","hash":"62a865df56919f2c709b44133254c670b97c6e35","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_10-23-36.png","hash":"9150ea14e4c635f103cd011dff31ad2700e24691","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-27_11-31-04.png","hash":"bd4e0537881416b948fbf9ceed44ccb07e4b85ec","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-14_11-46-45.png","hash":"ac2230cfae134ce8e2e343f3c1fd94d824e82b6d","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-24_09-41-27.png","hash":"a320fe2b688f260b3107db98d0c86a425a6737b1","modified":1611392811271},{"_id":"public/2019/10/28/【UE4】UE4蓝图基础/Snipaste_2019-10-26_17-38-54.png","hash":"aed2953ba79a0b2e220f229ce12d430d0af7e5c9","modified":1611392811271},{"_id":"public/2019/08/25/【Linux】Linux基础/9.png","hash":"f89c4f40fceffe3270865ae53802662b509ff792","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_10-59-58.png","hash":"8e5fb25c3a7a04a6f590ff39f23b864ed21baf54","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_11-15-27.png","hash":"c7f49eaf79025d956ed59b3ebe2a68e5d8fb4115","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/Snipaste_2019-09-08_09-15-55.png","hash":"9be0eac8c02b5ddc7f989ae4916807ab09c68099","modified":1611392811271},{"_id":"public/2019/11/17/【UE4】UE4联级粒子系统/Snipaste_2019-11-15_15-05-48.png","hash":"9f1cb0bafafc1a76a027e7f661b1030b631dd3ef","modified":1611392811271},{"_id":"public/2019/10/14/【UE4】UE4基础/Snipaste_2019-10-15_10-42-21.png","hash":"d0603a7887618e98b79545f1ccd6ed48680785db","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/Snipaste_2019-09-08_09-23-19.png","hash":"71ac9b67b6dd5da0a2993341647ad05df28b1357","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/Snipaste_2019-09-08_09-28-22.png","hash":"d0f9d0530f0295f806e047cc3ccbae6dc257e14d","modified":1611392811271},{"_id":"public/2019/08/25/【Unity3d】Space/Unity3d_Space.png","hash":"166e98471595a37ceb251a386330f2d9082747d7","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/QQ图片20191012190513.jpg","hash":"dfd693ceb839b96b0c904864c946a192ac1a28d6","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/Snipaste_2019-09-08_09-34-22.png","hash":"4c1b8e5d02764c3fecfdb826a45ef894be9c89e8","modified":1611392811271},{"_id":"public/2019/08/25/【程序编程】程序编程高级/程序编程高级.png","hash":"580dd5da5be3387deee2b11a0abfdfb35613811c","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/QQ图片20191012190452.jpg","hash":"7d97cda11fc0f67e86a9bee5c2071dfa542cfeaa","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/QQ图片20191012190456.jpg","hash":"a43cbb34f7897911d11cbd288b4ec3a4730e343f","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/QQ图片20191012190626.jpg","hash":"66bfee7195531ec251fcb619807b67557e74bca7","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/QQ图片20191012190634.jpg","hash":"2b59287bc72f813364ac207c03578432b16e6899","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/QQ图片20191012190518.jpg","hash":"5bfd0f313a82c1c25f119e3b46a5f8a7210ed4fe","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/QQ图片20191012190604.jpg","hash":"fa70f354999954542e8de724142fb0e5f61bd8f7","modified":1611392811271},{"_id":"public/2019/08/25/【Unity3d】Lightmap/Unity_Lightmap.png","hash":"d9f59201a5bfefae4e7a19037ec5fa83fd252fcc","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/QQ图片20191012190414.jpg","hash":"1097a0d58ff63494fc9df8063df1ba3dc68fe718","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/QQ图片20191012190500.jpg","hash":"234900faa13b3ac924602b35ec6567d43de58703","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/QQ图片20191012190444.jpg","hash":"68f5f3ebc70e48beff4b72328a176ef5e33c55a3","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/QQ图片20191012190532.jpg","hash":"d6f2182efaaf7e19113aee4716f90113474e60e8","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/QQ图片20191012190600.jpg","hash":"e2140f8b5708d2d88b5f54b4ac26eee7a55d21ac","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/QQ图片20191012190616.jpg","hash":"392aaeb7d3e95e57bddb29d75cb9db5d52a90037","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/QQ图片20191012190504.jpg","hash":"427c42dc3ce9a96a89d0d6a31f77be9b5477e401","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/QQ图片20191012190448.jpg","hash":"97c7bbd7c7fb08f7cb0ac999252619164c3e245b","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/QQ图片20191012190638.jpg","hash":"3e2d6ecaa5276c95d560b4d04cf5bbf101b39d6d","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/QQ图片20191012190641.jpg","hash":"782bbc9b28e087862b54290d339f0d86730fcb6f","modified":1611392811271},{"_id":"public/2019/08/25/【网络通信】物联网通信基础/物联网通信技术基础.png","hash":"4cc498e86f16de8102e148fc52eaf2b362c01399","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/QQ图片20191012190612.jpg","hash":"08ddb1df3dc127669c7866ecd39beac2ff007594","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/QQ图片20191012190622.jpg","hash":"61358bc5e08f52864424778437035cfe0d556f32","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/QQ图片20191012190556.jpg","hash":"28db93f05e9acbc0afc723a64de2329d76ee3909","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/QQ图片20191012190552.jpg","hash":"2ab850404ffb530e81c219450521f53b2b768703","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/QQ图片20191012190542.jpg","hash":"d2ff3d6038baa9a54a0e371acd4c5801a7869d50","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/QQ图片20191012190547.jpg","hash":"7ea440b83e24df2ad4a3d33636a1498d3f84e414","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/QQ图片20191012190538.jpg","hash":"e6a48efcb69a1bc33c0b5d6952fd7a564d4b87b3","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/QQ图片20191012190607.jpg","hash":"6ed81df498eced4f8284e720f03c451da9a30ce3","modified":1611392811271},{"_id":"public/2019/10/12/【日记】在武汉跑秋招的日子/QQ图片20191012190630.jpg","hash":"24b42d9c8e254f45decb91f34d1d28889617256a","modified":1611392811271},{"_id":"public/2019/08/25/【网络游戏】网络游戏基础/网络游戏基础.jpg","hash":"0118b0b496d409e3758320f375569426f298bb82","modified":1611392811271},{"_id":"public/2019/09/09/【Lua】Lua基础/Lua基础1.png","hash":"c1b38cf0fe6961681a41fb0521d187bbb2d2df6c","modified":1611392811271},{"_id":"public/2019/09/09/【Lua】Lua基础/Lua基础2.png","hash":"c21f71c7832f37ea9c7fead5b84975dd441bb416","modified":1611392811271},{"_id":"themes/Fluid/source/img/Home.jpg","hash":"73e59f9adb171419b170eafef5910978d39f88a2","modified":1612322035700},{"_id":"themes/Fluid/source/img/Post.jpg","hash":"db5d8fde1698e19a41b984eaeb0f46b482427a79","modified":1612322199408},{"_id":"themes/Fluid/source/img/Categories.jpg","hash":"1c14a6fc51bf5de02c692d5dd71cad9224d7ad6e","modified":1612322174669},{"_id":"themes/Fluid/source/img/Tags.jpg","hash":"6bc21bcefcfa081870d1ece790ca0bbefccf3ab7","modified":1612322219925},{"_id":"themes/Fluid/source/img/About.png","hash":"4121649df269f0a69486ecfe13961d9653413b0d","modified":1612322118116},{"_id":"themes/Fluid/source/img/Archives.png","hash":"d2e024f5a685937eb28f020dee89f966b59f5d43","modified":1612322151291},{"_id":"public/img/Home.jpg","hash":"73e59f9adb171419b170eafef5910978d39f88a2","modified":1612322047634},{"_id":"public/img/Post.jpg","hash":"db5d8fde1698e19a41b984eaeb0f46b482427a79","modified":1612322230789},{"_id":"public/img/Categories.jpg","hash":"1c14a6fc51bf5de02c692d5dd71cad9224d7ad6e","modified":1612322230789},{"_id":"public/img/Tags.jpg","hash":"6bc21bcefcfa081870d1ece790ca0bbefccf3ab7","modified":1612322230789},{"_id":"public/img/About.png","hash":"4121649df269f0a69486ecfe13961d9653413b0d","modified":1612322230789},{"_id":"public/img/Archives.png","hash":"d2e024f5a685937eb28f020dee89f966b59f5d43","modified":1612322230789},{"_id":"themes/Fluid/source/img/shun.jpg","hash":"7b423c4c9ab061f6a58b4d7a80f4ff54be919d01","modified":1612190104560},{"_id":"public/img/shun.jpg","hash":"7b423c4c9ab061f6a58b4d7a80f4ff54be919d01","modified":1612190373658},{"_id":"source/_posts/测试.md","hash":"6d082190a66f27940cc9d00c73da5fd47a38eb3c","modified":1612193159983},{"_id":"public/2021/02/01/测试/index.html","hash":"065e2e9e0414642476dc85fad4b05a0e61892f6e","modified":1612193167447},{"_id":"public/archives/2021/index.html","hash":"c1ccc48df2f2c8629636407bb3d18a2394f7272f","modified":1612320927476},{"_id":"public/archives/2021/02/index.html","hash":"c1ccc48df2f2c8629636407bb3d18a2394f7272f","modified":1612320927476},{"_id":"source/_posts/【日记】在衡变的日子.md","hash":"b83195d92aac59e3c7ff290108b6ae9b7f5855f0","modified":1612273879028},{"_id":"source/_posts/【日记】在衡变的日子/QQ图片20210202211300.jpg","hash":"f96dbfb9ee2de52f4c3d4b4381df841d7db518b2","modified":1612271519992},{"_id":"source/_posts/【日记】在衡变的日子/QQ图片20210202211306.jpg","hash":"fbf7583252813be73cc8b998ed48b252b10b5a88","modified":1612271521117},{"_id":"source/_posts/【日记】在衡变的日子/QQ图片20210202211319.jpg","hash":"79fda7fa02e975b51e1c4333d9ac889f59d91924","modified":1612271518172},{"_id":"source/_posts/【日记】在衡变的日子/QQ图片20210202211257.jpg","hash":"038ba25a702df951ef493ee267ecb649711e9d1a","modified":1612271520499},{"_id":"source/_posts/【日记】在衡变的日子/QQ图片20210202211250.jpg","hash":"ae45894a4f7e16dda020bcdadf0ed061adb28fdc","modified":1612271522480},{"_id":"source/_posts/【日记】在衡变的日子/QQ图片20210202211325.jpg","hash":"3f05dd8068bf7fa13cd07af36613b471d677065c","modified":1612271517394},{"_id":"source/_posts/【日记】在衡变的日子/QQ图片20210202211910.jpg","hash":"0b7d602c5d81b6212a271c5f204e3b6cb9953c9b","modified":1612271514740},{"_id":"source/_posts/【日记】在衡变的日子/QQ图片20210202211323.jpg","hash":"a95a6ce3c765ba5c5a03fc65f5dcc696c6f757c8","modified":1612271517880},{"_id":"source/_posts/【日记】在衡变的日子/QQ图片20210202211328.jpg","hash":"66d7e8de685ab71cc3a11bb5d8ba605f0a97d789","modified":1612271516967},{"_id":"public/2021/02/02/【日记】在衡变的日子/index.html","hash":"6ff40abd87f7ab0eacc347f535adc848de320818","modified":1612320927476},{"_id":"public/2021/02/02/【日记】在衡变的日子/QQ图片20210202211300.jpg","hash":"f96dbfb9ee2de52f4c3d4b4381df841d7db518b2","modified":1612273903678},{"_id":"public/2021/02/02/【日记】在衡变的日子/QQ图片20210202211319.jpg","hash":"79fda7fa02e975b51e1c4333d9ac889f59d91924","modified":1612273903678},{"_id":"public/2021/02/02/【日记】在衡变的日子/QQ图片20210202211306.jpg","hash":"fbf7583252813be73cc8b998ed48b252b10b5a88","modified":1612273903678},{"_id":"public/2021/02/02/【日记】在衡变的日子/QQ图片20210202211250.jpg","hash":"ae45894a4f7e16dda020bcdadf0ed061adb28fdc","modified":1612273903678},{"_id":"public/2021/02/02/【日记】在衡变的日子/QQ图片20210202211257.jpg","hash":"038ba25a702df951ef493ee267ecb649711e9d1a","modified":1612273903678},{"_id":"public/2021/02/02/【日记】在衡变的日子/QQ图片20210202211910.jpg","hash":"0b7d602c5d81b6212a271c5f204e3b6cb9953c9b","modified":1612273903678},{"_id":"public/2021/02/02/【日记】在衡变的日子/QQ图片20210202211325.jpg","hash":"3f05dd8068bf7fa13cd07af36613b471d677065c","modified":1612273903678},{"_id":"public/2021/02/02/【日记】在衡变的日子/QQ图片20210202211323.jpg","hash":"a95a6ce3c765ba5c5a03fc65f5dcc696c6f757c8","modified":1612273903678},{"_id":"public/2021/02/02/【日记】在衡变的日子/QQ图片20210202211328.jpg","hash":"66d7e8de685ab71cc3a11bb5d8ba605f0a97d789","modified":1612273903678},{"_id":"source/_posts/【C++】C++ PremierReadNote.md","hash":"a4c5132018eaa2d14c747cd6420a0d5745fa5c39","modified":1612320969709},{"_id":"source/_posts/【Dev】DevExpress应用.md","hash":"909ef97af27b12e7b312eede0ceffb2a4bcc6e74","modified":1612337222225},{"_id":"source/_posts/【Dev】DevExpress应用/Image_20201222193848.png","hash":"3620e0e955271725fe6d81c06a7b727fe681b53e","modified":1608637148160},{"_id":"source/_posts/【Dev】DevExpress应用/Snipaste_2020-12-17_19-49-11.png","hash":"798508476209fd38e28c4a45d0bc2b338a945f53","modified":1608205752511},{"_id":"source/_posts/【Dev】DevExpress应用/Snipaste_2020-12-18_09-13-12.png","hash":"01bad696aae8cc6d5b92a9ed8b621649adbbb777","modified":1608253994102},{"_id":"source/_posts/【Dev】DevExpress应用/Snipaste_2020-12-17_19-29-45.png","hash":"9425863d3218ec8cebe3c3b0345614d58f0098dc","modified":1608204586495},{"_id":"source/_posts/【Dev】DevExpress应用/Snipaste_2020-12-18_09-11-36.png","hash":"2e06e72def8028c95c7b992986742d6adcf1e420","modified":1608253898722},{"_id":"source/_posts/【Dev】DevExpress应用/Snipaste_2020-12-22_19-13-20.png","hash":"a286a82abc35027189b331b42b54330019c93b2d","modified":1608635603182},{"_id":"source/_posts/【Dev】DevExpress应用/Snipaste_2021-01-06_21-26-31.png","hash":"7102052f379d73c1c6ec877017e8ee110f399b09","modified":1609939593477},{"_id":"source/_posts/【Dev】DevExpress应用/Snipaste_2021-01-07_20-43-04.png","hash":"56cbb72fcdaf1d2b3ddfc795fd83642d6b09f5a7","modified":1610023386389},{"_id":"source/_posts/【Dev】DevExpress应用/Snipaste_2021-01-07_20-45-28.png","hash":"811e77c19023a8962524201e2d1edef70f2e3daf","modified":1610023530243},{"_id":"source/_posts/【Dev】DevExpress应用/Snipaste_2020-12-17_19-20-19.png","hash":"4cb8005ace0ce5927c477d95e221000e0d3ac2c2","modified":1608204027762},{"_id":"source/_posts/【Dev】DevExpress应用/Snipaste_2021-01-07_20-38-53.png","hash":"b48a9851a77b5fb992d4a630da2035c03863cb03","modified":1610023136056},{"_id":"source/_posts/【Dev】DevExpress应用/Snipaste_2021-01-07_20-45-55.png","hash":"0bc341746e7c1142d80c2b1c7b86d4e4fac21c33","modified":1610023556544},{"_id":"public/2021/02/03/【C++】C++ PremierReadNote/index.html","hash":"8d3c6c6707468a4b84dfb3d0a558cbcf5babc070","modified":1612320977714},{"_id":"public/2021/02/03/【Dev】DevExpress应用/index.html","hash":"67a3a279a8b25de997cd68b993be28fdec0b9b2f","modified":1612337248269},{"_id":"public/tags/Dev/index.html","hash":"6411c62400b430348ee174459cb1c74a222186e2","modified":1612320927476},{"_id":"public/2021/02/03/【Dev】DevExpress应用/Image_20201222193848.png","hash":"3620e0e955271725fe6d81c06a7b727fe681b53e","modified":1612320927476},{"_id":"public/2021/02/03/【Dev】DevExpress应用/Snipaste_2020-12-17_19-29-45.png","hash":"9425863d3218ec8cebe3c3b0345614d58f0098dc","modified":1612320927476},{"_id":"public/2021/02/03/【Dev】DevExpress应用/Snipaste_2020-12-17_19-20-19.png","hash":"4cb8005ace0ce5927c477d95e221000e0d3ac2c2","modified":1612320927476},{"_id":"public/2021/02/03/【Dev】DevExpress应用/Snipaste_2020-12-17_19-49-11.png","hash":"798508476209fd38e28c4a45d0bc2b338a945f53","modified":1612320927476},{"_id":"public/2021/02/03/【Dev】DevExpress应用/Snipaste_2020-12-18_09-11-36.png","hash":"2e06e72def8028c95c7b992986742d6adcf1e420","modified":1612320927476},{"_id":"public/2021/02/03/【Dev】DevExpress应用/Snipaste_2020-12-18_09-13-12.png","hash":"01bad696aae8cc6d5b92a9ed8b621649adbbb777","modified":1612320927476},{"_id":"public/2021/02/03/【Dev】DevExpress应用/Snipaste_2021-01-06_21-26-31.png","hash":"7102052f379d73c1c6ec877017e8ee110f399b09","modified":1612320927476},{"_id":"public/2021/02/03/【Dev】DevExpress应用/Snipaste_2020-12-22_19-13-20.png","hash":"a286a82abc35027189b331b42b54330019c93b2d","modified":1612320927476},{"_id":"public/2021/02/03/【Dev】DevExpress应用/Snipaste_2021-01-07_20-43-04.png","hash":"56cbb72fcdaf1d2b3ddfc795fd83642d6b09f5a7","modified":1612320927476},{"_id":"public/2021/02/03/【Dev】DevExpress应用/Snipaste_2021-01-07_20-45-28.png","hash":"811e77c19023a8962524201e2d1edef70f2e3daf","modified":1612320927476},{"_id":"public/2021/02/03/【Dev】DevExpress应用/Snipaste_2021-01-07_20-38-53.png","hash":"b48a9851a77b5fb992d4a630da2035c03863cb03","modified":1612320927476},{"_id":"public/2021/02/03/【Dev】DevExpress应用/Snipaste_2021-01-07_20-45-55.png","hash":"0bc341746e7c1142d80c2b1c7b86d4e4fac21c33","modified":1612320927476},{"_id":"themes/Fluid/source/Home.jpg","hash":"1545b392f488abc92d12adbccef11a3ad9823ac5","modified":1612187209626},{"_id":"public/Home.jpg","hash":"1545b392f488abc92d12adbccef11a3ad9823ac5","modified":1612321465523},{"_id":"themes/Fluid/source/Post.jpg","hash":"4b6dcad420b98daf92708ea901be276d30f04b99","modified":1612187220706},{"_id":"themes/Fluid/source/Categories.jpg","hash":"39418dab582147f51dbf45e5d13e3811859fc056","modified":1612187221459},{"_id":"themes/Fluid/source/Tags.jpg","hash":"796083827ba031a2a352cfbc3c7353dfc432a527","modified":1612187214716},{"_id":"themes/Fluid/source/About.png","hash":"309d62fd141470e684e86b999a28dea49d8edde7","modified":1612187223762},{"_id":"themes/Fluid/source/Archives.png","hash":"3b4842a0c0a4a1fbd442c9a1cb1d53dd806c56ec","modified":1612187218858},{"_id":"public/Post.jpg","hash":"4b6dcad420b98daf92708ea901be276d30f04b99","modified":1612322230789},{"_id":"public/Tags.jpg","hash":"796083827ba031a2a352cfbc3c7353dfc432a527","modified":1612322230789},{"_id":"public/Categories.jpg","hash":"39418dab582147f51dbf45e5d13e3811859fc056","modified":1612322230789},{"_id":"public/About.png","hash":"309d62fd141470e684e86b999a28dea49d8edde7","modified":1612322230789},{"_id":"public/Archives.png","hash":"3b4842a0c0a4a1fbd442c9a1cb1d53dd806c56ec","modified":1612322230789}],"Category":[{"name":"学习笔记","_id":"ckk9hocae0002dwr72kfc6kt2"},{"name":"知识记录","_id":"ckk9hocah0007dwr747zbhgqj"},{"name":"待解决","_id":"ckk9hocb30023dwr71fa3gojs"},{"name":"日记","_id":"ckk9hocb60029dwr73v0w6kmf"}],"Data":[],"Page":[],"Post":[{"title":"C#中级","date":"2019-08-25T07:48:58.000Z","_content":"\n﻿![在这里插入图片描述](https://img-blog.csdnimg.cn/20190825154217891.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\n","source":"_posts/【C#】C#中级.md","raw":"---\ntitle: C#中级\ndate: 2019-08-25 15:48:58\ntags: C#\ncategories: 学习笔记\n---\n\n﻿![在这里插入图片描述](https://img-blog.csdnimg.cn/20190825154217891.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\n","slug":"【C#】C#中级","published":1,"updated":"2019-11-18T07:25:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk9hoca90000dwr79kkt1xys","content":"<p>﻿<img src=\"https://img-blog.csdnimg.cn/20190825154217891.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>﻿<img src=\"https://img-blog.csdnimg.cn/20190825154217891.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"【C#】C#两种二维数组的区别","date":"2019-09-11T02:43:50.000Z","_content":"\nC#支持两种二维数组的定义方式（以int数组为例）：\n\n# 1.普通数组\n\n```c#\nint[,] array = new int[1,2];\n```\n\n这种方式形式上较为简便，要注意的是new之后的[]里面是一定要注明数组大小的，不注明会报错，也就是说这种方式定义的数组是确定大小的。\n\n数组的赋值：\n\n```c#\nint[,] array = new int[2,3]{{1,2,3},{4,5,6}};\n```\n\n# 2.多播数组\n\n```c#\nint[][] array = new int[2][];\n```\n\n这种方式需要注明行数，列数不能注明，注明会报错，这种方式定义的是一个函数确定而列数不确定的不确定大小的数组。\n\n数组的赋值：\n\n```c#\nint[][] array = new int[2][]{new int[]{1,2,3},new int[]{4,5,6}}\n```\n\n\n\n两种二维数组是不能兼容的，即使用方式1定义的二维数组不能使用方式2来使用，反之亦然。\n\n","source":"_posts/【C#】C#两种数组定义的区别.md","raw":"---\ntitle: 【C#】C#两种二维数组的区别\ndate: 2019-09-11 10:43:50\ntags: C#\ncategories: 知识记录\n---\n\nC#支持两种二维数组的定义方式（以int数组为例）：\n\n# 1.普通数组\n\n```c#\nint[,] array = new int[1,2];\n```\n\n这种方式形式上较为简便，要注意的是new之后的[]里面是一定要注明数组大小的，不注明会报错，也就是说这种方式定义的数组是确定大小的。\n\n数组的赋值：\n\n```c#\nint[,] array = new int[2,3]{{1,2,3},{4,5,6}};\n```\n\n# 2.多播数组\n\n```c#\nint[][] array = new int[2][];\n```\n\n这种方式需要注明行数，列数不能注明，注明会报错，这种方式定义的是一个函数确定而列数不确定的不确定大小的数组。\n\n数组的赋值：\n\n```c#\nint[][] array = new int[2][]{new int[]{1,2,3},new int[]{4,5,6}}\n```\n\n\n\n两种二维数组是不能兼容的，即使用方式1定义的二维数组不能使用方式2来使用，反之亦然。\n\n","slug":"【C#】C#两种数组定义的区别","published":1,"updated":"2019-11-18T07:25:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk9hocac0001dwr7gfqlepzz","content":"<p>C#支持两种二维数组的定义方式（以int数组为例）：</p>\n<h1 id=\"1-普通数组\"><a href=\"#1-普通数组\" class=\"headerlink\" title=\"1.普通数组\"></a>1.普通数组</h1><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-built_in\">int</span>[,] array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>];<br></code></pre></td></tr></table></figure>\n<p>这种方式形式上较为简便，要注意的是new之后的[]里面是一定要注明数组大小的，不注明会报错，也就是说这种方式定义的数组是确定大小的。</p>\n<p>数组的赋值：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-built_in\">int</span>[,] array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]&#123;&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>&#125;,&#123;<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>&#125;&#125;;<br></code></pre></td></tr></table></figure>\n<h1 id=\"2-多播数组\"><a href=\"#2-多播数组\" class=\"headerlink\" title=\"2.多播数组\"></a>2.多播数组</h1><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-built_in\">int</span>[][] array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[<span class=\"hljs-number\">2</span>][];<br></code></pre></td></tr></table></figure>\n<p>这种方式需要注明行数，列数不能注明，注明会报错，这种方式定义的是一个函数确定而列数不确定的不确定大小的数组。</p>\n<p>数组的赋值：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-built_in\">int</span>[][] array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[<span class=\"hljs-number\">2</span>][]&#123;<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[]&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>&#125;,<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[]&#123;<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>&#125;&#125;<br></code></pre></td></tr></table></figure>\n\n\n<p>两种二维数组是不能兼容的，即使用方式1定义的二维数组不能使用方式2来使用，反之亦然。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>C#支持两种二维数组的定义方式（以int数组为例）：</p>\n<h1 id=\"1-普通数组\"><a href=\"#1-普通数组\" class=\"headerlink\" title=\"1.普通数组\"></a>1.普通数组</h1><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-built_in\">int</span>[,] array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>];<br></code></pre></td></tr></table></figure>\n<p>这种方式形式上较为简便，要注意的是new之后的[]里面是一定要注明数组大小的，不注明会报错，也就是说这种方式定义的数组是确定大小的。</p>\n<p>数组的赋值：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-built_in\">int</span>[,] array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]&#123;&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>&#125;,&#123;<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>&#125;&#125;;<br></code></pre></td></tr></table></figure>\n<h1 id=\"2-多播数组\"><a href=\"#2-多播数组\" class=\"headerlink\" title=\"2.多播数组\"></a>2.多播数组</h1><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-built_in\">int</span>[][] array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[<span class=\"hljs-number\">2</span>][];<br></code></pre></td></tr></table></figure>\n<p>这种方式需要注明行数，列数不能注明，注明会报错，这种方式定义的是一个函数确定而列数不确定的不确定大小的数组。</p>\n<p>数组的赋值：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-built_in\">int</span>[][] array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[<span class=\"hljs-number\">2</span>][]&#123;<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[]&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>&#125;,<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[]&#123;<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>&#125;&#125;<br></code></pre></td></tr></table></figure>\n\n\n<p>两种二维数组是不能兼容的，即使用方式1定义的二维数组不能使用方式2来使用，反之亦然。</p>\n"},{"title":"C#高级","date":"2019-08-25T10:00:25.000Z","_content":"\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190825170050917.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190825170113521.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190825170131207.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\n","source":"_posts/【C#】C#高级.md","raw":"---\ntitle: C#高级\ndate: 2019-08-25 18:00:25\ntags: C#\ncategories: 学习笔记\n---\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190825170050917.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190825170113521.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190825170131207.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\n","slug":"【C#】C#高级","published":1,"updated":"2019-11-18T07:25:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk9hocaf0004dwr7c2d95mo6","content":"<p><img src=\"https://img-blog.csdnimg.cn/20190825170050917.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190825170113521.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190825170131207.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://img-blog.csdnimg.cn/20190825170050917.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190825170113521.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190825170131207.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"【C++】C++中的四种个智能指针.md","date":"2019-10-08T14:24:31.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n智能指针的出现的目的就是为了解决c++中出现异常安全资源管理问题，智能指针的实现原理是依据RAII机制(Resource Acquisition Is Initialization)，这是的智能指针本质上是一个对象，行为表现上是一个指针。\n\n智能指针都是类模板使用时是必须指定类型参数的，如：`auto_ptr<int> ptr`\n\n# 1.auto_ptr\n\n- auto_ptr采用所有权的模式，指针内不做引用计数，因此一个对象只能由一个auto_ptr指针所拥有，在给其他auto_ptr指针赋值时，所有权会转移\n- auto_ptr中使用delete来释放资源，所以auto_ptr不能指向数组，因为数组的释放使用的是delete[]\n- auto_ptr指针的判空使用auto_ptr.get()==NULL来判断\n\nauto_ptr是C++98中的标准，在C++11中已经被弃用。\n\nauto_ptr由于是所有权模式，所在在auto_ptr做参数时，会转移所有权，即将函数外的auto_ptr的所有权转义给函数内的auto_ptr的所有权，如果函数内不做所有权转移的话，函数外的auto_ptr将变为空指针，而导致引用出错。如：\n\n**不转移所有权**\n\n```C++\nvoid Test(auto_ptr<int> apt)\n{\n\tcout << *apt << endl;\n\treturn apt;\n}\n\nint main()\n{\n\tauto_ptr<int> ptr(new int(1));\n\tTest(ptr);\n\tif (ptr.get() == NULL)\n\t\tcout << \"NULL\" << endl;\n\telse\n\t\tcout << \"NO NULL\" << endl;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**输出结果：**\n\n```\n1\nNULL\n```\n\n**转移所有权**\n\n```C++\nauto_ptr<int> Test(auto_ptr<int> apt)\n{\n\tcout << *apt << endl;\n\treturn apt;\n}\n\nint main()\n{\n\tauto_ptr<int> ptr(new int(1));\n\tptr = Test(ptr);\n\tif (ptr.get() == NULL)\n\t\tcout << \"NULL\" << endl;\n\telse\n\t\tcout << \"NO NULL\" << endl;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**输出结果：**\n\n```\n1\nNO NULL\n```\n\n# 2.unique_ptr\n\n- unique_ptr是C++11中对C++98中的auto_ptr的替换与强化\n\n- unique_ptr也是使用独占所有权模式，即一个unique_ptr指针指向一个对象后，不可以在把这个对象赋予给另一个unique_ptr指针，后来出于一些考虑C++又提供了srd::move()函数来做所有权的移交，被移交所有权的unique_ptr指针会指向空，这时再使用这个指针就会报错\n- unique_ptr指针支持直接使用对用判空，如：\n\n```C++\nunique_ptr<int> ptr;\nif(ptr == NULL)\n\tcout<<\"NULL\"<<endl;\n```\n\n当然unique_ptr依旧支持unique_ptr.get()==NULL来判空。\n\n- 当unique_ptr作为实参进行传递时，必须使用std::move()来移交所有权，这是unique_ptr的独占所有权性质决定的。如：\n\n```C++\nvoid Test(unique_ptr<int> apt)\n{\n\tcout << *apt << endl;\n}\n\nint main()\n{\n\tunique_ptr<int> ptr(new int(1));\n\tunique_ptr<int> pt = move(ptr);\n\tTest(std::move(ptr));\n\tif (ptr == NULL)\n\t\tcout << \"NULL\" << endl;\n\telse\n\t\tcout << \"NO NULL\" << endl;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n# 3.shared_ptr\n\n- shared_ptr指针支持一个对象被多个指针指向\n\n- shared_ptr使用计数机制来记录对象被多少个shared_ptr指针所指向，可以使用share_ptr.reset()函数来释放当前指针，对象的引用技术减一，当引用计数减为0时，释放对象资源\n- 可以使用shared_ptr.use_count()来获取当前对象的引用计数\n\n我们来看一个例子：\n\n```C++\nvoid Test(shared_ptr<int> ptr)\n{\n\tcout << \"count_1:\"<< ptr.use_count() << endl;\n}\n\nint main()\n{\n\tshared_ptr<int> ptr(new int(1));\n\tshared_ptr<int> pt = ptr;\n\tTest(ptr);\n\tpt.reset();\n\tcout << \"count_2:\"<< ptr.use_count() << endl;\n\tif (ptr == NULL)\n\t\tcout << \"NULL\" << endl;\n\telse\n\t\tcout << \"NO NULL\" << endl;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**输出结果：**\n\n```\ncount_1:3\ncount_2:1\nNO NULL\n```\n\n咦！为什么引用计数count_1是3呢？这是因为在函数内形参`shared_ptr<int> ptr`也指向了同一个对象。而当函数Test结束形参指针释放，同时又使用reset()函数释放pt指针，所以count_2:1\n\n# 4.weak_ptr\n\n虽然shared_ptr使用起来更接近C的原生指针，但是当shared_ptr指针作为类成员时，可能会出现互相引用的而形成死锁，导致引用计数永远无法将为0的现象，如：\n\n```C++\nclass B;\nclass A\n{\npublic:\n\tshared_ptr<B> pa;\n};\nclass B\n{\npublic:\n\tshared_ptr<A> pb;\n};\nint main()\n{\n\tshared_ptr<A> pa(new A());\n\tshared_ptr<B> pb(new B());\n\tpa->pa = pb;\n\tpb->pb = pa;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n这种情况是，pa是指向A类型的shared_ptr指针指向A类型对象，而pa指向的内存里面又有一个shared_ptr指针指向B类型对象，同理pb也是如此，这样就导致，当A要被释放时，要先释放B，而B要释放时又要先释放A，如此便形成了一个互相等待的死循环。weak_ptr的存在就是为了解决这种问题。\n\nweak_ptr指针是一种若引用，它指向对象和释放时不会引起引用计数的变化，这样既可以打破shared_ptr的这种死循环了，我们将上面的代码改成如下，就可以解死循环了。\n\n```C++\nclass B;\nclass A\n{\npublic:\n\tweak_ptr<B> pa;\n};\nclass B\n{\npublic:\n\tshared_ptr<A> pb;\n};\nint main()\n{\n\tshared_ptr<A> pa(new A());\n\tshared_ptr<B> pb(new B());\n\tpa->pa = pb;\n\tpb->pb = pa;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```","source":"_posts/【C++】C++中的四种个智能指针.md","raw":"---\ntitle: 【C++】C++中的四种个智能指针.md\ndate: 2019-10-08 22:24:31\ntags: C++\ncategories: 知识记录\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n智能指针的出现的目的就是为了解决c++中出现异常安全资源管理问题，智能指针的实现原理是依据RAII机制(Resource Acquisition Is Initialization)，这是的智能指针本质上是一个对象，行为表现上是一个指针。\n\n智能指针都是类模板使用时是必须指定类型参数的，如：`auto_ptr<int> ptr`\n\n# 1.auto_ptr\n\n- auto_ptr采用所有权的模式，指针内不做引用计数，因此一个对象只能由一个auto_ptr指针所拥有，在给其他auto_ptr指针赋值时，所有权会转移\n- auto_ptr中使用delete来释放资源，所以auto_ptr不能指向数组，因为数组的释放使用的是delete[]\n- auto_ptr指针的判空使用auto_ptr.get()==NULL来判断\n\nauto_ptr是C++98中的标准，在C++11中已经被弃用。\n\nauto_ptr由于是所有权模式，所在在auto_ptr做参数时，会转移所有权，即将函数外的auto_ptr的所有权转义给函数内的auto_ptr的所有权，如果函数内不做所有权转移的话，函数外的auto_ptr将变为空指针，而导致引用出错。如：\n\n**不转移所有权**\n\n```C++\nvoid Test(auto_ptr<int> apt)\n{\n\tcout << *apt << endl;\n\treturn apt;\n}\n\nint main()\n{\n\tauto_ptr<int> ptr(new int(1));\n\tTest(ptr);\n\tif (ptr.get() == NULL)\n\t\tcout << \"NULL\" << endl;\n\telse\n\t\tcout << \"NO NULL\" << endl;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**输出结果：**\n\n```\n1\nNULL\n```\n\n**转移所有权**\n\n```C++\nauto_ptr<int> Test(auto_ptr<int> apt)\n{\n\tcout << *apt << endl;\n\treturn apt;\n}\n\nint main()\n{\n\tauto_ptr<int> ptr(new int(1));\n\tptr = Test(ptr);\n\tif (ptr.get() == NULL)\n\t\tcout << \"NULL\" << endl;\n\telse\n\t\tcout << \"NO NULL\" << endl;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**输出结果：**\n\n```\n1\nNO NULL\n```\n\n# 2.unique_ptr\n\n- unique_ptr是C++11中对C++98中的auto_ptr的替换与强化\n\n- unique_ptr也是使用独占所有权模式，即一个unique_ptr指针指向一个对象后，不可以在把这个对象赋予给另一个unique_ptr指针，后来出于一些考虑C++又提供了srd::move()函数来做所有权的移交，被移交所有权的unique_ptr指针会指向空，这时再使用这个指针就会报错\n- unique_ptr指针支持直接使用对用判空，如：\n\n```C++\nunique_ptr<int> ptr;\nif(ptr == NULL)\n\tcout<<\"NULL\"<<endl;\n```\n\n当然unique_ptr依旧支持unique_ptr.get()==NULL来判空。\n\n- 当unique_ptr作为实参进行传递时，必须使用std::move()来移交所有权，这是unique_ptr的独占所有权性质决定的。如：\n\n```C++\nvoid Test(unique_ptr<int> apt)\n{\n\tcout << *apt << endl;\n}\n\nint main()\n{\n\tunique_ptr<int> ptr(new int(1));\n\tunique_ptr<int> pt = move(ptr);\n\tTest(std::move(ptr));\n\tif (ptr == NULL)\n\t\tcout << \"NULL\" << endl;\n\telse\n\t\tcout << \"NO NULL\" << endl;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n# 3.shared_ptr\n\n- shared_ptr指针支持一个对象被多个指针指向\n\n- shared_ptr使用计数机制来记录对象被多少个shared_ptr指针所指向，可以使用share_ptr.reset()函数来释放当前指针，对象的引用技术减一，当引用计数减为0时，释放对象资源\n- 可以使用shared_ptr.use_count()来获取当前对象的引用计数\n\n我们来看一个例子：\n\n```C++\nvoid Test(shared_ptr<int> ptr)\n{\n\tcout << \"count_1:\"<< ptr.use_count() << endl;\n}\n\nint main()\n{\n\tshared_ptr<int> ptr(new int(1));\n\tshared_ptr<int> pt = ptr;\n\tTest(ptr);\n\tpt.reset();\n\tcout << \"count_2:\"<< ptr.use_count() << endl;\n\tif (ptr == NULL)\n\t\tcout << \"NULL\" << endl;\n\telse\n\t\tcout << \"NO NULL\" << endl;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**输出结果：**\n\n```\ncount_1:3\ncount_2:1\nNO NULL\n```\n\n咦！为什么引用计数count_1是3呢？这是因为在函数内形参`shared_ptr<int> ptr`也指向了同一个对象。而当函数Test结束形参指针释放，同时又使用reset()函数释放pt指针，所以count_2:1\n\n# 4.weak_ptr\n\n虽然shared_ptr使用起来更接近C的原生指针，但是当shared_ptr指针作为类成员时，可能会出现互相引用的而形成死锁，导致引用计数永远无法将为0的现象，如：\n\n```C++\nclass B;\nclass A\n{\npublic:\n\tshared_ptr<B> pa;\n};\nclass B\n{\npublic:\n\tshared_ptr<A> pb;\n};\nint main()\n{\n\tshared_ptr<A> pa(new A());\n\tshared_ptr<B> pb(new B());\n\tpa->pa = pb;\n\tpb->pb = pa;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n这种情况是，pa是指向A类型的shared_ptr指针指向A类型对象，而pa指向的内存里面又有一个shared_ptr指针指向B类型对象，同理pb也是如此，这样就导致，当A要被释放时，要先释放B，而B要释放时又要先释放A，如此便形成了一个互相等待的死循环。weak_ptr的存在就是为了解决这种问题。\n\nweak_ptr指针是一种若引用，它指向对象和释放时不会引起引用计数的变化，这样既可以打破shared_ptr的这种死循环了，我们将上面的代码改成如下，就可以解死循环了。\n\n```C++\nclass B;\nclass A\n{\npublic:\n\tweak_ptr<B> pa;\n};\nclass B\n{\npublic:\n\tshared_ptr<A> pb;\n};\nint main()\n{\n\tshared_ptr<A> pa(new A());\n\tshared_ptr<B> pb(new B());\n\tpa->pa = pb;\n\tpb->pb = pa;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```","slug":"【C++】C++中的四种个智能指针","published":1,"updated":"2021-02-01T13:30:48.504Z","_id":"ckk9hocag0005dwr7b9b63nqp","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>智能指针的出现的目的就是为了解决c++中出现异常安全资源管理问题，智能指针的实现原理是依据RAII机制(Resource Acquisition Is Initialization)，这是的智能指针本质上是一个对象，行为表现上是一个指针。</p>\n<p>智能指针都是类模板使用时是必须指定类型参数的，如：<code>auto_ptr&lt;int&gt; ptr</code></p>\n<h1 id=\"1-auto-ptr\"><a href=\"#1-auto-ptr\" class=\"headerlink\" title=\"1.auto_ptr\"></a>1.auto_ptr</h1><ul>\n<li>auto_ptr采用所有权的模式，指针内不做引用计数，因此一个对象只能由一个auto_ptr指针所拥有，在给其他auto_ptr指针赋值时，所有权会转移</li>\n<li>auto_ptr中使用delete来释放资源，所以auto_ptr不能指向数组，因为数组的释放使用的是delete[]</li>\n<li>auto_ptr指针的判空使用auto_ptr.get()==NULL来判断</li>\n</ul>\n<p>auto_ptr是C++98中的标准，在C++11中已经被弃用。</p>\n<p>auto_ptr由于是所有权模式，所在在auto_ptr做参数时，会转移所有权，即将函数外的auto_ptr的所有权转义给函数内的auto_ptr的所有权，如果函数内不做所有权转移的话，函数外的auto_ptr将变为空指针，而导致引用出错。如：</p>\n<p><strong>不转移所有权</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Test</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">auto_ptr</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; apt)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; *apt &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t<span class=\"hljs-keyword\">return</span> apt;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-function\"><span class=\"hljs-built_in\">auto_ptr</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">ptr</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>(<span class=\"hljs-number\">1</span>))</span></span>;<br>\tTest(ptr);<br>\t<span class=\"hljs-keyword\">if</span> (ptr.get() == <span class=\"hljs-literal\">NULL</span>)<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;NULL&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t<span class=\"hljs-keyword\">else</span><br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;NO NULL&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-number\">1</span><br><span class=\"hljs-literal\">NULL</span><br></code></pre></td></tr></table></figure>\n<p><strong>转移所有权</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-built_in\">auto_ptr</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">Test</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">auto_ptr</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; apt)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; *apt &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t<span class=\"hljs-keyword\">return</span> apt;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-function\"><span class=\"hljs-built_in\">auto_ptr</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">ptr</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>(<span class=\"hljs-number\">1</span>))</span></span>;<br>\tptr = Test(ptr);<br>\t<span class=\"hljs-keyword\">if</span> (ptr.get() == <span class=\"hljs-literal\">NULL</span>)<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;NULL&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t<span class=\"hljs-keyword\">else</span><br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;NO NULL&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-number\">1</span><br><span class=\"hljs-literal\">NO</span> <span class=\"hljs-literal\">NULL</span><br></code></pre></td></tr></table></figure>\n<h1 id=\"2-unique-ptr\"><a href=\"#2-unique-ptr\" class=\"headerlink\" title=\"2.unique_ptr\"></a>2.unique_ptr</h1><ul>\n<li><p>unique_ptr是C++11中对C++98中的auto_ptr的替换与强化</p>\n</li>\n<li><p>unique_ptr也是使用独占所有权模式，即一个unique_ptr指针指向一个对象后，不可以在把这个对象赋予给另一个unique_ptr指针，后来出于一些考虑C++又提供了srd::move()函数来做所有权的移交，被移交所有权的unique_ptr指针会指向空，这时再使用这个指针就会报错</p>\n</li>\n<li><p>unique_ptr指针支持直接使用对用判空，如：</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-built_in\">unique_ptr</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; ptr;<br><span class=\"hljs-keyword\">if</span>(ptr == <span class=\"hljs-literal\">NULL</span>)<br>\t<span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-string\">&quot;NULL&quot;</span>&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br></code></pre></td></tr></table></figure>\n<p>当然unique_ptr依旧支持unique_ptr.get()==NULL来判空。</p>\n<ul>\n<li>当unique_ptr作为实参进行传递时，必须使用std::move()来移交所有权，这是unique_ptr的独占所有权性质决定的。如：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Test</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">unique_ptr</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; apt)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; *apt &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-function\"><span class=\"hljs-built_in\">unique_ptr</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">ptr</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>(<span class=\"hljs-number\">1</span>))</span></span>;<br>\t<span class=\"hljs-built_in\">unique_ptr</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; pt = move(ptr);<br>\tTest(<span class=\"hljs-built_in\">std</span>::move(ptr));<br>\t<span class=\"hljs-keyword\">if</span> (ptr == <span class=\"hljs-literal\">NULL</span>)<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;NULL&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t<span class=\"hljs-keyword\">else</span><br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;NO NULL&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"3-shared-ptr\"><a href=\"#3-shared-ptr\" class=\"headerlink\" title=\"3.shared_ptr\"></a>3.shared_ptr</h1><ul>\n<li><p>shared_ptr指针支持一个对象被多个指针指向</p>\n</li>\n<li><p>shared_ptr使用计数机制来记录对象被多少个shared_ptr指针所指向，可以使用share_ptr.reset()函数来释放当前指针，对象的引用技术减一，当引用计数减为0时，释放对象资源</p>\n</li>\n<li><p>可以使用shared_ptr.use_count()来获取当前对象的引用计数</p>\n</li>\n</ul>\n<p>我们来看一个例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Test</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">shared_ptr</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; ptr)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;count_1:&quot;</span>&lt;&lt; ptr.use_count() &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-function\"><span class=\"hljs-built_in\">shared_ptr</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">ptr</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>(<span class=\"hljs-number\">1</span>))</span></span>;<br>\t<span class=\"hljs-built_in\">shared_ptr</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; pt = ptr;<br>\tTest(ptr);<br>\tpt.reset();<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;count_2:&quot;</span>&lt;&lt; ptr.use_count() &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t<span class=\"hljs-keyword\">if</span> (ptr == <span class=\"hljs-literal\">NULL</span>)<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;NULL&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t<span class=\"hljs-keyword\">else</span><br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;NO NULL&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">count_1:3</span><br><span class=\"hljs-string\">count_2:1</span><br><span class=\"hljs-literal\">NO</span> <span class=\"hljs-literal\">NULL</span><br></code></pre></td></tr></table></figure>\n<p>咦！为什么引用计数count_1是3呢？这是因为在函数内形参<code>shared_ptr&lt;int&gt; ptr</code>也指向了同一个对象。而当函数Test结束形参指针释放，同时又使用reset()函数释放pt指针，所以count_2:1</p>\n<h1 id=\"4-weak-ptr\"><a href=\"#4-weak-ptr\" class=\"headerlink\" title=\"4.weak_ptr\"></a>4.weak_ptr</h1><p>虽然shared_ptr使用起来更接近C的原生指针，但是当shared_ptr指针作为类成员时，可能会出现互相引用的而形成死锁，导致引用计数永远无法将为0的现象，如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span>;</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-built_in\">shared_ptr</span>&lt;B&gt; pa;<br>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-built_in\">shared_ptr</span>&lt;A&gt; pb;<br>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-function\"><span class=\"hljs-built_in\">shared_ptr</span>&lt;A&gt; <span class=\"hljs-title\">pa</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">new</span> A())</span></span>;<br>\t<span class=\"hljs-function\"><span class=\"hljs-built_in\">shared_ptr</span>&lt;B&gt; <span class=\"hljs-title\">pb</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">new</span> B())</span></span>;<br>\tpa-&gt;pa = pb;<br>\tpb-&gt;pb = pa;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这种情况是，pa是指向A类型的shared_ptr指针指向A类型对象，而pa指向的内存里面又有一个shared_ptr指针指向B类型对象，同理pb也是如此，这样就导致，当A要被释放时，要先释放B，而B要释放时又要先释放A，如此便形成了一个互相等待的死循环。weak_ptr的存在就是为了解决这种问题。</p>\n<p>weak_ptr指针是一种若引用，它指向对象和释放时不会引起引用计数的变化，这样既可以打破shared_ptr的这种死循环了，我们将上面的代码改成如下，就可以解死循环了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span>;</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tweak_ptr&lt;B&gt; pa;<br>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-built_in\">shared_ptr</span>&lt;A&gt; pb;<br>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-function\"><span class=\"hljs-built_in\">shared_ptr</span>&lt;A&gt; <span class=\"hljs-title\">pa</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">new</span> A())</span></span>;<br>\t<span class=\"hljs-function\"><span class=\"hljs-built_in\">shared_ptr</span>&lt;B&gt; <span class=\"hljs-title\">pb</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">new</span> B())</span></span>;<br>\tpa-&gt;pa = pb;<br>\tpb-&gt;pb = pa;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>智能指针的出现的目的就是为了解决c++中出现异常安全资源管理问题，智能指针的实现原理是依据RAII机制(Resource Acquisition Is Initialization)，这是的智能指针本质上是一个对象，行为表现上是一个指针。</p>\n<p>智能指针都是类模板使用时是必须指定类型参数的，如：<code>auto_ptr&lt;int&gt; ptr</code></p>\n<h1 id=\"1-auto-ptr\"><a href=\"#1-auto-ptr\" class=\"headerlink\" title=\"1.auto_ptr\"></a>1.auto_ptr</h1><ul>\n<li>auto_ptr采用所有权的模式，指针内不做引用计数，因此一个对象只能由一个auto_ptr指针所拥有，在给其他auto_ptr指针赋值时，所有权会转移</li>\n<li>auto_ptr中使用delete来释放资源，所以auto_ptr不能指向数组，因为数组的释放使用的是delete[]</li>\n<li>auto_ptr指针的判空使用auto_ptr.get()==NULL来判断</li>\n</ul>\n<p>auto_ptr是C++98中的标准，在C++11中已经被弃用。</p>\n<p>auto_ptr由于是所有权模式，所在在auto_ptr做参数时，会转移所有权，即将函数外的auto_ptr的所有权转义给函数内的auto_ptr的所有权，如果函数内不做所有权转移的话，函数外的auto_ptr将变为空指针，而导致引用出错。如：</p>\n<p><strong>不转移所有权</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Test</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">auto_ptr</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; apt)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; *apt &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t<span class=\"hljs-keyword\">return</span> apt;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-function\"><span class=\"hljs-built_in\">auto_ptr</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">ptr</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>(<span class=\"hljs-number\">1</span>))</span></span>;<br>\tTest(ptr);<br>\t<span class=\"hljs-keyword\">if</span> (ptr.get() == <span class=\"hljs-literal\">NULL</span>)<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;NULL&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t<span class=\"hljs-keyword\">else</span><br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;NO NULL&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-number\">1</span><br><span class=\"hljs-literal\">NULL</span><br></code></pre></td></tr></table></figure>\n<p><strong>转移所有权</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-built_in\">auto_ptr</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">Test</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">auto_ptr</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; apt)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; *apt &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t<span class=\"hljs-keyword\">return</span> apt;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-function\"><span class=\"hljs-built_in\">auto_ptr</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">ptr</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>(<span class=\"hljs-number\">1</span>))</span></span>;<br>\tptr = Test(ptr);<br>\t<span class=\"hljs-keyword\">if</span> (ptr.get() == <span class=\"hljs-literal\">NULL</span>)<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;NULL&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t<span class=\"hljs-keyword\">else</span><br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;NO NULL&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-number\">1</span><br><span class=\"hljs-literal\">NO</span> <span class=\"hljs-literal\">NULL</span><br></code></pre></td></tr></table></figure>\n<h1 id=\"2-unique-ptr\"><a href=\"#2-unique-ptr\" class=\"headerlink\" title=\"2.unique_ptr\"></a>2.unique_ptr</h1><ul>\n<li><p>unique_ptr是C++11中对C++98中的auto_ptr的替换与强化</p>\n</li>\n<li><p>unique_ptr也是使用独占所有权模式，即一个unique_ptr指针指向一个对象后，不可以在把这个对象赋予给另一个unique_ptr指针，后来出于一些考虑C++又提供了srd::move()函数来做所有权的移交，被移交所有权的unique_ptr指针会指向空，这时再使用这个指针就会报错</p>\n</li>\n<li><p>unique_ptr指针支持直接使用对用判空，如：</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-built_in\">unique_ptr</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; ptr;<br><span class=\"hljs-keyword\">if</span>(ptr == <span class=\"hljs-literal\">NULL</span>)<br>\t<span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-string\">&quot;NULL&quot;</span>&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br></code></pre></td></tr></table></figure>\n<p>当然unique_ptr依旧支持unique_ptr.get()==NULL来判空。</p>\n<ul>\n<li>当unique_ptr作为实参进行传递时，必须使用std::move()来移交所有权，这是unique_ptr的独占所有权性质决定的。如：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Test</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">unique_ptr</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; apt)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; *apt &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-function\"><span class=\"hljs-built_in\">unique_ptr</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">ptr</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>(<span class=\"hljs-number\">1</span>))</span></span>;<br>\t<span class=\"hljs-built_in\">unique_ptr</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; pt = move(ptr);<br>\tTest(<span class=\"hljs-built_in\">std</span>::move(ptr));<br>\t<span class=\"hljs-keyword\">if</span> (ptr == <span class=\"hljs-literal\">NULL</span>)<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;NULL&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t<span class=\"hljs-keyword\">else</span><br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;NO NULL&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"3-shared-ptr\"><a href=\"#3-shared-ptr\" class=\"headerlink\" title=\"3.shared_ptr\"></a>3.shared_ptr</h1><ul>\n<li><p>shared_ptr指针支持一个对象被多个指针指向</p>\n</li>\n<li><p>shared_ptr使用计数机制来记录对象被多少个shared_ptr指针所指向，可以使用share_ptr.reset()函数来释放当前指针，对象的引用技术减一，当引用计数减为0时，释放对象资源</p>\n</li>\n<li><p>可以使用shared_ptr.use_count()来获取当前对象的引用计数</p>\n</li>\n</ul>\n<p>我们来看一个例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Test</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">shared_ptr</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; ptr)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;count_1:&quot;</span>&lt;&lt; ptr.use_count() &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-function\"><span class=\"hljs-built_in\">shared_ptr</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">ptr</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>(<span class=\"hljs-number\">1</span>))</span></span>;<br>\t<span class=\"hljs-built_in\">shared_ptr</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; pt = ptr;<br>\tTest(ptr);<br>\tpt.reset();<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;count_2:&quot;</span>&lt;&lt; ptr.use_count() &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t<span class=\"hljs-keyword\">if</span> (ptr == <span class=\"hljs-literal\">NULL</span>)<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;NULL&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t<span class=\"hljs-keyword\">else</span><br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;NO NULL&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">count_1:3</span><br><span class=\"hljs-string\">count_2:1</span><br><span class=\"hljs-literal\">NO</span> <span class=\"hljs-literal\">NULL</span><br></code></pre></td></tr></table></figure>\n<p>咦！为什么引用计数count_1是3呢？这是因为在函数内形参<code>shared_ptr&lt;int&gt; ptr</code>也指向了同一个对象。而当函数Test结束形参指针释放，同时又使用reset()函数释放pt指针，所以count_2:1</p>\n<h1 id=\"4-weak-ptr\"><a href=\"#4-weak-ptr\" class=\"headerlink\" title=\"4.weak_ptr\"></a>4.weak_ptr</h1><p>虽然shared_ptr使用起来更接近C的原生指针，但是当shared_ptr指针作为类成员时，可能会出现互相引用的而形成死锁，导致引用计数永远无法将为0的现象，如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span>;</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-built_in\">shared_ptr</span>&lt;B&gt; pa;<br>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-built_in\">shared_ptr</span>&lt;A&gt; pb;<br>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-function\"><span class=\"hljs-built_in\">shared_ptr</span>&lt;A&gt; <span class=\"hljs-title\">pa</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">new</span> A())</span></span>;<br>\t<span class=\"hljs-function\"><span class=\"hljs-built_in\">shared_ptr</span>&lt;B&gt; <span class=\"hljs-title\">pb</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">new</span> B())</span></span>;<br>\tpa-&gt;pa = pb;<br>\tpb-&gt;pb = pa;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这种情况是，pa是指向A类型的shared_ptr指针指向A类型对象，而pa指向的内存里面又有一个shared_ptr指针指向B类型对象，同理pb也是如此，这样就导致，当A要被释放时，要先释放B，而B要释放时又要先释放A，如此便形成了一个互相等待的死循环。weak_ptr的存在就是为了解决这种问题。</p>\n<p>weak_ptr指针是一种若引用，它指向对象和释放时不会引起引用计数的变化，这样既可以打破shared_ptr的这种死循环了，我们将上面的代码改成如下，就可以解死循环了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span>;</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tweak_ptr&lt;B&gt; pa;<br>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-built_in\">shared_ptr</span>&lt;A&gt; pb;<br>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-function\"><span class=\"hljs-built_in\">shared_ptr</span>&lt;A&gt; <span class=\"hljs-title\">pa</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">new</span> A())</span></span>;<br>\t<span class=\"hljs-function\"><span class=\"hljs-built_in\">shared_ptr</span>&lt;B&gt; <span class=\"hljs-title\">pb</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">new</span> B())</span></span>;<br>\tpa-&gt;pa = pb;<br>\tpb-&gt;pb = pa;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"【C++】C++中的四种类型转换","date":"2019-09-12T01:43:34.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\nC++提供四种类型转换：const_cast、static_cast、dynamic_cast、reinterpret_cast\n\n# 1.const_cast\n\n​\tconst_cast的存在主要就是针对const字段，C++提供const_cast的目的就是为了消除const字段的const属性，让const字段也可以修改。\n\n​\tconst_cast的用法：\n\n​\t\tconst_cast只能将常指针转换为非常指针，不能直接将常字段转换为非常字段，只能通过指针类间接的修改常字段所在的内存的内容。\n\n​\t\t例：\n\n```C++\nconst int a = 1;\nconst int* n = &a;\nint* m = const_cast<int*>(n) ;\n*m = 2;\n```\n\n​\t最终的输出结果：\n\n```\na = 1,*n = 2,*m = 2\n&a=n=m\n```\n\n​\t\t奇怪，指针n，m的确指向了地址&a，之中的内容的确也修改成了2，可为什么字段a的值依旧是1？\n\n​\t\t经过多方查阅资料和自己的试验，原来对于常字段在预编译的过程中编译器就会给常字段预定义为初始化的值，类似宏定义一般，尽管内存的内容被改变了，但是常字段的值依旧被预定义为初始化的值。\n\n​\t\t但是，我就疑问了，既然const_cast就是用来修改const字段的，可是只是改变了其内存的值，字段的值依旧没变，那么程序里使用该字段的地方的值依旧没有改变，如此const_cast似乎没有达到想要的结果。\n\n​\t\t$\\color{red}{不过const_cast似乎可以修改const标识的结构体对象中没有再用const标识的字段，也可以修改用const标识的类对象中没有用const标识的公有字段，但是在结构体或类中用const标识的字段就不能再修改了。}$\n\n![](【C++】C++中的四种转换类型/Snipaste_2019-09-12_10-44-16.png)\n\n# 2.static_cast\n\n​\tstatic_cast类型转换的用法几乎和C中的基本类型转换的用法一致，而C++的static_cast类型转换增加l类型检查，在安全性上较C要强。\n\n​\tstatic_cast支持所有类型之间的转换包括类，对于类在继承过程中的类型转换有两点是需要注意的，一、static_cast类型转换在上行转换是安全的，在下行转换是不安全，（上行转换：从子类转换到父类，下行转换：从父类转换到子类），二、static_cast类型转换在类的转换中因该使用指针转换，即通过指针间接的实现转换，直接对类的对象进行转换类型会被裁剪，并且在下行转换中不使用指针会报错。\n\n![](【C++】C++中的四种转换类型/Snipaste_2019-09-12_11-51-30.png)\n\n# 3.dynamic_cast\n\n​\tdynamic_cast类型转换用于类之间的上下行转换，与static_cast不同的是，dynamic_cast类型转换无论上下行都具有类型检查，都可以进行安全的类型转换。上行转换dynamic_cast与static_cast完全一致，下行转换dynamic_cast比static_cast更安全\n\n# 4.reinterpret_cast\n\n​\treinterpret_cast类型转换只能对指针进行操作，reinterpret_cast类型转换提供的是一种更底层的转换模式--比特位上的重新解释，即对某一类型的内存地址的比特位以另一种类型来解释，这可能不好理解，在这放一张图来辅助理解。\n\n![](【C++】C++中的四种转换类型/Snipaste_2019-09-12_16-32-44.png)\n\n​\tp是指向字符串的char类型指针，i是指向整型的指针，i = reinterpret_cast<int*>(p)则将p所指向的内存里的比特位以int类型来重新解释并复制到i所指向的内存地址上，于是在输出 *i 时，输出的是一个整型的数值。\n\nreinterret_cast可以说是一个安全的强制类型转换了。 \n\n​\t至于为什么cout<<p时不是输出的p所指向的地址而是地址里的内容，我始终没有弄明白，不过不影响对reinterpret_cast类型转换的理解。","source":"_posts/【C++】C++中的四种转换类型.md","raw":"---\ntitle: 【C++】C++中的四种类型转换\ndate: 2019-09-12 09:43:34\ntags: C++\ncategories: 知识记录\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\nC++提供四种类型转换：const_cast、static_cast、dynamic_cast、reinterpret_cast\n\n# 1.const_cast\n\n​\tconst_cast的存在主要就是针对const字段，C++提供const_cast的目的就是为了消除const字段的const属性，让const字段也可以修改。\n\n​\tconst_cast的用法：\n\n​\t\tconst_cast只能将常指针转换为非常指针，不能直接将常字段转换为非常字段，只能通过指针类间接的修改常字段所在的内存的内容。\n\n​\t\t例：\n\n```C++\nconst int a = 1;\nconst int* n = &a;\nint* m = const_cast<int*>(n) ;\n*m = 2;\n```\n\n​\t最终的输出结果：\n\n```\na = 1,*n = 2,*m = 2\n&a=n=m\n```\n\n​\t\t奇怪，指针n，m的确指向了地址&a，之中的内容的确也修改成了2，可为什么字段a的值依旧是1？\n\n​\t\t经过多方查阅资料和自己的试验，原来对于常字段在预编译的过程中编译器就会给常字段预定义为初始化的值，类似宏定义一般，尽管内存的内容被改变了，但是常字段的值依旧被预定义为初始化的值。\n\n​\t\t但是，我就疑问了，既然const_cast就是用来修改const字段的，可是只是改变了其内存的值，字段的值依旧没变，那么程序里使用该字段的地方的值依旧没有改变，如此const_cast似乎没有达到想要的结果。\n\n​\t\t$\\color{red}{不过const_cast似乎可以修改const标识的结构体对象中没有再用const标识的字段，也可以修改用const标识的类对象中没有用const标识的公有字段，但是在结构体或类中用const标识的字段就不能再修改了。}$\n\n![](【C++】C++中的四种转换类型/Snipaste_2019-09-12_10-44-16.png)\n\n# 2.static_cast\n\n​\tstatic_cast类型转换的用法几乎和C中的基本类型转换的用法一致，而C++的static_cast类型转换增加l类型检查，在安全性上较C要强。\n\n​\tstatic_cast支持所有类型之间的转换包括类，对于类在继承过程中的类型转换有两点是需要注意的，一、static_cast类型转换在上行转换是安全的，在下行转换是不安全，（上行转换：从子类转换到父类，下行转换：从父类转换到子类），二、static_cast类型转换在类的转换中因该使用指针转换，即通过指针间接的实现转换，直接对类的对象进行转换类型会被裁剪，并且在下行转换中不使用指针会报错。\n\n![](【C++】C++中的四种转换类型/Snipaste_2019-09-12_11-51-30.png)\n\n# 3.dynamic_cast\n\n​\tdynamic_cast类型转换用于类之间的上下行转换，与static_cast不同的是，dynamic_cast类型转换无论上下行都具有类型检查，都可以进行安全的类型转换。上行转换dynamic_cast与static_cast完全一致，下行转换dynamic_cast比static_cast更安全\n\n# 4.reinterpret_cast\n\n​\treinterpret_cast类型转换只能对指针进行操作，reinterpret_cast类型转换提供的是一种更底层的转换模式--比特位上的重新解释，即对某一类型的内存地址的比特位以另一种类型来解释，这可能不好理解，在这放一张图来辅助理解。\n\n![](【C++】C++中的四种转换类型/Snipaste_2019-09-12_16-32-44.png)\n\n​\tp是指向字符串的char类型指针，i是指向整型的指针，i = reinterpret_cast<int*>(p)则将p所指向的内存里的比特位以int类型来重新解释并复制到i所指向的内存地址上，于是在输出 *i 时，输出的是一个整型的数值。\n\nreinterret_cast可以说是一个安全的强制类型转换了。 \n\n​\t至于为什么cout<<p时不是输出的p所指向的地址而是地址里的内容，我始终没有弄明白，不过不影响对reinterpret_cast类型转换的理解。","slug":"【C++】C++中的四种转换类型","published":1,"updated":"2021-02-01T13:31:01.805Z","_id":"ckk9hocah0006dwr78y3x38ht","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>C++提供四种类型转换：const_cast、static_cast、dynamic_cast、reinterpret_cast</p>\n<h1 id=\"1-const-cast\"><a href=\"#1-const-cast\" class=\"headerlink\" title=\"1.const_cast\"></a>1.const_cast</h1><p>​    const_cast的存在主要就是针对const字段，C++提供const_cast的目的就是为了消除const字段的const属性，让const字段也可以修改。</p>\n<p>​    const_cast的用法：</p>\n<p>​        const_cast只能将常指针转换为非常指针，不能直接将常字段转换为非常字段，只能通过指针类间接的修改常字段所在的内存的内容。</p>\n<p>​        例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span>* n = &amp;a;<br><span class=\"hljs-keyword\">int</span>* m = <span class=\"hljs-keyword\">const_cast</span>&lt;<span class=\"hljs-keyword\">int</span>*&gt;(n) ;<br>*m = <span class=\"hljs-number\">2</span>;<br></code></pre></td></tr></table></figure>\n<p>​    最终的输出结果：</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\"><span class=\"hljs-attr\">a</span> = <span class=\"hljs-number\">1</span>,*<span class=\"hljs-attr\">n</span> = <span class=\"hljs-number\">2</span>,*<span class=\"hljs-attr\">m</span> = <span class=\"hljs-number\">2</span><br>&amp;<span class=\"hljs-attr\">a=n=m</span><br></code></pre></td></tr></table></figure>\n<p>​        奇怪，指针n，m的确指向了地址&amp;a，之中的内容的确也修改成了2，可为什么字段a的值依旧是1？</p>\n<p>​        经过多方查阅资料和自己的试验，原来对于常字段在预编译的过程中编译器就会给常字段预定义为初始化的值，类似宏定义一般，尽管内存的内容被改变了，但是常字段的值依旧被预定义为初始化的值。</p>\n<p>​        但是，我就疑问了，既然const_cast就是用来修改const字段的，可是只是改变了其内存的值，字段的值依旧没变，那么程序里使用该字段的地方的值依旧没有改变，如此const_cast似乎没有达到想要的结果。</p>\n<p>​        $\\color{red}{不过const_cast似乎可以修改const标识的结构体对象中没有再用const标识的字段，也可以修改用const标识的类对象中没有用const标识的公有字段，但是在结构体或类中用const标识的字段就不能再修改了。}$</p>\n<p><img src=\"/2019/09/12/%E3%80%90C++%E3%80%91C++%E4%B8%AD%E7%9A%84%E5%9B%9B%E7%A7%8D%E8%BD%AC%E6%8D%A2%E7%B1%BB%E5%9E%8B/Snipaste_2019-09-12_10-44-16.png\"></p>\n<h1 id=\"2-static-cast\"><a href=\"#2-static-cast\" class=\"headerlink\" title=\"2.static_cast\"></a>2.static_cast</h1><p>​    static_cast类型转换的用法几乎和C中的基本类型转换的用法一致，而C++的static_cast类型转换增加l类型检查，在安全性上较C要强。</p>\n<p>​    static_cast支持所有类型之间的转换包括类，对于类在继承过程中的类型转换有两点是需要注意的，一、static_cast类型转换在上行转换是安全的，在下行转换是不安全，（上行转换：从子类转换到父类，下行转换：从父类转换到子类），二、static_cast类型转换在类的转换中因该使用指针转换，即通过指针间接的实现转换，直接对类的对象进行转换类型会被裁剪，并且在下行转换中不使用指针会报错。</p>\n<p><img src=\"/2019/09/12/%E3%80%90C++%E3%80%91C++%E4%B8%AD%E7%9A%84%E5%9B%9B%E7%A7%8D%E8%BD%AC%E6%8D%A2%E7%B1%BB%E5%9E%8B/Snipaste_2019-09-12_11-51-30.png\"></p>\n<h1 id=\"3-dynamic-cast\"><a href=\"#3-dynamic-cast\" class=\"headerlink\" title=\"3.dynamic_cast\"></a>3.dynamic_cast</h1><p>​    dynamic_cast类型转换用于类之间的上下行转换，与static_cast不同的是，dynamic_cast类型转换无论上下行都具有类型检查，都可以进行安全的类型转换。上行转换dynamic_cast与static_cast完全一致，下行转换dynamic_cast比static_cast更安全</p>\n<h1 id=\"4-reinterpret-cast\"><a href=\"#4-reinterpret-cast\" class=\"headerlink\" title=\"4.reinterpret_cast\"></a>4.reinterpret_cast</h1><p>​    reinterpret_cast类型转换只能对指针进行操作，reinterpret_cast类型转换提供的是一种更底层的转换模式–比特位上的重新解释，即对某一类型的内存地址的比特位以另一种类型来解释，这可能不好理解，在这放一张图来辅助理解。</p>\n<p><img src=\"/2019/09/12/%E3%80%90C++%E3%80%91C++%E4%B8%AD%E7%9A%84%E5%9B%9B%E7%A7%8D%E8%BD%AC%E6%8D%A2%E7%B1%BB%E5%9E%8B/Snipaste_2019-09-12_16-32-44.png\"></p>\n<p>​    p是指向字符串的char类型指针，i是指向整型的指针，i = reinterpret_cast&lt;int*&gt;(p)则将p所指向的内存里的比特位以int类型来重新解释并复制到i所指向的内存地址上，于是在输出 *i 时，输出的是一个整型的数值。</p>\n<p>reinterret_cast可以说是一个安全的强制类型转换了。 </p>\n<p>​    至于为什么cout&lt;&lt;p时不是输出的p所指向的地址而是地址里的内容，我始终没有弄明白，不过不影响对reinterpret_cast类型转换的理解。</p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>C++提供四种类型转换：const_cast、static_cast、dynamic_cast、reinterpret_cast</p>\n<h1 id=\"1-const-cast\"><a href=\"#1-const-cast\" class=\"headerlink\" title=\"1.const_cast\"></a>1.const_cast</h1><p>​    const_cast的存在主要就是针对const字段，C++提供const_cast的目的就是为了消除const字段的const属性，让const字段也可以修改。</p>\n<p>​    const_cast的用法：</p>\n<p>​        const_cast只能将常指针转换为非常指针，不能直接将常字段转换为非常字段，只能通过指针类间接的修改常字段所在的内存的内容。</p>\n<p>​        例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span>* n = &amp;a;<br><span class=\"hljs-keyword\">int</span>* m = <span class=\"hljs-keyword\">const_cast</span>&lt;<span class=\"hljs-keyword\">int</span>*&gt;(n) ;<br>*m = <span class=\"hljs-number\">2</span>;<br></code></pre></td></tr></table></figure>\n<p>​    最终的输出结果：</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\"><span class=\"hljs-attr\">a</span> = <span class=\"hljs-number\">1</span>,*<span class=\"hljs-attr\">n</span> = <span class=\"hljs-number\">2</span>,*<span class=\"hljs-attr\">m</span> = <span class=\"hljs-number\">2</span><br>&amp;<span class=\"hljs-attr\">a=n=m</span><br></code></pre></td></tr></table></figure>\n<p>​        奇怪，指针n，m的确指向了地址&amp;a，之中的内容的确也修改成了2，可为什么字段a的值依旧是1？</p>\n<p>​        经过多方查阅资料和自己的试验，原来对于常字段在预编译的过程中编译器就会给常字段预定义为初始化的值，类似宏定义一般，尽管内存的内容被改变了，但是常字段的值依旧被预定义为初始化的值。</p>\n<p>​        但是，我就疑问了，既然const_cast就是用来修改const字段的，可是只是改变了其内存的值，字段的值依旧没变，那么程序里使用该字段的地方的值依旧没有改变，如此const_cast似乎没有达到想要的结果。</p>\n<p>​        $\\color{red}{不过const_cast似乎可以修改const标识的结构体对象中没有再用const标识的字段，也可以修改用const标识的类对象中没有用const标识的公有字段，但是在结构体或类中用const标识的字段就不能再修改了。}$</p>\n<p><img src=\"/2019/09/12/%E3%80%90C++%E3%80%91C++%E4%B8%AD%E7%9A%84%E5%9B%9B%E7%A7%8D%E8%BD%AC%E6%8D%A2%E7%B1%BB%E5%9E%8B/Snipaste_2019-09-12_10-44-16.png\"></p>\n<h1 id=\"2-static-cast\"><a href=\"#2-static-cast\" class=\"headerlink\" title=\"2.static_cast\"></a>2.static_cast</h1><p>​    static_cast类型转换的用法几乎和C中的基本类型转换的用法一致，而C++的static_cast类型转换增加l类型检查，在安全性上较C要强。</p>\n<p>​    static_cast支持所有类型之间的转换包括类，对于类在继承过程中的类型转换有两点是需要注意的，一、static_cast类型转换在上行转换是安全的，在下行转换是不安全，（上行转换：从子类转换到父类，下行转换：从父类转换到子类），二、static_cast类型转换在类的转换中因该使用指针转换，即通过指针间接的实现转换，直接对类的对象进行转换类型会被裁剪，并且在下行转换中不使用指针会报错。</p>\n<p><img src=\"/2019/09/12/%E3%80%90C++%E3%80%91C++%E4%B8%AD%E7%9A%84%E5%9B%9B%E7%A7%8D%E8%BD%AC%E6%8D%A2%E7%B1%BB%E5%9E%8B/Snipaste_2019-09-12_11-51-30.png\"></p>\n<h1 id=\"3-dynamic-cast\"><a href=\"#3-dynamic-cast\" class=\"headerlink\" title=\"3.dynamic_cast\"></a>3.dynamic_cast</h1><p>​    dynamic_cast类型转换用于类之间的上下行转换，与static_cast不同的是，dynamic_cast类型转换无论上下行都具有类型检查，都可以进行安全的类型转换。上行转换dynamic_cast与static_cast完全一致，下行转换dynamic_cast比static_cast更安全</p>\n<h1 id=\"4-reinterpret-cast\"><a href=\"#4-reinterpret-cast\" class=\"headerlink\" title=\"4.reinterpret_cast\"></a>4.reinterpret_cast</h1><p>​    reinterpret_cast类型转换只能对指针进行操作，reinterpret_cast类型转换提供的是一种更底层的转换模式–比特位上的重新解释，即对某一类型的内存地址的比特位以另一种类型来解释，这可能不好理解，在这放一张图来辅助理解。</p>\n<p><img src=\"/2019/09/12/%E3%80%90C++%E3%80%91C++%E4%B8%AD%E7%9A%84%E5%9B%9B%E7%A7%8D%E8%BD%AC%E6%8D%A2%E7%B1%BB%E5%9E%8B/Snipaste_2019-09-12_16-32-44.png\"></p>\n<p>​    p是指向字符串的char类型指针，i是指向整型的指针，i = reinterpret_cast&lt;int*&gt;(p)则将p所指向的内存里的比特位以int类型来重新解释并复制到i所指向的内存地址上，于是在输出 *i 时，输出的是一个整型的数值。</p>\n<p>reinterret_cast可以说是一个安全的强制类型转换了。 </p>\n<p>​    至于为什么cout&lt;&lt;p时不是输出的p所指向的地址而是地址里的内容，我始终没有弄明白，不过不影响对reinterpret_cast类型转换的理解。</p>\n"},{"title":"【C++】C++函数模板的实现机制剖析","date":"2019-10-03T12:14:23.000Z","_content":"\n\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 函数模板的实现机制剖析\n\n要剖析函数模板的实现机制，我们要先了解程序的编译过程，这里以gcc为例\n\n![](【C++】C++函数模板的实现机制剖析/Snipaste_2019-10-03_16-51-51.png)\n\n这里对下面代码进行剖析\n\n```c++\n#include \"stdafx.h\"//这是VS的固有头文件\n#include <iostream>\nusing namespace std;\n\ntemplate <typename T>\nvoid Fun(T a,T b)\n{\n\ta = a + b;\n\tcout << \"我是函数模板\" << endl;\n}\nint main()\n{\n\tFun(1, 2);\n\tFun(0.1, 0.2);\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n打开控制台，使用命令生成汇编文件(当然环境变量里需要有g++编译器的路径才能这样使用，具体操作放在文末)\n\n```shell\ng++ -S 1.cpp -o 1.s\n```\n\n我们来查看汇编文件\n\n```pascal\n\t.file\t\"C++.cpp\"\n.lcomm __ZStL8__ioinit,1,1\n\t.def\t___main;\t.scl\t2;\t.type\t32;\t.endef\n\t.section .rdata,\"dr\"\nLC2:\n\t.ascii \"pause\\0\"\n\t.text\n\t.globl\t_main\n\t.def\t_main;\t.scl\t2;\t.type\t32;\t.endef\n_main:\nLFB1062:\n\t.cfi_startproc\n\tpushl\t%ebp\n\t.cfi_def_cfa_offset 8\n\t.cfi_offset 5, -8\n\tmovl\t%esp, %ebp\n\t.cfi_def_cfa_register 5\n\tandl\t$-16, %esp\n\tsubl\t$16, %esp\n\tcall\t___main//--------------进入main函数\n\tmovl\t$2, 4(%esp)\n\tmovl\t$1, (%esp)\n\tcall\t__Z3FunIiEvT_S0_//-----第一次调用函数模板\n\tfldl\tLC0\n\tfstpl\t8(%esp)\n\tfldl\tLC1\n\tfstpl\t(%esp)\n\tcall\t__Z3FunIdEvT_S0_//-----第二次调用函数模板\n\tmovl\t$LC2, (%esp)\n\tcall\t_system\n\tmovl\t$0, %eax\n\tleave\n\t.cfi_restore 5\n\t.cfi_def_cfa 4, 4\n\tret\n\t.cfi_endproc\nLFE1062:\n\t.section .rdata,\"dr\"\nLC4:\n\t.ascii \"\\316\\322\\312\\307\\272\\257\\312\\375\\304\\243\\260\\345\\0\"\n\t.section\t.text$_Z3FunIiEvT_S0_,\"x\"\n\t.linkonce discard\n\t.globl\t__Z3FunIiEvT_S0_\n\t.def\t__Z3FunIiEvT_S0_;\t.scl\t2;\t.type\t32;\t.endef\n__Z3FunIiEvT_S0_://------------第一次调用时函数模板的具体实现\nLFB1063:\n\t.cfi_startproc\n\tpushl\t%ebp\n\t.cfi_def_cfa_offset 8\n\t.cfi_offset 5, -8\n\tmovl\t%esp, %ebp\n\t.cfi_def_cfa_register 5\n\tsubl\t$24, %esp\n\tmovl\t12(%ebp), %eax\n\taddl\t%eax, 8(%ebp)\n\tmovl\t$LC4, 4(%esp)\n\tmovl\t$__ZSt4cout, (%esp)\n\tcall\t__ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc\n\tmovl\t$__ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, (%esp)\n\tmovl\t%eax, %ecx\n\tcall\t__ZNSolsEPFRSoS_E\n\tsubl\t$4, %esp\n\tnop\n\tleave\n\t.cfi_restore 5\n\t.cfi_def_cfa 4, 4\n\tret\n\t.cfi_endproc\nLFE1063:\n\t.section\t.text$_Z3FunIdEvT_S0_,\"x\"\n\t.linkonce discard\n\t.globl\t__Z3FunIdEvT_S0_//-第二次调用时函数模板的具体实现\n\t.def\t__Z3FunIdEvT_S0_;\t.scl\t2;\t.type\t32;\t.endef\n__Z3FunIdEvT_S0_:\nLFB1064:\n\t.cfi_startproc\n\tpushl\t%ebp\n\t.cfi_def_cfa_offset 8\n\t.cfi_offset 5, -8\n\tmovl\t%esp, %ebp\n\t.cfi_def_cfa_register 5\n\tsubl\t$40, %esp\n\tmovl\t8(%ebp), %eax\n\tmovl\t%eax, -16(%ebp)\n\tmovl\t12(%ebp), %eax\n\tmovl\t%eax, -12(%ebp)\n\tmovl\t16(%ebp), %eax\n\tmovl\t%eax, -24(%ebp)\n\tmovl\t20(%ebp), %eax\n\tmovl\t%eax, -20(%ebp)\n\tfldl\t-16(%ebp)\n\tfaddl\t-24(%ebp)\n\tfstpl\t-16(%ebp)\n\tmovl\t$LC4, 4(%esp)\n\tmovl\t$__ZSt4cout, (%esp)\n\tcall\t__ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc\n\tmovl\t$__ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, (%esp)\n\tmovl\t%eax, %ecx\n\tcall\t__ZNSolsEPFRSoS_E\n\tsubl\t$4, %esp\n\tnop\n\tleave\n\t.cfi_restore 5\n\t.cfi_def_cfa 4, 4\n\tret\n\t.cfi_endproc\nLFE1064:\n\t.text\n\t.def\t___tcf_0;\t.scl\t3;\t.type\t32;\t.endef\n___tcf_0:\nLFB1074:\n\t.cfi_startproc\n\tpushl\t%ebp\n\t.cfi_def_cfa_offset 8\n\t.cfi_offset 5, -8\n\tmovl\t%esp, %ebp\n\t.cfi_def_cfa_register 5\n\tsubl\t$8, %esp\n\tmovl\t$__ZStL8__ioinit, %ecx\n\tcall\t__ZNSt8ios_base4InitD1Ev\n\tleave\n\t.cfi_restore 5\n\t.cfi_def_cfa 4, 4\n\tret\n\t.cfi_endproc\nLFE1074:\n\t.def\t__Z41__static_initialization_and_destruction_0ii;\t.scl\t3;\t.type\t32;\t.endef\n__Z41__static_initialization_and_destruction_0ii:\nLFB1073:\n\t.cfi_startproc\n\tpushl\t%ebp\n\t.cfi_def_cfa_offset 8\n\t.cfi_offset 5, -8\n\tmovl\t%esp, %ebp\n\t.cfi_def_cfa_register 5\n\tsubl\t$24, %esp\n\tcmpl\t$1, 8(%ebp)\n\tjne\tL8\n\tcmpl\t$65535, 12(%ebp)\n\tjne\tL8\n\tmovl\t$__ZStL8__ioinit, %ecx\n\tcall\t__ZNSt8ios_base4InitC1Ev\n\tmovl\t$___tcf_0, (%esp)\n\tcall\t_atexit\nL8:\n\tnop\n\tleave\n\t.cfi_restore 5\n\t.cfi_def_cfa 4, 4\n\tret\n\t.cfi_endproc\nLFE1073:\n\t.def\t__GLOBAL__sub_I_main;\t.scl\t3;\t.type\t32;\t.endef\n__GLOBAL__sub_I_main:\nLFB1075:\n\t.cfi_startproc\n\tpushl\t%ebp\n\t.cfi_def_cfa_offset 8\n\t.cfi_offset 5, -8\n\tmovl\t%esp, %ebp\n\t.cfi_def_cfa_register 5\n\tsubl\t$24, %esp\n\tmovl\t$65535, 4(%esp)\n\tmovl\t$1, (%esp)\n\tcall\t__Z41__static_initialization_and_destruction_0ii\n\tleave\n\t.cfi_restore 5\n\t.cfi_def_cfa 4, 4\n\tret\n\t.cfi_endproc\nLFE1075:\n\t.section\t.ctors,\"w\"\n\t.align 4\n\t.long\t__GLOBAL__sub_I_main\n\t.section .rdata,\"dr\"\n\t.align 8\nLC0:\n\t.long\t-1717986918\n\t.long\t1070176665\n\t.align 8\nLC1:\n\t.long\t-1717986918\n\t.long\t1069128089\n\t.ident\t\"GCC: (i686-posix-dwarf-rev0, Built by MinGW-W64 project) 5.3.0\"\n\t.def\t_system;\t.scl\t2;\t.type\t32;\t.endef\n\t.def\t__ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc;\t.scl\t2;\t.type\t32;\t.endef\n\t.def\t__ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_;\t.scl\t2;\t.type\t32;\t.endef\n\t.def\t__ZNSolsEPFRSoS_E;\t.scl\t2;\t.type\t32;\t.endef\n\t.def\t__ZNSt8ios_base4InitD1Ev;\t.scl\t2;\t.type\t32;\t.endef\n\t.def\t__ZNSt8ios_base4InitC1Ev;\t.scl\t2;\t.type\t32;\t.endef\n\t.def\t_atexit;\t.scl\t2;\t.type\t32;\t.endef\n```\n\n可以看到，在汇编码中编译器将模板`void Fun(T a,T b)`分别针对类型`int`和类型`float`进行了两次具体实现，这不是和没有使用模板，直接写两个函数一样么？没错就是一样的，只是C++将这个工作交从程序员手里移交给了编译器来做。\n\n事实上C++对函数模板进行了<font color=red>两次编译</font>，第一次编译仅仅生成一个函数头，第二次编译则是在函数调用时根据模板的类型参数列表具体的实现这个模板对应的类型的函数实例，注意这里是根据类型参数列表来实现，而不是根据调用次数，如：\n\n```c++\nFun(1, 2);\nFun(0.1, 0.2);\n```\n\n编译器实现两个模板实例`int`和`float`\n\n```c++\nFun(1, 2);\nFun(3 ,4);\nFun(0.1, 0.2);\n```\n\n编译器还是实现两个模板实例`int`和`float`\n\n由此可以看出\n\n<font color=red> 编译器并不是把函数模板处理成能够处理任意类的函数</font>\n\n<font color=red>编译器将函数模板根据具体类型产生不同的函数</font>\n\n<font color=red>编译器会对函数模板进行两次编译，在申明的地方对模板代码本身进行编译，在调用的地方对参数替换后的代码进行编译。</font>\n\ng++命令的使用\n\n首先电脑里要有g++这个软件，我这里使用的是Qt里集成的g++软件\n\n![](【C++】C++函数模板的实现机制剖析/Snipaste_2019-10-03_19-57-21.png)\n\n然后右键我的电脑-->属性-->高级环境设置-->环境变量-->系统变量/Path-->编辑\n\n![](【C++】C++函数模板的实现机制剖析/Snipaste_2019-10-03_20-07-41.png)\n\n再然后新建-->将g++.exe所在的路径拷贝到新建的环境变量中\n\n![](【C++】C++函数模板的实现机制剖析/Snipaste_2019-10-03_20-08-21.png)\n\n测试一下，win+r-->cmd-->任意目录键入g++\n\n![](【C++】C++函数模板的实现机制剖析/Snipaste_2019-10-03_20-12-24.png)\n\n可以看到系统没有提示无此命令，说明配置成功","source":"_posts/【C++】C++函数模板的实现机制剖析.md","raw":"---\ntitle: 【C++】C++函数模板的实现机制剖析\ndate: 2019-10-03 20:14:23\ntags: C++\ncategories: 知识记录\n---\n\n\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 函数模板的实现机制剖析\n\n要剖析函数模板的实现机制，我们要先了解程序的编译过程，这里以gcc为例\n\n![](【C++】C++函数模板的实现机制剖析/Snipaste_2019-10-03_16-51-51.png)\n\n这里对下面代码进行剖析\n\n```c++\n#include \"stdafx.h\"//这是VS的固有头文件\n#include <iostream>\nusing namespace std;\n\ntemplate <typename T>\nvoid Fun(T a,T b)\n{\n\ta = a + b;\n\tcout << \"我是函数模板\" << endl;\n}\nint main()\n{\n\tFun(1, 2);\n\tFun(0.1, 0.2);\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n打开控制台，使用命令生成汇编文件(当然环境变量里需要有g++编译器的路径才能这样使用，具体操作放在文末)\n\n```shell\ng++ -S 1.cpp -o 1.s\n```\n\n我们来查看汇编文件\n\n```pascal\n\t.file\t\"C++.cpp\"\n.lcomm __ZStL8__ioinit,1,1\n\t.def\t___main;\t.scl\t2;\t.type\t32;\t.endef\n\t.section .rdata,\"dr\"\nLC2:\n\t.ascii \"pause\\0\"\n\t.text\n\t.globl\t_main\n\t.def\t_main;\t.scl\t2;\t.type\t32;\t.endef\n_main:\nLFB1062:\n\t.cfi_startproc\n\tpushl\t%ebp\n\t.cfi_def_cfa_offset 8\n\t.cfi_offset 5, -8\n\tmovl\t%esp, %ebp\n\t.cfi_def_cfa_register 5\n\tandl\t$-16, %esp\n\tsubl\t$16, %esp\n\tcall\t___main//--------------进入main函数\n\tmovl\t$2, 4(%esp)\n\tmovl\t$1, (%esp)\n\tcall\t__Z3FunIiEvT_S0_//-----第一次调用函数模板\n\tfldl\tLC0\n\tfstpl\t8(%esp)\n\tfldl\tLC1\n\tfstpl\t(%esp)\n\tcall\t__Z3FunIdEvT_S0_//-----第二次调用函数模板\n\tmovl\t$LC2, (%esp)\n\tcall\t_system\n\tmovl\t$0, %eax\n\tleave\n\t.cfi_restore 5\n\t.cfi_def_cfa 4, 4\n\tret\n\t.cfi_endproc\nLFE1062:\n\t.section .rdata,\"dr\"\nLC4:\n\t.ascii \"\\316\\322\\312\\307\\272\\257\\312\\375\\304\\243\\260\\345\\0\"\n\t.section\t.text$_Z3FunIiEvT_S0_,\"x\"\n\t.linkonce discard\n\t.globl\t__Z3FunIiEvT_S0_\n\t.def\t__Z3FunIiEvT_S0_;\t.scl\t2;\t.type\t32;\t.endef\n__Z3FunIiEvT_S0_://------------第一次调用时函数模板的具体实现\nLFB1063:\n\t.cfi_startproc\n\tpushl\t%ebp\n\t.cfi_def_cfa_offset 8\n\t.cfi_offset 5, -8\n\tmovl\t%esp, %ebp\n\t.cfi_def_cfa_register 5\n\tsubl\t$24, %esp\n\tmovl\t12(%ebp), %eax\n\taddl\t%eax, 8(%ebp)\n\tmovl\t$LC4, 4(%esp)\n\tmovl\t$__ZSt4cout, (%esp)\n\tcall\t__ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc\n\tmovl\t$__ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, (%esp)\n\tmovl\t%eax, %ecx\n\tcall\t__ZNSolsEPFRSoS_E\n\tsubl\t$4, %esp\n\tnop\n\tleave\n\t.cfi_restore 5\n\t.cfi_def_cfa 4, 4\n\tret\n\t.cfi_endproc\nLFE1063:\n\t.section\t.text$_Z3FunIdEvT_S0_,\"x\"\n\t.linkonce discard\n\t.globl\t__Z3FunIdEvT_S0_//-第二次调用时函数模板的具体实现\n\t.def\t__Z3FunIdEvT_S0_;\t.scl\t2;\t.type\t32;\t.endef\n__Z3FunIdEvT_S0_:\nLFB1064:\n\t.cfi_startproc\n\tpushl\t%ebp\n\t.cfi_def_cfa_offset 8\n\t.cfi_offset 5, -8\n\tmovl\t%esp, %ebp\n\t.cfi_def_cfa_register 5\n\tsubl\t$40, %esp\n\tmovl\t8(%ebp), %eax\n\tmovl\t%eax, -16(%ebp)\n\tmovl\t12(%ebp), %eax\n\tmovl\t%eax, -12(%ebp)\n\tmovl\t16(%ebp), %eax\n\tmovl\t%eax, -24(%ebp)\n\tmovl\t20(%ebp), %eax\n\tmovl\t%eax, -20(%ebp)\n\tfldl\t-16(%ebp)\n\tfaddl\t-24(%ebp)\n\tfstpl\t-16(%ebp)\n\tmovl\t$LC4, 4(%esp)\n\tmovl\t$__ZSt4cout, (%esp)\n\tcall\t__ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc\n\tmovl\t$__ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, (%esp)\n\tmovl\t%eax, %ecx\n\tcall\t__ZNSolsEPFRSoS_E\n\tsubl\t$4, %esp\n\tnop\n\tleave\n\t.cfi_restore 5\n\t.cfi_def_cfa 4, 4\n\tret\n\t.cfi_endproc\nLFE1064:\n\t.text\n\t.def\t___tcf_0;\t.scl\t3;\t.type\t32;\t.endef\n___tcf_0:\nLFB1074:\n\t.cfi_startproc\n\tpushl\t%ebp\n\t.cfi_def_cfa_offset 8\n\t.cfi_offset 5, -8\n\tmovl\t%esp, %ebp\n\t.cfi_def_cfa_register 5\n\tsubl\t$8, %esp\n\tmovl\t$__ZStL8__ioinit, %ecx\n\tcall\t__ZNSt8ios_base4InitD1Ev\n\tleave\n\t.cfi_restore 5\n\t.cfi_def_cfa 4, 4\n\tret\n\t.cfi_endproc\nLFE1074:\n\t.def\t__Z41__static_initialization_and_destruction_0ii;\t.scl\t3;\t.type\t32;\t.endef\n__Z41__static_initialization_and_destruction_0ii:\nLFB1073:\n\t.cfi_startproc\n\tpushl\t%ebp\n\t.cfi_def_cfa_offset 8\n\t.cfi_offset 5, -8\n\tmovl\t%esp, %ebp\n\t.cfi_def_cfa_register 5\n\tsubl\t$24, %esp\n\tcmpl\t$1, 8(%ebp)\n\tjne\tL8\n\tcmpl\t$65535, 12(%ebp)\n\tjne\tL8\n\tmovl\t$__ZStL8__ioinit, %ecx\n\tcall\t__ZNSt8ios_base4InitC1Ev\n\tmovl\t$___tcf_0, (%esp)\n\tcall\t_atexit\nL8:\n\tnop\n\tleave\n\t.cfi_restore 5\n\t.cfi_def_cfa 4, 4\n\tret\n\t.cfi_endproc\nLFE1073:\n\t.def\t__GLOBAL__sub_I_main;\t.scl\t3;\t.type\t32;\t.endef\n__GLOBAL__sub_I_main:\nLFB1075:\n\t.cfi_startproc\n\tpushl\t%ebp\n\t.cfi_def_cfa_offset 8\n\t.cfi_offset 5, -8\n\tmovl\t%esp, %ebp\n\t.cfi_def_cfa_register 5\n\tsubl\t$24, %esp\n\tmovl\t$65535, 4(%esp)\n\tmovl\t$1, (%esp)\n\tcall\t__Z41__static_initialization_and_destruction_0ii\n\tleave\n\t.cfi_restore 5\n\t.cfi_def_cfa 4, 4\n\tret\n\t.cfi_endproc\nLFE1075:\n\t.section\t.ctors,\"w\"\n\t.align 4\n\t.long\t__GLOBAL__sub_I_main\n\t.section .rdata,\"dr\"\n\t.align 8\nLC0:\n\t.long\t-1717986918\n\t.long\t1070176665\n\t.align 8\nLC1:\n\t.long\t-1717986918\n\t.long\t1069128089\n\t.ident\t\"GCC: (i686-posix-dwarf-rev0, Built by MinGW-W64 project) 5.3.0\"\n\t.def\t_system;\t.scl\t2;\t.type\t32;\t.endef\n\t.def\t__ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc;\t.scl\t2;\t.type\t32;\t.endef\n\t.def\t__ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_;\t.scl\t2;\t.type\t32;\t.endef\n\t.def\t__ZNSolsEPFRSoS_E;\t.scl\t2;\t.type\t32;\t.endef\n\t.def\t__ZNSt8ios_base4InitD1Ev;\t.scl\t2;\t.type\t32;\t.endef\n\t.def\t__ZNSt8ios_base4InitC1Ev;\t.scl\t2;\t.type\t32;\t.endef\n\t.def\t_atexit;\t.scl\t2;\t.type\t32;\t.endef\n```\n\n可以看到，在汇编码中编译器将模板`void Fun(T a,T b)`分别针对类型`int`和类型`float`进行了两次具体实现，这不是和没有使用模板，直接写两个函数一样么？没错就是一样的，只是C++将这个工作交从程序员手里移交给了编译器来做。\n\n事实上C++对函数模板进行了<font color=red>两次编译</font>，第一次编译仅仅生成一个函数头，第二次编译则是在函数调用时根据模板的类型参数列表具体的实现这个模板对应的类型的函数实例，注意这里是根据类型参数列表来实现，而不是根据调用次数，如：\n\n```c++\nFun(1, 2);\nFun(0.1, 0.2);\n```\n\n编译器实现两个模板实例`int`和`float`\n\n```c++\nFun(1, 2);\nFun(3 ,4);\nFun(0.1, 0.2);\n```\n\n编译器还是实现两个模板实例`int`和`float`\n\n由此可以看出\n\n<font color=red> 编译器并不是把函数模板处理成能够处理任意类的函数</font>\n\n<font color=red>编译器将函数模板根据具体类型产生不同的函数</font>\n\n<font color=red>编译器会对函数模板进行两次编译，在申明的地方对模板代码本身进行编译，在调用的地方对参数替换后的代码进行编译。</font>\n\ng++命令的使用\n\n首先电脑里要有g++这个软件，我这里使用的是Qt里集成的g++软件\n\n![](【C++】C++函数模板的实现机制剖析/Snipaste_2019-10-03_19-57-21.png)\n\n然后右键我的电脑-->属性-->高级环境设置-->环境变量-->系统变量/Path-->编辑\n\n![](【C++】C++函数模板的实现机制剖析/Snipaste_2019-10-03_20-07-41.png)\n\n再然后新建-->将g++.exe所在的路径拷贝到新建的环境变量中\n\n![](【C++】C++函数模板的实现机制剖析/Snipaste_2019-10-03_20-08-21.png)\n\n测试一下，win+r-->cmd-->任意目录键入g++\n\n![](【C++】C++函数模板的实现机制剖析/Snipaste_2019-10-03_20-12-24.png)\n\n可以看到系统没有提示无此命令，说明配置成功","slug":"【C++】C++函数模板的实现机制剖析","published":1,"updated":"2021-02-01T13:27:39.525Z","_id":"ckk9hocaj000adwr7ajrd7mo3","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"函数模板的实现机制剖析\"><a href=\"#函数模板的实现机制剖析\" class=\"headerlink\" title=\"函数模板的实现机制剖析\"></a>函数模板的实现机制剖析</h1><p>要剖析函数模板的实现机制，我们要先了解程序的编译过程，这里以gcc为例</p>\n<p><img src=\"/2019/10/03/%E3%80%90C++%E3%80%91C++%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/Snipaste_2019-10-03_16-51-51.png\"></p>\n<p>这里对下面代码进行剖析</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&quot;stdafx.h&quot;</span><span class=\"hljs-comment\">//这是VS的固有头文件</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Fun</span><span class=\"hljs-params\">(T a,T b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\ta = a + b;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;我是函数模板&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tFun(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br>\tFun(<span class=\"hljs-number\">0.1</span>, <span class=\"hljs-number\">0.2</span>);<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>打开控制台，使用命令生成汇编文件(当然环境变量里需要有g++编译器的路径才能这样使用，具体操作放在文末)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">g++ -S 1.cpp -o 1.s<br></code></pre></td></tr></table></figure>\n<p>我们来查看汇编文件</p>\n<figure class=\"highlight pascal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pascal\">\t.file\t&quot;C++.cpp&quot;<br>.lcomm __ZStL8__ioinit,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span><br>\t.def\t___main;\t.scl\t<span class=\"hljs-number\">2</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br>\t.section .rdata,&quot;dr&quot;<br>LC2:<br>\t.ascii &quot;pause\\0&quot;<br>\t.text<br>\t.globl\t_main<br>\t.def\t_main;\t.scl\t<span class=\"hljs-number\">2</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br>_main:<br>LFB1062:<br>\t.cfi_startproc<br>\tpushl\t%ebp<br>\t.cfi_def_cfa_offset <span class=\"hljs-number\">8</span><br>\t.cfi_offset <span class=\"hljs-number\">5</span>, -<span class=\"hljs-number\">8</span><br>\tmovl\t%esp, %ebp<br>\t.cfi_def_cfa_register <span class=\"hljs-number\">5</span><br>\tandl\t$-<span class=\"hljs-number\">16</span>, %esp<br>\tsubl\t<span class=\"hljs-number\">$16</span>, %esp<br>\tcall\t___main<span class=\"hljs-comment\">//--------------进入main函数</span><br>\tmovl\t<span class=\"hljs-number\">$2</span>, <span class=\"hljs-number\">4</span>(%esp)<br>\tmovl\t<span class=\"hljs-number\">$1</span>, (%esp)<br>\tcall\t__Z3FunIiEvT_S0_<span class=\"hljs-comment\">//-----第一次调用函数模板</span><br>\tfldl\tLC0<br>\tfstpl\t<span class=\"hljs-number\">8</span>(%esp)<br>\tfldl\tLC1<br>\tfstpl\t(%esp)<br>\tcall\t__Z3FunIdEvT_S0_<span class=\"hljs-comment\">//-----第二次调用函数模板</span><br>\tmovl\t$LC2, (%esp)<br>\tcall\t_system<br>\tmovl\t<span class=\"hljs-number\">$0</span>, %eax<br>\tleave<br>\t.cfi_restore <span class=\"hljs-number\">5</span><br>\t.cfi_def_cfa <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span><br>\tret<br>\t.cfi_endproc<br>LFE1062:<br>\t.section .rdata,&quot;dr&quot;<br>LC4:<br>\t.ascii &quot;\\316\\322\\312\\307\\272\\257\\312\\375\\304\\243\\260\\345\\0&quot;<br>\t.section\t.text$_Z3FunIiEvT_S0_,&quot;x&quot;<br>\t.linkonce discard<br>\t.globl\t__Z3FunIiEvT_S0_<br>\t.def\t__Z3FunIiEvT_S0_;\t.scl\t<span class=\"hljs-number\">2</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br>__Z3FunIiEvT_S0_:<span class=\"hljs-comment\">//------------第一次调用时函数模板的具体实现</span><br>LFB1063:<br>\t.cfi_startproc<br>\tpushl\t%ebp<br>\t.cfi_def_cfa_offset <span class=\"hljs-number\">8</span><br>\t.cfi_offset <span class=\"hljs-number\">5</span>, -<span class=\"hljs-number\">8</span><br>\tmovl\t%esp, %ebp<br>\t.cfi_def_cfa_register <span class=\"hljs-number\">5</span><br>\tsubl\t<span class=\"hljs-number\">$24</span>, %esp<br>\tmovl\t<span class=\"hljs-number\">12</span>(%ebp), %eax<br>\taddl\t%eax, <span class=\"hljs-number\">8</span>(%ebp)<br>\tmovl\t$LC4, 4(%esp)<br>\tmovl\t$__ZSt4cout, (%esp)<br>\tcall\t__ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc<br>\tmovl\t$__ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, (%esp)<br>\tmovl\t%eax, %ecx<br>\tcall\t__ZNSolsEPFRSoS_E<br>\tsubl\t<span class=\"hljs-number\">$4</span>, %esp<br>\tnop<br>\tleave<br>\t.cfi_restore <span class=\"hljs-number\">5</span><br>\t.cfi_def_cfa <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span><br>\tret<br>\t.cfi_endproc<br>LFE1063:<br>\t.section\t.text$_Z3FunIdEvT_S0_,&quot;x&quot;<br>\t.linkonce discard<br>\t.globl\t__Z3FunIdEvT_S0_<span class=\"hljs-comment\">//-第二次调用时函数模板的具体实现</span><br>\t.def\t__Z3FunIdEvT_S0_;\t.scl\t<span class=\"hljs-number\">2</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br>__Z3FunIdEvT_S0_:<br>LFB1064:<br>\t.cfi_startproc<br>\tpushl\t%ebp<br>\t.cfi_def_cfa_offset <span class=\"hljs-number\">8</span><br>\t.cfi_offset <span class=\"hljs-number\">5</span>, -<span class=\"hljs-number\">8</span><br>\tmovl\t%esp, %ebp<br>\t.cfi_def_cfa_register <span class=\"hljs-number\">5</span><br>\tsubl\t<span class=\"hljs-number\">$40</span>, %esp<br>\tmovl\t<span class=\"hljs-number\">8</span>(%ebp), %eax<br>\tmovl\t%eax, -<span class=\"hljs-number\">16</span>(%ebp)<br>\tmovl\t<span class=\"hljs-number\">12</span>(%ebp), %eax<br>\tmovl\t%eax, -<span class=\"hljs-number\">12</span>(%ebp)<br>\tmovl\t<span class=\"hljs-number\">16</span>(%ebp), %eax<br>\tmovl\t%eax, -<span class=\"hljs-number\">24</span>(%ebp)<br>\tmovl\t<span class=\"hljs-number\">20</span>(%ebp), %eax<br>\tmovl\t%eax, -<span class=\"hljs-number\">20</span>(%ebp)<br>\tfldl\t-<span class=\"hljs-number\">16</span>(%ebp)<br>\tfaddl\t-<span class=\"hljs-number\">24</span>(%ebp)<br>\tfstpl\t-<span class=\"hljs-number\">16</span>(%ebp)<br>\tmovl\t$LC4, 4(%esp)<br>\tmovl\t$__ZSt4cout, (%esp)<br>\tcall\t__ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc<br>\tmovl\t$__ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, (%esp)<br>\tmovl\t%eax, %ecx<br>\tcall\t__ZNSolsEPFRSoS_E<br>\tsubl\t<span class=\"hljs-number\">$4</span>, %esp<br>\tnop<br>\tleave<br>\t.cfi_restore <span class=\"hljs-number\">5</span><br>\t.cfi_def_cfa <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span><br>\tret<br>\t.cfi_endproc<br>LFE1064:<br>\t.text<br>\t.def\t___tcf_0;\t.scl\t<span class=\"hljs-number\">3</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br>___tcf_0:<br>LFB1074:<br>\t.cfi_startproc<br>\tpushl\t%ebp<br>\t.cfi_def_cfa_offset <span class=\"hljs-number\">8</span><br>\t.cfi_offset <span class=\"hljs-number\">5</span>, -<span class=\"hljs-number\">8</span><br>\tmovl\t%esp, %ebp<br>\t.cfi_def_cfa_register <span class=\"hljs-number\">5</span><br>\tsubl\t<span class=\"hljs-number\">$8</span>, %esp<br>\tmovl\t$__ZStL8__ioinit, %ecx<br>\tcall\t__ZNSt8ios_base4InitD1Ev<br>\tleave<br>\t.cfi_restore <span class=\"hljs-number\">5</span><br>\t.cfi_def_cfa <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span><br>\tret<br>\t.cfi_endproc<br>LFE1074:<br>\t.def\t__Z41__static_initialization_and_destruction_0ii;\t.scl\t<span class=\"hljs-number\">3</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br>__Z41__static_initialization_and_destruction_0ii:<br>LFB1073:<br>\t.cfi_startproc<br>\tpushl\t%ebp<br>\t.cfi_def_cfa_offset <span class=\"hljs-number\">8</span><br>\t.cfi_offset <span class=\"hljs-number\">5</span>, -<span class=\"hljs-number\">8</span><br>\tmovl\t%esp, %ebp<br>\t.cfi_def_cfa_register <span class=\"hljs-number\">5</span><br>\tsubl\t<span class=\"hljs-number\">$24</span>, %esp<br>\tcmpl\t<span class=\"hljs-number\">$1</span>, <span class=\"hljs-number\">8</span>(%ebp)<br>\tjne\tL8<br>\tcmpl\t<span class=\"hljs-number\">$65535</span>, <span class=\"hljs-number\">12</span>(%ebp)<br>\tjne\tL8<br>\tmovl\t$__ZStL8__ioinit, %ecx<br>\tcall\t__ZNSt8ios_base4InitC1Ev<br>\tmovl\t$___tcf_0, (%esp)<br>\tcall\t_atexit<br>L8:<br>\tnop<br>\tleave<br>\t.cfi_restore <span class=\"hljs-number\">5</span><br>\t.cfi_def_cfa <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span><br>\tret<br>\t.cfi_endproc<br>LFE1073:<br>\t.def\t__GLOBAL__sub_I_main;\t.scl\t<span class=\"hljs-number\">3</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br>__GLOBAL__sub_I_main:<br>LFB1075:<br>\t.cfi_startproc<br>\tpushl\t%ebp<br>\t.cfi_def_cfa_offset <span class=\"hljs-number\">8</span><br>\t.cfi_offset <span class=\"hljs-number\">5</span>, -<span class=\"hljs-number\">8</span><br>\tmovl\t%esp, %ebp<br>\t.cfi_def_cfa_register <span class=\"hljs-number\">5</span><br>\tsubl\t<span class=\"hljs-number\">$24</span>, %esp<br>\tmovl\t<span class=\"hljs-number\">$65535</span>, <span class=\"hljs-number\">4</span>(%esp)<br>\tmovl\t<span class=\"hljs-number\">$1</span>, (%esp)<br>\tcall\t__Z41__static_initialization_and_destruction_0ii<br>\tleave<br>\t.cfi_restore <span class=\"hljs-number\">5</span><br>\t.cfi_def_cfa <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span><br>\tret<br>\t.cfi_endproc<br>LFE1075:<br>\t.section\t.ctors,&quot;w&quot;<br>\t.align <span class=\"hljs-number\">4</span><br>\t.long\t__GLOBAL__sub_I_main<br>\t.section .rdata,&quot;dr&quot;<br>\t.align <span class=\"hljs-number\">8</span><br>LC0:<br>\t.long\t-<span class=\"hljs-number\">1717986918</span><br>\t.long\t<span class=\"hljs-number\">1070176665</span><br>\t.align <span class=\"hljs-number\">8</span><br>LC1:<br>\t.long\t-<span class=\"hljs-number\">1717986918</span><br>\t.long\t<span class=\"hljs-number\">1069128089</span><br>\t.ident\t&quot;GCC: (i686-posix-dwarf-rev0, Built by MinGW-W64 project) 5.3.0&quot;<br>\t.def\t_system;\t.scl\t<span class=\"hljs-number\">2</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br>\t.def\t__ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc;\t.scl\t<span class=\"hljs-number\">2</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br>\t.def\t__ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_;\t.scl\t<span class=\"hljs-number\">2</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br>\t.def\t__ZNSolsEPFRSoS_E;\t.scl\t<span class=\"hljs-number\">2</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br>\t.def\t__ZNSt8ios_base4InitD1Ev;\t.scl\t<span class=\"hljs-number\">2</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br>\t.def\t__ZNSt8ios_base4InitC1Ev;\t.scl\t<span class=\"hljs-number\">2</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br>\t.def\t_atexit;\t.scl\t<span class=\"hljs-number\">2</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br></code></pre></td></tr></table></figure>\n<p>可以看到，在汇编码中编译器将模板<code>void Fun(T a,T b)</code>分别针对类型<code>int</code>和类型<code>float</code>进行了两次具体实现，这不是和没有使用模板，直接写两个函数一样么？没错就是一样的，只是C++将这个工作交从程序员手里移交给了编译器来做。</p>\n<p>事实上C++对函数模板进行了<font color=\"red\">两次编译</font>，第一次编译仅仅生成一个函数头，第二次编译则是在函数调用时根据模板的类型参数列表具体的实现这个模板对应的类型的函数实例，注意这里是根据类型参数列表来实现，而不是根据调用次数，如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">Fun(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br>Fun(<span class=\"hljs-number\">0.1</span>, <span class=\"hljs-number\">0.2</span>);<br></code></pre></td></tr></table></figure>\n<p>编译器实现两个模板实例<code>int</code>和<code>float</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">Fun(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br>Fun(<span class=\"hljs-number\">3</span> ,<span class=\"hljs-number\">4</span>);<br>Fun(<span class=\"hljs-number\">0.1</span>, <span class=\"hljs-number\">0.2</span>);<br></code></pre></td></tr></table></figure>\n<p>编译器还是实现两个模板实例<code>int</code>和<code>float</code></p>\n<p>由此可以看出</p>\n<p><font color=\"red\"> 编译器并不是把函数模板处理成能够处理任意类的函数</font></p>\n<p><font color=\"red\">编译器将函数模板根据具体类型产生不同的函数</font></p>\n<p><font color=\"red\">编译器会对函数模板进行两次编译，在申明的地方对模板代码本身进行编译，在调用的地方对参数替换后的代码进行编译。</font></p>\n<p>g++命令的使用</p>\n<p>首先电脑里要有g++这个软件，我这里使用的是Qt里集成的g++软件</p>\n<p><img src=\"/2019/10/03/%E3%80%90C++%E3%80%91C++%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/Snipaste_2019-10-03_19-57-21.png\"></p>\n<p>然后右键我的电脑–&gt;属性–&gt;高级环境设置–&gt;环境变量–&gt;系统变量/Path–&gt;编辑</p>\n<p><img src=\"/2019/10/03/%E3%80%90C++%E3%80%91C++%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/Snipaste_2019-10-03_20-07-41.png\"></p>\n<p>再然后新建–&gt;将g++.exe所在的路径拷贝到新建的环境变量中</p>\n<p><img src=\"/2019/10/03/%E3%80%90C++%E3%80%91C++%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/Snipaste_2019-10-03_20-08-21.png\"></p>\n<p>测试一下，win+r–&gt;cmd–&gt;任意目录键入g++</p>\n<p><img src=\"/2019/10/03/%E3%80%90C++%E3%80%91C++%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/Snipaste_2019-10-03_20-12-24.png\"></p>\n<p>可以看到系统没有提示无此命令，说明配置成功</p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"函数模板的实现机制剖析\"><a href=\"#函数模板的实现机制剖析\" class=\"headerlink\" title=\"函数模板的实现机制剖析\"></a>函数模板的实现机制剖析</h1><p>要剖析函数模板的实现机制，我们要先了解程序的编译过程，这里以gcc为例</p>\n<p><img src=\"/2019/10/03/%E3%80%90C++%E3%80%91C++%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/Snipaste_2019-10-03_16-51-51.png\"></p>\n<p>这里对下面代码进行剖析</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&quot;stdafx.h&quot;</span><span class=\"hljs-comment\">//这是VS的固有头文件</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Fun</span><span class=\"hljs-params\">(T a,T b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\ta = a + b;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;我是函数模板&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tFun(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br>\tFun(<span class=\"hljs-number\">0.1</span>, <span class=\"hljs-number\">0.2</span>);<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>打开控制台，使用命令生成汇编文件(当然环境变量里需要有g++编译器的路径才能这样使用，具体操作放在文末)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">g++ -S 1.cpp -o 1.s<br></code></pre></td></tr></table></figure>\n<p>我们来查看汇编文件</p>\n<figure class=\"highlight pascal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pascal\">\t.file\t&quot;C++.cpp&quot;<br>.lcomm __ZStL8__ioinit,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span><br>\t.def\t___main;\t.scl\t<span class=\"hljs-number\">2</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br>\t.section .rdata,&quot;dr&quot;<br>LC2:<br>\t.ascii &quot;pause\\0&quot;<br>\t.text<br>\t.globl\t_main<br>\t.def\t_main;\t.scl\t<span class=\"hljs-number\">2</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br>_main:<br>LFB1062:<br>\t.cfi_startproc<br>\tpushl\t%ebp<br>\t.cfi_def_cfa_offset <span class=\"hljs-number\">8</span><br>\t.cfi_offset <span class=\"hljs-number\">5</span>, -<span class=\"hljs-number\">8</span><br>\tmovl\t%esp, %ebp<br>\t.cfi_def_cfa_register <span class=\"hljs-number\">5</span><br>\tandl\t$-<span class=\"hljs-number\">16</span>, %esp<br>\tsubl\t<span class=\"hljs-number\">$16</span>, %esp<br>\tcall\t___main<span class=\"hljs-comment\">//--------------进入main函数</span><br>\tmovl\t<span class=\"hljs-number\">$2</span>, <span class=\"hljs-number\">4</span>(%esp)<br>\tmovl\t<span class=\"hljs-number\">$1</span>, (%esp)<br>\tcall\t__Z3FunIiEvT_S0_<span class=\"hljs-comment\">//-----第一次调用函数模板</span><br>\tfldl\tLC0<br>\tfstpl\t<span class=\"hljs-number\">8</span>(%esp)<br>\tfldl\tLC1<br>\tfstpl\t(%esp)<br>\tcall\t__Z3FunIdEvT_S0_<span class=\"hljs-comment\">//-----第二次调用函数模板</span><br>\tmovl\t$LC2, (%esp)<br>\tcall\t_system<br>\tmovl\t<span class=\"hljs-number\">$0</span>, %eax<br>\tleave<br>\t.cfi_restore <span class=\"hljs-number\">5</span><br>\t.cfi_def_cfa <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span><br>\tret<br>\t.cfi_endproc<br>LFE1062:<br>\t.section .rdata,&quot;dr&quot;<br>LC4:<br>\t.ascii &quot;\\316\\322\\312\\307\\272\\257\\312\\375\\304\\243\\260\\345\\0&quot;<br>\t.section\t.text$_Z3FunIiEvT_S0_,&quot;x&quot;<br>\t.linkonce discard<br>\t.globl\t__Z3FunIiEvT_S0_<br>\t.def\t__Z3FunIiEvT_S0_;\t.scl\t<span class=\"hljs-number\">2</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br>__Z3FunIiEvT_S0_:<span class=\"hljs-comment\">//------------第一次调用时函数模板的具体实现</span><br>LFB1063:<br>\t.cfi_startproc<br>\tpushl\t%ebp<br>\t.cfi_def_cfa_offset <span class=\"hljs-number\">8</span><br>\t.cfi_offset <span class=\"hljs-number\">5</span>, -<span class=\"hljs-number\">8</span><br>\tmovl\t%esp, %ebp<br>\t.cfi_def_cfa_register <span class=\"hljs-number\">5</span><br>\tsubl\t<span class=\"hljs-number\">$24</span>, %esp<br>\tmovl\t<span class=\"hljs-number\">12</span>(%ebp), %eax<br>\taddl\t%eax, <span class=\"hljs-number\">8</span>(%ebp)<br>\tmovl\t$LC4, 4(%esp)<br>\tmovl\t$__ZSt4cout, (%esp)<br>\tcall\t__ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc<br>\tmovl\t$__ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, (%esp)<br>\tmovl\t%eax, %ecx<br>\tcall\t__ZNSolsEPFRSoS_E<br>\tsubl\t<span class=\"hljs-number\">$4</span>, %esp<br>\tnop<br>\tleave<br>\t.cfi_restore <span class=\"hljs-number\">5</span><br>\t.cfi_def_cfa <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span><br>\tret<br>\t.cfi_endproc<br>LFE1063:<br>\t.section\t.text$_Z3FunIdEvT_S0_,&quot;x&quot;<br>\t.linkonce discard<br>\t.globl\t__Z3FunIdEvT_S0_<span class=\"hljs-comment\">//-第二次调用时函数模板的具体实现</span><br>\t.def\t__Z3FunIdEvT_S0_;\t.scl\t<span class=\"hljs-number\">2</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br>__Z3FunIdEvT_S0_:<br>LFB1064:<br>\t.cfi_startproc<br>\tpushl\t%ebp<br>\t.cfi_def_cfa_offset <span class=\"hljs-number\">8</span><br>\t.cfi_offset <span class=\"hljs-number\">5</span>, -<span class=\"hljs-number\">8</span><br>\tmovl\t%esp, %ebp<br>\t.cfi_def_cfa_register <span class=\"hljs-number\">5</span><br>\tsubl\t<span class=\"hljs-number\">$40</span>, %esp<br>\tmovl\t<span class=\"hljs-number\">8</span>(%ebp), %eax<br>\tmovl\t%eax, -<span class=\"hljs-number\">16</span>(%ebp)<br>\tmovl\t<span class=\"hljs-number\">12</span>(%ebp), %eax<br>\tmovl\t%eax, -<span class=\"hljs-number\">12</span>(%ebp)<br>\tmovl\t<span class=\"hljs-number\">16</span>(%ebp), %eax<br>\tmovl\t%eax, -<span class=\"hljs-number\">24</span>(%ebp)<br>\tmovl\t<span class=\"hljs-number\">20</span>(%ebp), %eax<br>\tmovl\t%eax, -<span class=\"hljs-number\">20</span>(%ebp)<br>\tfldl\t-<span class=\"hljs-number\">16</span>(%ebp)<br>\tfaddl\t-<span class=\"hljs-number\">24</span>(%ebp)<br>\tfstpl\t-<span class=\"hljs-number\">16</span>(%ebp)<br>\tmovl\t$LC4, 4(%esp)<br>\tmovl\t$__ZSt4cout, (%esp)<br>\tcall\t__ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc<br>\tmovl\t$__ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, (%esp)<br>\tmovl\t%eax, %ecx<br>\tcall\t__ZNSolsEPFRSoS_E<br>\tsubl\t<span class=\"hljs-number\">$4</span>, %esp<br>\tnop<br>\tleave<br>\t.cfi_restore <span class=\"hljs-number\">5</span><br>\t.cfi_def_cfa <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span><br>\tret<br>\t.cfi_endproc<br>LFE1064:<br>\t.text<br>\t.def\t___tcf_0;\t.scl\t<span class=\"hljs-number\">3</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br>___tcf_0:<br>LFB1074:<br>\t.cfi_startproc<br>\tpushl\t%ebp<br>\t.cfi_def_cfa_offset <span class=\"hljs-number\">8</span><br>\t.cfi_offset <span class=\"hljs-number\">5</span>, -<span class=\"hljs-number\">8</span><br>\tmovl\t%esp, %ebp<br>\t.cfi_def_cfa_register <span class=\"hljs-number\">5</span><br>\tsubl\t<span class=\"hljs-number\">$8</span>, %esp<br>\tmovl\t$__ZStL8__ioinit, %ecx<br>\tcall\t__ZNSt8ios_base4InitD1Ev<br>\tleave<br>\t.cfi_restore <span class=\"hljs-number\">5</span><br>\t.cfi_def_cfa <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span><br>\tret<br>\t.cfi_endproc<br>LFE1074:<br>\t.def\t__Z41__static_initialization_and_destruction_0ii;\t.scl\t<span class=\"hljs-number\">3</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br>__Z41__static_initialization_and_destruction_0ii:<br>LFB1073:<br>\t.cfi_startproc<br>\tpushl\t%ebp<br>\t.cfi_def_cfa_offset <span class=\"hljs-number\">8</span><br>\t.cfi_offset <span class=\"hljs-number\">5</span>, -<span class=\"hljs-number\">8</span><br>\tmovl\t%esp, %ebp<br>\t.cfi_def_cfa_register <span class=\"hljs-number\">5</span><br>\tsubl\t<span class=\"hljs-number\">$24</span>, %esp<br>\tcmpl\t<span class=\"hljs-number\">$1</span>, <span class=\"hljs-number\">8</span>(%ebp)<br>\tjne\tL8<br>\tcmpl\t<span class=\"hljs-number\">$65535</span>, <span class=\"hljs-number\">12</span>(%ebp)<br>\tjne\tL8<br>\tmovl\t$__ZStL8__ioinit, %ecx<br>\tcall\t__ZNSt8ios_base4InitC1Ev<br>\tmovl\t$___tcf_0, (%esp)<br>\tcall\t_atexit<br>L8:<br>\tnop<br>\tleave<br>\t.cfi_restore <span class=\"hljs-number\">5</span><br>\t.cfi_def_cfa <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span><br>\tret<br>\t.cfi_endproc<br>LFE1073:<br>\t.def\t__GLOBAL__sub_I_main;\t.scl\t<span class=\"hljs-number\">3</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br>__GLOBAL__sub_I_main:<br>LFB1075:<br>\t.cfi_startproc<br>\tpushl\t%ebp<br>\t.cfi_def_cfa_offset <span class=\"hljs-number\">8</span><br>\t.cfi_offset <span class=\"hljs-number\">5</span>, -<span class=\"hljs-number\">8</span><br>\tmovl\t%esp, %ebp<br>\t.cfi_def_cfa_register <span class=\"hljs-number\">5</span><br>\tsubl\t<span class=\"hljs-number\">$24</span>, %esp<br>\tmovl\t<span class=\"hljs-number\">$65535</span>, <span class=\"hljs-number\">4</span>(%esp)<br>\tmovl\t<span class=\"hljs-number\">$1</span>, (%esp)<br>\tcall\t__Z41__static_initialization_and_destruction_0ii<br>\tleave<br>\t.cfi_restore <span class=\"hljs-number\">5</span><br>\t.cfi_def_cfa <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span><br>\tret<br>\t.cfi_endproc<br>LFE1075:<br>\t.section\t.ctors,&quot;w&quot;<br>\t.align <span class=\"hljs-number\">4</span><br>\t.long\t__GLOBAL__sub_I_main<br>\t.section .rdata,&quot;dr&quot;<br>\t.align <span class=\"hljs-number\">8</span><br>LC0:<br>\t.long\t-<span class=\"hljs-number\">1717986918</span><br>\t.long\t<span class=\"hljs-number\">1070176665</span><br>\t.align <span class=\"hljs-number\">8</span><br>LC1:<br>\t.long\t-<span class=\"hljs-number\">1717986918</span><br>\t.long\t<span class=\"hljs-number\">1069128089</span><br>\t.ident\t&quot;GCC: (i686-posix-dwarf-rev0, Built by MinGW-W64 project) 5.3.0&quot;<br>\t.def\t_system;\t.scl\t<span class=\"hljs-number\">2</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br>\t.def\t__ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc;\t.scl\t<span class=\"hljs-number\">2</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br>\t.def\t__ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_;\t.scl\t<span class=\"hljs-number\">2</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br>\t.def\t__ZNSolsEPFRSoS_E;\t.scl\t<span class=\"hljs-number\">2</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br>\t.def\t__ZNSt8ios_base4InitD1Ev;\t.scl\t<span class=\"hljs-number\">2</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br>\t.def\t__ZNSt8ios_base4InitC1Ev;\t.scl\t<span class=\"hljs-number\">2</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br>\t.def\t_atexit;\t.scl\t<span class=\"hljs-number\">2</span>;\t.<span class=\"hljs-keyword\">type</span>\t<span class=\"hljs-number\">32</span>;\t.endef<br></code></pre></td></tr></table></figure>\n<p>可以看到，在汇编码中编译器将模板<code>void Fun(T a,T b)</code>分别针对类型<code>int</code>和类型<code>float</code>进行了两次具体实现，这不是和没有使用模板，直接写两个函数一样么？没错就是一样的，只是C++将这个工作交从程序员手里移交给了编译器来做。</p>\n<p>事实上C++对函数模板进行了<font color=\"red\">两次编译</font>，第一次编译仅仅生成一个函数头，第二次编译则是在函数调用时根据模板的类型参数列表具体的实现这个模板对应的类型的函数实例，注意这里是根据类型参数列表来实现，而不是根据调用次数，如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">Fun(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br>Fun(<span class=\"hljs-number\">0.1</span>, <span class=\"hljs-number\">0.2</span>);<br></code></pre></td></tr></table></figure>\n<p>编译器实现两个模板实例<code>int</code>和<code>float</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">Fun(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br>Fun(<span class=\"hljs-number\">3</span> ,<span class=\"hljs-number\">4</span>);<br>Fun(<span class=\"hljs-number\">0.1</span>, <span class=\"hljs-number\">0.2</span>);<br></code></pre></td></tr></table></figure>\n<p>编译器还是实现两个模板实例<code>int</code>和<code>float</code></p>\n<p>由此可以看出</p>\n<p><font color=\"red\"> 编译器并不是把函数模板处理成能够处理任意类的函数</font></p>\n<p><font color=\"red\">编译器将函数模板根据具体类型产生不同的函数</font></p>\n<p><font color=\"red\">编译器会对函数模板进行两次编译，在申明的地方对模板代码本身进行编译，在调用的地方对参数替换后的代码进行编译。</font></p>\n<p>g++命令的使用</p>\n<p>首先电脑里要有g++这个软件，我这里使用的是Qt里集成的g++软件</p>\n<p><img src=\"/2019/10/03/%E3%80%90C++%E3%80%91C++%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/Snipaste_2019-10-03_19-57-21.png\"></p>\n<p>然后右键我的电脑–&gt;属性–&gt;高级环境设置–&gt;环境变量–&gt;系统变量/Path–&gt;编辑</p>\n<p><img src=\"/2019/10/03/%E3%80%90C++%E3%80%91C++%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/Snipaste_2019-10-03_20-07-41.png\"></p>\n<p>再然后新建–&gt;将g++.exe所在的路径拷贝到新建的环境变量中</p>\n<p><img src=\"/2019/10/03/%E3%80%90C++%E3%80%91C++%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/Snipaste_2019-10-03_20-08-21.png\"></p>\n<p>测试一下，win+r–&gt;cmd–&gt;任意目录键入g++</p>\n<p><img src=\"/2019/10/03/%E3%80%90C++%E3%80%91C++%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/Snipaste_2019-10-03_20-12-24.png\"></p>\n<p>可以看到系统没有提示无此命令，说明配置成功</p>\n"},{"title":"【C++】C++面向对象模型初探","date":"2019-10-01T13:58:43.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 1.成员的分开存储\n\nC++通过将类的成员分开存储的方式来实现面向对象\n\n| 成员         | 存储位置                                                     |\n| ------------ | ------------------------------------------------------------ |\n| 普通成员变量 | 栈区，与struct变量有相同的内存布局和字节对齐方式             |\n| 静态成员变量 | 全局数据区，如此便可以使用类名和类所有的对象都可以访问       |\n| 成员函数     | 代码段，包括静态成员函数和非静态成员函数                     |\n| 虚函数       | 虚函数表指针(vfptr)存放在栈区，其指向的虚函数表有自身的内存存储空间 |\n\n# 2.C++类的内存分布\n\n要想更好的了解这些，我们还需了解C++类的内存分布\n\n![](【C++】C++面向对象模型初探/Snipaste_2019-10-02_09-07-09.png)\n\n## **Stack：** \n\n栈，存放Automatic Variables，按内存地址由高到低方向生长，其最大大小由编译时确定，速度快，但自由性差，最大空间不大。保存程序中的局部变量。\n\n## **Heap：** \n\n堆，自由申请的空间，按内存地址由低到高方向生长，其大小由系统内存/虚拟内存上限决定，速度较慢，但自由性大，可用空间大。 动态分配的内存在调用malloc（）或者相关函数产生，在调用free()时释放，由程序员决定而不是一系列规则规定内存持续时间，因此内存块可在一个函数中创建，在另一个函数中释放。由于这点，动态内存分配容易导致堆区内存碎片化。\n\n## **.Data：**\n\n 存放程序中<font color=red> 已经初始化的非零全局变量。静态分配。</font>\n\ndata又可分为读写（RW）区域和只读（RO）区域。 \n\n- RO段保存常量所以也被称为`.constdata` eg const数据\n- RW段则是普通非常全局变量，静态变量就在其中\n\n## **.Bss：** \n\n存放程序中**未初始化**的和零值全局变量。静态分配，在程序开始时通常会被清零。\n\n## **.Text：** \n\n也称为代码段(Code)，用来存放程序执行代码，同时也可能会包含一些常量(如一些字符串常量等）。该段内存为静态分配，只读(某些架构可能允许修改)。 \n这块内存是共享的,当有多个相同进程(Process)存在时，共用同一个text段。\n\n------\n\n普通成员变量存储在栈区，使得每一个类的对象都拥有各自独立的普通成员变量。\n\n静态成员变量存储在全局数据区，是的每一个类的对象都共享一份静态\n\n成员变量。\n\n# 3.this指针\n\n那么，存放在代码段的成员函数是怎么区分调用对象的呢？\n\n事实上，<font color=red> C++为每一个函数都隐式定义了一个函数所属类类型的指针形参--this，而this指针永远指向调用函数的对象</font>，如此函数便可以识别调用自身的是类的哪个对象了。\n\n这里有一点要注意，<font color=red> C++并没有为静态成员函数定义this指针，如此，静态成员函数被所有的对象共享</font>。\n\n# 4.总结\n\n通过成员的分开存储和普通成员函数的`this指针`C++便可以识别各个不同的对象，如此便实现了面向对象。","source":"_posts/【C++】C++面向对象模型初探.md","raw":"---\ntitle: 【C++】C++面向对象模型初探\ndate: 2019-10-01 21:58:43\ntags: C++\ncategories: 知识记录\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 1.成员的分开存储\n\nC++通过将类的成员分开存储的方式来实现面向对象\n\n| 成员         | 存储位置                                                     |\n| ------------ | ------------------------------------------------------------ |\n| 普通成员变量 | 栈区，与struct变量有相同的内存布局和字节对齐方式             |\n| 静态成员变量 | 全局数据区，如此便可以使用类名和类所有的对象都可以访问       |\n| 成员函数     | 代码段，包括静态成员函数和非静态成员函数                     |\n| 虚函数       | 虚函数表指针(vfptr)存放在栈区，其指向的虚函数表有自身的内存存储空间 |\n\n# 2.C++类的内存分布\n\n要想更好的了解这些，我们还需了解C++类的内存分布\n\n![](【C++】C++面向对象模型初探/Snipaste_2019-10-02_09-07-09.png)\n\n## **Stack：** \n\n栈，存放Automatic Variables，按内存地址由高到低方向生长，其最大大小由编译时确定，速度快，但自由性差，最大空间不大。保存程序中的局部变量。\n\n## **Heap：** \n\n堆，自由申请的空间，按内存地址由低到高方向生长，其大小由系统内存/虚拟内存上限决定，速度较慢，但自由性大，可用空间大。 动态分配的内存在调用malloc（）或者相关函数产生，在调用free()时释放，由程序员决定而不是一系列规则规定内存持续时间，因此内存块可在一个函数中创建，在另一个函数中释放。由于这点，动态内存分配容易导致堆区内存碎片化。\n\n## **.Data：**\n\n 存放程序中<font color=red> 已经初始化的非零全局变量。静态分配。</font>\n\ndata又可分为读写（RW）区域和只读（RO）区域。 \n\n- RO段保存常量所以也被称为`.constdata` eg const数据\n- RW段则是普通非常全局变量，静态变量就在其中\n\n## **.Bss：** \n\n存放程序中**未初始化**的和零值全局变量。静态分配，在程序开始时通常会被清零。\n\n## **.Text：** \n\n也称为代码段(Code)，用来存放程序执行代码，同时也可能会包含一些常量(如一些字符串常量等）。该段内存为静态分配，只读(某些架构可能允许修改)。 \n这块内存是共享的,当有多个相同进程(Process)存在时，共用同一个text段。\n\n------\n\n普通成员变量存储在栈区，使得每一个类的对象都拥有各自独立的普通成员变量。\n\n静态成员变量存储在全局数据区，是的每一个类的对象都共享一份静态\n\n成员变量。\n\n# 3.this指针\n\n那么，存放在代码段的成员函数是怎么区分调用对象的呢？\n\n事实上，<font color=red> C++为每一个函数都隐式定义了一个函数所属类类型的指针形参--this，而this指针永远指向调用函数的对象</font>，如此函数便可以识别调用自身的是类的哪个对象了。\n\n这里有一点要注意，<font color=red> C++并没有为静态成员函数定义this指针，如此，静态成员函数被所有的对象共享</font>。\n\n# 4.总结\n\n通过成员的分开存储和普通成员函数的`this指针`C++便可以识别各个不同的对象，如此便实现了面向对象。","slug":"【C++】C++面向对象模型初探","published":1,"updated":"2021-02-01T13:30:31.798Z","_id":"ckk9hocak000bdwr746nx9ti7","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"1-成员的分开存储\"><a href=\"#1-成员的分开存储\" class=\"headerlink\" title=\"1.成员的分开存储\"></a>1.成员的分开存储</h1><p>C++通过将类的成员分开存储的方式来实现面向对象</p>\n<table>\n<thead>\n<tr>\n<th>成员</th>\n<th>存储位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>普通成员变量</td>\n<td>栈区，与struct变量有相同的内存布局和字节对齐方式</td>\n</tr>\n<tr>\n<td>静态成员变量</td>\n<td>全局数据区，如此便可以使用类名和类所有的对象都可以访问</td>\n</tr>\n<tr>\n<td>成员函数</td>\n<td>代码段，包括静态成员函数和非静态成员函数</td>\n</tr>\n<tr>\n<td>虚函数</td>\n<td>虚函数表指针(vfptr)存放在栈区，其指向的虚函数表有自身的内存存储空间</td>\n</tr>\n</tbody></table>\n<h1 id=\"2-C-类的内存分布\"><a href=\"#2-C-类的内存分布\" class=\"headerlink\" title=\"2.C++类的内存分布\"></a>2.C++类的内存分布</h1><p>要想更好的了解这些，我们还需了解C++类的内存分布</p>\n<p><img src=\"/2019/10/01/%E3%80%90C++%E3%80%91C++%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E5%88%9D%E6%8E%A2/Snipaste_2019-10-02_09-07-09.png\"></p>\n<h2 id=\"Stack：\"><a href=\"#Stack：\" class=\"headerlink\" title=\"Stack：\"></a><strong>Stack：</strong></h2><p>栈，存放Automatic Variables，按内存地址由高到低方向生长，其最大大小由编译时确定，速度快，但自由性差，最大空间不大。保存程序中的局部变量。</p>\n<h2 id=\"Heap：\"><a href=\"#Heap：\" class=\"headerlink\" title=\"Heap：\"></a><strong>Heap：</strong></h2><p>堆，自由申请的空间，按内存地址由低到高方向生长，其大小由系统内存/虚拟内存上限决定，速度较慢，但自由性大，可用空间大。 动态分配的内存在调用malloc（）或者相关函数产生，在调用free()时释放，由程序员决定而不是一系列规则规定内存持续时间，因此内存块可在一个函数中创建，在另一个函数中释放。由于这点，动态内存分配容易导致堆区内存碎片化。</p>\n<h2 id=\"Data：\"><a href=\"#Data：\" class=\"headerlink\" title=\".Data：\"></a><strong>.Data：</strong></h2><p> 存放程序中<font color=\"red\"> 已经初始化的非零全局变量。静态分配。</font></p>\n<p>data又可分为读写（RW）区域和只读（RO）区域。 </p>\n<ul>\n<li>RO段保存常量所以也被称为<code>.constdata</code> eg const数据</li>\n<li>RW段则是普通非常全局变量，静态变量就在其中</li>\n</ul>\n<h2 id=\"Bss：\"><a href=\"#Bss：\" class=\"headerlink\" title=\".Bss：\"></a><strong>.Bss：</strong></h2><p>存放程序中<strong>未初始化</strong>的和零值全局变量。静态分配，在程序开始时通常会被清零。</p>\n<h2 id=\"Text：\"><a href=\"#Text：\" class=\"headerlink\" title=\".Text：\"></a><strong>.Text：</strong></h2><p>也称为代码段(Code)，用来存放程序执行代码，同时也可能会包含一些常量(如一些字符串常量等）。该段内存为静态分配，只读(某些架构可能允许修改)。<br>这块内存是共享的,当有多个相同进程(Process)存在时，共用同一个text段。</p>\n<hr>\n<p>普通成员变量存储在栈区，使得每一个类的对象都拥有各自独立的普通成员变量。</p>\n<p>静态成员变量存储在全局数据区，是的每一个类的对象都共享一份静态</p>\n<p>成员变量。</p>\n<h1 id=\"3-this指针\"><a href=\"#3-this指针\" class=\"headerlink\" title=\"3.this指针\"></a>3.this指针</h1><p>那么，存放在代码段的成员函数是怎么区分调用对象的呢？</p>\n<p>事实上，<font color=\"red\"> C++为每一个函数都隐式定义了一个函数所属类类型的指针形参–this，而this指针永远指向调用函数的对象</font>，如此函数便可以识别调用自身的是类的哪个对象了。</p>\n<p>这里有一点要注意，<font color=\"red\"> C++并没有为静态成员函数定义this指针，如此，静态成员函数被所有的对象共享</font>。</p>\n<h1 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4.总结\"></a>4.总结</h1><p>通过成员的分开存储和普通成员函数的<code>this指针</code>C++便可以识别各个不同的对象，如此便实现了面向对象。</p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"1-成员的分开存储\"><a href=\"#1-成员的分开存储\" class=\"headerlink\" title=\"1.成员的分开存储\"></a>1.成员的分开存储</h1><p>C++通过将类的成员分开存储的方式来实现面向对象</p>\n<table>\n<thead>\n<tr>\n<th>成员</th>\n<th>存储位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>普通成员变量</td>\n<td>栈区，与struct变量有相同的内存布局和字节对齐方式</td>\n</tr>\n<tr>\n<td>静态成员变量</td>\n<td>全局数据区，如此便可以使用类名和类所有的对象都可以访问</td>\n</tr>\n<tr>\n<td>成员函数</td>\n<td>代码段，包括静态成员函数和非静态成员函数</td>\n</tr>\n<tr>\n<td>虚函数</td>\n<td>虚函数表指针(vfptr)存放在栈区，其指向的虚函数表有自身的内存存储空间</td>\n</tr>\n</tbody></table>\n<h1 id=\"2-C-类的内存分布\"><a href=\"#2-C-类的内存分布\" class=\"headerlink\" title=\"2.C++类的内存分布\"></a>2.C++类的内存分布</h1><p>要想更好的了解这些，我们还需了解C++类的内存分布</p>\n<p><img src=\"/2019/10/01/%E3%80%90C++%E3%80%91C++%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E5%88%9D%E6%8E%A2/Snipaste_2019-10-02_09-07-09.png\"></p>\n<h2 id=\"Stack：\"><a href=\"#Stack：\" class=\"headerlink\" title=\"Stack：\"></a><strong>Stack：</strong></h2><p>栈，存放Automatic Variables，按内存地址由高到低方向生长，其最大大小由编译时确定，速度快，但自由性差，最大空间不大。保存程序中的局部变量。</p>\n<h2 id=\"Heap：\"><a href=\"#Heap：\" class=\"headerlink\" title=\"Heap：\"></a><strong>Heap：</strong></h2><p>堆，自由申请的空间，按内存地址由低到高方向生长，其大小由系统内存/虚拟内存上限决定，速度较慢，但自由性大，可用空间大。 动态分配的内存在调用malloc（）或者相关函数产生，在调用free()时释放，由程序员决定而不是一系列规则规定内存持续时间，因此内存块可在一个函数中创建，在另一个函数中释放。由于这点，动态内存分配容易导致堆区内存碎片化。</p>\n<h2 id=\"Data：\"><a href=\"#Data：\" class=\"headerlink\" title=\".Data：\"></a><strong>.Data：</strong></h2><p> 存放程序中<font color=\"red\"> 已经初始化的非零全局变量。静态分配。</font></p>\n<p>data又可分为读写（RW）区域和只读（RO）区域。 </p>\n<ul>\n<li>RO段保存常量所以也被称为<code>.constdata</code> eg const数据</li>\n<li>RW段则是普通非常全局变量，静态变量就在其中</li>\n</ul>\n<h2 id=\"Bss：\"><a href=\"#Bss：\" class=\"headerlink\" title=\".Bss：\"></a><strong>.Bss：</strong></h2><p>存放程序中<strong>未初始化</strong>的和零值全局变量。静态分配，在程序开始时通常会被清零。</p>\n<h2 id=\"Text：\"><a href=\"#Text：\" class=\"headerlink\" title=\".Text：\"></a><strong>.Text：</strong></h2><p>也称为代码段(Code)，用来存放程序执行代码，同时也可能会包含一些常量(如一些字符串常量等）。该段内存为静态分配，只读(某些架构可能允许修改)。<br>这块内存是共享的,当有多个相同进程(Process)存在时，共用同一个text段。</p>\n<hr>\n<p>普通成员变量存储在栈区，使得每一个类的对象都拥有各自独立的普通成员变量。</p>\n<p>静态成员变量存储在全局数据区，是的每一个类的对象都共享一份静态</p>\n<p>成员变量。</p>\n<h1 id=\"3-this指针\"><a href=\"#3-this指针\" class=\"headerlink\" title=\"3.this指针\"></a>3.this指针</h1><p>那么，存放在代码段的成员函数是怎么区分调用对象的呢？</p>\n<p>事实上，<font color=\"red\"> C++为每一个函数都隐式定义了一个函数所属类类型的指针形参–this，而this指针永远指向调用函数的对象</font>，如此函数便可以识别调用自身的是类的哪个对象了。</p>\n<p>这里有一点要注意，<font color=\"red\"> C++并没有为静态成员函数定义this指针，如此，静态成员函数被所有的对象共享</font>。</p>\n<h1 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4.总结\"></a>4.总结</h1><p>通过成员的分开存储和普通成员函数的<code>this指针</code>C++便可以识别各个不同的对象，如此便实现了面向对象。</p>\n"},{"title":"【C++】普通全局变量、静态全局变量、普通局部变量与静态局部变量","date":"2019-09-11T12:58:55.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 1.普通全局变量\n\n​\t普通全局变量是定义在函数和类外的或由extern标识或直接定义没有static标识的变量。\n\n​\t各个类型的变量之间最主要的区别就是作用域的不同了，普通全局变量的作用域在整个源程序中，全局变量对整个源程序中都是可见的，无论源程序是由单个文件还是多个文件组成，普通全局变量具有external链接属性，所以普通全局变量在整个源程序的各个文件中都可以被引用。\n\n# 2.静态全局变量\n\n​\t静态全局变量是定义在函数和类外的由static标识的变量。\n\n​\t静态全局变量具有文件作用域，具有internal链接属性，只能在定义的文件中使用，在其他文件中可以定义同名的变量，而全局变量则不行，这里要注意静态全局变量与类静态全局变量是不同的，类静态全局变量受到类权限限制，不同的访问权限就之间决定了类静态全局变量的作用域，类全局变量的使用与类一致，能使用类的地方就能使用类全局变量。\n\n​\t关于普通全局变量和静态全局变量的区别，我一直没有弄得很清楚，我有在网上查阅很多bolg，大家的说法都出奇的一致，我上面写的也是在查阅很多blog后总结的，但是我实际测试时，普通全局变量和静态全局变量似乎都可以被其他文件使用，并且 在其他文件中定义静态全局变量似乎也没有报错，没有弄明白这个其他文件指的是什么文件。\n\n![](【C++】全局变量、静态全局变量、局部变量与静态局部变量/Snipaste_2019-09-11_21-36-28.png)\n\n![](【C++】全局变量、静态全局变量、局部变量与静态局部变量/Snipaste_2019-09-11_21-36-38.png)\n\n# 3.普通局部变量\n\n​\t普通局部变量是定义在函数内的没有static标识的变量。\n\n​\t普通局部变量具有块作用域，生命周期从定义开始到跳出函数结束，普通局部变量每次使用都会初始化一次。\n\n# 4.静态局部变量\n\n​\t静态局部变量的作用于和普通局部变量一致，但是静态局部变量的内存地址在函数结束后不会被销毁，且会保存赋值结果，静态局部变量和静态全局变量一样会一直驻留在静态区，静态局部变量只会初始化一次，在下一次函数被调用时不会再初始化而是直接调用。","source":"_posts/【C++】全局变量、静态全局变量、局部变量与静态局部变量.md","raw":"---\ntitle: 【C++】普通全局变量、静态全局变量、普通局部变量与静态局部变量\ndate: 2019-09-11 20:58:55\ntags: C++\ncategories: 知识记录\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 1.普通全局变量\n\n​\t普通全局变量是定义在函数和类外的或由extern标识或直接定义没有static标识的变量。\n\n​\t各个类型的变量之间最主要的区别就是作用域的不同了，普通全局变量的作用域在整个源程序中，全局变量对整个源程序中都是可见的，无论源程序是由单个文件还是多个文件组成，普通全局变量具有external链接属性，所以普通全局变量在整个源程序的各个文件中都可以被引用。\n\n# 2.静态全局变量\n\n​\t静态全局变量是定义在函数和类外的由static标识的变量。\n\n​\t静态全局变量具有文件作用域，具有internal链接属性，只能在定义的文件中使用，在其他文件中可以定义同名的变量，而全局变量则不行，这里要注意静态全局变量与类静态全局变量是不同的，类静态全局变量受到类权限限制，不同的访问权限就之间决定了类静态全局变量的作用域，类全局变量的使用与类一致，能使用类的地方就能使用类全局变量。\n\n​\t关于普通全局变量和静态全局变量的区别，我一直没有弄得很清楚，我有在网上查阅很多bolg，大家的说法都出奇的一致，我上面写的也是在查阅很多blog后总结的，但是我实际测试时，普通全局变量和静态全局变量似乎都可以被其他文件使用，并且 在其他文件中定义静态全局变量似乎也没有报错，没有弄明白这个其他文件指的是什么文件。\n\n![](【C++】全局变量、静态全局变量、局部变量与静态局部变量/Snipaste_2019-09-11_21-36-28.png)\n\n![](【C++】全局变量、静态全局变量、局部变量与静态局部变量/Snipaste_2019-09-11_21-36-38.png)\n\n# 3.普通局部变量\n\n​\t普通局部变量是定义在函数内的没有static标识的变量。\n\n​\t普通局部变量具有块作用域，生命周期从定义开始到跳出函数结束，普通局部变量每次使用都会初始化一次。\n\n# 4.静态局部变量\n\n​\t静态局部变量的作用于和普通局部变量一致，但是静态局部变量的内存地址在函数结束后不会被销毁，且会保存赋值结果，静态局部变量和静态全局变量一样会一直驻留在静态区，静态局部变量只会初始化一次，在下一次函数被调用时不会再初始化而是直接调用。","slug":"【C++】全局变量、静态全局变量、局部变量与静态局部变量","published":1,"updated":"2021-02-01T13:31:12.925Z","_id":"ckk9hocal000gdwr7eaqfdjo9","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"1-普通全局变量\"><a href=\"#1-普通全局变量\" class=\"headerlink\" title=\"1.普通全局变量\"></a>1.普通全局变量</h1><p>​    普通全局变量是定义在函数和类外的或由extern标识或直接定义没有static标识的变量。</p>\n<p>​    各个类型的变量之间最主要的区别就是作用域的不同了，普通全局变量的作用域在整个源程序中，全局变量对整个源程序中都是可见的，无论源程序是由单个文件还是多个文件组成，普通全局变量具有external链接属性，所以普通全局变量在整个源程序的各个文件中都可以被引用。</p>\n<h1 id=\"2-静态全局变量\"><a href=\"#2-静态全局变量\" class=\"headerlink\" title=\"2.静态全局变量\"></a>2.静态全局变量</h1><p>​    静态全局变量是定义在函数和类外的由static标识的变量。</p>\n<p>​    静态全局变量具有文件作用域，具有internal链接属性，只能在定义的文件中使用，在其他文件中可以定义同名的变量，而全局变量则不行，这里要注意静态全局变量与类静态全局变量是不同的，类静态全局变量受到类权限限制，不同的访问权限就之间决定了类静态全局变量的作用域，类全局变量的使用与类一致，能使用类的地方就能使用类全局变量。</p>\n<p>​    关于普通全局变量和静态全局变量的区别，我一直没有弄得很清楚，我有在网上查阅很多bolg，大家的说法都出奇的一致，我上面写的也是在查阅很多blog后总结的，但是我实际测试时，普通全局变量和静态全局变量似乎都可以被其他文件使用，并且 在其他文件中定义静态全局变量似乎也没有报错，没有弄明白这个其他文件指的是什么文件。</p>\n<p><img src=\"/2019/09/11/%E3%80%90C++%E3%80%91%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E3%80%81%E9%9D%99%E6%80%81%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E3%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%B8%8E%E9%9D%99%E6%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/Snipaste_2019-09-11_21-36-28.png\"></p>\n<p><img src=\"/2019/09/11/%E3%80%90C++%E3%80%91%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E3%80%81%E9%9D%99%E6%80%81%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E3%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%B8%8E%E9%9D%99%E6%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/Snipaste_2019-09-11_21-36-38.png\"></p>\n<h1 id=\"3-普通局部变量\"><a href=\"#3-普通局部变量\" class=\"headerlink\" title=\"3.普通局部变量\"></a>3.普通局部变量</h1><p>​    普通局部变量是定义在函数内的没有static标识的变量。</p>\n<p>​    普通局部变量具有块作用域，生命周期从定义开始到跳出函数结束，普通局部变量每次使用都会初始化一次。</p>\n<h1 id=\"4-静态局部变量\"><a href=\"#4-静态局部变量\" class=\"headerlink\" title=\"4.静态局部变量\"></a>4.静态局部变量</h1><p>​    静态局部变量的作用于和普通局部变量一致，但是静态局部变量的内存地址在函数结束后不会被销毁，且会保存赋值结果，静态局部变量和静态全局变量一样会一直驻留在静态区，静态局部变量只会初始化一次，在下一次函数被调用时不会再初始化而是直接调用。</p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"1-普通全局变量\"><a href=\"#1-普通全局变量\" class=\"headerlink\" title=\"1.普通全局变量\"></a>1.普通全局变量</h1><p>​    普通全局变量是定义在函数和类外的或由extern标识或直接定义没有static标识的变量。</p>\n<p>​    各个类型的变量之间最主要的区别就是作用域的不同了，普通全局变量的作用域在整个源程序中，全局变量对整个源程序中都是可见的，无论源程序是由单个文件还是多个文件组成，普通全局变量具有external链接属性，所以普通全局变量在整个源程序的各个文件中都可以被引用。</p>\n<h1 id=\"2-静态全局变量\"><a href=\"#2-静态全局变量\" class=\"headerlink\" title=\"2.静态全局变量\"></a>2.静态全局变量</h1><p>​    静态全局变量是定义在函数和类外的由static标识的变量。</p>\n<p>​    静态全局变量具有文件作用域，具有internal链接属性，只能在定义的文件中使用，在其他文件中可以定义同名的变量，而全局变量则不行，这里要注意静态全局变量与类静态全局变量是不同的，类静态全局变量受到类权限限制，不同的访问权限就之间决定了类静态全局变量的作用域，类全局变量的使用与类一致，能使用类的地方就能使用类全局变量。</p>\n<p>​    关于普通全局变量和静态全局变量的区别，我一直没有弄得很清楚，我有在网上查阅很多bolg，大家的说法都出奇的一致，我上面写的也是在查阅很多blog后总结的，但是我实际测试时，普通全局变量和静态全局变量似乎都可以被其他文件使用，并且 在其他文件中定义静态全局变量似乎也没有报错，没有弄明白这个其他文件指的是什么文件。</p>\n<p><img src=\"/2019/09/11/%E3%80%90C++%E3%80%91%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E3%80%81%E9%9D%99%E6%80%81%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E3%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%B8%8E%E9%9D%99%E6%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/Snipaste_2019-09-11_21-36-28.png\"></p>\n<p><img src=\"/2019/09/11/%E3%80%90C++%E3%80%91%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E3%80%81%E9%9D%99%E6%80%81%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E3%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%B8%8E%E9%9D%99%E6%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/Snipaste_2019-09-11_21-36-38.png\"></p>\n<h1 id=\"3-普通局部变量\"><a href=\"#3-普通局部变量\" class=\"headerlink\" title=\"3.普通局部变量\"></a>3.普通局部变量</h1><p>​    普通局部变量是定义在函数内的没有static标识的变量。</p>\n<p>​    普通局部变量具有块作用域，生命周期从定义开始到跳出函数结束，普通局部变量每次使用都会初始化一次。</p>\n<h1 id=\"4-静态局部变量\"><a href=\"#4-静态局部变量\" class=\"headerlink\" title=\"4.静态局部变量\"></a>4.静态局部变量</h1><p>​    静态局部变量的作用于和普通局部变量一致，但是静态局部变量的内存地址在函数结束后不会被销毁，且会保存赋值结果，静态局部变量和静态全局变量一样会一直驻留在静态区，静态局部变量只会初始化一次，在下一次函数被调用时不会再初始化而是直接调用。</p>\n"},{"title":"【C】C的typedef的妙用","date":"2019-10-03T01:53:37.000Z","_content":"\n\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 1.自定义数组类型\n\n```c\ntypedef int (Array)[5];\n```\n\n`Array`是一个类型为`int`长度为5的数组类型，即定义一个`Array a;`那么a就是一个类型为int长度为5的数组，所以a的使用方法和数组一致。\n\n```c\ntypedef int(Array)[5];\nArray a;\nint i = 0,j = 0;\nfor (i = 0; i < 5; i++)\n\ta[i] = i;\nfor (j = 0; j < 5; j++)\n\tprintf(\"%d,\", a[j]);\n```\n\n# 2.自定义指向数组的指针类型\n\n```c\ntypedef char(*Arrayptr)[8];\n```\n\n`Arrayptr`是一个指向`char`类型的长度为8的数组的指针类型，此类型的指针只能指向`char`类型的长度为8的数组。且每一次指针移步，移动的距离是1*8=8字节。\n\n需要注意的是`()`不能省略，否则定义就会变义。\n\n除了自定义指针类型来指向一个固定的数组外，C还可以直接定义一个指向固定数组的指针变量。\n\n```c\nint (*p)[5];\n```\n\n`p`就是一个指向类型为整型且长度为5的数组的指针变量。\n\n# 3.自定义函数类型\n\n```c\ntypedef int (Funptr)(int a, int b);//函数类型\nint Fun1(int a, int b)\n{\n\treturn a + b;\n}\nvoid Fun2(Funptr *p)\n{\n\tprintf(\"%d\\n\", p(1, 2));\n}\nint main()\n{\n\tFunptr *p = &Fun1;\n\tFun2(p);\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n`Funptr`是一个指向返回值为`int`参数列表为`int,int`的函数的类型，通过`Funptr`函数类型的指针可以将返回值为`int`参数列表为`int,int`的函数当作参数来使用，使函数的调用更为灵活。\n\n除了定义函数类型可以达到这种效果，我们还可以直接定义指向函数的指针类型来实现函数参数化，如：\n\n```c\ntypedef int (*Funptr)(int a, int b);\nint Fun1(int a, int b)\n{\n\treturn a + b;\n}\nvoid Fun2(Funptr p)\n{\n\tprintf(\"%d\\n\", p(1, 2));\n}\nint main()\n{\n\tFunptr p = &Fun1;\n\tFun2(p);\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n这样的效果和定义函数类型是一样的。\n\n当然我们还可以直接定义一个指向函数的指针变量，来实现同样的效果，如：\n\n```c\nint Fun1(int a, int b)\n{\n\treturn a + b;\n}\nvoid Fun2(Funptr p)\n{\n\tprintf(\"%d\\n\", p(1, 2));\n}\nint main()\n{\n\tint(*p)(int a, int b) = &Fun1;\n\tFun2(p);\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n我们还可以这么做，一样能达到相同的效果：\n\n```c\nint Fun1(int a, int b)\n{\n\treturn a + b;\n}\nvoid Fun2(int (*ptr)(int a,int b))//直接定义函数指针的形参\n{\n\tprintf(\"%d\\n\", ptr(1, 2));\n}\nint main()\n{\n\tFun2(&Fun1);//直接传递函数地址\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n搞了那么多似乎函数指针只是把函数的调用弄得更复杂了而已，除了把函数当作参数来使用似乎没有什么作用了，真的是如此吗？\n\n<font color=red> 如果我们仔细观察，会发现函数指针将函数的调用和函数的实现分隔开来了，即函数指针提前规定好了函数的实现标准，这样只要后来者按照这个标准来实现函数，可以不用修改前人的代码，就能实现函数的完美的调用，这一作用在具体的项目迭代中是及其出众的。</font>\n\n","source":"_posts/【C】C的typedef的妙用.md","raw":"---\ntitle: 【C】C的typedef的妙用\ndate: 2019-10-03 09:53:37\ntags: C\ncategories: 知识记录\n---\n\n\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 1.自定义数组类型\n\n```c\ntypedef int (Array)[5];\n```\n\n`Array`是一个类型为`int`长度为5的数组类型，即定义一个`Array a;`那么a就是一个类型为int长度为5的数组，所以a的使用方法和数组一致。\n\n```c\ntypedef int(Array)[5];\nArray a;\nint i = 0,j = 0;\nfor (i = 0; i < 5; i++)\n\ta[i] = i;\nfor (j = 0; j < 5; j++)\n\tprintf(\"%d,\", a[j]);\n```\n\n# 2.自定义指向数组的指针类型\n\n```c\ntypedef char(*Arrayptr)[8];\n```\n\n`Arrayptr`是一个指向`char`类型的长度为8的数组的指针类型，此类型的指针只能指向`char`类型的长度为8的数组。且每一次指针移步，移动的距离是1*8=8字节。\n\n需要注意的是`()`不能省略，否则定义就会变义。\n\n除了自定义指针类型来指向一个固定的数组外，C还可以直接定义一个指向固定数组的指针变量。\n\n```c\nint (*p)[5];\n```\n\n`p`就是一个指向类型为整型且长度为5的数组的指针变量。\n\n# 3.自定义函数类型\n\n```c\ntypedef int (Funptr)(int a, int b);//函数类型\nint Fun1(int a, int b)\n{\n\treturn a + b;\n}\nvoid Fun2(Funptr *p)\n{\n\tprintf(\"%d\\n\", p(1, 2));\n}\nint main()\n{\n\tFunptr *p = &Fun1;\n\tFun2(p);\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n`Funptr`是一个指向返回值为`int`参数列表为`int,int`的函数的类型，通过`Funptr`函数类型的指针可以将返回值为`int`参数列表为`int,int`的函数当作参数来使用，使函数的调用更为灵活。\n\n除了定义函数类型可以达到这种效果，我们还可以直接定义指向函数的指针类型来实现函数参数化，如：\n\n```c\ntypedef int (*Funptr)(int a, int b);\nint Fun1(int a, int b)\n{\n\treturn a + b;\n}\nvoid Fun2(Funptr p)\n{\n\tprintf(\"%d\\n\", p(1, 2));\n}\nint main()\n{\n\tFunptr p = &Fun1;\n\tFun2(p);\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n这样的效果和定义函数类型是一样的。\n\n当然我们还可以直接定义一个指向函数的指针变量，来实现同样的效果，如：\n\n```c\nint Fun1(int a, int b)\n{\n\treturn a + b;\n}\nvoid Fun2(Funptr p)\n{\n\tprintf(\"%d\\n\", p(1, 2));\n}\nint main()\n{\n\tint(*p)(int a, int b) = &Fun1;\n\tFun2(p);\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n我们还可以这么做，一样能达到相同的效果：\n\n```c\nint Fun1(int a, int b)\n{\n\treturn a + b;\n}\nvoid Fun2(int (*ptr)(int a,int b))//直接定义函数指针的形参\n{\n\tprintf(\"%d\\n\", ptr(1, 2));\n}\nint main()\n{\n\tFun2(&Fun1);//直接传递函数地址\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n搞了那么多似乎函数指针只是把函数的调用弄得更复杂了而已，除了把函数当作参数来使用似乎没有什么作用了，真的是如此吗？\n\n<font color=red> 如果我们仔细观察，会发现函数指针将函数的调用和函数的实现分隔开来了，即函数指针提前规定好了函数的实现标准，这样只要后来者按照这个标准来实现函数，可以不用修改前人的代码，就能实现函数的完美的调用，这一作用在具体的项目迭代中是及其出众的。</font>\n\n","slug":"【C】C的typedef的妙用","published":1,"updated":"2021-02-01T13:26:19.697Z","_id":"ckk9hocam000hdwr7ht7n3pz9","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"1-自定义数组类型\"><a href=\"#1-自定义数组类型\" class=\"headerlink\" title=\"1.自定义数组类型\"></a>1.自定义数组类型</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">typedef int (Array)[5];<br></code></pre></td></tr></table></figure>\n<p><code>Array</code>是一个类型为<code>int</code>长度为5的数组类型，即定义一个<code>Array a;</code>那么a就是一个类型为int长度为5的数组，所以a的使用方法和数组一致。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">typedef int(Array)[5];<br>Array a;<br><span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>,j = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)<br>\ta[i] = i;<br><span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">5</span>; j++)<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d,&quot;</span>, a[j]);<br></code></pre></td></tr></table></figure>\n<h1 id=\"2-自定义指向数组的指针类型\"><a href=\"#2-自定义指向数组的指针类型\" class=\"headerlink\" title=\"2.自定义指向数组的指针类型\"></a>2.自定义指向数组的指针类型</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">typedef char(*Arrayptr)[8];<br></code></pre></td></tr></table></figure>\n<p><code>Arrayptr</code>是一个指向<code>char</code>类型的长度为8的数组的指针类型，此类型的指针只能指向<code>char</code>类型的长度为8的数组。且每一次指针移步，移动的距离是1*8=8字节。</p>\n<p>需要注意的是<code>()</code>不能省略，否则定义就会变义。</p>\n<p>除了自定义指针类型来指向一个固定的数组外，C还可以直接定义一个指向固定数组的指针变量。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">int</span> (*p)[<span class=\"hljs-number\">5</span>];<br></code></pre></td></tr></table></figure>\n<p><code>p</code>就是一个指向类型为整型且长度为5的数组的指针变量。</p>\n<h1 id=\"3-自定义函数类型\"><a href=\"#3-自定义函数类型\" class=\"headerlink\" title=\"3.自定义函数类型\"></a>3.自定义函数类型</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-title\">int</span> <span class=\"hljs-params\">(Funptr)</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b)</span></span>;<span class=\"hljs-comment\">//函数类型</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Fun1</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">return</span> a + b;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Fun2</span><span class=\"hljs-params\">(Funptr *p)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, p(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>));<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tFunptr *p = &amp;Fun1;<br>\tFun2(p);<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>Funptr</code>是一个指向返回值为<code>int</code>参数列表为<code>int,int</code>的函数的类型，通过<code>Funptr</code>函数类型的指针可以将返回值为<code>int</code>参数列表为<code>int,int</code>的函数当作参数来使用，使函数的调用更为灵活。</p>\n<p>除了定义函数类型可以达到这种效果，我们还可以直接定义指向函数的指针类型来实现函数参数化，如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-title\">int</span> <span class=\"hljs-params\">(*Funptr)</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b)</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Fun1</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">return</span> a + b;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Fun2</span><span class=\"hljs-params\">(Funptr p)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, p(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>));<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tFunptr p = &amp;Fun1;<br>\tFun2(p);<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这样的效果和定义函数类型是一样的。</p>\n<p>当然我们还可以直接定义一个指向函数的指针变量，来实现同样的效果，如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Fun1</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">return</span> a + b;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Fun2</span><span class=\"hljs-params\">(Funptr p)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, p(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>));<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">int</span>(*p)(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b) = &amp;Fun1;<br>\tFun2(p);<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>我们还可以这么做，一样能达到相同的效果：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Fun1</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">return</span> a + b;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Fun2</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> (*ptr)(<span class=\"hljs-keyword\">int</span> a,<span class=\"hljs-keyword\">int</span> b))</span><span class=\"hljs-comment\">//直接定义函数指针的形参</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, ptr(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>));<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tFun2(&amp;Fun1);<span class=\"hljs-comment\">//直接传递函数地址</span><br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>搞了那么多似乎函数指针只是把函数的调用弄得更复杂了而已，除了把函数当作参数来使用似乎没有什么作用了，真的是如此吗？</p>\n<p><font color=\"red\"> 如果我们仔细观察，会发现函数指针将函数的调用和函数的实现分隔开来了，即函数指针提前规定好了函数的实现标准，这样只要后来者按照这个标准来实现函数，可以不用修改前人的代码，就能实现函数的完美的调用，这一作用在具体的项目迭代中是及其出众的。</font></p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"1-自定义数组类型\"><a href=\"#1-自定义数组类型\" class=\"headerlink\" title=\"1.自定义数组类型\"></a>1.自定义数组类型</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">typedef int (Array)[5];<br></code></pre></td></tr></table></figure>\n<p><code>Array</code>是一个类型为<code>int</code>长度为5的数组类型，即定义一个<code>Array a;</code>那么a就是一个类型为int长度为5的数组，所以a的使用方法和数组一致。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">typedef int(Array)[5];<br>Array a;<br><span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>,j = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)<br>\ta[i] = i;<br><span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">5</span>; j++)<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d,&quot;</span>, a[j]);<br></code></pre></td></tr></table></figure>\n<h1 id=\"2-自定义指向数组的指针类型\"><a href=\"#2-自定义指向数组的指针类型\" class=\"headerlink\" title=\"2.自定义指向数组的指针类型\"></a>2.自定义指向数组的指针类型</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">typedef char(*Arrayptr)[8];<br></code></pre></td></tr></table></figure>\n<p><code>Arrayptr</code>是一个指向<code>char</code>类型的长度为8的数组的指针类型，此类型的指针只能指向<code>char</code>类型的长度为8的数组。且每一次指针移步，移动的距离是1*8=8字节。</p>\n<p>需要注意的是<code>()</code>不能省略，否则定义就会变义。</p>\n<p>除了自定义指针类型来指向一个固定的数组外，C还可以直接定义一个指向固定数组的指针变量。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">int</span> (*p)[<span class=\"hljs-number\">5</span>];<br></code></pre></td></tr></table></figure>\n<p><code>p</code>就是一个指向类型为整型且长度为5的数组的指针变量。</p>\n<h1 id=\"3-自定义函数类型\"><a href=\"#3-自定义函数类型\" class=\"headerlink\" title=\"3.自定义函数类型\"></a>3.自定义函数类型</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-title\">int</span> <span class=\"hljs-params\">(Funptr)</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b)</span></span>;<span class=\"hljs-comment\">//函数类型</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Fun1</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">return</span> a + b;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Fun2</span><span class=\"hljs-params\">(Funptr *p)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, p(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>));<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tFunptr *p = &amp;Fun1;<br>\tFun2(p);<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>Funptr</code>是一个指向返回值为<code>int</code>参数列表为<code>int,int</code>的函数的类型，通过<code>Funptr</code>函数类型的指针可以将返回值为<code>int</code>参数列表为<code>int,int</code>的函数当作参数来使用，使函数的调用更为灵活。</p>\n<p>除了定义函数类型可以达到这种效果，我们还可以直接定义指向函数的指针类型来实现函数参数化，如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-title\">int</span> <span class=\"hljs-params\">(*Funptr)</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b)</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Fun1</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">return</span> a + b;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Fun2</span><span class=\"hljs-params\">(Funptr p)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, p(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>));<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tFunptr p = &amp;Fun1;<br>\tFun2(p);<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这样的效果和定义函数类型是一样的。</p>\n<p>当然我们还可以直接定义一个指向函数的指针变量，来实现同样的效果，如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Fun1</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">return</span> a + b;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Fun2</span><span class=\"hljs-params\">(Funptr p)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, p(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>));<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">int</span>(*p)(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b) = &amp;Fun1;<br>\tFun2(p);<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>我们还可以这么做，一样能达到相同的效果：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Fun1</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">return</span> a + b;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Fun2</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> (*ptr)(<span class=\"hljs-keyword\">int</span> a,<span class=\"hljs-keyword\">int</span> b))</span><span class=\"hljs-comment\">//直接定义函数指针的形参</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, ptr(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>));<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tFun2(&amp;Fun1);<span class=\"hljs-comment\">//直接传递函数地址</span><br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>搞了那么多似乎函数指针只是把函数的调用弄得更复杂了而已，除了把函数当作参数来使用似乎没有什么作用了，真的是如此吗？</p>\n<p><font color=\"red\"> 如果我们仔细观察，会发现函数指针将函数的调用和函数的实现分隔开来了，即函数指针提前规定好了函数的实现标准，这样只要后来者按照这个标准来实现函数，可以不用修改前人的代码，就能实现函数的完美的调用，这一作用在具体的项目迭代中是及其出众的。</font></p>\n"},{"title":"Linux基础","date":"2019-08-25T10:25:16.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n<center>Linux学习笔记</center>\n\n# l  **pwd**：查看当前所在路\n\n命令格式：命令 -选项 -参数（目录）\n\n命令：\n\nls：查看当前路径下的文件\n\n选项：\n\n| 选项   | 作用                         |\n| ------ | ---------------------------- |\n| **-d** | 只查看当前目录的信息         |\n| **-l** | 查看详细信息                 |\n| **-a** | 显示所有文件（包含隐藏文件） |\n| **-h** | 显示文件大小                 |\n\n例：ls -l     命令 -选项\n\n选项可以组合：ls -a -l/ls -al：查看所有文件的详细信息\n\nls -al /etc/   命令 -选项 -参数 ：查看etc目录下的所有文件的详细信息\n\n# l  **cd** **：** **路径切换**        \n\n| 选项     | 作用                                                         |\n| -------- | ------------------------------------------------------------ |\n| “**-**”  | 返回到之前目录                                               |\n| “**..**” | 返回上一级目录（“.”当前目录，“..”上一级目录）                |\n| “**~**”  | 到用户所在的家目录（家目录：用户所在目录，如windowsC盘的用户目录） |\n\ntouch ：cd到临时目录tmp下可创建新文件    touch 文件名\n\n# l  **Linux目录结构**\n\n| 文件名     | 作用                    |\n| ---------- | ----------------------- |\n| /boot      | linux启动时，需要的文件 |\n| /dve       | 设备文件                |\n| /etc       | 配置文件                |\n| /home      | 用户家目录              |\n| /media     | 媒体文件                |\n| /mnt       | 挂载文件                |\n| /opt       | 第三方软件              |\n| /proc      | 虚拟化文件              |\n| /root      | 管理员的家目录          |\n| /run       | 远程文件                |\n| /srv       | 压缩过的文件            |\n| /sys       | 系统文件                |\n| /usr       | 安装的软件，            |\n| /var       | 可变数据、日志          |\n| /tmp       | 临时文件                |\n| /usr/bin   | 普通用户可以使用的命令  |\n| /usr/sbin  | 超级用户可以使用的命令  |\n| /usr/lib   | 32位库文件              |\n| /usr/lib64 | 64位库文件              |\n\n# l  **Linux文件处理**\n\n## **文件类型判断：**\n\n-ls -l\n\n![img](【Linux】Linux基础/1.png)\n\n| 文件以“_”开头 | 文件类型                            |\n| ------------- | ----------------------------------- |\n| “d”           | 目录                                |\n| “-”           | 文件                                |\n| “l”           | 链接文件（类似win中快捷方式）       |\n| “b”           | 设备文件，提供存储接口的设备        |\n| “c”           | 设备文件，提供串行结合口的设备—键盘 |\n\n \n\n## **文件处理：**\n\n![img](【Linux】Linux基础/2.png)\n\ncp            cp abc a：复制abc并命名为a/多文件复制：cp a abc goulandis/：复制a、abc到goulandis下\n\nmv            mv 文件1 文件2：将文件1更名为文件2/mv 文件1（文件2 ….） 目录：将文件移动到目录下                 \n\nrm             rm -f 文件1 （文件2…）：强制删除\n\nmkdir       mkdir -p （要创建的）目录1/（要创建的）目录2：创建目录1并在目录1下创建目录2\n\n## **查看文件：**  \n\n| 命令             | 作用                        |\n| ---------------- | --------------------------- |\n| **cat/****路径** | 查看文件                    |\n| nl               | 显示的时候，顺便出现行号    |\n| tac              | 从最后一行开始显示          |\n| head             | 显示文件前10行 -n：设置行数 |\n| tail             | 显示文件尾10行 -n：设置行数 |\n| wc               | 显示文件行数，数字，字节    |\n| more             | 一页一页翻动                |\n| **less**         | 一页一页翻动                |\n\n| **cat****和tac****选项** | 作用                           |\n| ------------------------ | ------------------------------ |\n| -A                       | 整合命令-vET（整合-v、-E、-T） |\n| -b                       | 列出行号，但是空白行不标志行号 |\n| -E                       | 将结尾的断行字符（$）显示出来  |\n| -n                       | 列出行号，空白行也会标志出来   |\n| -T                       | 将tab键以^I显示                |\n| -v                       | 列出一些看不出来的字符         |\n| <区分大小写>             |                                |\n\n| **nl****的选项** |                                  |                          |\n| ---------------- | -------------------------------- | ------------------------ |\n| 总选项           | 分选项                           | 作用                     |\n| b                | ba                               | 无论是否有空，都列出行号 |\n| bt               | 如果有空行，则不列出行号（默认） |                          |\n| n                | nln                              | 行号在屏幕最左方         |\n| nrn              | 行号在屏幕最右方，前面不加0      |                          |\n| nrz              | 行号在屏幕最右方，前面加0        |                          |\n| w                |                                  | 缩进多少位               |\n\n| **more****的选项** | 作用                 |\n| ------------------ | -------------------- |\n| 空格               | 向下翻一页           |\n| 回车               | 向下翻一行           |\n| /字符串            | 搜索                 |\n| :f                 | 立刻显示文件名和行数 |\n| b                  | 翻到第一页           |\n| q                  | 离开                 |\n\n| **less****的选项** | 作用                                |\n| ------------------ | ----------------------------------- |\n| **空格**           | 向下翻动一行                        |\n| **回车**           | 向下翻动一页                        |\n| **pagedown**       | 向下翻动一页                        |\n| **pageup**         | 向上翻动一页                        |\n| **n**              | 重复前一个搜索（操作：n）           |\n| **N**              | 反向重复前一个搜索（操作：shift+n） |\n| **q**              | 退出                                |\n\n| head和tail的选项                  | 作用                   |\n| --------------------------------- | ---------------------- |\n| -n                                | 指定显示几行，默认10行 |\n| 日志文件路径（/var/log/messages） | 查看日志               |\n\n| wc的选项 | 作用                                                       |\n| -------- | ---------------------------------------------------------- |\n| -c       | 只显示字节                                                 |\n| -w       | 只显示字数，一个字被定义为空白、跳格、换行字符、分隔字符串 |\n| -l       | 只显示行                                                   |\n\n| **Vim编辑器操作命令** | 作用           |\n| --------------------- | -------------- |\n| **i**                 | 插入           |\n| **esc**               | 退出           |\n| **u**                 | 撤销           |\n| **x**                 | 删除           |\n| **v**                 | 选择文本       |\n| **y**                 | 复制           |\n| **yy**                | 复制当前行     |\n| **dd**                | 删除光标所在行 |\n| **p**                 | 粘贴           |\n| **:w**                | 保存           |\n| **:wq**               | 保存并退出     |\n| **:q****！**          | 强制退出       |\n\n \n\n## **软链接：**\n\n![img](【Linux】Linux基础/3.png)\n\n![img](【Linux】Linux基础/4.png)\n\n## **硬链接：**\n\n![](【Linux】Linux基础/5.png)\n\nls -I ：查看Inode编号\n\n \n\n# l  **关机操作**\n\n| sync                   | 数据同步写入磁盘 |\n| ---------------------- | ---------------- |\n| **shutdown**           | 常用关机指令     |\n| reboot、halt、poweroff | 重启，关机       |\n\n| shutdown的指令 | 作用                                                         |\n| -------------- | ------------------------------------------------------------ |\n| -t             | 添加秒数。几秒后关机                                         |\n| -k             | 不是真关机，二十发出警告信息                                 |\n| **-r**         | 在系统服务都停止后，重启                                     |\n| **-h**         | 在系统服务都停止后，关机                                     |\n| -f             | 关闭，并且开机一个后强行略过磁盘检查                         |\n| -F             | 重启后强制进行磁盘检查                                       |\n| -c             | 取消已经在进行的shutdown指令内容                             |\n|                | shutdown -h now    现在马上停止服务并关机   shutdown -h 12：00       在12：00时刻停止服务并关机   shutdown -h +10     十分钟以后停止服务并关机   shutdown -r now     现在马上停止服务并重启   shutdown -r +30 ‘the system will reboot’       先发一个警告信息“the system will reboot”，系统将要在30分钟后重启   shutdown -k now ‘the system will reboot’     现在马上发出一个警告信息“the system will reboot” |\n\n# l  **Linux文件权限**\n\n![img](【Linux】Linux基础/6.png)\n\n| 权限 | 连接 | 所有者 | 所属组 | 容量（默认单位B） | 修改日期 | 文件名 |\n| ---- | ---- | ------ | ------ | ----------------- | -------- | ------ |\n|      |      |        |        |                   |          |        |\n\n| **文件的权限**                         |                  |\n| -------------------------------------- | ---------------- |\n| r、w、x ： 读、写、执行，没有权限就是- |                  |\n| 第一组rwx                              | 文件所有者的权限 |\n| 第二组rwx                              | 文件所属组的权限 |\n| 第三组rwx                              | 文件其他人的权限 |\n\n| **目录的权限** |                                                        |\n| -------------- | ------------------------------------------------------ |\n| r              | 具有读取目录的结构列表的权限，可以查看目录下有哪些文件 |\n| w              | 该权限对于目录来说是很大的                             |\n| 1              | 可以在该目录下新建新的文件和目录                       |\n| 2              | 可以删除已存在的文件和目录                             |\n| 3              | 将已存在的文件和目录重命名                             |\n| 4              | 移动该目录内的文件和目录的位置                         |\n| X              | 是否可以进入该目录                                     |\n\n| **文件权限的修改**                                           |                                                              |                          |      |          |      |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------ | ---- | -------- | ---- |\n| 命令                                                         | 命令作用                                                     | 格式                     | 选项 | 选项作用 |      |\n| chown                                                        | 修改文件的拥有者，前提是要有该拥有者                         | chown 拥有者   文件/目录 | -R   | 递归修改 |      |\n| chgrp                                                        | 修改文件所属组，前提是要有该组                               |                          | -R   | 递归修改 |      |\n| chmod                                                        | 修改拥有者和所属组的权限                                     |                          |      |          |      |\n| 加减法                                                       | chmod    u/g/o+/-/=r/w/x 123：   将文件1213给用户/组/其他人加/减/赋予一个读/写/执行权限 |                          |      |          |      |\n| 数字法                                                       | r=4    w=2  x=1 ： chmod  632 123 ：   将文件123给用户赋予r和w权限，给组赋予wx权限，给其他人赋予w权限 |                          |      |          |      |\n| chown -R goulandis 123 ： 将123目录下的所有文件包括目录本身的拥有者修改为goulandis |                                                              |                          |      |          |      |\n|                                                              |                                                              |                          |      |          |      |\n\n**默认权限：**\n\numask      查看当前用户的umask权限       \n\numask –(选项) ：临时修改默认权限\n\n/etc/bashrc ： 永久修改默认权限（通过修改脚本文件实现）\n\numask的选项说明\n\n0022         拿走的权限\n\n​         第一个数字表示特殊权限\n\n​         022=rwxr-xr-x ：不拿走用户的权限、拿走用户组的w权限、拿走其他用户的w权限\n\n目录无法拿走x权限\n\n普通用户umask值 0002\n\nroot用户umask值 0022\n\n## **文件的特殊权限:**\n\n![img](【Linux】Linux基础/7.png)\n\n当s出现在拥有者的x权限的位置时，表示拥有者有SUID的权限（Set UID）\n\n当s出现在用户组的x权限的位置时，表示用户组有SGID的权限（Set GID）\n\n当s出现在其他人的x权限的位置时，表示其他人有SBIT的权限（Sticky Bit）\n\n| SUID                                                         | 临时获取文件拥有者的权限-----只能针对文件                   |\n| ------------------------------------------------------------ | ----------------------------------------------------------- |\n| SGID                                                         | 可以作用于目录，也可以作用于文件                            |\n| 作用于文件 ： 和SUID作用一样                                 |                                                             |\n| 作用与目录 ： 继承父级目-----目录会不停的继承，下级目录会一直继承父级目录的权限值 |                                                             |\n| SBIT                                                         | 只有文件的拥有者才能删除修改该目录下的文件-----只能针对目录 |\n| S和T有大小写之分   大写 ： 没有x权限   小写 ： 有x权限       |                                                             |\n| 数字法 ：SUID=4、SGID=2、SBIT=1                              |                                                             |\n\n![img](【Linux】Linux基础/8.png)\n\n \n\n# l  **Linux进程**\n\n进程 ：已经启动的可执行程序的运行实例\n\nPID : 进程的ID（每一个进程都有唯一的PID）\n\nPPID ： 父进程的ID\n\n任何一个进程都可以创建紫进程\n\n| ｐｓ　：　查看当前的进程情况 |                          |\n| ---------------------------- | ------------------------ |\n| 选项                         | 作用                     |\n| －ａｕｘ／ａｕｘ             | 列出所有进程             |\n| －ｅｆ                       | 列出所有进程             |\n| －ｌ                         | 列出和当前用户有关的进程 |\n| －ｕ                         | 查看某一用户的进程       |\n| －ｔｏｐ                     | 实时查看进程状况         |\n\n![img](【Linux】Linux基础/9.png)\n\n","source":"_posts/【Linux】Linux基础.md","raw":"---\ntitle: Linux基础\ndate: 2019-08-25 18:25:16\ntags: Linux\ncategories: 学习笔记\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n<center>Linux学习笔记</center>\n\n# l  **pwd**：查看当前所在路\n\n命令格式：命令 -选项 -参数（目录）\n\n命令：\n\nls：查看当前路径下的文件\n\n选项：\n\n| 选项   | 作用                         |\n| ------ | ---------------------------- |\n| **-d** | 只查看当前目录的信息         |\n| **-l** | 查看详细信息                 |\n| **-a** | 显示所有文件（包含隐藏文件） |\n| **-h** | 显示文件大小                 |\n\n例：ls -l     命令 -选项\n\n选项可以组合：ls -a -l/ls -al：查看所有文件的详细信息\n\nls -al /etc/   命令 -选项 -参数 ：查看etc目录下的所有文件的详细信息\n\n# l  **cd** **：** **路径切换**        \n\n| 选项     | 作用                                                         |\n| -------- | ------------------------------------------------------------ |\n| “**-**”  | 返回到之前目录                                               |\n| “**..**” | 返回上一级目录（“.”当前目录，“..”上一级目录）                |\n| “**~**”  | 到用户所在的家目录（家目录：用户所在目录，如windowsC盘的用户目录） |\n\ntouch ：cd到临时目录tmp下可创建新文件    touch 文件名\n\n# l  **Linux目录结构**\n\n| 文件名     | 作用                    |\n| ---------- | ----------------------- |\n| /boot      | linux启动时，需要的文件 |\n| /dve       | 设备文件                |\n| /etc       | 配置文件                |\n| /home      | 用户家目录              |\n| /media     | 媒体文件                |\n| /mnt       | 挂载文件                |\n| /opt       | 第三方软件              |\n| /proc      | 虚拟化文件              |\n| /root      | 管理员的家目录          |\n| /run       | 远程文件                |\n| /srv       | 压缩过的文件            |\n| /sys       | 系统文件                |\n| /usr       | 安装的软件，            |\n| /var       | 可变数据、日志          |\n| /tmp       | 临时文件                |\n| /usr/bin   | 普通用户可以使用的命令  |\n| /usr/sbin  | 超级用户可以使用的命令  |\n| /usr/lib   | 32位库文件              |\n| /usr/lib64 | 64位库文件              |\n\n# l  **Linux文件处理**\n\n## **文件类型判断：**\n\n-ls -l\n\n![img](【Linux】Linux基础/1.png)\n\n| 文件以“_”开头 | 文件类型                            |\n| ------------- | ----------------------------------- |\n| “d”           | 目录                                |\n| “-”           | 文件                                |\n| “l”           | 链接文件（类似win中快捷方式）       |\n| “b”           | 设备文件，提供存储接口的设备        |\n| “c”           | 设备文件，提供串行结合口的设备—键盘 |\n\n \n\n## **文件处理：**\n\n![img](【Linux】Linux基础/2.png)\n\ncp            cp abc a：复制abc并命名为a/多文件复制：cp a abc goulandis/：复制a、abc到goulandis下\n\nmv            mv 文件1 文件2：将文件1更名为文件2/mv 文件1（文件2 ….） 目录：将文件移动到目录下                 \n\nrm             rm -f 文件1 （文件2…）：强制删除\n\nmkdir       mkdir -p （要创建的）目录1/（要创建的）目录2：创建目录1并在目录1下创建目录2\n\n## **查看文件：**  \n\n| 命令             | 作用                        |\n| ---------------- | --------------------------- |\n| **cat/****路径** | 查看文件                    |\n| nl               | 显示的时候，顺便出现行号    |\n| tac              | 从最后一行开始显示          |\n| head             | 显示文件前10行 -n：设置行数 |\n| tail             | 显示文件尾10行 -n：设置行数 |\n| wc               | 显示文件行数，数字，字节    |\n| more             | 一页一页翻动                |\n| **less**         | 一页一页翻动                |\n\n| **cat****和tac****选项** | 作用                           |\n| ------------------------ | ------------------------------ |\n| -A                       | 整合命令-vET（整合-v、-E、-T） |\n| -b                       | 列出行号，但是空白行不标志行号 |\n| -E                       | 将结尾的断行字符（$）显示出来  |\n| -n                       | 列出行号，空白行也会标志出来   |\n| -T                       | 将tab键以^I显示                |\n| -v                       | 列出一些看不出来的字符         |\n| <区分大小写>             |                                |\n\n| **nl****的选项** |                                  |                          |\n| ---------------- | -------------------------------- | ------------------------ |\n| 总选项           | 分选项                           | 作用                     |\n| b                | ba                               | 无论是否有空，都列出行号 |\n| bt               | 如果有空行，则不列出行号（默认） |                          |\n| n                | nln                              | 行号在屏幕最左方         |\n| nrn              | 行号在屏幕最右方，前面不加0      |                          |\n| nrz              | 行号在屏幕最右方，前面加0        |                          |\n| w                |                                  | 缩进多少位               |\n\n| **more****的选项** | 作用                 |\n| ------------------ | -------------------- |\n| 空格               | 向下翻一页           |\n| 回车               | 向下翻一行           |\n| /字符串            | 搜索                 |\n| :f                 | 立刻显示文件名和行数 |\n| b                  | 翻到第一页           |\n| q                  | 离开                 |\n\n| **less****的选项** | 作用                                |\n| ------------------ | ----------------------------------- |\n| **空格**           | 向下翻动一行                        |\n| **回车**           | 向下翻动一页                        |\n| **pagedown**       | 向下翻动一页                        |\n| **pageup**         | 向上翻动一页                        |\n| **n**              | 重复前一个搜索（操作：n）           |\n| **N**              | 反向重复前一个搜索（操作：shift+n） |\n| **q**              | 退出                                |\n\n| head和tail的选项                  | 作用                   |\n| --------------------------------- | ---------------------- |\n| -n                                | 指定显示几行，默认10行 |\n| 日志文件路径（/var/log/messages） | 查看日志               |\n\n| wc的选项 | 作用                                                       |\n| -------- | ---------------------------------------------------------- |\n| -c       | 只显示字节                                                 |\n| -w       | 只显示字数，一个字被定义为空白、跳格、换行字符、分隔字符串 |\n| -l       | 只显示行                                                   |\n\n| **Vim编辑器操作命令** | 作用           |\n| --------------------- | -------------- |\n| **i**                 | 插入           |\n| **esc**               | 退出           |\n| **u**                 | 撤销           |\n| **x**                 | 删除           |\n| **v**                 | 选择文本       |\n| **y**                 | 复制           |\n| **yy**                | 复制当前行     |\n| **dd**                | 删除光标所在行 |\n| **p**                 | 粘贴           |\n| **:w**                | 保存           |\n| **:wq**               | 保存并退出     |\n| **:q****！**          | 强制退出       |\n\n \n\n## **软链接：**\n\n![img](【Linux】Linux基础/3.png)\n\n![img](【Linux】Linux基础/4.png)\n\n## **硬链接：**\n\n![](【Linux】Linux基础/5.png)\n\nls -I ：查看Inode编号\n\n \n\n# l  **关机操作**\n\n| sync                   | 数据同步写入磁盘 |\n| ---------------------- | ---------------- |\n| **shutdown**           | 常用关机指令     |\n| reboot、halt、poweroff | 重启，关机       |\n\n| shutdown的指令 | 作用                                                         |\n| -------------- | ------------------------------------------------------------ |\n| -t             | 添加秒数。几秒后关机                                         |\n| -k             | 不是真关机，二十发出警告信息                                 |\n| **-r**         | 在系统服务都停止后，重启                                     |\n| **-h**         | 在系统服务都停止后，关机                                     |\n| -f             | 关闭，并且开机一个后强行略过磁盘检查                         |\n| -F             | 重启后强制进行磁盘检查                                       |\n| -c             | 取消已经在进行的shutdown指令内容                             |\n|                | shutdown -h now    现在马上停止服务并关机   shutdown -h 12：00       在12：00时刻停止服务并关机   shutdown -h +10     十分钟以后停止服务并关机   shutdown -r now     现在马上停止服务并重启   shutdown -r +30 ‘the system will reboot’       先发一个警告信息“the system will reboot”，系统将要在30分钟后重启   shutdown -k now ‘the system will reboot’     现在马上发出一个警告信息“the system will reboot” |\n\n# l  **Linux文件权限**\n\n![img](【Linux】Linux基础/6.png)\n\n| 权限 | 连接 | 所有者 | 所属组 | 容量（默认单位B） | 修改日期 | 文件名 |\n| ---- | ---- | ------ | ------ | ----------------- | -------- | ------ |\n|      |      |        |        |                   |          |        |\n\n| **文件的权限**                         |                  |\n| -------------------------------------- | ---------------- |\n| r、w、x ： 读、写、执行，没有权限就是- |                  |\n| 第一组rwx                              | 文件所有者的权限 |\n| 第二组rwx                              | 文件所属组的权限 |\n| 第三组rwx                              | 文件其他人的权限 |\n\n| **目录的权限** |                                                        |\n| -------------- | ------------------------------------------------------ |\n| r              | 具有读取目录的结构列表的权限，可以查看目录下有哪些文件 |\n| w              | 该权限对于目录来说是很大的                             |\n| 1              | 可以在该目录下新建新的文件和目录                       |\n| 2              | 可以删除已存在的文件和目录                             |\n| 3              | 将已存在的文件和目录重命名                             |\n| 4              | 移动该目录内的文件和目录的位置                         |\n| X              | 是否可以进入该目录                                     |\n\n| **文件权限的修改**                                           |                                                              |                          |      |          |      |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------ | ---- | -------- | ---- |\n| 命令                                                         | 命令作用                                                     | 格式                     | 选项 | 选项作用 |      |\n| chown                                                        | 修改文件的拥有者，前提是要有该拥有者                         | chown 拥有者   文件/目录 | -R   | 递归修改 |      |\n| chgrp                                                        | 修改文件所属组，前提是要有该组                               |                          | -R   | 递归修改 |      |\n| chmod                                                        | 修改拥有者和所属组的权限                                     |                          |      |          |      |\n| 加减法                                                       | chmod    u/g/o+/-/=r/w/x 123：   将文件1213给用户/组/其他人加/减/赋予一个读/写/执行权限 |                          |      |          |      |\n| 数字法                                                       | r=4    w=2  x=1 ： chmod  632 123 ：   将文件123给用户赋予r和w权限，给组赋予wx权限，给其他人赋予w权限 |                          |      |          |      |\n| chown -R goulandis 123 ： 将123目录下的所有文件包括目录本身的拥有者修改为goulandis |                                                              |                          |      |          |      |\n|                                                              |                                                              |                          |      |          |      |\n\n**默认权限：**\n\numask      查看当前用户的umask权限       \n\numask –(选项) ：临时修改默认权限\n\n/etc/bashrc ： 永久修改默认权限（通过修改脚本文件实现）\n\numask的选项说明\n\n0022         拿走的权限\n\n​         第一个数字表示特殊权限\n\n​         022=rwxr-xr-x ：不拿走用户的权限、拿走用户组的w权限、拿走其他用户的w权限\n\n目录无法拿走x权限\n\n普通用户umask值 0002\n\nroot用户umask值 0022\n\n## **文件的特殊权限:**\n\n![img](【Linux】Linux基础/7.png)\n\n当s出现在拥有者的x权限的位置时，表示拥有者有SUID的权限（Set UID）\n\n当s出现在用户组的x权限的位置时，表示用户组有SGID的权限（Set GID）\n\n当s出现在其他人的x权限的位置时，表示其他人有SBIT的权限（Sticky Bit）\n\n| SUID                                                         | 临时获取文件拥有者的权限-----只能针对文件                   |\n| ------------------------------------------------------------ | ----------------------------------------------------------- |\n| SGID                                                         | 可以作用于目录，也可以作用于文件                            |\n| 作用于文件 ： 和SUID作用一样                                 |                                                             |\n| 作用与目录 ： 继承父级目-----目录会不停的继承，下级目录会一直继承父级目录的权限值 |                                                             |\n| SBIT                                                         | 只有文件的拥有者才能删除修改该目录下的文件-----只能针对目录 |\n| S和T有大小写之分   大写 ： 没有x权限   小写 ： 有x权限       |                                                             |\n| 数字法 ：SUID=4、SGID=2、SBIT=1                              |                                                             |\n\n![img](【Linux】Linux基础/8.png)\n\n \n\n# l  **Linux进程**\n\n进程 ：已经启动的可执行程序的运行实例\n\nPID : 进程的ID（每一个进程都有唯一的PID）\n\nPPID ： 父进程的ID\n\n任何一个进程都可以创建紫进程\n\n| ｐｓ　：　查看当前的进程情况 |                          |\n| ---------------------------- | ------------------------ |\n| 选项                         | 作用                     |\n| －ａｕｘ／ａｕｘ             | 列出所有进程             |\n| －ｅｆ                       | 列出所有进程             |\n| －ｌ                         | 列出和当前用户有关的进程 |\n| －ｕ                         | 查看某一用户的进程       |\n| －ｔｏｐ                     | 实时查看进程状况         |\n\n![img](【Linux】Linux基础/9.png)\n\n","slug":"【Linux】Linux基础","published":1,"updated":"2021-02-01T13:32:01.185Z","_id":"ckk9hocao000mdwr79a1l3si1","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<center>Linux学习笔记</center>\n\n<h1 id=\"l-pwd：查看当前所在路\"><a href=\"#l-pwd：查看当前所在路\" class=\"headerlink\" title=\"l  pwd：查看当前所在路\"></a>l  <strong>pwd</strong>：查看当前所在路</h1><p>命令格式：命令 -选项 -参数（目录）</p>\n<p>命令：</p>\n<p>ls：查看当前路径下的文件</p>\n<p>选项：</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>-d</strong></td>\n<td>只查看当前目录的信息</td>\n</tr>\n<tr>\n<td><strong>-l</strong></td>\n<td>查看详细信息</td>\n</tr>\n<tr>\n<td><strong>-a</strong></td>\n<td>显示所有文件（包含隐藏文件）</td>\n</tr>\n<tr>\n<td><strong>-h</strong></td>\n<td>显示文件大小</td>\n</tr>\n</tbody></table>\n<p>例：ls -l     命令 -选项</p>\n<p>选项可以组合：ls -a -l/ls -al：查看所有文件的详细信息</p>\n<p>ls -al /etc/   命令 -选项 -参数 ：查看etc目录下的所有文件的详细信息</p>\n<h1 id=\"l-cd-：-路径切换\"><a href=\"#l-cd-：-路径切换\" class=\"headerlink\" title=\"l  cd ： 路径切换\"></a>l  <strong>cd</strong> <strong>：</strong> <strong>路径切换</strong></h1><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>“**-**”</td>\n<td>返回到之前目录</td>\n</tr>\n<tr>\n<td>“**..**”</td>\n<td>返回上一级目录（“.”当前目录，“..”上一级目录）</td>\n</tr>\n<tr>\n<td>“**~**”</td>\n<td>到用户所在的家目录（家目录：用户所在目录，如windowsC盘的用户目录）</td>\n</tr>\n</tbody></table>\n<p>touch ：cd到临时目录tmp下可创建新文件    touch 文件名</p>\n<h1 id=\"l-Linux目录结构\"><a href=\"#l-Linux目录结构\" class=\"headerlink\" title=\"l  Linux目录结构\"></a>l  <strong>Linux目录结构</strong></h1><table>\n<thead>\n<tr>\n<th>文件名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/boot</td>\n<td>linux启动时，需要的文件</td>\n</tr>\n<tr>\n<td>/dve</td>\n<td>设备文件</td>\n</tr>\n<tr>\n<td>/etc</td>\n<td>配置文件</td>\n</tr>\n<tr>\n<td>/home</td>\n<td>用户家目录</td>\n</tr>\n<tr>\n<td>/media</td>\n<td>媒体文件</td>\n</tr>\n<tr>\n<td>/mnt</td>\n<td>挂载文件</td>\n</tr>\n<tr>\n<td>/opt</td>\n<td>第三方软件</td>\n</tr>\n<tr>\n<td>/proc</td>\n<td>虚拟化文件</td>\n</tr>\n<tr>\n<td>/root</td>\n<td>管理员的家目录</td>\n</tr>\n<tr>\n<td>/run</td>\n<td>远程文件</td>\n</tr>\n<tr>\n<td>/srv</td>\n<td>压缩过的文件</td>\n</tr>\n<tr>\n<td>/sys</td>\n<td>系统文件</td>\n</tr>\n<tr>\n<td>/usr</td>\n<td>安装的软件，</td>\n</tr>\n<tr>\n<td>/var</td>\n<td>可变数据、日志</td>\n</tr>\n<tr>\n<td>/tmp</td>\n<td>临时文件</td>\n</tr>\n<tr>\n<td>/usr/bin</td>\n<td>普通用户可以使用的命令</td>\n</tr>\n<tr>\n<td>/usr/sbin</td>\n<td>超级用户可以使用的命令</td>\n</tr>\n<tr>\n<td>/usr/lib</td>\n<td>32位库文件</td>\n</tr>\n<tr>\n<td>/usr/lib64</td>\n<td>64位库文件</td>\n</tr>\n</tbody></table>\n<h1 id=\"l-Linux文件处理\"><a href=\"#l-Linux文件处理\" class=\"headerlink\" title=\"l  Linux文件处理\"></a>l  <strong>Linux文件处理</strong></h1><h2 id=\"文件类型判断：\"><a href=\"#文件类型判断：\" class=\"headerlink\" title=\"文件类型判断：\"></a><strong>文件类型判断：</strong></h2><p>-ls -l</p>\n<p><img src=\"/2019/08/25/%E3%80%90Linux%E3%80%91Linux%E5%9F%BA%E7%A1%80/1.png\" alt=\"img\"></p>\n<table>\n<thead>\n<tr>\n<th>文件以“_”开头</th>\n<th>文件类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>“d”</td>\n<td>目录</td>\n</tr>\n<tr>\n<td>“-”</td>\n<td>文件</td>\n</tr>\n<tr>\n<td>“l”</td>\n<td>链接文件（类似win中快捷方式）</td>\n</tr>\n<tr>\n<td>“b”</td>\n<td>设备文件，提供存储接口的设备</td>\n</tr>\n<tr>\n<td>“c”</td>\n<td>设备文件，提供串行结合口的设备—键盘</td>\n</tr>\n</tbody></table>\n<h2 id=\"文件处理：\"><a href=\"#文件处理：\" class=\"headerlink\" title=\"文件处理：\"></a><strong>文件处理：</strong></h2><p><img src=\"/2019/08/25/%E3%80%90Linux%E3%80%91Linux%E5%9F%BA%E7%A1%80/2.png\" alt=\"img\"></p>\n<p>cp            cp abc a：复制abc并命名为a/多文件复制：cp a abc goulandis/：复制a、abc到goulandis下</p>\n<p>mv            mv 文件1 文件2：将文件1更名为文件2/mv 文件1（文件2 ….） 目录：将文件移动到目录下                 </p>\n<p>rm             rm -f 文件1 （文件2…）：强制删除</p>\n<p>mkdir       mkdir -p （要创建的）目录1/（要创建的）目录2：创建目录1并在目录1下创建目录2</p>\n<h2 id=\"查看文件：\"><a href=\"#查看文件：\" class=\"headerlink\" title=\"查看文件：\"></a><strong>查看文件：</strong></h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>cat/**</strong>路径**</td>\n<td>查看文件</td>\n</tr>\n<tr>\n<td>nl</td>\n<td>显示的时候，顺便出现行号</td>\n</tr>\n<tr>\n<td>tac</td>\n<td>从最后一行开始显示</td>\n</tr>\n<tr>\n<td>head</td>\n<td>显示文件前10行 -n：设置行数</td>\n</tr>\n<tr>\n<td>tail</td>\n<td>显示文件尾10行 -n：设置行数</td>\n</tr>\n<tr>\n<td>wc</td>\n<td>显示文件行数，数字，字节</td>\n</tr>\n<tr>\n<td>more</td>\n<td>一页一页翻动</td>\n</tr>\n<tr>\n<td><strong>less</strong></td>\n<td>一页一页翻动</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>cat**</strong>和tac**<strong>选项</strong></th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-A</td>\n<td>整合命令-vET（整合-v、-E、-T）</td>\n</tr>\n<tr>\n<td>-b</td>\n<td>列出行号，但是空白行不标志行号</td>\n</tr>\n<tr>\n<td>-E</td>\n<td>将结尾的断行字符（$）显示出来</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>列出行号，空白行也会标志出来</td>\n</tr>\n<tr>\n<td>-T</td>\n<td>将tab键以^I显示</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>列出一些看不出来的字符</td>\n</tr>\n<tr>\n<td>&lt;区分大小写&gt;</td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>nl**</strong>的选项**</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>总选项</td>\n<td>分选项</td>\n<td>作用</td>\n</tr>\n<tr>\n<td>b</td>\n<td>ba</td>\n<td>无论是否有空，都列出行号</td>\n</tr>\n<tr>\n<td>bt</td>\n<td>如果有空行，则不列出行号（默认）</td>\n<td></td>\n</tr>\n<tr>\n<td>n</td>\n<td>nln</td>\n<td>行号在屏幕最左方</td>\n</tr>\n<tr>\n<td>nrn</td>\n<td>行号在屏幕最右方，前面不加0</td>\n<td></td>\n</tr>\n<tr>\n<td>nrz</td>\n<td>行号在屏幕最右方，前面加0</td>\n<td></td>\n</tr>\n<tr>\n<td>w</td>\n<td></td>\n<td>缩进多少位</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>more**</strong>的选项**</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>空格</td>\n<td>向下翻一页</td>\n</tr>\n<tr>\n<td>回车</td>\n<td>向下翻一行</td>\n</tr>\n<tr>\n<td>/字符串</td>\n<td>搜索</td>\n</tr>\n<tr>\n<td>:f</td>\n<td>立刻显示文件名和行数</td>\n</tr>\n<tr>\n<td>b</td>\n<td>翻到第一页</td>\n</tr>\n<tr>\n<td>q</td>\n<td>离开</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>less**</strong>的选项**</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>空格</strong></td>\n<td>向下翻动一行</td>\n</tr>\n<tr>\n<td><strong>回车</strong></td>\n<td>向下翻动一页</td>\n</tr>\n<tr>\n<td><strong>pagedown</strong></td>\n<td>向下翻动一页</td>\n</tr>\n<tr>\n<td><strong>pageup</strong></td>\n<td>向上翻动一页</td>\n</tr>\n<tr>\n<td><strong>n</strong></td>\n<td>重复前一个搜索（操作：n）</td>\n</tr>\n<tr>\n<td><strong>N</strong></td>\n<td>反向重复前一个搜索（操作：shift+n）</td>\n</tr>\n<tr>\n<td><strong>q</strong></td>\n<td>退出</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>head和tail的选项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-n</td>\n<td>指定显示几行，默认10行</td>\n</tr>\n<tr>\n<td>日志文件路径（/var/log/messages）</td>\n<td>查看日志</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>wc的选项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-c</td>\n<td>只显示字节</td>\n</tr>\n<tr>\n<td>-w</td>\n<td>只显示字数，一个字被定义为空白、跳格、换行字符、分隔字符串</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>只显示行</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>Vim编辑器操作命令</strong></th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>i</strong></td>\n<td>插入</td>\n</tr>\n<tr>\n<td><strong>esc</strong></td>\n<td>退出</td>\n</tr>\n<tr>\n<td><strong>u</strong></td>\n<td>撤销</td>\n</tr>\n<tr>\n<td><strong>x</strong></td>\n<td>删除</td>\n</tr>\n<tr>\n<td><strong>v</strong></td>\n<td>选择文本</td>\n</tr>\n<tr>\n<td><strong>y</strong></td>\n<td>复制</td>\n</tr>\n<tr>\n<td><strong>yy</strong></td>\n<td>复制当前行</td>\n</tr>\n<tr>\n<td><strong>dd</strong></td>\n<td>删除光标所在行</td>\n</tr>\n<tr>\n<td><strong>p</strong></td>\n<td>粘贴</td>\n</tr>\n<tr>\n<td><strong>:w</strong></td>\n<td>保存</td>\n</tr>\n<tr>\n<td><strong>:wq</strong></td>\n<td>保存并退出</td>\n</tr>\n<tr>\n<td><strong>:q**</strong>！**</td>\n<td>强制退出</td>\n</tr>\n</tbody></table>\n<h2 id=\"软链接：\"><a href=\"#软链接：\" class=\"headerlink\" title=\"软链接：\"></a><strong>软链接：</strong></h2><p><img src=\"/2019/08/25/%E3%80%90Linux%E3%80%91Linux%E5%9F%BA%E7%A1%80/3.png\" alt=\"img\"></p>\n<p><img src=\"/2019/08/25/%E3%80%90Linux%E3%80%91Linux%E5%9F%BA%E7%A1%80/4.png\" alt=\"img\"></p>\n<h2 id=\"硬链接：\"><a href=\"#硬链接：\" class=\"headerlink\" title=\"硬链接：\"></a><strong>硬链接：</strong></h2><p><img src=\"/2019/08/25/%E3%80%90Linux%E3%80%91Linux%E5%9F%BA%E7%A1%80/5.png\"></p>\n<p>ls -I ：查看Inode编号</p>\n<h1 id=\"l-关机操作\"><a href=\"#l-关机操作\" class=\"headerlink\" title=\"l  关机操作\"></a>l  <strong>关机操作</strong></h1><table>\n<thead>\n<tr>\n<th>sync</th>\n<th>数据同步写入磁盘</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>shutdown</strong></td>\n<td>常用关机指令</td>\n</tr>\n<tr>\n<td>reboot、halt、poweroff</td>\n<td>重启，关机</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>shutdown的指令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-t</td>\n<td>添加秒数。几秒后关机</td>\n</tr>\n<tr>\n<td>-k</td>\n<td>不是真关机，二十发出警告信息</td>\n</tr>\n<tr>\n<td><strong>-r</strong></td>\n<td>在系统服务都停止后，重启</td>\n</tr>\n<tr>\n<td><strong>-h</strong></td>\n<td>在系统服务都停止后，关机</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>关闭，并且开机一个后强行略过磁盘检查</td>\n</tr>\n<tr>\n<td>-F</td>\n<td>重启后强制进行磁盘检查</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>取消已经在进行的shutdown指令内容</td>\n</tr>\n<tr>\n<td></td>\n<td>shutdown -h now    现在马上停止服务并关机   shutdown -h 12：00       在12：00时刻停止服务并关机   shutdown -h +10     十分钟以后停止服务并关机   shutdown -r now     现在马上停止服务并重启   shutdown -r +30 ‘the system will reboot’       先发一个警告信息“the system will reboot”，系统将要在30分钟后重启   shutdown -k now ‘the system will reboot’     现在马上发出一个警告信息“the system will reboot”</td>\n</tr>\n</tbody></table>\n<h1 id=\"l-Linux文件权限\"><a href=\"#l-Linux文件权限\" class=\"headerlink\" title=\"l  Linux文件权限\"></a>l  <strong>Linux文件权限</strong></h1><p><img src=\"/2019/08/25/%E3%80%90Linux%E3%80%91Linux%E5%9F%BA%E7%A1%80/6.png\" alt=\"img\"></p>\n<table>\n<thead>\n<tr>\n<th>权限</th>\n<th>连接</th>\n<th>所有者</th>\n<th>所属组</th>\n<th>容量（默认单位B）</th>\n<th>修改日期</th>\n<th>文件名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>文件的权限</strong></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>r、w、x ： 读、写、执行，没有权限就是-</td>\n<td></td>\n</tr>\n<tr>\n<td>第一组rwx</td>\n<td>文件所有者的权限</td>\n</tr>\n<tr>\n<td>第二组rwx</td>\n<td>文件所属组的权限</td>\n</tr>\n<tr>\n<td>第三组rwx</td>\n<td>文件其他人的权限</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>目录的权限</strong></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>r</td>\n<td>具有读取目录的结构列表的权限，可以查看目录下有哪些文件</td>\n</tr>\n<tr>\n<td>w</td>\n<td>该权限对于目录来说是很大的</td>\n</tr>\n<tr>\n<td>1</td>\n<td>可以在该目录下新建新的文件和目录</td>\n</tr>\n<tr>\n<td>2</td>\n<td>可以删除已存在的文件和目录</td>\n</tr>\n<tr>\n<td>3</td>\n<td>将已存在的文件和目录重命名</td>\n</tr>\n<tr>\n<td>4</td>\n<td>移动该目录内的文件和目录的位置</td>\n</tr>\n<tr>\n<td>X</td>\n<td>是否可以进入该目录</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>文件权限的修改</strong></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>命令</td>\n<td>命令作用</td>\n<td>格式</td>\n<td>选项</td>\n<td>选项作用</td>\n<td></td>\n</tr>\n<tr>\n<td>chown</td>\n<td>修改文件的拥有者，前提是要有该拥有者</td>\n<td>chown 拥有者   文件/目录</td>\n<td>-R</td>\n<td>递归修改</td>\n<td></td>\n</tr>\n<tr>\n<td>chgrp</td>\n<td>修改文件所属组，前提是要有该组</td>\n<td></td>\n<td>-R</td>\n<td>递归修改</td>\n<td></td>\n</tr>\n<tr>\n<td>chmod</td>\n<td>修改拥有者和所属组的权限</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>加减法</td>\n<td>chmod    u/g/o+/-/=r/w/x 123：   将文件1213给用户/组/其他人加/减/赋予一个读/写/执行权限</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>数字法</td>\n<td>r=4    w=2  x=1 ： chmod  632 123 ：   将文件123给用户赋予r和w权限，给组赋予wx权限，给其他人赋予w权限</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>chown -R goulandis 123 ： 将123目录下的所有文件包括目录本身的拥有者修改为goulandis</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><strong>默认权限：</strong></p>\n<p>umask      查看当前用户的umask权限       </p>\n<p>umask –(选项) ：临时修改默认权限</p>\n<p>/etc/bashrc ： 永久修改默认权限（通过修改脚本文件实现）</p>\n<p>umask的选项说明</p>\n<p>0022         拿走的权限</p>\n<p>​         第一个数字表示特殊权限</p>\n<p>​         022=rwxr-xr-x ：不拿走用户的权限、拿走用户组的w权限、拿走其他用户的w权限</p>\n<p>目录无法拿走x权限</p>\n<p>普通用户umask值 0002</p>\n<p>root用户umask值 0022</p>\n<h2 id=\"文件的特殊权限\"><a href=\"#文件的特殊权限\" class=\"headerlink\" title=\"文件的特殊权限:\"></a><strong>文件的特殊权限:</strong></h2><p><img src=\"/2019/08/25/%E3%80%90Linux%E3%80%91Linux%E5%9F%BA%E7%A1%80/7.png\" alt=\"img\"></p>\n<p>当s出现在拥有者的x权限的位置时，表示拥有者有SUID的权限（Set UID）</p>\n<p>当s出现在用户组的x权限的位置时，表示用户组有SGID的权限（Set GID）</p>\n<p>当s出现在其他人的x权限的位置时，表示其他人有SBIT的权限（Sticky Bit）</p>\n<table>\n<thead>\n<tr>\n<th>SUID</th>\n<th>临时获取文件拥有者的权限—–只能针对文件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SGID</td>\n<td>可以作用于目录，也可以作用于文件</td>\n</tr>\n<tr>\n<td>作用于文件 ： 和SUID作用一样</td>\n<td></td>\n</tr>\n<tr>\n<td>作用与目录 ： 继承父级目—–目录会不停的继承，下级目录会一直继承父级目录的权限值</td>\n<td></td>\n</tr>\n<tr>\n<td>SBIT</td>\n<td>只有文件的拥有者才能删除修改该目录下的文件—–只能针对目录</td>\n</tr>\n<tr>\n<td>S和T有大小写之分   大写 ： 没有x权限   小写 ： 有x权限</td>\n<td></td>\n</tr>\n<tr>\n<td>数字法 ：SUID=4、SGID=2、SBIT=1</td>\n<td></td>\n</tr>\n</tbody></table>\n<p><img src=\"/2019/08/25/%E3%80%90Linux%E3%80%91Linux%E5%9F%BA%E7%A1%80/8.png\" alt=\"img\"></p>\n<h1 id=\"l-Linux进程\"><a href=\"#l-Linux进程\" class=\"headerlink\" title=\"l  Linux进程\"></a>l  <strong>Linux进程</strong></h1><p>进程 ：已经启动的可执行程序的运行实例</p>\n<p>PID : 进程的ID（每一个进程都有唯一的PID）</p>\n<p>PPID ： 父进程的ID</p>\n<p>任何一个进程都可以创建紫进程</p>\n<table>\n<thead>\n<tr>\n<th>ｐｓ　：　查看当前的进程情况</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>选项</td>\n<td>作用</td>\n</tr>\n<tr>\n<td>－ａｕｘ／ａｕｘ</td>\n<td>列出所有进程</td>\n</tr>\n<tr>\n<td>－ｅｆ</td>\n<td>列出所有进程</td>\n</tr>\n<tr>\n<td>－ｌ</td>\n<td>列出和当前用户有关的进程</td>\n</tr>\n<tr>\n<td>－ｕ</td>\n<td>查看某一用户的进程</td>\n</tr>\n<tr>\n<td>－ｔｏｐ</td>\n<td>实时查看进程状况</td>\n</tr>\n</tbody></table>\n<p><img src=\"/2019/08/25/%E3%80%90Linux%E3%80%91Linux%E5%9F%BA%E7%A1%80/9.png\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<center>Linux学习笔记</center>\n\n<h1 id=\"l-pwd：查看当前所在路\"><a href=\"#l-pwd：查看当前所在路\" class=\"headerlink\" title=\"l  pwd：查看当前所在路\"></a>l  <strong>pwd</strong>：查看当前所在路</h1><p>命令格式：命令 -选项 -参数（目录）</p>\n<p>命令：</p>\n<p>ls：查看当前路径下的文件</p>\n<p>选项：</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>-d</strong></td>\n<td>只查看当前目录的信息</td>\n</tr>\n<tr>\n<td><strong>-l</strong></td>\n<td>查看详细信息</td>\n</tr>\n<tr>\n<td><strong>-a</strong></td>\n<td>显示所有文件（包含隐藏文件）</td>\n</tr>\n<tr>\n<td><strong>-h</strong></td>\n<td>显示文件大小</td>\n</tr>\n</tbody></table>\n<p>例：ls -l     命令 -选项</p>\n<p>选项可以组合：ls -a -l/ls -al：查看所有文件的详细信息</p>\n<p>ls -al /etc/   命令 -选项 -参数 ：查看etc目录下的所有文件的详细信息</p>\n<h1 id=\"l-cd-：-路径切换\"><a href=\"#l-cd-：-路径切换\" class=\"headerlink\" title=\"l  cd ： 路径切换\"></a>l  <strong>cd</strong> <strong>：</strong> <strong>路径切换</strong></h1><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>“**-**”</td>\n<td>返回到之前目录</td>\n</tr>\n<tr>\n<td>“**..**”</td>\n<td>返回上一级目录（“.”当前目录，“..”上一级目录）</td>\n</tr>\n<tr>\n<td>“**~**”</td>\n<td>到用户所在的家目录（家目录：用户所在目录，如windowsC盘的用户目录）</td>\n</tr>\n</tbody></table>\n<p>touch ：cd到临时目录tmp下可创建新文件    touch 文件名</p>\n<h1 id=\"l-Linux目录结构\"><a href=\"#l-Linux目录结构\" class=\"headerlink\" title=\"l  Linux目录结构\"></a>l  <strong>Linux目录结构</strong></h1><table>\n<thead>\n<tr>\n<th>文件名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/boot</td>\n<td>linux启动时，需要的文件</td>\n</tr>\n<tr>\n<td>/dve</td>\n<td>设备文件</td>\n</tr>\n<tr>\n<td>/etc</td>\n<td>配置文件</td>\n</tr>\n<tr>\n<td>/home</td>\n<td>用户家目录</td>\n</tr>\n<tr>\n<td>/media</td>\n<td>媒体文件</td>\n</tr>\n<tr>\n<td>/mnt</td>\n<td>挂载文件</td>\n</tr>\n<tr>\n<td>/opt</td>\n<td>第三方软件</td>\n</tr>\n<tr>\n<td>/proc</td>\n<td>虚拟化文件</td>\n</tr>\n<tr>\n<td>/root</td>\n<td>管理员的家目录</td>\n</tr>\n<tr>\n<td>/run</td>\n<td>远程文件</td>\n</tr>\n<tr>\n<td>/srv</td>\n<td>压缩过的文件</td>\n</tr>\n<tr>\n<td>/sys</td>\n<td>系统文件</td>\n</tr>\n<tr>\n<td>/usr</td>\n<td>安装的软件，</td>\n</tr>\n<tr>\n<td>/var</td>\n<td>可变数据、日志</td>\n</tr>\n<tr>\n<td>/tmp</td>\n<td>临时文件</td>\n</tr>\n<tr>\n<td>/usr/bin</td>\n<td>普通用户可以使用的命令</td>\n</tr>\n<tr>\n<td>/usr/sbin</td>\n<td>超级用户可以使用的命令</td>\n</tr>\n<tr>\n<td>/usr/lib</td>\n<td>32位库文件</td>\n</tr>\n<tr>\n<td>/usr/lib64</td>\n<td>64位库文件</td>\n</tr>\n</tbody></table>\n<h1 id=\"l-Linux文件处理\"><a href=\"#l-Linux文件处理\" class=\"headerlink\" title=\"l  Linux文件处理\"></a>l  <strong>Linux文件处理</strong></h1><h2 id=\"文件类型判断：\"><a href=\"#文件类型判断：\" class=\"headerlink\" title=\"文件类型判断：\"></a><strong>文件类型判断：</strong></h2><p>-ls -l</p>\n<p><img src=\"/2019/08/25/%E3%80%90Linux%E3%80%91Linux%E5%9F%BA%E7%A1%80/1.png\" alt=\"img\"></p>\n<table>\n<thead>\n<tr>\n<th>文件以“_”开头</th>\n<th>文件类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>“d”</td>\n<td>目录</td>\n</tr>\n<tr>\n<td>“-”</td>\n<td>文件</td>\n</tr>\n<tr>\n<td>“l”</td>\n<td>链接文件（类似win中快捷方式）</td>\n</tr>\n<tr>\n<td>“b”</td>\n<td>设备文件，提供存储接口的设备</td>\n</tr>\n<tr>\n<td>“c”</td>\n<td>设备文件，提供串行结合口的设备—键盘</td>\n</tr>\n</tbody></table>\n<h2 id=\"文件处理：\"><a href=\"#文件处理：\" class=\"headerlink\" title=\"文件处理：\"></a><strong>文件处理：</strong></h2><p><img src=\"/2019/08/25/%E3%80%90Linux%E3%80%91Linux%E5%9F%BA%E7%A1%80/2.png\" alt=\"img\"></p>\n<p>cp            cp abc a：复制abc并命名为a/多文件复制：cp a abc goulandis/：复制a、abc到goulandis下</p>\n<p>mv            mv 文件1 文件2：将文件1更名为文件2/mv 文件1（文件2 ….） 目录：将文件移动到目录下                 </p>\n<p>rm             rm -f 文件1 （文件2…）：强制删除</p>\n<p>mkdir       mkdir -p （要创建的）目录1/（要创建的）目录2：创建目录1并在目录1下创建目录2</p>\n<h2 id=\"查看文件：\"><a href=\"#查看文件：\" class=\"headerlink\" title=\"查看文件：\"></a><strong>查看文件：</strong></h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>cat/**</strong>路径**</td>\n<td>查看文件</td>\n</tr>\n<tr>\n<td>nl</td>\n<td>显示的时候，顺便出现行号</td>\n</tr>\n<tr>\n<td>tac</td>\n<td>从最后一行开始显示</td>\n</tr>\n<tr>\n<td>head</td>\n<td>显示文件前10行 -n：设置行数</td>\n</tr>\n<tr>\n<td>tail</td>\n<td>显示文件尾10行 -n：设置行数</td>\n</tr>\n<tr>\n<td>wc</td>\n<td>显示文件行数，数字，字节</td>\n</tr>\n<tr>\n<td>more</td>\n<td>一页一页翻动</td>\n</tr>\n<tr>\n<td><strong>less</strong></td>\n<td>一页一页翻动</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>cat**</strong>和tac**<strong>选项</strong></th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-A</td>\n<td>整合命令-vET（整合-v、-E、-T）</td>\n</tr>\n<tr>\n<td>-b</td>\n<td>列出行号，但是空白行不标志行号</td>\n</tr>\n<tr>\n<td>-E</td>\n<td>将结尾的断行字符（$）显示出来</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>列出行号，空白行也会标志出来</td>\n</tr>\n<tr>\n<td>-T</td>\n<td>将tab键以^I显示</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>列出一些看不出来的字符</td>\n</tr>\n<tr>\n<td>&lt;区分大小写&gt;</td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>nl**</strong>的选项**</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>总选项</td>\n<td>分选项</td>\n<td>作用</td>\n</tr>\n<tr>\n<td>b</td>\n<td>ba</td>\n<td>无论是否有空，都列出行号</td>\n</tr>\n<tr>\n<td>bt</td>\n<td>如果有空行，则不列出行号（默认）</td>\n<td></td>\n</tr>\n<tr>\n<td>n</td>\n<td>nln</td>\n<td>行号在屏幕最左方</td>\n</tr>\n<tr>\n<td>nrn</td>\n<td>行号在屏幕最右方，前面不加0</td>\n<td></td>\n</tr>\n<tr>\n<td>nrz</td>\n<td>行号在屏幕最右方，前面加0</td>\n<td></td>\n</tr>\n<tr>\n<td>w</td>\n<td></td>\n<td>缩进多少位</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>more**</strong>的选项**</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>空格</td>\n<td>向下翻一页</td>\n</tr>\n<tr>\n<td>回车</td>\n<td>向下翻一行</td>\n</tr>\n<tr>\n<td>/字符串</td>\n<td>搜索</td>\n</tr>\n<tr>\n<td>:f</td>\n<td>立刻显示文件名和行数</td>\n</tr>\n<tr>\n<td>b</td>\n<td>翻到第一页</td>\n</tr>\n<tr>\n<td>q</td>\n<td>离开</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>less**</strong>的选项**</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>空格</strong></td>\n<td>向下翻动一行</td>\n</tr>\n<tr>\n<td><strong>回车</strong></td>\n<td>向下翻动一页</td>\n</tr>\n<tr>\n<td><strong>pagedown</strong></td>\n<td>向下翻动一页</td>\n</tr>\n<tr>\n<td><strong>pageup</strong></td>\n<td>向上翻动一页</td>\n</tr>\n<tr>\n<td><strong>n</strong></td>\n<td>重复前一个搜索（操作：n）</td>\n</tr>\n<tr>\n<td><strong>N</strong></td>\n<td>反向重复前一个搜索（操作：shift+n）</td>\n</tr>\n<tr>\n<td><strong>q</strong></td>\n<td>退出</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>head和tail的选项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-n</td>\n<td>指定显示几行，默认10行</td>\n</tr>\n<tr>\n<td>日志文件路径（/var/log/messages）</td>\n<td>查看日志</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>wc的选项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-c</td>\n<td>只显示字节</td>\n</tr>\n<tr>\n<td>-w</td>\n<td>只显示字数，一个字被定义为空白、跳格、换行字符、分隔字符串</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>只显示行</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>Vim编辑器操作命令</strong></th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>i</strong></td>\n<td>插入</td>\n</tr>\n<tr>\n<td><strong>esc</strong></td>\n<td>退出</td>\n</tr>\n<tr>\n<td><strong>u</strong></td>\n<td>撤销</td>\n</tr>\n<tr>\n<td><strong>x</strong></td>\n<td>删除</td>\n</tr>\n<tr>\n<td><strong>v</strong></td>\n<td>选择文本</td>\n</tr>\n<tr>\n<td><strong>y</strong></td>\n<td>复制</td>\n</tr>\n<tr>\n<td><strong>yy</strong></td>\n<td>复制当前行</td>\n</tr>\n<tr>\n<td><strong>dd</strong></td>\n<td>删除光标所在行</td>\n</tr>\n<tr>\n<td><strong>p</strong></td>\n<td>粘贴</td>\n</tr>\n<tr>\n<td><strong>:w</strong></td>\n<td>保存</td>\n</tr>\n<tr>\n<td><strong>:wq</strong></td>\n<td>保存并退出</td>\n</tr>\n<tr>\n<td><strong>:q**</strong>！**</td>\n<td>强制退出</td>\n</tr>\n</tbody></table>\n<h2 id=\"软链接：\"><a href=\"#软链接：\" class=\"headerlink\" title=\"软链接：\"></a><strong>软链接：</strong></h2><p><img src=\"/2019/08/25/%E3%80%90Linux%E3%80%91Linux%E5%9F%BA%E7%A1%80/3.png\" alt=\"img\"></p>\n<p><img src=\"/2019/08/25/%E3%80%90Linux%E3%80%91Linux%E5%9F%BA%E7%A1%80/4.png\" alt=\"img\"></p>\n<h2 id=\"硬链接：\"><a href=\"#硬链接：\" class=\"headerlink\" title=\"硬链接：\"></a><strong>硬链接：</strong></h2><p><img src=\"/2019/08/25/%E3%80%90Linux%E3%80%91Linux%E5%9F%BA%E7%A1%80/5.png\"></p>\n<p>ls -I ：查看Inode编号</p>\n<h1 id=\"l-关机操作\"><a href=\"#l-关机操作\" class=\"headerlink\" title=\"l  关机操作\"></a>l  <strong>关机操作</strong></h1><table>\n<thead>\n<tr>\n<th>sync</th>\n<th>数据同步写入磁盘</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>shutdown</strong></td>\n<td>常用关机指令</td>\n</tr>\n<tr>\n<td>reboot、halt、poweroff</td>\n<td>重启，关机</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>shutdown的指令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-t</td>\n<td>添加秒数。几秒后关机</td>\n</tr>\n<tr>\n<td>-k</td>\n<td>不是真关机，二十发出警告信息</td>\n</tr>\n<tr>\n<td><strong>-r</strong></td>\n<td>在系统服务都停止后，重启</td>\n</tr>\n<tr>\n<td><strong>-h</strong></td>\n<td>在系统服务都停止后，关机</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>关闭，并且开机一个后强行略过磁盘检查</td>\n</tr>\n<tr>\n<td>-F</td>\n<td>重启后强制进行磁盘检查</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>取消已经在进行的shutdown指令内容</td>\n</tr>\n<tr>\n<td></td>\n<td>shutdown -h now    现在马上停止服务并关机   shutdown -h 12：00       在12：00时刻停止服务并关机   shutdown -h +10     十分钟以后停止服务并关机   shutdown -r now     现在马上停止服务并重启   shutdown -r +30 ‘the system will reboot’       先发一个警告信息“the system will reboot”，系统将要在30分钟后重启   shutdown -k now ‘the system will reboot’     现在马上发出一个警告信息“the system will reboot”</td>\n</tr>\n</tbody></table>\n<h1 id=\"l-Linux文件权限\"><a href=\"#l-Linux文件权限\" class=\"headerlink\" title=\"l  Linux文件权限\"></a>l  <strong>Linux文件权限</strong></h1><p><img src=\"/2019/08/25/%E3%80%90Linux%E3%80%91Linux%E5%9F%BA%E7%A1%80/6.png\" alt=\"img\"></p>\n<table>\n<thead>\n<tr>\n<th>权限</th>\n<th>连接</th>\n<th>所有者</th>\n<th>所属组</th>\n<th>容量（默认单位B）</th>\n<th>修改日期</th>\n<th>文件名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>文件的权限</strong></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>r、w、x ： 读、写、执行，没有权限就是-</td>\n<td></td>\n</tr>\n<tr>\n<td>第一组rwx</td>\n<td>文件所有者的权限</td>\n</tr>\n<tr>\n<td>第二组rwx</td>\n<td>文件所属组的权限</td>\n</tr>\n<tr>\n<td>第三组rwx</td>\n<td>文件其他人的权限</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>目录的权限</strong></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>r</td>\n<td>具有读取目录的结构列表的权限，可以查看目录下有哪些文件</td>\n</tr>\n<tr>\n<td>w</td>\n<td>该权限对于目录来说是很大的</td>\n</tr>\n<tr>\n<td>1</td>\n<td>可以在该目录下新建新的文件和目录</td>\n</tr>\n<tr>\n<td>2</td>\n<td>可以删除已存在的文件和目录</td>\n</tr>\n<tr>\n<td>3</td>\n<td>将已存在的文件和目录重命名</td>\n</tr>\n<tr>\n<td>4</td>\n<td>移动该目录内的文件和目录的位置</td>\n</tr>\n<tr>\n<td>X</td>\n<td>是否可以进入该目录</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>文件权限的修改</strong></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>命令</td>\n<td>命令作用</td>\n<td>格式</td>\n<td>选项</td>\n<td>选项作用</td>\n<td></td>\n</tr>\n<tr>\n<td>chown</td>\n<td>修改文件的拥有者，前提是要有该拥有者</td>\n<td>chown 拥有者   文件/目录</td>\n<td>-R</td>\n<td>递归修改</td>\n<td></td>\n</tr>\n<tr>\n<td>chgrp</td>\n<td>修改文件所属组，前提是要有该组</td>\n<td></td>\n<td>-R</td>\n<td>递归修改</td>\n<td></td>\n</tr>\n<tr>\n<td>chmod</td>\n<td>修改拥有者和所属组的权限</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>加减法</td>\n<td>chmod    u/g/o+/-/=r/w/x 123：   将文件1213给用户/组/其他人加/减/赋予一个读/写/执行权限</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>数字法</td>\n<td>r=4    w=2  x=1 ： chmod  632 123 ：   将文件123给用户赋予r和w权限，给组赋予wx权限，给其他人赋予w权限</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>chown -R goulandis 123 ： 将123目录下的所有文件包括目录本身的拥有者修改为goulandis</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><strong>默认权限：</strong></p>\n<p>umask      查看当前用户的umask权限       </p>\n<p>umask –(选项) ：临时修改默认权限</p>\n<p>/etc/bashrc ： 永久修改默认权限（通过修改脚本文件实现）</p>\n<p>umask的选项说明</p>\n<p>0022         拿走的权限</p>\n<p>​         第一个数字表示特殊权限</p>\n<p>​         022=rwxr-xr-x ：不拿走用户的权限、拿走用户组的w权限、拿走其他用户的w权限</p>\n<p>目录无法拿走x权限</p>\n<p>普通用户umask值 0002</p>\n<p>root用户umask值 0022</p>\n<h2 id=\"文件的特殊权限\"><a href=\"#文件的特殊权限\" class=\"headerlink\" title=\"文件的特殊权限:\"></a><strong>文件的特殊权限:</strong></h2><p><img src=\"/2019/08/25/%E3%80%90Linux%E3%80%91Linux%E5%9F%BA%E7%A1%80/7.png\" alt=\"img\"></p>\n<p>当s出现在拥有者的x权限的位置时，表示拥有者有SUID的权限（Set UID）</p>\n<p>当s出现在用户组的x权限的位置时，表示用户组有SGID的权限（Set GID）</p>\n<p>当s出现在其他人的x权限的位置时，表示其他人有SBIT的权限（Sticky Bit）</p>\n<table>\n<thead>\n<tr>\n<th>SUID</th>\n<th>临时获取文件拥有者的权限—–只能针对文件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SGID</td>\n<td>可以作用于目录，也可以作用于文件</td>\n</tr>\n<tr>\n<td>作用于文件 ： 和SUID作用一样</td>\n<td></td>\n</tr>\n<tr>\n<td>作用与目录 ： 继承父级目—–目录会不停的继承，下级目录会一直继承父级目录的权限值</td>\n<td></td>\n</tr>\n<tr>\n<td>SBIT</td>\n<td>只有文件的拥有者才能删除修改该目录下的文件—–只能针对目录</td>\n</tr>\n<tr>\n<td>S和T有大小写之分   大写 ： 没有x权限   小写 ： 有x权限</td>\n<td></td>\n</tr>\n<tr>\n<td>数字法 ：SUID=4、SGID=2、SBIT=1</td>\n<td></td>\n</tr>\n</tbody></table>\n<p><img src=\"/2019/08/25/%E3%80%90Linux%E3%80%91Linux%E5%9F%BA%E7%A1%80/8.png\" alt=\"img\"></p>\n<h1 id=\"l-Linux进程\"><a href=\"#l-Linux进程\" class=\"headerlink\" title=\"l  Linux进程\"></a>l  <strong>Linux进程</strong></h1><p>进程 ：已经启动的可执行程序的运行实例</p>\n<p>PID : 进程的ID（每一个进程都有唯一的PID）</p>\n<p>PPID ： 父进程的ID</p>\n<p>任何一个进程都可以创建紫进程</p>\n<table>\n<thead>\n<tr>\n<th>ｐｓ　：　查看当前的进程情况</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>选项</td>\n<td>作用</td>\n</tr>\n<tr>\n<td>－ａｕｘ／ａｕｘ</td>\n<td>列出所有进程</td>\n</tr>\n<tr>\n<td>－ｅｆ</td>\n<td>列出所有进程</td>\n</tr>\n<tr>\n<td>－ｌ</td>\n<td>列出和当前用户有关的进程</td>\n</tr>\n<tr>\n<td>－ｕ</td>\n<td>查看某一用户的进程</td>\n</tr>\n<tr>\n<td>－ｔｏｐ</td>\n<td>实时查看进程状况</td>\n</tr>\n</tbody></table>\n<p><img src=\"/2019/08/25/%E3%80%90Linux%E3%80%91Linux%E5%9F%BA%E7%A1%80/9.png\" alt=\"img\"></p>\n"},{"title":"【MyQSL】MyQSL存储过程","date":"2019-10-21T13:12:42.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 1.什么是存储过程\n\n数据库中的存储过程有点类似编程中的函数，可以供外部环境在需要时调用，并且存储过程只需要编译一次，之后再用则无需进行在此编译。\n\n# 2.存储过程的创建\n\n## 代码\n\n```mysql\ndelimiter //\ncreate procedure Test(in parameter01 int,out parameter02 varchar(45));\nbegin\n\t-- 存储逻辑\nend\n//\ndelimiter ;\n```\n\n## 解析\n\n- **delimiter //**:更改MySQL中语句分隔符`;`，目的就是为了将存储过程作为一个整体，使MySQL中的存储逻辑中的`;`在代码编辑阶段不被编译器识别，`//`标识在两个`//`中间的逻辑为存储逻辑，告知MySQL其中的`;`不需要解释；<font color=red> 但是要记住，在用完`//`这个之后要记得将分隔符转回`;`,否则之后的语句也会使用`//`作为分隔符</font>。其中`//`可以是任意字符或字符串。\n- **create procedure Test(in parameter01 int , out parameter02 vachar(45))**:创建一个存储过程Test，存储过程包含输入参数parameter01和输出参数parameter02，其中`in`标识输入参数，`out`标识输出参数，如果括号中不写标识in/out则默认为输入参数，其中输入参数只能用于从外界传入参数，输出参数只能用于返回结果，类似编程中的返回值。MySQL中也提供`inout`类型的参数，既可以作为输入参数使用也可以作为输出参数使用，但是不建议这么用，比较好的用法还是输入输出分开。\n- **begin end**:`begin end`用来标识一个语句块，必须承兑出现，可以用在任何地方，在存储过程中逻辑写在`begin end`块内。\n\n# 3.存储过程的使用\n\n```mysql\ncall Test(1,@out_parameter);\n```\n\n存储过程的使用就如同函数调用一般，传入输入参数，并使用使用变量来接收输出参数。`@out_parameter`就是用来接收输出参数的变量。\n\n# 4.存储逻辑\n\n在编写存储过程时逻辑判断语句是一定会用到的，下面列举一些常用的逻辑判断语句及其用法。\n\n## if语句\n\nMySQL中单独的if语句和程序编程中有所不同，单独的if语句一般嵌入其他语句中一起用，如：\n\n```mysql\nselect if(exc,'A','B');\n```\n\n当exc的值为true时，输出A，否则输出B，exc可以是一个变量也可以是是一个语句，同理A，B也可以是一个变量或是一个语句。\n\n## if esle语句\n\nif esle语句与esle则有极大的不同，if else语句更接近编程中if esle\n\n```mysql\nif exc1 then\n \t-- 执行逻辑1;\nelseif exc2 then\n\t-- 执行逻辑2;\nelse\n\t-- 执行逻辑3;\nend if;\n```\n\n每一个if/elseif之后都需要跟一个then才能写执行逻辑，需要注意的是，then和执行逻辑之间没有`;`分隔。if语句结束时需要使用 end if;来告知MySQLif判断语句结束。同单独的if语句一样，if else中的exc也可以是变量和语句。\n\n## 循环体\n\nMySQL的循环体使用游标来实现，具体的我们先看一个例子：\n\n```mysql\ndelimiter //\n-- 使用断面名删除断面的时间戳数据，此存储过程不允许删除断面\ncreate procedure DeleteSurfaceDataByName(\nin in_surface_name varchar(32),\nin in_time_point_start varchar(32),\nin in_time_point_end varchar(32),\nout run_state bool\n)\nbegin\n\t-- 判断断面是否合法\n    if exists (select surface_no from surface_number where surface_name = in_surface_name) then\n    begin\n\t\tdeclare num varchar(32) default null;\n\t\t-- 游标的结束标志\n\t\tdeclare done bool default false;\n        -- 为主键id创建游标\n\t\tdeclare cur cursor for select id from surface_data where surface_name = in_surface_name;\n        -- 将结束标志关联到游标\n        declare continue handler for not found set done = true;\n        -- 打开游标\n        open cur;\n        -- 创建循环过程\n        delete_loop:loop\n        -- 从游标结果集中取值到num\n        fetch next from cur into num;\n\t\t-- 游标后移\n        if done then\n\t\t\tleave delete_loop;\n\t\tend if;\n        -- 循环语句\n        begin\n\t\t\t-- 场景1-删除当前段面中某一时段的水文数据\n\t\t\tif in_time_point_start is not null and in_time_point_end is not null then\n\t\t\t\tdelete from surface_data where id = num and ascii(time_point) >= ascii(in_time_point_start) \n\t\t\t\t\tand ascii(time_point) <= ascii(in_time_point_end);\n\t\t\t-- 场景2-删除当前断面中某一时刻的水文数据\n\t\t\telseif in_time_point_start is not null and in_time_point_end is null then\n\t\t\t\tdelete from surface_data where id = num and time_point = in_time_point_start;\n\t\t\tend if;\n\t\tend;\n        -- 结束循环\n        end loop;\n        set run_state = true;\n\tend;\n\telse\n\t\tset run_state = false;\n\tend if;\nend\n//\ndelimiter ;\n```\n\n- **exists()**:和select搭配可以判断满足where条件的selete字段在from的表中是否存在\n- **declare cur cursor for**:和select语句搭配可以为select出来的结果集创建一个游标cur，而这个游标便是循环体的关键，游标就有点类似SLT中迭代器，可以逐一读取结果集中的数据。\n- **declare continue handler for not found set done = true**：光有游标还是无法实现循环体的，循环体还有一个很重要的标志--结束标志，这条语句便是为游标设置循环结束标志，这条语句和前面的`declare done bool default false;`搭配使用，done便是循环结束的标志，通过这条语句将游标和循环结束标志绑定起来。\n- **open cur**：上面仅仅是做好了使用循环体的前提，要想使用循环体还需要将游标打开，以便游标可以使用，open cur便是打开游标cur。\n- **delete_loop:loop**:这是真正的循环体的开始，开始一个循环题delete_loop,同时需要使用`end loop;`来标识循环题结束。\n- **fetch next from cur into num**:向游标cur指向的结果几种逐一读取数据到num变量中，这里要值意num变量和结果集中的数据类型要一至。\n- **if done then leave delete_loop end if;**：判断结束标志done，如果done等于true就继续执行循环体。\n- 在if done then leave delete_loop end if;和end loop之间的就是每次循环执行的语句了。\n\n至此整个循环语句结束。\n\n","source":"_posts/【MyQSL】MyQSL存储过程.md","raw":"---\ntitle: 【MyQSL】MyQSL存储过程\ndate: 2019-10-21 21:12:42\ntags: MySQL\ncategories: 知识记录\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 1.什么是存储过程\n\n数据库中的存储过程有点类似编程中的函数，可以供外部环境在需要时调用，并且存储过程只需要编译一次，之后再用则无需进行在此编译。\n\n# 2.存储过程的创建\n\n## 代码\n\n```mysql\ndelimiter //\ncreate procedure Test(in parameter01 int,out parameter02 varchar(45));\nbegin\n\t-- 存储逻辑\nend\n//\ndelimiter ;\n```\n\n## 解析\n\n- **delimiter //**:更改MySQL中语句分隔符`;`，目的就是为了将存储过程作为一个整体，使MySQL中的存储逻辑中的`;`在代码编辑阶段不被编译器识别，`//`标识在两个`//`中间的逻辑为存储逻辑，告知MySQL其中的`;`不需要解释；<font color=red> 但是要记住，在用完`//`这个之后要记得将分隔符转回`;`,否则之后的语句也会使用`//`作为分隔符</font>。其中`//`可以是任意字符或字符串。\n- **create procedure Test(in parameter01 int , out parameter02 vachar(45))**:创建一个存储过程Test，存储过程包含输入参数parameter01和输出参数parameter02，其中`in`标识输入参数，`out`标识输出参数，如果括号中不写标识in/out则默认为输入参数，其中输入参数只能用于从外界传入参数，输出参数只能用于返回结果，类似编程中的返回值。MySQL中也提供`inout`类型的参数，既可以作为输入参数使用也可以作为输出参数使用，但是不建议这么用，比较好的用法还是输入输出分开。\n- **begin end**:`begin end`用来标识一个语句块，必须承兑出现，可以用在任何地方，在存储过程中逻辑写在`begin end`块内。\n\n# 3.存储过程的使用\n\n```mysql\ncall Test(1,@out_parameter);\n```\n\n存储过程的使用就如同函数调用一般，传入输入参数，并使用使用变量来接收输出参数。`@out_parameter`就是用来接收输出参数的变量。\n\n# 4.存储逻辑\n\n在编写存储过程时逻辑判断语句是一定会用到的，下面列举一些常用的逻辑判断语句及其用法。\n\n## if语句\n\nMySQL中单独的if语句和程序编程中有所不同，单独的if语句一般嵌入其他语句中一起用，如：\n\n```mysql\nselect if(exc,'A','B');\n```\n\n当exc的值为true时，输出A，否则输出B，exc可以是一个变量也可以是是一个语句，同理A，B也可以是一个变量或是一个语句。\n\n## if esle语句\n\nif esle语句与esle则有极大的不同，if else语句更接近编程中if esle\n\n```mysql\nif exc1 then\n \t-- 执行逻辑1;\nelseif exc2 then\n\t-- 执行逻辑2;\nelse\n\t-- 执行逻辑3;\nend if;\n```\n\n每一个if/elseif之后都需要跟一个then才能写执行逻辑，需要注意的是，then和执行逻辑之间没有`;`分隔。if语句结束时需要使用 end if;来告知MySQLif判断语句结束。同单独的if语句一样，if else中的exc也可以是变量和语句。\n\n## 循环体\n\nMySQL的循环体使用游标来实现，具体的我们先看一个例子：\n\n```mysql\ndelimiter //\n-- 使用断面名删除断面的时间戳数据，此存储过程不允许删除断面\ncreate procedure DeleteSurfaceDataByName(\nin in_surface_name varchar(32),\nin in_time_point_start varchar(32),\nin in_time_point_end varchar(32),\nout run_state bool\n)\nbegin\n\t-- 判断断面是否合法\n    if exists (select surface_no from surface_number where surface_name = in_surface_name) then\n    begin\n\t\tdeclare num varchar(32) default null;\n\t\t-- 游标的结束标志\n\t\tdeclare done bool default false;\n        -- 为主键id创建游标\n\t\tdeclare cur cursor for select id from surface_data where surface_name = in_surface_name;\n        -- 将结束标志关联到游标\n        declare continue handler for not found set done = true;\n        -- 打开游标\n        open cur;\n        -- 创建循环过程\n        delete_loop:loop\n        -- 从游标结果集中取值到num\n        fetch next from cur into num;\n\t\t-- 游标后移\n        if done then\n\t\t\tleave delete_loop;\n\t\tend if;\n        -- 循环语句\n        begin\n\t\t\t-- 场景1-删除当前段面中某一时段的水文数据\n\t\t\tif in_time_point_start is not null and in_time_point_end is not null then\n\t\t\t\tdelete from surface_data where id = num and ascii(time_point) >= ascii(in_time_point_start) \n\t\t\t\t\tand ascii(time_point) <= ascii(in_time_point_end);\n\t\t\t-- 场景2-删除当前断面中某一时刻的水文数据\n\t\t\telseif in_time_point_start is not null and in_time_point_end is null then\n\t\t\t\tdelete from surface_data where id = num and time_point = in_time_point_start;\n\t\t\tend if;\n\t\tend;\n        -- 结束循环\n        end loop;\n        set run_state = true;\n\tend;\n\telse\n\t\tset run_state = false;\n\tend if;\nend\n//\ndelimiter ;\n```\n\n- **exists()**:和select搭配可以判断满足where条件的selete字段在from的表中是否存在\n- **declare cur cursor for**:和select语句搭配可以为select出来的结果集创建一个游标cur，而这个游标便是循环体的关键，游标就有点类似SLT中迭代器，可以逐一读取结果集中的数据。\n- **declare continue handler for not found set done = true**：光有游标还是无法实现循环体的，循环体还有一个很重要的标志--结束标志，这条语句便是为游标设置循环结束标志，这条语句和前面的`declare done bool default false;`搭配使用，done便是循环结束的标志，通过这条语句将游标和循环结束标志绑定起来。\n- **open cur**：上面仅仅是做好了使用循环体的前提，要想使用循环体还需要将游标打开，以便游标可以使用，open cur便是打开游标cur。\n- **delete_loop:loop**:这是真正的循环体的开始，开始一个循环题delete_loop,同时需要使用`end loop;`来标识循环题结束。\n- **fetch next from cur into num**:向游标cur指向的结果几种逐一读取数据到num变量中，这里要值意num变量和结果集中的数据类型要一至。\n- **if done then leave delete_loop end if;**：判断结束标志done，如果done等于true就继续执行循环体。\n- 在if done then leave delete_loop end if;和end loop之间的就是每次循环执行的语句了。\n\n至此整个循环语句结束。\n\n","slug":"【MyQSL】MyQSL存储过程","published":1,"updated":"2021-02-01T13:32:24.275Z","_id":"ckk9hocao000odwr7743od9tg","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"1-什么是存储过程\"><a href=\"#1-什么是存储过程\" class=\"headerlink\" title=\"1.什么是存储过程\"></a>1.什么是存储过程</h1><p>数据库中的存储过程有点类似编程中的函数，可以供外部环境在需要时调用，并且存储过程只需要编译一次，之后再用则无需进行在此编译。</p>\n<h1 id=\"2-存储过程的创建\"><a href=\"#2-存储过程的创建\" class=\"headerlink\" title=\"2.存储过程的创建\"></a>2.存储过程的创建</h1><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">delimiter &#x2F;&#x2F;<br>create procedure Test(in parameter01 int,out parameter02 varchar(45));<br>begin<br>\t-- 存储逻辑<br>end<br>&#x2F;&#x2F;<br>delimiter ;<br></code></pre></td></tr></table></figure>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><ul>\n<li><strong>delimiter //</strong>:更改MySQL中语句分隔符<code>;</code>，目的就是为了将存储过程作为一个整体，使MySQL中的存储逻辑中的<code>;</code>在代码编辑阶段不被编译器识别，<code>//</code>标识在两个<code>//</code>中间的逻辑为存储逻辑，告知MySQL其中的<code>;</code>不需要解释；<font color=\"red\"> 但是要记住，在用完<code>//</code>这个之后要记得将分隔符转回<code>;</code>,否则之后的语句也会使用<code>//</code>作为分隔符</font>。其中<code>//</code>可以是任意字符或字符串。</li>\n<li><strong>create procedure Test(in parameter01 int , out parameter02 vachar(45))</strong>:创建一个存储过程Test，存储过程包含输入参数parameter01和输出参数parameter02，其中<code>in</code>标识输入参数，<code>out</code>标识输出参数，如果括号中不写标识in/out则默认为输入参数，其中输入参数只能用于从外界传入参数，输出参数只能用于返回结果，类似编程中的返回值。MySQL中也提供<code>inout</code>类型的参数，既可以作为输入参数使用也可以作为输出参数使用，但是不建议这么用，比较好的用法还是输入输出分开。</li>\n<li><strong>begin end</strong>:<code>begin end</code>用来标识一个语句块，必须承兑出现，可以用在任何地方，在存储过程中逻辑写在<code>begin end</code>块内。</li>\n</ul>\n<h1 id=\"3-存储过程的使用\"><a href=\"#3-存储过程的使用\" class=\"headerlink\" title=\"3.存储过程的使用\"></a>3.存储过程的使用</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">call Test(1,@out_parameter);<br></code></pre></td></tr></table></figure>\n<p>存储过程的使用就如同函数调用一般，传入输入参数，并使用使用变量来接收输出参数。<code>@out_parameter</code>就是用来接收输出参数的变量。</p>\n<h1 id=\"4-存储逻辑\"><a href=\"#4-存储逻辑\" class=\"headerlink\" title=\"4.存储逻辑\"></a>4.存储逻辑</h1><p>在编写存储过程时逻辑判断语句是一定会用到的，下面列举一些常用的逻辑判断语句及其用法。</p>\n<h2 id=\"if语句\"><a href=\"#if语句\" class=\"headerlink\" title=\"if语句\"></a>if语句</h2><p>MySQL中单独的if语句和程序编程中有所不同，单独的if语句一般嵌入其他语句中一起用，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select if(exc,&#39;A&#39;,&#39;B&#39;);<br></code></pre></td></tr></table></figure>\n<p>当exc的值为true时，输出A，否则输出B，exc可以是一个变量也可以是是一个语句，同理A，B也可以是一个变量或是一个语句。</p>\n<h2 id=\"if-esle语句\"><a href=\"#if-esle语句\" class=\"headerlink\" title=\"if esle语句\"></a>if esle语句</h2><p>if esle语句与esle则有极大的不同，if else语句更接近编程中if esle</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">if exc1 then<br> \t-- 执行逻辑1;<br>elseif exc2 then<br>\t-- 执行逻辑2;<br>else<br>\t-- 执行逻辑3;<br>end if;<br></code></pre></td></tr></table></figure>\n<p>每一个if/elseif之后都需要跟一个then才能写执行逻辑，需要注意的是，then和执行逻辑之间没有<code>;</code>分隔。if语句结束时需要使用 end if;来告知MySQLif判断语句结束。同单独的if语句一样，if else中的exc也可以是变量和语句。</p>\n<h2 id=\"循环体\"><a href=\"#循环体\" class=\"headerlink\" title=\"循环体\"></a>循环体</h2><p>MySQL的循环体使用游标来实现，具体的我们先看一个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">delimiter &#x2F;&#x2F;<br>-- 使用断面名删除断面的时间戳数据，此存储过程不允许删除断面<br>create procedure DeleteSurfaceDataByName(<br>in in_surface_name varchar(32),<br>in in_time_point_start varchar(32),<br>in in_time_point_end varchar(32),<br>out run_state bool<br>)<br>begin<br>\t-- 判断断面是否合法<br>    if exists (select surface_no from surface_number where surface_name &#x3D; in_surface_name) then<br>    begin<br>\t\tdeclare num varchar(32) default null;<br>\t\t-- 游标的结束标志<br>\t\tdeclare done bool default false;<br>        -- 为主键id创建游标<br>\t\tdeclare cur cursor for select id from surface_data where surface_name &#x3D; in_surface_name;<br>        -- 将结束标志关联到游标<br>        declare continue handler for not found set done &#x3D; true;<br>        -- 打开游标<br>        open cur;<br>        -- 创建循环过程<br>        delete_loop:loop<br>        -- 从游标结果集中取值到num<br>        fetch next from cur into num;<br>\t\t-- 游标后移<br>        if done then<br>\t\t\tleave delete_loop;<br>\t\tend if;<br>        -- 循环语句<br>        begin<br>\t\t\t-- 场景1-删除当前段面中某一时段的水文数据<br>\t\t\tif in_time_point_start is not null and in_time_point_end is not null then<br>\t\t\t\tdelete from surface_data where id &#x3D; num and ascii(time_point) &gt;&#x3D; ascii(in_time_point_start) <br>\t\t\t\t\tand ascii(time_point) &lt;&#x3D; ascii(in_time_point_end);<br>\t\t\t-- 场景2-删除当前断面中某一时刻的水文数据<br>\t\t\telseif in_time_point_start is not null and in_time_point_end is null then<br>\t\t\t\tdelete from surface_data where id &#x3D; num and time_point &#x3D; in_time_point_start;<br>\t\t\tend if;<br>\t\tend;<br>        -- 结束循环<br>        end loop;<br>        set run_state &#x3D; true;<br>\tend;<br>\telse<br>\t\tset run_state &#x3D; false;<br>\tend if;<br>end<br>&#x2F;&#x2F;<br>delimiter ;<br></code></pre></td></tr></table></figure>\n<ul>\n<li><strong>exists()</strong>:和select搭配可以判断满足where条件的selete字段在from的表中是否存在</li>\n<li><strong>declare cur cursor for</strong>:和select语句搭配可以为select出来的结果集创建一个游标cur，而这个游标便是循环体的关键，游标就有点类似SLT中迭代器，可以逐一读取结果集中的数据。</li>\n<li><strong>declare continue handler for not found set done = true</strong>：光有游标还是无法实现循环体的，循环体还有一个很重要的标志–结束标志，这条语句便是为游标设置循环结束标志，这条语句和前面的<code>declare done bool default false;</code>搭配使用，done便是循环结束的标志，通过这条语句将游标和循环结束标志绑定起来。</li>\n<li><strong>open cur</strong>：上面仅仅是做好了使用循环体的前提，要想使用循环体还需要将游标打开，以便游标可以使用，open cur便是打开游标cur。</li>\n<li><strong>delete_loop:loop</strong>:这是真正的循环体的开始，开始一个循环题delete_loop,同时需要使用<code>end loop;</code>来标识循环题结束。</li>\n<li><strong>fetch next from cur into num</strong>:向游标cur指向的结果几种逐一读取数据到num变量中，这里要值意num变量和结果集中的数据类型要一至。</li>\n<li>**if done then leave delete_loop end if;**：判断结束标志done，如果done等于true就继续执行循环体。</li>\n<li>在if done then leave delete_loop end if;和end loop之间的就是每次循环执行的语句了。</li>\n</ul>\n<p>至此整个循环语句结束。</p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"1-什么是存储过程\"><a href=\"#1-什么是存储过程\" class=\"headerlink\" title=\"1.什么是存储过程\"></a>1.什么是存储过程</h1><p>数据库中的存储过程有点类似编程中的函数，可以供外部环境在需要时调用，并且存储过程只需要编译一次，之后再用则无需进行在此编译。</p>\n<h1 id=\"2-存储过程的创建\"><a href=\"#2-存储过程的创建\" class=\"headerlink\" title=\"2.存储过程的创建\"></a>2.存储过程的创建</h1><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">delimiter &#x2F;&#x2F;<br>create procedure Test(in parameter01 int,out parameter02 varchar(45));<br>begin<br>\t-- 存储逻辑<br>end<br>&#x2F;&#x2F;<br>delimiter ;<br></code></pre></td></tr></table></figure>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><ul>\n<li><strong>delimiter //</strong>:更改MySQL中语句分隔符<code>;</code>，目的就是为了将存储过程作为一个整体，使MySQL中的存储逻辑中的<code>;</code>在代码编辑阶段不被编译器识别，<code>//</code>标识在两个<code>//</code>中间的逻辑为存储逻辑，告知MySQL其中的<code>;</code>不需要解释；<font color=\"red\"> 但是要记住，在用完<code>//</code>这个之后要记得将分隔符转回<code>;</code>,否则之后的语句也会使用<code>//</code>作为分隔符</font>。其中<code>//</code>可以是任意字符或字符串。</li>\n<li><strong>create procedure Test(in parameter01 int , out parameter02 vachar(45))</strong>:创建一个存储过程Test，存储过程包含输入参数parameter01和输出参数parameter02，其中<code>in</code>标识输入参数，<code>out</code>标识输出参数，如果括号中不写标识in/out则默认为输入参数，其中输入参数只能用于从外界传入参数，输出参数只能用于返回结果，类似编程中的返回值。MySQL中也提供<code>inout</code>类型的参数，既可以作为输入参数使用也可以作为输出参数使用，但是不建议这么用，比较好的用法还是输入输出分开。</li>\n<li><strong>begin end</strong>:<code>begin end</code>用来标识一个语句块，必须承兑出现，可以用在任何地方，在存储过程中逻辑写在<code>begin end</code>块内。</li>\n</ul>\n<h1 id=\"3-存储过程的使用\"><a href=\"#3-存储过程的使用\" class=\"headerlink\" title=\"3.存储过程的使用\"></a>3.存储过程的使用</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">call Test(1,@out_parameter);<br></code></pre></td></tr></table></figure>\n<p>存储过程的使用就如同函数调用一般，传入输入参数，并使用使用变量来接收输出参数。<code>@out_parameter</code>就是用来接收输出参数的变量。</p>\n<h1 id=\"4-存储逻辑\"><a href=\"#4-存储逻辑\" class=\"headerlink\" title=\"4.存储逻辑\"></a>4.存储逻辑</h1><p>在编写存储过程时逻辑判断语句是一定会用到的，下面列举一些常用的逻辑判断语句及其用法。</p>\n<h2 id=\"if语句\"><a href=\"#if语句\" class=\"headerlink\" title=\"if语句\"></a>if语句</h2><p>MySQL中单独的if语句和程序编程中有所不同，单独的if语句一般嵌入其他语句中一起用，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select if(exc,&#39;A&#39;,&#39;B&#39;);<br></code></pre></td></tr></table></figure>\n<p>当exc的值为true时，输出A，否则输出B，exc可以是一个变量也可以是是一个语句，同理A，B也可以是一个变量或是一个语句。</p>\n<h2 id=\"if-esle语句\"><a href=\"#if-esle语句\" class=\"headerlink\" title=\"if esle语句\"></a>if esle语句</h2><p>if esle语句与esle则有极大的不同，if else语句更接近编程中if esle</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">if exc1 then<br> \t-- 执行逻辑1;<br>elseif exc2 then<br>\t-- 执行逻辑2;<br>else<br>\t-- 执行逻辑3;<br>end if;<br></code></pre></td></tr></table></figure>\n<p>每一个if/elseif之后都需要跟一个then才能写执行逻辑，需要注意的是，then和执行逻辑之间没有<code>;</code>分隔。if语句结束时需要使用 end if;来告知MySQLif判断语句结束。同单独的if语句一样，if else中的exc也可以是变量和语句。</p>\n<h2 id=\"循环体\"><a href=\"#循环体\" class=\"headerlink\" title=\"循环体\"></a>循环体</h2><p>MySQL的循环体使用游标来实现，具体的我们先看一个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">delimiter &#x2F;&#x2F;<br>-- 使用断面名删除断面的时间戳数据，此存储过程不允许删除断面<br>create procedure DeleteSurfaceDataByName(<br>in in_surface_name varchar(32),<br>in in_time_point_start varchar(32),<br>in in_time_point_end varchar(32),<br>out run_state bool<br>)<br>begin<br>\t-- 判断断面是否合法<br>    if exists (select surface_no from surface_number where surface_name &#x3D; in_surface_name) then<br>    begin<br>\t\tdeclare num varchar(32) default null;<br>\t\t-- 游标的结束标志<br>\t\tdeclare done bool default false;<br>        -- 为主键id创建游标<br>\t\tdeclare cur cursor for select id from surface_data where surface_name &#x3D; in_surface_name;<br>        -- 将结束标志关联到游标<br>        declare continue handler for not found set done &#x3D; true;<br>        -- 打开游标<br>        open cur;<br>        -- 创建循环过程<br>        delete_loop:loop<br>        -- 从游标结果集中取值到num<br>        fetch next from cur into num;<br>\t\t-- 游标后移<br>        if done then<br>\t\t\tleave delete_loop;<br>\t\tend if;<br>        -- 循环语句<br>        begin<br>\t\t\t-- 场景1-删除当前段面中某一时段的水文数据<br>\t\t\tif in_time_point_start is not null and in_time_point_end is not null then<br>\t\t\t\tdelete from surface_data where id &#x3D; num and ascii(time_point) &gt;&#x3D; ascii(in_time_point_start) <br>\t\t\t\t\tand ascii(time_point) &lt;&#x3D; ascii(in_time_point_end);<br>\t\t\t-- 场景2-删除当前断面中某一时刻的水文数据<br>\t\t\telseif in_time_point_start is not null and in_time_point_end is null then<br>\t\t\t\tdelete from surface_data where id &#x3D; num and time_point &#x3D; in_time_point_start;<br>\t\t\tend if;<br>\t\tend;<br>        -- 结束循环<br>        end loop;<br>        set run_state &#x3D; true;<br>\tend;<br>\telse<br>\t\tset run_state &#x3D; false;<br>\tend if;<br>end<br>&#x2F;&#x2F;<br>delimiter ;<br></code></pre></td></tr></table></figure>\n<ul>\n<li><strong>exists()</strong>:和select搭配可以判断满足where条件的selete字段在from的表中是否存在</li>\n<li><strong>declare cur cursor for</strong>:和select语句搭配可以为select出来的结果集创建一个游标cur，而这个游标便是循环体的关键，游标就有点类似SLT中迭代器，可以逐一读取结果集中的数据。</li>\n<li><strong>declare continue handler for not found set done = true</strong>：光有游标还是无法实现循环体的，循环体还有一个很重要的标志–结束标志，这条语句便是为游标设置循环结束标志，这条语句和前面的<code>declare done bool default false;</code>搭配使用，done便是循环结束的标志，通过这条语句将游标和循环结束标志绑定起来。</li>\n<li><strong>open cur</strong>：上面仅仅是做好了使用循环体的前提，要想使用循环体还需要将游标打开，以便游标可以使用，open cur便是打开游标cur。</li>\n<li><strong>delete_loop:loop</strong>:这是真正的循环体的开始，开始一个循环题delete_loop,同时需要使用<code>end loop;</code>来标识循环题结束。</li>\n<li><strong>fetch next from cur into num</strong>:向游标cur指向的结果几种逐一读取数据到num变量中，这里要值意num变量和结果集中的数据类型要一至。</li>\n<li>**if done then leave delete_loop end if;**：判断结束标志done，如果done等于true就继续执行循环体。</li>\n<li>在if done then leave delete_loop end if;和end loop之间的就是每次循环执行的语句了。</li>\n</ul>\n<p>至此整个循环语句结束。</p>\n"},{"title":"【Lua】Lua基础","date":"2019-09-09T08:26:18.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019090916141255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190909161442706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n参考博文：https://www.cnblogs.com/cjswwdz/p/5634442.html\n\nXMind源文件：https://github.com/Goulandis/XMinds-2019.8.27/tree/master/Lua\n\n学习地址：https://www.bilibili.com/video/av50685253?from=search&seid=12754355294240767428","source":"_posts/【Lua】Lua基础.md","raw":"---\ntitle: 【Lua】Lua基础\ndate: 2019-09-09 16:26:18\ntags: Lua\ncategories: 学习笔记\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019090916141255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190909161442706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n参考博文：https://www.cnblogs.com/cjswwdz/p/5634442.html\n\nXMind源文件：https://github.com/Goulandis/XMinds-2019.8.27/tree/master/Lua\n\n学习地址：https://www.bilibili.com/video/av50685253?from=search&seid=12754355294240767428","slug":"【Lua】Lua基础","published":1,"updated":"2021-02-01T13:32:17.325Z","_id":"ckk9hocaq000sdwr7hpbtfm78","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p><img src=\"https://img-blog.csdnimg.cn/2019090916141255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190909161442706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>参考博文：<a href=\"https://www.cnblogs.com/cjswwdz/p/5634442.html\">https://www.cnblogs.com/cjswwdz/p/5634442.html</a></p>\n<p>XMind源文件：<a href=\"https://github.com/Goulandis/XMinds-2019.8.27/tree/master/Lua\">https://github.com/Goulandis/XMinds-2019.8.27/tree/master/Lua</a></p>\n<p>学习地址：<a href=\"https://www.bilibili.com/video/av50685253?from=search&amp;seid=12754355294240767428\">https://www.bilibili.com/video/av50685253?from=search&amp;seid=12754355294240767428</a></p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p><img src=\"https://img-blog.csdnimg.cn/2019090916141255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190909161442706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>参考博文：<a href=\"https://www.cnblogs.com/cjswwdz/p/5634442.html\">https://www.cnblogs.com/cjswwdz/p/5634442.html</a></p>\n<p>XMind源文件：<a href=\"https://github.com/Goulandis/XMinds-2019.8.27/tree/master/Lua\">https://github.com/Goulandis/XMinds-2019.8.27/tree/master/Lua</a></p>\n<p>学习地址：<a href=\"https://www.bilibili.com/video/av50685253?from=search&amp;seid=12754355294240767428\">https://www.bilibili.com/video/av50685253?from=search&amp;seid=12754355294240767428</a></p>\n"},{"title":"Qt基础","date":"2019-08-25T10:51:19.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n﻿![在这里插入图片描述](https://img-blog.csdnimg.cn/20190825185005696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\n","source":"_posts/【Qt】Qt基础.md","raw":"---\ntitle: Qt基础\ndate: 2019-08-25 18:51:19\ntags: Qt\ncategories: 学习笔记\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n﻿![在这里插入图片描述](https://img-blog.csdnimg.cn/20190825185005696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\n","slug":"【Qt】Qt基础","published":1,"updated":"2021-02-01T13:32:31.721Z","_id":"ckk9hocaq000vdwr77ko3d286","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>﻿<img src=\"https://img-blog.csdnimg.cn/20190825185005696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>﻿<img src=\"https://img-blog.csdnimg.cn/20190825185005696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"【UE4】基础","date":"2019-10-14T03:39:39.000Z","_content":"","source":"_posts/【UE4】UE4基础.md","raw":"---\ntitle: 【UE4】基础\ndate: 2019-10-14 11:39:39\ntags:\ncategories:\n---\n","slug":"【UE4】UE4基础","published":1,"updated":"2019-11-18T07:25:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk9hocar000ydwr77gjk8z3l","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"【UE4】UE4组件","date":"2019-11-06T13:10:52.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n不同的蓝图脚本拥有不同的组件集，蓝图脚本的组件集过于庞大，这里只对自己使用过的组件进行列举。\n\n<font color=red>说明：红色字体表示一级目录组件，绿色字体表示二级目录，黄色字体为三级目录(三级目录较为少见所以使用和二级目录相同的三级标题)，白色字体为具体组件说明</font>。\n\n# 一、材质蓝图组件\n\n## <font color=red>Constans(常量)</font>\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_11-46-47.png)\n\n| 组件            | 作用                                              |\n| --------------- | ------------------------------------------------- |\n| Constans        | 一维量，可以表示任何一维数据，如：小数、整数等    |\n| Constans2Vector | 二维量，可以表示任何二维数据，如：二维坐标        |\n| Constans3Vector | 三维量，可以表示任何三维数据，如：三维坐标、RBG等 |\n| Constans4Vector | 四维量，可以表示任何四维数据，如：四元数          |\n\n## <font color=red>Math(数学函数)</font>\n\n#### **Multiply(乘积)**\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_11-50-37.png)\n\n\n\n### <font color=green>Lerp(插值)</font>\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_13-12-40.png)\n\nLerp组件在Math的多个二级目录中存在，有各种类型的插值变化。\n\n**输入：**\n\n- A：插值变化的起始值；\n- B：插值变化的目标值；\n- Alpha：插值的变化规则，连接Float的TimeLine插值将按照TimeLine的规则变化。\n\n**输出：**\n\n- Return Value：返回变化后的插值，将Lerp放入帧函数中可以获得每帧变化的插值。\n\n# 二、普通蓝图组件\n\n------\n\n\n\n## <font color=red>Add Event(添加事件)</font>\n\n### <font color=green>Collision(碰撞体组件)</font>\n\n#### **Event ActorBeginOverlap(自动触发触发器)**\n\n每当有物体进入触发器时自动触发\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_10-53-07.png)\n\n- Other Actor：返回进入触发器的游戏物体的信息。\n\n### <font color=green>Game</font>\n\n### <font color=orange>Damage</font>\n\n#### **Event AnyDamage**\n\nEvent AnyDamage事件是配合Apply Damage组件一起使用的，当Apply Damage组件执行时，会自动触发Event AnyDamage事件。\n\n![](【UE4】UE4组件/Snipaste_2019-10-28_17-28-37.png)\n\n**输出：**\n\nDamage：从Apply Damage组件的Damage中传递过来的值；\n\nDamage Type：从Apply Damage组件传递过来的Damage Type Class；\n\nInstigated By：从Apply Damage组件传递过来的Event Instigateor；\n\nDamage Causer：从Apply Damage组件传递过来的Damage Causer；\n\n\n\n## <font color=red>Event BeginPlay</font>\n\n游戏开始时自动触发\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_10-57-11.png)\n\n## <font color=red>Add TimeLine(添加时间线)</font>\n\n\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_10-33-38.png)\n\n**输入：**\n\n- Play：播放，播放完毕下一次触发时不会从头开始，而是会从上一次时间点继续开始；\n- Play from Start：从头开始播放，每次触发都从时间线起点开始执行；\n- Stop：暂停，触发后直接从当前时刻暂停；\n- Reverse：倒序播放，从当前时刻开始倒叙播放；\n- Reverse from End：从末尾开始倒序播放；\n- Set New Time：设置新的时间起点，即时间线从新设置的时间点开始执行；\n- New Time：新的时间起点由外部输入。\n\n**输出：**\n\n- Update：在时间线内每帧执行；\n- Finished：时间线结束时触发；\n- Direction：返回时间线的执行方向，只有两个值“Forward”和“Backward”；\n- New Track 0：自己创建的时间线，创建了才会有，显示的名字也是自己命名的时间线的名字。\n\n## <font color=red>Camera Fades(相机渐变)</font>\n\nCamera Fades组件是只有在Get Player Camera Menager组件的外拉中才能搜索到的专门服务于Get Player Camera Menager组件的相机组件集。\n\n#### **Start Camera Fade(开始渐变)**\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_11-02-10.png)\n\n- Target：渐变目标相机，默认为当前相机；\n- From Alpha：渐变起始Alpha；\n- To Alpha：渐变目标Alpha；\n- Duration：渐变持续时间；\n- Color：渐变颜色；\n- Should Fade Audio：启用声音渐变；\n- Hold when Finished：渐变结束后保持当前Alpha值。\n\n#### **Stop Camera Fade(结束渐变)**\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_11-10-28.png)\n\n触发时立刻停止当前渐变。\n\n## <font color=red>Input(输入流)</font>\n\n### <font color=green>Keyboard Events(按键触发事件)</font>\n\n包含所有键盘按键出发事件\n\n## <font color=red>Game</font>\n\n#### **Get Player Pawn(获取角色对象)**\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_11-17-59.png)\n\n- Play Index：输入角色索引，可以直接设置也可以外部输入；\n\n- Return Value：返回获取的角色对象(Object)。\n\n#### **Get Current Level Name(获取关卡名字)**\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_11-21-18.png)\n\n- Remove Prefix String：移除前缀字符串；\n- Return Value：返回获取到的关卡名称(String)。\n\n#### **Get Player Camera Manager(获取角色相机管理器)**\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_11-26-07.png)\n\n- Player Index：输入角色索引；\n- Return Value：返回输入角色身上的相机对象。\n\n### <font color=green>Damage</font>\n\n#### **Apply Damage**\n\nApply Damage组件一般和Event AnyDamage组件配合使用，当Apply Damage组件触发时，UE4会自动调用Event AnyDamage事件。需要注意的是，只有在Base Daamge不为0时才能触发Event Damage事件。\n\n![](【UE4】UE4组件/Snipaste_2019-10-28_17-26-35.png)\n\n**输入：**\n\nDdamaged Actor：受到伤害的对象；\n\nBase Damage：输入的伤害值；\n\nEvent Instigator：引发伤害的对象，如：持枪的敌人；\n\nDamage Causer：实际造成伤害的对象，如：子弹；\n\nDamage Type Class：伤害的类型；\n\n**输出：**\n\nReturn Value：最终造成的实际伤害。\n\n## <font color=red>Rendering(渲染)</font>\n\n### <font color=green>Components</font>\n\n### <font color= orange> Light</font>\n\n#### **Set Intensity(设置光源强度)**\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_13-32-38.png)\n\n- Target：目标光源；\n- New Intensity：目标光源强度。\n\n#### **Get Intensity(获取光源强度)**\n\n使用和Set Intensity一样。\n\n## <font color=red>String(字符串组件)</font>\n\n### <font color=green>Append(字符串连接)</font>\n\n![](【UE4】UE4组件/Snipaste_2019-10-28_17-04-19.png)\n\n\n\n## <font color=red>Utilities(通用组件)</font>\n\n### <font color=green>Flow Control</font>\n\n#### **Branch**(if语句)\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_11-30-52.png)\n\n蓝图的if语句\n\n- Condition：输入的判断条件，一般和各种判断组件的输出连接。\n\n#### **Delay(延迟函数)**\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_11-39-53.png)\n\n- Duration：延迟时间。\n\n### <font color=green>Keyboard Events(按键触发事件)</font>\n\n包含一些字符串操作函数。\n\n### <font color=green>Text</font>\n\n#### **Equal**\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_11-42-14.png)\n\n输入两个比较对象，输出判断结果(Bool)。\n\n各种其他的判断组件用法一致。\n\n### <font color=green> Transformation</font>\n\n#### **Set Actor Scale 3D**\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_13-19-47.png)\n\n设置Actor的Scale值\n\n- Target：要设置的目标Actor；\n- New Scale 3D：要设置的目标Scale值。\n\n#### **Get Actor Scale 3D**\n\n获取Actor的Scale值。\n\n# 二、物理组件\n\nUE4除了提供大量蓝图脚本函数组件来对蓝图类进行精细控制外还提供了一系列物理组件对蓝图类进行一些常规的复杂控制。\n\n## <font color=red>Camera</font>\n\n#### **Camera**\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_11-53-42.png)\n\n相机，用于渲染视野，一般配合Spring Arm一起使用。\n\n#### **Spring Arm**\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_11-56-15.png)\n\n弹簧悬臂，将相机附于其上可以实现相机跟随\n\n## <font color=red>Movement</font>\n\n#### **Rotating Movement**\n\n旋转控制，提供一系列参数对对蓝图类的旋转运动进行控制\n\n## <font color=red>Rendering</font>\n\n#### **Static Mesh**\n\n静态网格，网格控制蓝图的贴图材质、模型外观、阴影渲染等。\n","source":"_posts/【UE4】UE4组件.md","raw":"---\ntitle: 【UE4】UE4组件\ndate: 2019-11-06 21:10:52\ntags: UE4\ncategories: 学习笔记\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n不同的蓝图脚本拥有不同的组件集，蓝图脚本的组件集过于庞大，这里只对自己使用过的组件进行列举。\n\n<font color=red>说明：红色字体表示一级目录组件，绿色字体表示二级目录，黄色字体为三级目录(三级目录较为少见所以使用和二级目录相同的三级标题)，白色字体为具体组件说明</font>。\n\n# 一、材质蓝图组件\n\n## <font color=red>Constans(常量)</font>\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_11-46-47.png)\n\n| 组件            | 作用                                              |\n| --------------- | ------------------------------------------------- |\n| Constans        | 一维量，可以表示任何一维数据，如：小数、整数等    |\n| Constans2Vector | 二维量，可以表示任何二维数据，如：二维坐标        |\n| Constans3Vector | 三维量，可以表示任何三维数据，如：三维坐标、RBG等 |\n| Constans4Vector | 四维量，可以表示任何四维数据，如：四元数          |\n\n## <font color=red>Math(数学函数)</font>\n\n#### **Multiply(乘积)**\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_11-50-37.png)\n\n\n\n### <font color=green>Lerp(插值)</font>\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_13-12-40.png)\n\nLerp组件在Math的多个二级目录中存在，有各种类型的插值变化。\n\n**输入：**\n\n- A：插值变化的起始值；\n- B：插值变化的目标值；\n- Alpha：插值的变化规则，连接Float的TimeLine插值将按照TimeLine的规则变化。\n\n**输出：**\n\n- Return Value：返回变化后的插值，将Lerp放入帧函数中可以获得每帧变化的插值。\n\n# 二、普通蓝图组件\n\n------\n\n\n\n## <font color=red>Add Event(添加事件)</font>\n\n### <font color=green>Collision(碰撞体组件)</font>\n\n#### **Event ActorBeginOverlap(自动触发触发器)**\n\n每当有物体进入触发器时自动触发\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_10-53-07.png)\n\n- Other Actor：返回进入触发器的游戏物体的信息。\n\n### <font color=green>Game</font>\n\n### <font color=orange>Damage</font>\n\n#### **Event AnyDamage**\n\nEvent AnyDamage事件是配合Apply Damage组件一起使用的，当Apply Damage组件执行时，会自动触发Event AnyDamage事件。\n\n![](【UE4】UE4组件/Snipaste_2019-10-28_17-28-37.png)\n\n**输出：**\n\nDamage：从Apply Damage组件的Damage中传递过来的值；\n\nDamage Type：从Apply Damage组件传递过来的Damage Type Class；\n\nInstigated By：从Apply Damage组件传递过来的Event Instigateor；\n\nDamage Causer：从Apply Damage组件传递过来的Damage Causer；\n\n\n\n## <font color=red>Event BeginPlay</font>\n\n游戏开始时自动触发\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_10-57-11.png)\n\n## <font color=red>Add TimeLine(添加时间线)</font>\n\n\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_10-33-38.png)\n\n**输入：**\n\n- Play：播放，播放完毕下一次触发时不会从头开始，而是会从上一次时间点继续开始；\n- Play from Start：从头开始播放，每次触发都从时间线起点开始执行；\n- Stop：暂停，触发后直接从当前时刻暂停；\n- Reverse：倒序播放，从当前时刻开始倒叙播放；\n- Reverse from End：从末尾开始倒序播放；\n- Set New Time：设置新的时间起点，即时间线从新设置的时间点开始执行；\n- New Time：新的时间起点由外部输入。\n\n**输出：**\n\n- Update：在时间线内每帧执行；\n- Finished：时间线结束时触发；\n- Direction：返回时间线的执行方向，只有两个值“Forward”和“Backward”；\n- New Track 0：自己创建的时间线，创建了才会有，显示的名字也是自己命名的时间线的名字。\n\n## <font color=red>Camera Fades(相机渐变)</font>\n\nCamera Fades组件是只有在Get Player Camera Menager组件的外拉中才能搜索到的专门服务于Get Player Camera Menager组件的相机组件集。\n\n#### **Start Camera Fade(开始渐变)**\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_11-02-10.png)\n\n- Target：渐变目标相机，默认为当前相机；\n- From Alpha：渐变起始Alpha；\n- To Alpha：渐变目标Alpha；\n- Duration：渐变持续时间；\n- Color：渐变颜色；\n- Should Fade Audio：启用声音渐变；\n- Hold when Finished：渐变结束后保持当前Alpha值。\n\n#### **Stop Camera Fade(结束渐变)**\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_11-10-28.png)\n\n触发时立刻停止当前渐变。\n\n## <font color=red>Input(输入流)</font>\n\n### <font color=green>Keyboard Events(按键触发事件)</font>\n\n包含所有键盘按键出发事件\n\n## <font color=red>Game</font>\n\n#### **Get Player Pawn(获取角色对象)**\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_11-17-59.png)\n\n- Play Index：输入角色索引，可以直接设置也可以外部输入；\n\n- Return Value：返回获取的角色对象(Object)。\n\n#### **Get Current Level Name(获取关卡名字)**\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_11-21-18.png)\n\n- Remove Prefix String：移除前缀字符串；\n- Return Value：返回获取到的关卡名称(String)。\n\n#### **Get Player Camera Manager(获取角色相机管理器)**\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_11-26-07.png)\n\n- Player Index：输入角色索引；\n- Return Value：返回输入角色身上的相机对象。\n\n### <font color=green>Damage</font>\n\n#### **Apply Damage**\n\nApply Damage组件一般和Event AnyDamage组件配合使用，当Apply Damage组件触发时，UE4会自动调用Event AnyDamage事件。需要注意的是，只有在Base Daamge不为0时才能触发Event Damage事件。\n\n![](【UE4】UE4组件/Snipaste_2019-10-28_17-26-35.png)\n\n**输入：**\n\nDdamaged Actor：受到伤害的对象；\n\nBase Damage：输入的伤害值；\n\nEvent Instigator：引发伤害的对象，如：持枪的敌人；\n\nDamage Causer：实际造成伤害的对象，如：子弹；\n\nDamage Type Class：伤害的类型；\n\n**输出：**\n\nReturn Value：最终造成的实际伤害。\n\n## <font color=red>Rendering(渲染)</font>\n\n### <font color=green>Components</font>\n\n### <font color= orange> Light</font>\n\n#### **Set Intensity(设置光源强度)**\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_13-32-38.png)\n\n- Target：目标光源；\n- New Intensity：目标光源强度。\n\n#### **Get Intensity(获取光源强度)**\n\n使用和Set Intensity一样。\n\n## <font color=red>String(字符串组件)</font>\n\n### <font color=green>Append(字符串连接)</font>\n\n![](【UE4】UE4组件/Snipaste_2019-10-28_17-04-19.png)\n\n\n\n## <font color=red>Utilities(通用组件)</font>\n\n### <font color=green>Flow Control</font>\n\n#### **Branch**(if语句)\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_11-30-52.png)\n\n蓝图的if语句\n\n- Condition：输入的判断条件，一般和各种判断组件的输出连接。\n\n#### **Delay(延迟函数)**\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_11-39-53.png)\n\n- Duration：延迟时间。\n\n### <font color=green>Keyboard Events(按键触发事件)</font>\n\n包含一些字符串操作函数。\n\n### <font color=green>Text</font>\n\n#### **Equal**\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_11-42-14.png)\n\n输入两个比较对象，输出判断结果(Bool)。\n\n各种其他的判断组件用法一致。\n\n### <font color=green> Transformation</font>\n\n#### **Set Actor Scale 3D**\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_13-19-47.png)\n\n设置Actor的Scale值\n\n- Target：要设置的目标Actor；\n- New Scale 3D：要设置的目标Scale值。\n\n#### **Get Actor Scale 3D**\n\n获取Actor的Scale值。\n\n# 二、物理组件\n\nUE4除了提供大量蓝图脚本函数组件来对蓝图类进行精细控制外还提供了一系列物理组件对蓝图类进行一些常规的复杂控制。\n\n## <font color=red>Camera</font>\n\n#### **Camera**\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_11-53-42.png)\n\n相机，用于渲染视野，一般配合Spring Arm一起使用。\n\n#### **Spring Arm**\n\n![](【UE4】UE4组件/Snipaste_2019-10-25_11-56-15.png)\n\n弹簧悬臂，将相机附于其上可以实现相机跟随\n\n## <font color=red>Movement</font>\n\n#### **Rotating Movement**\n\n旋转控制，提供一系列参数对对蓝图类的旋转运动进行控制\n\n## <font color=red>Rendering</font>\n\n#### **Static Mesh**\n\n静态网格，网格控制蓝图的贴图材质、模型外观、阴影渲染等。\n","slug":"【UE4】UE4组件","published":1,"updated":"2021-02-01T13:33:53.153Z","_id":"ckk9hocas0011dwr7fpb7a6l9","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>不同的蓝图脚本拥有不同的组件集，蓝图脚本的组件集过于庞大，这里只对自己使用过的组件进行列举。</p>\n<p><font color=\"red\">说明：红色字体表示一级目录组件，绿色字体表示二级目录，黄色字体为三级目录(三级目录较为少见所以使用和二级目录相同的三级标题)，白色字体为具体组件说明</font>。</p>\n<h1 id=\"一、材质蓝图组件\"><a href=\"#一、材质蓝图组件\" class=\"headerlink\" title=\"一、材质蓝图组件\"></a>一、材质蓝图组件</h1><h2 id=\"Constans-常量\"><a href=\"#Constans-常量\" class=\"headerlink\" title=\"Constans(常量)\"></a><font color=\"red\">Constans(常量)</font></h2><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_11-46-47.png\"></p>\n<table>\n<thead>\n<tr>\n<th>组件</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Constans</td>\n<td>一维量，可以表示任何一维数据，如：小数、整数等</td>\n</tr>\n<tr>\n<td>Constans2Vector</td>\n<td>二维量，可以表示任何二维数据，如：二维坐标</td>\n</tr>\n<tr>\n<td>Constans3Vector</td>\n<td>三维量，可以表示任何三维数据，如：三维坐标、RBG等</td>\n</tr>\n<tr>\n<td>Constans4Vector</td>\n<td>四维量，可以表示任何四维数据，如：四元数</td>\n</tr>\n</tbody></table>\n<h2 id=\"Math-数学函数\"><a href=\"#Math-数学函数\" class=\"headerlink\" title=\"Math(数学函数)\"></a><font color=\"red\">Math(数学函数)</font></h2><h4 id=\"Multiply-乘积\"><a href=\"#Multiply-乘积\" class=\"headerlink\" title=\"Multiply(乘积)\"></a><strong>Multiply(乘积)</strong></h4><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_11-50-37.png\"></p>\n<h3 id=\"Lerp-插值\"><a href=\"#Lerp-插值\" class=\"headerlink\" title=\"Lerp(插值)\"></a><font color=\"green\">Lerp(插值)</font></h3><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_13-12-40.png\"></p>\n<p>Lerp组件在Math的多个二级目录中存在，有各种类型的插值变化。</p>\n<p><strong>输入：</strong></p>\n<ul>\n<li>A：插值变化的起始值；</li>\n<li>B：插值变化的目标值；</li>\n<li>Alpha：插值的变化规则，连接Float的TimeLine插值将按照TimeLine的规则变化。</li>\n</ul>\n<p><strong>输出：</strong></p>\n<ul>\n<li>Return Value：返回变化后的插值，将Lerp放入帧函数中可以获得每帧变化的插值。</li>\n</ul>\n<h1 id=\"二、普通蓝图组件\"><a href=\"#二、普通蓝图组件\" class=\"headerlink\" title=\"二、普通蓝图组件\"></a>二、普通蓝图组件</h1><hr>\n<h2 id=\"Add-Event-添加事件\"><a href=\"#Add-Event-添加事件\" class=\"headerlink\" title=\"Add Event(添加事件)\"></a><font color=\"red\">Add Event(添加事件)</font></h2><h3 id=\"Collision-碰撞体组件\"><a href=\"#Collision-碰撞体组件\" class=\"headerlink\" title=\"Collision(碰撞体组件)\"></a><font color=\"green\">Collision(碰撞体组件)</font></h3><h4 id=\"Event-ActorBeginOverlap-自动触发触发器\"><a href=\"#Event-ActorBeginOverlap-自动触发触发器\" class=\"headerlink\" title=\"Event ActorBeginOverlap(自动触发触发器)\"></a><strong>Event ActorBeginOverlap(自动触发触发器)</strong></h4><p>每当有物体进入触发器时自动触发</p>\n<p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_10-53-07.png\"></p>\n<ul>\n<li>Other Actor：返回进入触发器的游戏物体的信息。</li>\n</ul>\n<h3 id=\"Game\"><a href=\"#Game\" class=\"headerlink\" title=\"Game\"></a><font color=\"green\">Game</font></h3><h3 id=\"Damage\"><a href=\"#Damage\" class=\"headerlink\" title=\"Damage\"></a><font color=\"orange\">Damage</font></h3><h4 id=\"Event-AnyDamage\"><a href=\"#Event-AnyDamage\" class=\"headerlink\" title=\"Event AnyDamage\"></a><strong>Event AnyDamage</strong></h4><p>Event AnyDamage事件是配合Apply Damage组件一起使用的，当Apply Damage组件执行时，会自动触发Event AnyDamage事件。</p>\n<p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-28_17-28-37.png\"></p>\n<p><strong>输出：</strong></p>\n<p>Damage：从Apply Damage组件的Damage中传递过来的值；</p>\n<p>Damage Type：从Apply Damage组件传递过来的Damage Type Class；</p>\n<p>Instigated By：从Apply Damage组件传递过来的Event Instigateor；</p>\n<p>Damage Causer：从Apply Damage组件传递过来的Damage Causer；</p>\n<h2 id=\"Event-BeginPlay\"><a href=\"#Event-BeginPlay\" class=\"headerlink\" title=\"Event BeginPlay\"></a><font color=\"red\">Event BeginPlay</font></h2><p>游戏开始时自动触发</p>\n<p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_10-57-11.png\"></p>\n<h2 id=\"Add-TimeLine-添加时间线\"><a href=\"#Add-TimeLine-添加时间线\" class=\"headerlink\" title=\"Add TimeLine(添加时间线)\"></a><font color=\"red\">Add TimeLine(添加时间线)</font></h2><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_10-33-38.png\"></p>\n<p><strong>输入：</strong></p>\n<ul>\n<li>Play：播放，播放完毕下一次触发时不会从头开始，而是会从上一次时间点继续开始；</li>\n<li>Play from Start：从头开始播放，每次触发都从时间线起点开始执行；</li>\n<li>Stop：暂停，触发后直接从当前时刻暂停；</li>\n<li>Reverse：倒序播放，从当前时刻开始倒叙播放；</li>\n<li>Reverse from End：从末尾开始倒序播放；</li>\n<li>Set New Time：设置新的时间起点，即时间线从新设置的时间点开始执行；</li>\n<li>New Time：新的时间起点由外部输入。</li>\n</ul>\n<p><strong>输出：</strong></p>\n<ul>\n<li>Update：在时间线内每帧执行；</li>\n<li>Finished：时间线结束时触发；</li>\n<li>Direction：返回时间线的执行方向，只有两个值“Forward”和“Backward”；</li>\n<li>New Track 0：自己创建的时间线，创建了才会有，显示的名字也是自己命名的时间线的名字。</li>\n</ul>\n<h2 id=\"Camera-Fades-相机渐变\"><a href=\"#Camera-Fades-相机渐变\" class=\"headerlink\" title=\"Camera Fades(相机渐变)\"></a><font color=\"red\">Camera Fades(相机渐变)</font></h2><p>Camera Fades组件是只有在Get Player Camera Menager组件的外拉中才能搜索到的专门服务于Get Player Camera Menager组件的相机组件集。</p>\n<h4 id=\"Start-Camera-Fade-开始渐变\"><a href=\"#Start-Camera-Fade-开始渐变\" class=\"headerlink\" title=\"Start Camera Fade(开始渐变)\"></a><strong>Start Camera Fade(开始渐变)</strong></h4><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_11-02-10.png\"></p>\n<ul>\n<li>Target：渐变目标相机，默认为当前相机；</li>\n<li>From Alpha：渐变起始Alpha；</li>\n<li>To Alpha：渐变目标Alpha；</li>\n<li>Duration：渐变持续时间；</li>\n<li>Color：渐变颜色；</li>\n<li>Should Fade Audio：启用声音渐变；</li>\n<li>Hold when Finished：渐变结束后保持当前Alpha值。</li>\n</ul>\n<h4 id=\"Stop-Camera-Fade-结束渐变\"><a href=\"#Stop-Camera-Fade-结束渐变\" class=\"headerlink\" title=\"Stop Camera Fade(结束渐变)\"></a><strong>Stop Camera Fade(结束渐变)</strong></h4><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_11-10-28.png\"></p>\n<p>触发时立刻停止当前渐变。</p>\n<h2 id=\"Input-输入流\"><a href=\"#Input-输入流\" class=\"headerlink\" title=\"Input(输入流)\"></a><font color=\"red\">Input(输入流)</font></h2><h3 id=\"Keyboard-Events-按键触发事件\"><a href=\"#Keyboard-Events-按键触发事件\" class=\"headerlink\" title=\"Keyboard Events(按键触发事件)\"></a><font color=\"green\">Keyboard Events(按键触发事件)</font></h3><p>包含所有键盘按键出发事件</p>\n<h2 id=\"Game-1\"><a href=\"#Game-1\" class=\"headerlink\" title=\"Game\"></a><font color=\"red\">Game</font></h2><h4 id=\"Get-Player-Pawn-获取角色对象\"><a href=\"#Get-Player-Pawn-获取角色对象\" class=\"headerlink\" title=\"Get Player Pawn(获取角色对象)\"></a><strong>Get Player Pawn(获取角色对象)</strong></h4><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_11-17-59.png\"></p>\n<ul>\n<li><p>Play Index：输入角色索引，可以直接设置也可以外部输入；</p>\n</li>\n<li><p>Return Value：返回获取的角色对象(Object)。</p>\n</li>\n</ul>\n<h4 id=\"Get-Current-Level-Name-获取关卡名字\"><a href=\"#Get-Current-Level-Name-获取关卡名字\" class=\"headerlink\" title=\"Get Current Level Name(获取关卡名字)\"></a><strong>Get Current Level Name(获取关卡名字)</strong></h4><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_11-21-18.png\"></p>\n<ul>\n<li>Remove Prefix String：移除前缀字符串；</li>\n<li>Return Value：返回获取到的关卡名称(String)。</li>\n</ul>\n<h4 id=\"Get-Player-Camera-Manager-获取角色相机管理器\"><a href=\"#Get-Player-Camera-Manager-获取角色相机管理器\" class=\"headerlink\" title=\"Get Player Camera Manager(获取角色相机管理器)\"></a><strong>Get Player Camera Manager(获取角色相机管理器)</strong></h4><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_11-26-07.png\"></p>\n<ul>\n<li>Player Index：输入角色索引；</li>\n<li>Return Value：返回输入角色身上的相机对象。</li>\n</ul>\n<h3 id=\"Damage-1\"><a href=\"#Damage-1\" class=\"headerlink\" title=\"Damage\"></a><font color=\"green\">Damage</font></h3><h4 id=\"Apply-Damage\"><a href=\"#Apply-Damage\" class=\"headerlink\" title=\"Apply Damage\"></a><strong>Apply Damage</strong></h4><p>Apply Damage组件一般和Event AnyDamage组件配合使用，当Apply Damage组件触发时，UE4会自动调用Event AnyDamage事件。需要注意的是，只有在Base Daamge不为0时才能触发Event Damage事件。</p>\n<p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-28_17-26-35.png\"></p>\n<p><strong>输入：</strong></p>\n<p>Ddamaged Actor：受到伤害的对象；</p>\n<p>Base Damage：输入的伤害值；</p>\n<p>Event Instigator：引发伤害的对象，如：持枪的敌人；</p>\n<p>Damage Causer：实际造成伤害的对象，如：子弹；</p>\n<p>Damage Type Class：伤害的类型；</p>\n<p><strong>输出：</strong></p>\n<p>Return Value：最终造成的实际伤害。</p>\n<h2 id=\"Rendering-渲染\"><a href=\"#Rendering-渲染\" class=\"headerlink\" title=\"Rendering(渲染)\"></a><font color=\"red\">Rendering(渲染)</font></h2><h3 id=\"Components\"><a href=\"#Components\" class=\"headerlink\" title=\"Components\"></a><font color=\"green\">Components</font></h3><h3 id=\"Light\"><a href=\"#Light\" class=\"headerlink\" title=\" Light\"></a><font color=\"orange\"> Light</font></h3><h4 id=\"Set-Intensity-设置光源强度\"><a href=\"#Set-Intensity-设置光源强度\" class=\"headerlink\" title=\"Set Intensity(设置光源强度)\"></a><strong>Set Intensity(设置光源强度)</strong></h4><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_13-32-38.png\"></p>\n<ul>\n<li>Target：目标光源；</li>\n<li>New Intensity：目标光源强度。</li>\n</ul>\n<h4 id=\"Get-Intensity-获取光源强度\"><a href=\"#Get-Intensity-获取光源强度\" class=\"headerlink\" title=\"Get Intensity(获取光源强度)\"></a><strong>Get Intensity(获取光源强度)</strong></h4><p>使用和Set Intensity一样。</p>\n<h2 id=\"String-字符串组件\"><a href=\"#String-字符串组件\" class=\"headerlink\" title=\"String(字符串组件)\"></a><font color=\"red\">String(字符串组件)</font></h2><h3 id=\"Append-字符串连接\"><a href=\"#Append-字符串连接\" class=\"headerlink\" title=\"Append(字符串连接)\"></a><font color=\"green\">Append(字符串连接)</font></h3><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-28_17-04-19.png\"></p>\n<h2 id=\"Utilities-通用组件\"><a href=\"#Utilities-通用组件\" class=\"headerlink\" title=\"Utilities(通用组件)\"></a><font color=\"red\">Utilities(通用组件)</font></h2><h3 id=\"Flow-Control\"><a href=\"#Flow-Control\" class=\"headerlink\" title=\"Flow Control\"></a><font color=\"green\">Flow Control</font></h3><h4 id=\"Branch-if语句\"><a href=\"#Branch-if语句\" class=\"headerlink\" title=\"Branch(if语句)\"></a><strong>Branch</strong>(if语句)</h4><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_11-30-52.png\"></p>\n<p>蓝图的if语句</p>\n<ul>\n<li>Condition：输入的判断条件，一般和各种判断组件的输出连接。</li>\n</ul>\n<h4 id=\"Delay-延迟函数\"><a href=\"#Delay-延迟函数\" class=\"headerlink\" title=\"Delay(延迟函数)\"></a><strong>Delay(延迟函数)</strong></h4><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_11-39-53.png\"></p>\n<ul>\n<li>Duration：延迟时间。</li>\n</ul>\n<h3 id=\"Keyboard-Events-按键触发事件-1\"><a href=\"#Keyboard-Events-按键触发事件-1\" class=\"headerlink\" title=\"Keyboard Events(按键触发事件)\"></a><font color=\"green\">Keyboard Events(按键触发事件)</font></h3><p>包含一些字符串操作函数。</p>\n<h3 id=\"Text\"><a href=\"#Text\" class=\"headerlink\" title=\"Text\"></a><font color=\"green\">Text</font></h3><h4 id=\"Equal\"><a href=\"#Equal\" class=\"headerlink\" title=\"Equal\"></a><strong>Equal</strong></h4><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_11-42-14.png\"></p>\n<p>输入两个比较对象，输出判断结果(Bool)。</p>\n<p>各种其他的判断组件用法一致。</p>\n<h3 id=\"Transformation\"><a href=\"#Transformation\" class=\"headerlink\" title=\" Transformation\"></a><font color=\"green\"> Transformation</font></h3><h4 id=\"Set-Actor-Scale-3D\"><a href=\"#Set-Actor-Scale-3D\" class=\"headerlink\" title=\"Set Actor Scale 3D\"></a><strong>Set Actor Scale 3D</strong></h4><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_13-19-47.png\"></p>\n<p>设置Actor的Scale值</p>\n<ul>\n<li>Target：要设置的目标Actor；</li>\n<li>New Scale 3D：要设置的目标Scale值。</li>\n</ul>\n<h4 id=\"Get-Actor-Scale-3D\"><a href=\"#Get-Actor-Scale-3D\" class=\"headerlink\" title=\"Get Actor Scale 3D\"></a><strong>Get Actor Scale 3D</strong></h4><p>获取Actor的Scale值。</p>\n<h1 id=\"二、物理组件\"><a href=\"#二、物理组件\" class=\"headerlink\" title=\"二、物理组件\"></a>二、物理组件</h1><p>UE4除了提供大量蓝图脚本函数组件来对蓝图类进行精细控制外还提供了一系列物理组件对蓝图类进行一些常规的复杂控制。</p>\n<h2 id=\"Camera\"><a href=\"#Camera\" class=\"headerlink\" title=\"Camera\"></a><font color=\"red\">Camera</font></h2><h4 id=\"Camera-1\"><a href=\"#Camera-1\" class=\"headerlink\" title=\"Camera\"></a><strong>Camera</strong></h4><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_11-53-42.png\"></p>\n<p>相机，用于渲染视野，一般配合Spring Arm一起使用。</p>\n<h4 id=\"Spring-Arm\"><a href=\"#Spring-Arm\" class=\"headerlink\" title=\"Spring Arm\"></a><strong>Spring Arm</strong></h4><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_11-56-15.png\"></p>\n<p>弹簧悬臂，将相机附于其上可以实现相机跟随</p>\n<h2 id=\"Movement\"><a href=\"#Movement\" class=\"headerlink\" title=\"Movement\"></a><font color=\"red\">Movement</font></h2><h4 id=\"Rotating-Movement\"><a href=\"#Rotating-Movement\" class=\"headerlink\" title=\"Rotating Movement\"></a><strong>Rotating Movement</strong></h4><p>旋转控制，提供一系列参数对对蓝图类的旋转运动进行控制</p>\n<h2 id=\"Rendering\"><a href=\"#Rendering\" class=\"headerlink\" title=\"Rendering\"></a><font color=\"red\">Rendering</font></h2><h4 id=\"Static-Mesh\"><a href=\"#Static-Mesh\" class=\"headerlink\" title=\"Static Mesh\"></a><strong>Static Mesh</strong></h4><p>静态网格，网格控制蓝图的贴图材质、模型外观、阴影渲染等。</p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>不同的蓝图脚本拥有不同的组件集，蓝图脚本的组件集过于庞大，这里只对自己使用过的组件进行列举。</p>\n<p><font color=\"red\">说明：红色字体表示一级目录组件，绿色字体表示二级目录，黄色字体为三级目录(三级目录较为少见所以使用和二级目录相同的三级标题)，白色字体为具体组件说明</font>。</p>\n<h1 id=\"一、材质蓝图组件\"><a href=\"#一、材质蓝图组件\" class=\"headerlink\" title=\"一、材质蓝图组件\"></a>一、材质蓝图组件</h1><h2 id=\"Constans-常量\"><a href=\"#Constans-常量\" class=\"headerlink\" title=\"Constans(常量)\"></a><font color=\"red\">Constans(常量)</font></h2><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_11-46-47.png\"></p>\n<table>\n<thead>\n<tr>\n<th>组件</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Constans</td>\n<td>一维量，可以表示任何一维数据，如：小数、整数等</td>\n</tr>\n<tr>\n<td>Constans2Vector</td>\n<td>二维量，可以表示任何二维数据，如：二维坐标</td>\n</tr>\n<tr>\n<td>Constans3Vector</td>\n<td>三维量，可以表示任何三维数据，如：三维坐标、RBG等</td>\n</tr>\n<tr>\n<td>Constans4Vector</td>\n<td>四维量，可以表示任何四维数据，如：四元数</td>\n</tr>\n</tbody></table>\n<h2 id=\"Math-数学函数\"><a href=\"#Math-数学函数\" class=\"headerlink\" title=\"Math(数学函数)\"></a><font color=\"red\">Math(数学函数)</font></h2><h4 id=\"Multiply-乘积\"><a href=\"#Multiply-乘积\" class=\"headerlink\" title=\"Multiply(乘积)\"></a><strong>Multiply(乘积)</strong></h4><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_11-50-37.png\"></p>\n<h3 id=\"Lerp-插值\"><a href=\"#Lerp-插值\" class=\"headerlink\" title=\"Lerp(插值)\"></a><font color=\"green\">Lerp(插值)</font></h3><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_13-12-40.png\"></p>\n<p>Lerp组件在Math的多个二级目录中存在，有各种类型的插值变化。</p>\n<p><strong>输入：</strong></p>\n<ul>\n<li>A：插值变化的起始值；</li>\n<li>B：插值变化的目标值；</li>\n<li>Alpha：插值的变化规则，连接Float的TimeLine插值将按照TimeLine的规则变化。</li>\n</ul>\n<p><strong>输出：</strong></p>\n<ul>\n<li>Return Value：返回变化后的插值，将Lerp放入帧函数中可以获得每帧变化的插值。</li>\n</ul>\n<h1 id=\"二、普通蓝图组件\"><a href=\"#二、普通蓝图组件\" class=\"headerlink\" title=\"二、普通蓝图组件\"></a>二、普通蓝图组件</h1><hr>\n<h2 id=\"Add-Event-添加事件\"><a href=\"#Add-Event-添加事件\" class=\"headerlink\" title=\"Add Event(添加事件)\"></a><font color=\"red\">Add Event(添加事件)</font></h2><h3 id=\"Collision-碰撞体组件\"><a href=\"#Collision-碰撞体组件\" class=\"headerlink\" title=\"Collision(碰撞体组件)\"></a><font color=\"green\">Collision(碰撞体组件)</font></h3><h4 id=\"Event-ActorBeginOverlap-自动触发触发器\"><a href=\"#Event-ActorBeginOverlap-自动触发触发器\" class=\"headerlink\" title=\"Event ActorBeginOverlap(自动触发触发器)\"></a><strong>Event ActorBeginOverlap(自动触发触发器)</strong></h4><p>每当有物体进入触发器时自动触发</p>\n<p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_10-53-07.png\"></p>\n<ul>\n<li>Other Actor：返回进入触发器的游戏物体的信息。</li>\n</ul>\n<h3 id=\"Game\"><a href=\"#Game\" class=\"headerlink\" title=\"Game\"></a><font color=\"green\">Game</font></h3><h3 id=\"Damage\"><a href=\"#Damage\" class=\"headerlink\" title=\"Damage\"></a><font color=\"orange\">Damage</font></h3><h4 id=\"Event-AnyDamage\"><a href=\"#Event-AnyDamage\" class=\"headerlink\" title=\"Event AnyDamage\"></a><strong>Event AnyDamage</strong></h4><p>Event AnyDamage事件是配合Apply Damage组件一起使用的，当Apply Damage组件执行时，会自动触发Event AnyDamage事件。</p>\n<p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-28_17-28-37.png\"></p>\n<p><strong>输出：</strong></p>\n<p>Damage：从Apply Damage组件的Damage中传递过来的值；</p>\n<p>Damage Type：从Apply Damage组件传递过来的Damage Type Class；</p>\n<p>Instigated By：从Apply Damage组件传递过来的Event Instigateor；</p>\n<p>Damage Causer：从Apply Damage组件传递过来的Damage Causer；</p>\n<h2 id=\"Event-BeginPlay\"><a href=\"#Event-BeginPlay\" class=\"headerlink\" title=\"Event BeginPlay\"></a><font color=\"red\">Event BeginPlay</font></h2><p>游戏开始时自动触发</p>\n<p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_10-57-11.png\"></p>\n<h2 id=\"Add-TimeLine-添加时间线\"><a href=\"#Add-TimeLine-添加时间线\" class=\"headerlink\" title=\"Add TimeLine(添加时间线)\"></a><font color=\"red\">Add TimeLine(添加时间线)</font></h2><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_10-33-38.png\"></p>\n<p><strong>输入：</strong></p>\n<ul>\n<li>Play：播放，播放完毕下一次触发时不会从头开始，而是会从上一次时间点继续开始；</li>\n<li>Play from Start：从头开始播放，每次触发都从时间线起点开始执行；</li>\n<li>Stop：暂停，触发后直接从当前时刻暂停；</li>\n<li>Reverse：倒序播放，从当前时刻开始倒叙播放；</li>\n<li>Reverse from End：从末尾开始倒序播放；</li>\n<li>Set New Time：设置新的时间起点，即时间线从新设置的时间点开始执行；</li>\n<li>New Time：新的时间起点由外部输入。</li>\n</ul>\n<p><strong>输出：</strong></p>\n<ul>\n<li>Update：在时间线内每帧执行；</li>\n<li>Finished：时间线结束时触发；</li>\n<li>Direction：返回时间线的执行方向，只有两个值“Forward”和“Backward”；</li>\n<li>New Track 0：自己创建的时间线，创建了才会有，显示的名字也是自己命名的时间线的名字。</li>\n</ul>\n<h2 id=\"Camera-Fades-相机渐变\"><a href=\"#Camera-Fades-相机渐变\" class=\"headerlink\" title=\"Camera Fades(相机渐变)\"></a><font color=\"red\">Camera Fades(相机渐变)</font></h2><p>Camera Fades组件是只有在Get Player Camera Menager组件的外拉中才能搜索到的专门服务于Get Player Camera Menager组件的相机组件集。</p>\n<h4 id=\"Start-Camera-Fade-开始渐变\"><a href=\"#Start-Camera-Fade-开始渐变\" class=\"headerlink\" title=\"Start Camera Fade(开始渐变)\"></a><strong>Start Camera Fade(开始渐变)</strong></h4><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_11-02-10.png\"></p>\n<ul>\n<li>Target：渐变目标相机，默认为当前相机；</li>\n<li>From Alpha：渐变起始Alpha；</li>\n<li>To Alpha：渐变目标Alpha；</li>\n<li>Duration：渐变持续时间；</li>\n<li>Color：渐变颜色；</li>\n<li>Should Fade Audio：启用声音渐变；</li>\n<li>Hold when Finished：渐变结束后保持当前Alpha值。</li>\n</ul>\n<h4 id=\"Stop-Camera-Fade-结束渐变\"><a href=\"#Stop-Camera-Fade-结束渐变\" class=\"headerlink\" title=\"Stop Camera Fade(结束渐变)\"></a><strong>Stop Camera Fade(结束渐变)</strong></h4><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_11-10-28.png\"></p>\n<p>触发时立刻停止当前渐变。</p>\n<h2 id=\"Input-输入流\"><a href=\"#Input-输入流\" class=\"headerlink\" title=\"Input(输入流)\"></a><font color=\"red\">Input(输入流)</font></h2><h3 id=\"Keyboard-Events-按键触发事件\"><a href=\"#Keyboard-Events-按键触发事件\" class=\"headerlink\" title=\"Keyboard Events(按键触发事件)\"></a><font color=\"green\">Keyboard Events(按键触发事件)</font></h3><p>包含所有键盘按键出发事件</p>\n<h2 id=\"Game-1\"><a href=\"#Game-1\" class=\"headerlink\" title=\"Game\"></a><font color=\"red\">Game</font></h2><h4 id=\"Get-Player-Pawn-获取角色对象\"><a href=\"#Get-Player-Pawn-获取角色对象\" class=\"headerlink\" title=\"Get Player Pawn(获取角色对象)\"></a><strong>Get Player Pawn(获取角色对象)</strong></h4><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_11-17-59.png\"></p>\n<ul>\n<li><p>Play Index：输入角色索引，可以直接设置也可以外部输入；</p>\n</li>\n<li><p>Return Value：返回获取的角色对象(Object)。</p>\n</li>\n</ul>\n<h4 id=\"Get-Current-Level-Name-获取关卡名字\"><a href=\"#Get-Current-Level-Name-获取关卡名字\" class=\"headerlink\" title=\"Get Current Level Name(获取关卡名字)\"></a><strong>Get Current Level Name(获取关卡名字)</strong></h4><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_11-21-18.png\"></p>\n<ul>\n<li>Remove Prefix String：移除前缀字符串；</li>\n<li>Return Value：返回获取到的关卡名称(String)。</li>\n</ul>\n<h4 id=\"Get-Player-Camera-Manager-获取角色相机管理器\"><a href=\"#Get-Player-Camera-Manager-获取角色相机管理器\" class=\"headerlink\" title=\"Get Player Camera Manager(获取角色相机管理器)\"></a><strong>Get Player Camera Manager(获取角色相机管理器)</strong></h4><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_11-26-07.png\"></p>\n<ul>\n<li>Player Index：输入角色索引；</li>\n<li>Return Value：返回输入角色身上的相机对象。</li>\n</ul>\n<h3 id=\"Damage-1\"><a href=\"#Damage-1\" class=\"headerlink\" title=\"Damage\"></a><font color=\"green\">Damage</font></h3><h4 id=\"Apply-Damage\"><a href=\"#Apply-Damage\" class=\"headerlink\" title=\"Apply Damage\"></a><strong>Apply Damage</strong></h4><p>Apply Damage组件一般和Event AnyDamage组件配合使用，当Apply Damage组件触发时，UE4会自动调用Event AnyDamage事件。需要注意的是，只有在Base Daamge不为0时才能触发Event Damage事件。</p>\n<p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-28_17-26-35.png\"></p>\n<p><strong>输入：</strong></p>\n<p>Ddamaged Actor：受到伤害的对象；</p>\n<p>Base Damage：输入的伤害值；</p>\n<p>Event Instigator：引发伤害的对象，如：持枪的敌人；</p>\n<p>Damage Causer：实际造成伤害的对象，如：子弹；</p>\n<p>Damage Type Class：伤害的类型；</p>\n<p><strong>输出：</strong></p>\n<p>Return Value：最终造成的实际伤害。</p>\n<h2 id=\"Rendering-渲染\"><a href=\"#Rendering-渲染\" class=\"headerlink\" title=\"Rendering(渲染)\"></a><font color=\"red\">Rendering(渲染)</font></h2><h3 id=\"Components\"><a href=\"#Components\" class=\"headerlink\" title=\"Components\"></a><font color=\"green\">Components</font></h3><h3 id=\"Light\"><a href=\"#Light\" class=\"headerlink\" title=\" Light\"></a><font color=\"orange\"> Light</font></h3><h4 id=\"Set-Intensity-设置光源强度\"><a href=\"#Set-Intensity-设置光源强度\" class=\"headerlink\" title=\"Set Intensity(设置光源强度)\"></a><strong>Set Intensity(设置光源强度)</strong></h4><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_13-32-38.png\"></p>\n<ul>\n<li>Target：目标光源；</li>\n<li>New Intensity：目标光源强度。</li>\n</ul>\n<h4 id=\"Get-Intensity-获取光源强度\"><a href=\"#Get-Intensity-获取光源强度\" class=\"headerlink\" title=\"Get Intensity(获取光源强度)\"></a><strong>Get Intensity(获取光源强度)</strong></h4><p>使用和Set Intensity一样。</p>\n<h2 id=\"String-字符串组件\"><a href=\"#String-字符串组件\" class=\"headerlink\" title=\"String(字符串组件)\"></a><font color=\"red\">String(字符串组件)</font></h2><h3 id=\"Append-字符串连接\"><a href=\"#Append-字符串连接\" class=\"headerlink\" title=\"Append(字符串连接)\"></a><font color=\"green\">Append(字符串连接)</font></h3><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-28_17-04-19.png\"></p>\n<h2 id=\"Utilities-通用组件\"><a href=\"#Utilities-通用组件\" class=\"headerlink\" title=\"Utilities(通用组件)\"></a><font color=\"red\">Utilities(通用组件)</font></h2><h3 id=\"Flow-Control\"><a href=\"#Flow-Control\" class=\"headerlink\" title=\"Flow Control\"></a><font color=\"green\">Flow Control</font></h3><h4 id=\"Branch-if语句\"><a href=\"#Branch-if语句\" class=\"headerlink\" title=\"Branch(if语句)\"></a><strong>Branch</strong>(if语句)</h4><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_11-30-52.png\"></p>\n<p>蓝图的if语句</p>\n<ul>\n<li>Condition：输入的判断条件，一般和各种判断组件的输出连接。</li>\n</ul>\n<h4 id=\"Delay-延迟函数\"><a href=\"#Delay-延迟函数\" class=\"headerlink\" title=\"Delay(延迟函数)\"></a><strong>Delay(延迟函数)</strong></h4><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_11-39-53.png\"></p>\n<ul>\n<li>Duration：延迟时间。</li>\n</ul>\n<h3 id=\"Keyboard-Events-按键触发事件-1\"><a href=\"#Keyboard-Events-按键触发事件-1\" class=\"headerlink\" title=\"Keyboard Events(按键触发事件)\"></a><font color=\"green\">Keyboard Events(按键触发事件)</font></h3><p>包含一些字符串操作函数。</p>\n<h3 id=\"Text\"><a href=\"#Text\" class=\"headerlink\" title=\"Text\"></a><font color=\"green\">Text</font></h3><h4 id=\"Equal\"><a href=\"#Equal\" class=\"headerlink\" title=\"Equal\"></a><strong>Equal</strong></h4><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_11-42-14.png\"></p>\n<p>输入两个比较对象，输出判断结果(Bool)。</p>\n<p>各种其他的判断组件用法一致。</p>\n<h3 id=\"Transformation\"><a href=\"#Transformation\" class=\"headerlink\" title=\" Transformation\"></a><font color=\"green\"> Transformation</font></h3><h4 id=\"Set-Actor-Scale-3D\"><a href=\"#Set-Actor-Scale-3D\" class=\"headerlink\" title=\"Set Actor Scale 3D\"></a><strong>Set Actor Scale 3D</strong></h4><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_13-19-47.png\"></p>\n<p>设置Actor的Scale值</p>\n<ul>\n<li>Target：要设置的目标Actor；</li>\n<li>New Scale 3D：要设置的目标Scale值。</li>\n</ul>\n<h4 id=\"Get-Actor-Scale-3D\"><a href=\"#Get-Actor-Scale-3D\" class=\"headerlink\" title=\"Get Actor Scale 3D\"></a><strong>Get Actor Scale 3D</strong></h4><p>获取Actor的Scale值。</p>\n<h1 id=\"二、物理组件\"><a href=\"#二、物理组件\" class=\"headerlink\" title=\"二、物理组件\"></a>二、物理组件</h1><p>UE4除了提供大量蓝图脚本函数组件来对蓝图类进行精细控制外还提供了一系列物理组件对蓝图类进行一些常规的复杂控制。</p>\n<h2 id=\"Camera\"><a href=\"#Camera\" class=\"headerlink\" title=\"Camera\"></a><font color=\"red\">Camera</font></h2><h4 id=\"Camera-1\"><a href=\"#Camera-1\" class=\"headerlink\" title=\"Camera\"></a><strong>Camera</strong></h4><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_11-53-42.png\"></p>\n<p>相机，用于渲染视野，一般配合Spring Arm一起使用。</p>\n<h4 id=\"Spring-Arm\"><a href=\"#Spring-Arm\" class=\"headerlink\" title=\"Spring Arm\"></a><strong>Spring Arm</strong></h4><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E7%BB%84%E4%BB%B6/Snipaste_2019-10-25_11-56-15.png\"></p>\n<p>弹簧悬臂，将相机附于其上可以实现相机跟随</p>\n<h2 id=\"Movement\"><a href=\"#Movement\" class=\"headerlink\" title=\"Movement\"></a><font color=\"red\">Movement</font></h2><h4 id=\"Rotating-Movement\"><a href=\"#Rotating-Movement\" class=\"headerlink\" title=\"Rotating Movement\"></a><strong>Rotating Movement</strong></h4><p>旋转控制，提供一系列参数对对蓝图类的旋转运动进行控制</p>\n<h2 id=\"Rendering\"><a href=\"#Rendering\" class=\"headerlink\" title=\"Rendering\"></a><font color=\"red\">Rendering</font></h2><h4 id=\"Static-Mesh\"><a href=\"#Static-Mesh\" class=\"headerlink\" title=\"Static Mesh\"></a><strong>Static Mesh</strong></h4><p>静态网格，网格控制蓝图的贴图材质、模型外观、阴影渲染等。</p>\n"},{"title":"【UE4】UE4联级粒子系统","date":"2019-11-17T12:36:30.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 一、粒子系统的一些基本概念\n\n## 1.Particle System(粒子系统)\n\n粒子系统如同贴图、模型一样属于UE4的驻留资产，不能单独存在于场景中，必须使用载体依托才能在场景中渲染出来，粒子系统包含粒子特效的所有配置。粒子系统在UE4中表现为如下样子：\n\n![](【UE4】UE4联级粒子系统/Snipaste_2019-11-14_09-41-14.png)\n\n### 创建粒子系统\n\n在内容浏览器中右键选择Particle System可以直接创建粒子系统。\n\n![](【UE4】UE4联级粒子系统/Snipaste_2019-11-14_10-14-27.png)\n\n## 2.Emitter Actor(粒子发射器)\n\n粒子发射器就是粒子系统的载体，粒子发射器承载粒子系统确定粒子系统在场景中的位置坐标等信息。但是似乎UE4没办法直接创建空的粒子发射器，UE4的粒子发射器在将粒子系统拖入场景中时，UE4会自动为该粒子系统创建一个粒子发射器。\n\n## 3.Particle System Component(粒子系统组件)\n\n粒子系统组件是一个包含了粒子系统的蓝图，粒子系统组件可以使用代码逻辑来控制粒子系统。\n\n# 二、Cascade(粒子编辑器)\n\n粒子系统的核心就是粒子编辑器，在粒子编辑器里我们可以创造出琳琅满目的粒子特效。\n\n粒子编辑器包含Toolbar、Emitters、Details、Viewport和Curve Editor等视图。\n\n## 1.ToolBar(工具栏)\n\n![](【UE4】UE4联级粒子系统/Snipaste_2019-11-14_11-50-46.png)\n\n## 2.Emitters\n\nEmitters是用于控制粒子属性的视图，Emitters的基本组成单元就是Emitter(发射器)，这里的Emitter和前面提到的Emitter Actor有一些差异，二者都是粒子发射器，但是Emitter是属于粒子系统内部的发射器，主要用于对粒子系统的某一部分的粒子发射，如爆炸的粒子特效中可以由烟、火光和火花等粒子部分组成，Emitter就是用于发射这些粒子部分的发射器，而Emitter Actor则是用于发射整个粒子系统的发射器。\n\n## 3.Emitter(发射器)\n\n在Emitters视图中每一列就是一个Emitter，一个Emitter控制一个粒子部分。一个Emitter拥有Required和Spawn两个固有组成模块，即每个Emitter被创建出来就拥有Required和Spawn模块，且这两个模块不能删除。\n\nEmitter的执行顺序是自左而右的。\n\n![](【UE4】UE4联级粒子系统/Snipaste_2019-11-14_10-25-52.png)\n\n### 创建Emitter\n\n直接在Emitters视图的空白出右键选择New Particle Sprite Emitter即可。\n\n### 赋值Emitter\n\n选中需要复制的Emitter右键/Emiter/Duplicate Emitter即可。\n\n### 删除Emitter\n\n选中需要删除的Emitter右键/Emitter/Delete Emitter，或直接按delete键。\n\n## 4.Emitter的分类\n\n直接创建的Emitter默认为普通Emitter即没有任何特殊属性的Emitter，要创建具有特殊属性的特殊的Emitter需要修改Emitter的TypeData属性，右键/TypeData选择需要的类型即可修改Emitter的类型。\n\n![](【UE4】UE4联级粒子系统/Snipaste_2019-11-14_10-51-44.png)\n\n### AnimTrail Data\n\n骨骼动画发射器，AnimTrail可以使粒子跟随人物骨骼运动而运动，如下图的跟随人物手臂运动的彩虹带\n\n![](【UE4】UE4联级粒子系统/Snipaste_2019-11-14_10-58-31.png)\n\nAnimTrail是配合UE4的动画系统一起使用的，使用AnimTrail我们需要选择一段动画片段如下图\n\n![](【UE4】UE4联级粒子系统/Snipaste_2019-11-15_15-05-48.png)\n\n发射器会在选定的时间片段内发射粒子，在右侧的Trail栏中选定粒子需要跟随的骨骼和骨骼需要绑定的粒子系统，就可以使粒子跟随着骨骼运动了。\n\n### Beam Data\n\n光束发射器，Beam有一个源点和一个目标点，粒子由源点发射运动到目标点销毁，Beam在粒子由源点运动到目标点的过程中可以设置粒子抖动，使粒子的运动具有抖动效果，如下图的闪电。\n\n![](【UE4】UE4联级粒子系统/Snipaste_2019-11-14_11-14-32.png)\n\nBeam拥有一个专属Module--Beam，在这个模块里可以为Beam添加Source(源点)、Target(目标点)和Noise(噪声)，Noise就是控制粒子抖动的Module，要想粒子出现抖动有几点是必须要做的，即勾选Noise模块的Low Freq/Low Freq Enabled、设置Frequency(噪声点的频率，影响粒子抖动的平滑程度)；Source和Target模块的Suorce Tangent/Distribution/Constant和Target Tangent/Distribution/Constant(影响源点到目标点的粒子抖动的曲率)，要想这两个设置起作用还必须设置Source/Source Tangent Method为User Set，目标点也是一样的设置；还有一点就是要想粒子从源点向目标点运动还需要设置Beam Data模块的Beam/Beam Method为Target。\n\n### GPU Sprites\n\nGPU Sprites是普通粒子的加强版，可以使粒子具有更完美的物理效果，但当对于普通粒子发射器来说更消耗GPU性能。\n\n**矢量场：**\n\n矢量场是GPU粒子独有的属性，GPU粒子在矢量成的控制下可以作出任意轨迹运用，如：\n\n![](【UE4】UE4联级粒子系统/Snipaste_2019-11-14_19-48-16.png)\n\n矢量场有多个属性控制模块\n\n![](【UE4】UE4联级粒子系统/Snipaste_2019-11-14_19-47-55.png)\n\n矢量场默认是看不见的，我们需要在Viewport里勾选View/Vector Fields，使矢量场可见。\n\n### Mesh Data\n\n网格发射器，Mesh可以使粒子使用模型网格，这样发射出来的粒子就是一个个具体的模型，如下图所示。\n\n<img src=\"【UE4】UE4联级粒子系统/Snipaste_2019-11-14_11-10-41.png\" style=\"zoom:50%;\" />\n\n### Ribbon Data\n\n光带发射器，Ribbon可以记录粒子的运行轨迹，并可以对其属性进行编辑，如下图使用粒子运行轨迹制作的光带。\n\n<img src=\"【UE4】UE4联级粒子系统/Snipaste_2019-11-14_11-03-35.png\" style=\"zoom:50%;\" />\n\nRibbon的粒子生成模块不是使用Spawn，而是Spawn PerUnit，由于Spawn是Emitter的固有Module所以无法移除，我们要启用Spawn PerUnit则需要将Spawn Module的Spawn/Distribution/Constant设置为0，达到间接禁用Spawn的效果。这样彩带粒子就是用Spawn PerUnit生成粒子了，想要彩带粒子跟随其他粒子运动我们还需要一个Module--Trail/Source，将Source Module里的Source/Source Mothod设置为PET2SRCM Particle，并且Source Name设置为需要跟随粒子部分的Emitter的名字，这样就可以产生一个跟随其他粒子的彩带了，当然这个彩带粒子是需要设置贴图的，否则尽管生成了，但是却没有渲染。\n\n## 4.Module(模块)\n\n模块用于控制粒子某一方面的属性，在Emitter中每一行就是一个Module，Module的种类很多，这里只列举自己使用过的Module。\n\nUE4Module的执行顺序是自上而下的所以当一个Emitter中有两个相同的Module时，下面的Module会覆盖上面的Module。\n\n### 添加Module\n\n选中需要添加Module的Emitter，右键选择需要的Module即可\n\n### 移除Module\n\n选中需要移除的Module右键/Delete Module，或直接按Delete键。\n\n### 拷贝Module\n\nShift+拖动即可拷贝一个Module到另一个Emitter中。\n\n### Required\n\nRequired控制粒子的显示方面的属性，如粒子贴图，显示模式等。\n\n- Sub UV栏控制贴图的逐帧融合。\n\n### Spawn\n\nSpawn控制粒子的发射方面的属性，如粒子发射量，发射模式等。\n\n- Spawn栏控制粒子持续性的发射；\n- Burst栏控制粒子间歇性的爆炸发射。\n\n### LifeTime\n\nLifeTime控制粒子的声明周期方面的属性。\n\n### Initial Size\n\nInitial Size控制粒子初始尺寸方面的属性。\n\n### Initial Velocity\n\nInitial Velocity控制粒子初始速度方面的属性。\n\n### Color Over Life\n\nColor Over Life控制粒子生命周期内的颜色变化方面的属性。\n\n生命周期的初始颜色是Color Over Life/Distribution/Constant Curve/Points/0/Out Val，\n\n生命周期的结束颜色是Color Over Life/Distribution/Constant Curve/Points/1/Out Val。\n\n### Initial Location\n\nInitial Location控制粒子发射的初始位置方面的属性，通过Start Location/Distribution/Max和Min可以控制粒子发射时的位置分布，如Max，Min都为0时粒子只从一个点发射出来，当设置了值，粒子会在设置的范围内随机发射出来。\n\n### Const Acceleration\n\nConst Acceleration控制粒子的运动的加速度。\n\n### Size By Speed\n\nSize By Speed控制粒子的尺寸随速度的变化，要想粒子的尺寸可以随速度变化需要将Required模块的Emitter/Screen Alignment设置为PSA Velocity。\n\n### Light\n\nLight控制粒子发光，但是似乎只有发生碰撞之后才会发光。\n\n### Actor Collision\n\nActor Collision控制粒子的物理碰撞。\n\n### Orbit\n\nObirt控制粒子的随机运动。\n\n# 三、LOD(细节层次)\n\n默认情况下任何创建出来的粒子系统默认为LOD0等级的细节层次，我们可以在Toolbar中的Add LOD添加细节层次，在LOD中切换细节层次。\n\n![](【UE4】UE4联级粒子系统/Snipaste_2019-11-15_15-41-29.png)\n\nDetails/LOD栏可以设置LOD切换与距离的关系，可以在不同的细节层次下修改Emitter不会对其他的细节层次产生影响，这样就可以很精确的控制各个细节层次了。","source":"_posts/【UE4】UE4联级粒子系统.md","raw":"---\ntitle: 【UE4】UE4联级粒子系统\ndate: 2019-11-17 20:36:30\ntags: UE4\ncategories: 学习笔记\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 一、粒子系统的一些基本概念\n\n## 1.Particle System(粒子系统)\n\n粒子系统如同贴图、模型一样属于UE4的驻留资产，不能单独存在于场景中，必须使用载体依托才能在场景中渲染出来，粒子系统包含粒子特效的所有配置。粒子系统在UE4中表现为如下样子：\n\n![](【UE4】UE4联级粒子系统/Snipaste_2019-11-14_09-41-14.png)\n\n### 创建粒子系统\n\n在内容浏览器中右键选择Particle System可以直接创建粒子系统。\n\n![](【UE4】UE4联级粒子系统/Snipaste_2019-11-14_10-14-27.png)\n\n## 2.Emitter Actor(粒子发射器)\n\n粒子发射器就是粒子系统的载体，粒子发射器承载粒子系统确定粒子系统在场景中的位置坐标等信息。但是似乎UE4没办法直接创建空的粒子发射器，UE4的粒子发射器在将粒子系统拖入场景中时，UE4会自动为该粒子系统创建一个粒子发射器。\n\n## 3.Particle System Component(粒子系统组件)\n\n粒子系统组件是一个包含了粒子系统的蓝图，粒子系统组件可以使用代码逻辑来控制粒子系统。\n\n# 二、Cascade(粒子编辑器)\n\n粒子系统的核心就是粒子编辑器，在粒子编辑器里我们可以创造出琳琅满目的粒子特效。\n\n粒子编辑器包含Toolbar、Emitters、Details、Viewport和Curve Editor等视图。\n\n## 1.ToolBar(工具栏)\n\n![](【UE4】UE4联级粒子系统/Snipaste_2019-11-14_11-50-46.png)\n\n## 2.Emitters\n\nEmitters是用于控制粒子属性的视图，Emitters的基本组成单元就是Emitter(发射器)，这里的Emitter和前面提到的Emitter Actor有一些差异，二者都是粒子发射器，但是Emitter是属于粒子系统内部的发射器，主要用于对粒子系统的某一部分的粒子发射，如爆炸的粒子特效中可以由烟、火光和火花等粒子部分组成，Emitter就是用于发射这些粒子部分的发射器，而Emitter Actor则是用于发射整个粒子系统的发射器。\n\n## 3.Emitter(发射器)\n\n在Emitters视图中每一列就是一个Emitter，一个Emitter控制一个粒子部分。一个Emitter拥有Required和Spawn两个固有组成模块，即每个Emitter被创建出来就拥有Required和Spawn模块，且这两个模块不能删除。\n\nEmitter的执行顺序是自左而右的。\n\n![](【UE4】UE4联级粒子系统/Snipaste_2019-11-14_10-25-52.png)\n\n### 创建Emitter\n\n直接在Emitters视图的空白出右键选择New Particle Sprite Emitter即可。\n\n### 赋值Emitter\n\n选中需要复制的Emitter右键/Emiter/Duplicate Emitter即可。\n\n### 删除Emitter\n\n选中需要删除的Emitter右键/Emitter/Delete Emitter，或直接按delete键。\n\n## 4.Emitter的分类\n\n直接创建的Emitter默认为普通Emitter即没有任何特殊属性的Emitter，要创建具有特殊属性的特殊的Emitter需要修改Emitter的TypeData属性，右键/TypeData选择需要的类型即可修改Emitter的类型。\n\n![](【UE4】UE4联级粒子系统/Snipaste_2019-11-14_10-51-44.png)\n\n### AnimTrail Data\n\n骨骼动画发射器，AnimTrail可以使粒子跟随人物骨骼运动而运动，如下图的跟随人物手臂运动的彩虹带\n\n![](【UE4】UE4联级粒子系统/Snipaste_2019-11-14_10-58-31.png)\n\nAnimTrail是配合UE4的动画系统一起使用的，使用AnimTrail我们需要选择一段动画片段如下图\n\n![](【UE4】UE4联级粒子系统/Snipaste_2019-11-15_15-05-48.png)\n\n发射器会在选定的时间片段内发射粒子，在右侧的Trail栏中选定粒子需要跟随的骨骼和骨骼需要绑定的粒子系统，就可以使粒子跟随着骨骼运动了。\n\n### Beam Data\n\n光束发射器，Beam有一个源点和一个目标点，粒子由源点发射运动到目标点销毁，Beam在粒子由源点运动到目标点的过程中可以设置粒子抖动，使粒子的运动具有抖动效果，如下图的闪电。\n\n![](【UE4】UE4联级粒子系统/Snipaste_2019-11-14_11-14-32.png)\n\nBeam拥有一个专属Module--Beam，在这个模块里可以为Beam添加Source(源点)、Target(目标点)和Noise(噪声)，Noise就是控制粒子抖动的Module，要想粒子出现抖动有几点是必须要做的，即勾选Noise模块的Low Freq/Low Freq Enabled、设置Frequency(噪声点的频率，影响粒子抖动的平滑程度)；Source和Target模块的Suorce Tangent/Distribution/Constant和Target Tangent/Distribution/Constant(影响源点到目标点的粒子抖动的曲率)，要想这两个设置起作用还必须设置Source/Source Tangent Method为User Set，目标点也是一样的设置；还有一点就是要想粒子从源点向目标点运动还需要设置Beam Data模块的Beam/Beam Method为Target。\n\n### GPU Sprites\n\nGPU Sprites是普通粒子的加强版，可以使粒子具有更完美的物理效果，但当对于普通粒子发射器来说更消耗GPU性能。\n\n**矢量场：**\n\n矢量场是GPU粒子独有的属性，GPU粒子在矢量成的控制下可以作出任意轨迹运用，如：\n\n![](【UE4】UE4联级粒子系统/Snipaste_2019-11-14_19-48-16.png)\n\n矢量场有多个属性控制模块\n\n![](【UE4】UE4联级粒子系统/Snipaste_2019-11-14_19-47-55.png)\n\n矢量场默认是看不见的，我们需要在Viewport里勾选View/Vector Fields，使矢量场可见。\n\n### Mesh Data\n\n网格发射器，Mesh可以使粒子使用模型网格，这样发射出来的粒子就是一个个具体的模型，如下图所示。\n\n<img src=\"【UE4】UE4联级粒子系统/Snipaste_2019-11-14_11-10-41.png\" style=\"zoom:50%;\" />\n\n### Ribbon Data\n\n光带发射器，Ribbon可以记录粒子的运行轨迹，并可以对其属性进行编辑，如下图使用粒子运行轨迹制作的光带。\n\n<img src=\"【UE4】UE4联级粒子系统/Snipaste_2019-11-14_11-03-35.png\" style=\"zoom:50%;\" />\n\nRibbon的粒子生成模块不是使用Spawn，而是Spawn PerUnit，由于Spawn是Emitter的固有Module所以无法移除，我们要启用Spawn PerUnit则需要将Spawn Module的Spawn/Distribution/Constant设置为0，达到间接禁用Spawn的效果。这样彩带粒子就是用Spawn PerUnit生成粒子了，想要彩带粒子跟随其他粒子运动我们还需要一个Module--Trail/Source，将Source Module里的Source/Source Mothod设置为PET2SRCM Particle，并且Source Name设置为需要跟随粒子部分的Emitter的名字，这样就可以产生一个跟随其他粒子的彩带了，当然这个彩带粒子是需要设置贴图的，否则尽管生成了，但是却没有渲染。\n\n## 4.Module(模块)\n\n模块用于控制粒子某一方面的属性，在Emitter中每一行就是一个Module，Module的种类很多，这里只列举自己使用过的Module。\n\nUE4Module的执行顺序是自上而下的所以当一个Emitter中有两个相同的Module时，下面的Module会覆盖上面的Module。\n\n### 添加Module\n\n选中需要添加Module的Emitter，右键选择需要的Module即可\n\n### 移除Module\n\n选中需要移除的Module右键/Delete Module，或直接按Delete键。\n\n### 拷贝Module\n\nShift+拖动即可拷贝一个Module到另一个Emitter中。\n\n### Required\n\nRequired控制粒子的显示方面的属性，如粒子贴图，显示模式等。\n\n- Sub UV栏控制贴图的逐帧融合。\n\n### Spawn\n\nSpawn控制粒子的发射方面的属性，如粒子发射量，发射模式等。\n\n- Spawn栏控制粒子持续性的发射；\n- Burst栏控制粒子间歇性的爆炸发射。\n\n### LifeTime\n\nLifeTime控制粒子的声明周期方面的属性。\n\n### Initial Size\n\nInitial Size控制粒子初始尺寸方面的属性。\n\n### Initial Velocity\n\nInitial Velocity控制粒子初始速度方面的属性。\n\n### Color Over Life\n\nColor Over Life控制粒子生命周期内的颜色变化方面的属性。\n\n生命周期的初始颜色是Color Over Life/Distribution/Constant Curve/Points/0/Out Val，\n\n生命周期的结束颜色是Color Over Life/Distribution/Constant Curve/Points/1/Out Val。\n\n### Initial Location\n\nInitial Location控制粒子发射的初始位置方面的属性，通过Start Location/Distribution/Max和Min可以控制粒子发射时的位置分布，如Max，Min都为0时粒子只从一个点发射出来，当设置了值，粒子会在设置的范围内随机发射出来。\n\n### Const Acceleration\n\nConst Acceleration控制粒子的运动的加速度。\n\n### Size By Speed\n\nSize By Speed控制粒子的尺寸随速度的变化，要想粒子的尺寸可以随速度变化需要将Required模块的Emitter/Screen Alignment设置为PSA Velocity。\n\n### Light\n\nLight控制粒子发光，但是似乎只有发生碰撞之后才会发光。\n\n### Actor Collision\n\nActor Collision控制粒子的物理碰撞。\n\n### Orbit\n\nObirt控制粒子的随机运动。\n\n# 三、LOD(细节层次)\n\n默认情况下任何创建出来的粒子系统默认为LOD0等级的细节层次，我们可以在Toolbar中的Add LOD添加细节层次，在LOD中切换细节层次。\n\n![](【UE4】UE4联级粒子系统/Snipaste_2019-11-15_15-41-29.png)\n\nDetails/LOD栏可以设置LOD切换与距离的关系，可以在不同的细节层次下修改Emitter不会对其他的细节层次产生影响，这样就可以很精确的控制各个细节层次了。","slug":"【UE4】UE4联级粒子系统","published":1,"updated":"2021-02-01T13:33:45.196Z","_id":"ckk9hocat0014dwr7cr2d29ag","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"一、粒子系统的一些基本概念\"><a href=\"#一、粒子系统的一些基本概念\" class=\"headerlink\" title=\"一、粒子系统的一些基本概念\"></a>一、粒子系统的一些基本概念</h1><h2 id=\"1-Particle-System-粒子系统\"><a href=\"#1-Particle-System-粒子系统\" class=\"headerlink\" title=\"1.Particle System(粒子系统)\"></a>1.Particle System(粒子系统)</h2><p>粒子系统如同贴图、模型一样属于UE4的驻留资产，不能单独存在于场景中，必须使用载体依托才能在场景中渲染出来，粒子系统包含粒子特效的所有配置。粒子系统在UE4中表现为如下样子：</p>\n<p><img src=\"/2019/11/17/%E3%80%90UE4%E3%80%91UE4%E8%81%94%E7%BA%A7%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/Snipaste_2019-11-14_09-41-14.png\"></p>\n<h3 id=\"创建粒子系统\"><a href=\"#创建粒子系统\" class=\"headerlink\" title=\"创建粒子系统\"></a>创建粒子系统</h3><p>在内容浏览器中右键选择Particle System可以直接创建粒子系统。</p>\n<p><img src=\"/2019/11/17/%E3%80%90UE4%E3%80%91UE4%E8%81%94%E7%BA%A7%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/Snipaste_2019-11-14_10-14-27.png\"></p>\n<h2 id=\"2-Emitter-Actor-粒子发射器\"><a href=\"#2-Emitter-Actor-粒子发射器\" class=\"headerlink\" title=\"2.Emitter Actor(粒子发射器)\"></a>2.Emitter Actor(粒子发射器)</h2><p>粒子发射器就是粒子系统的载体，粒子发射器承载粒子系统确定粒子系统在场景中的位置坐标等信息。但是似乎UE4没办法直接创建空的粒子发射器，UE4的粒子发射器在将粒子系统拖入场景中时，UE4会自动为该粒子系统创建一个粒子发射器。</p>\n<h2 id=\"3-Particle-System-Component-粒子系统组件\"><a href=\"#3-Particle-System-Component-粒子系统组件\" class=\"headerlink\" title=\"3.Particle System Component(粒子系统组件)\"></a>3.Particle System Component(粒子系统组件)</h2><p>粒子系统组件是一个包含了粒子系统的蓝图，粒子系统组件可以使用代码逻辑来控制粒子系统。</p>\n<h1 id=\"二、Cascade-粒子编辑器\"><a href=\"#二、Cascade-粒子编辑器\" class=\"headerlink\" title=\"二、Cascade(粒子编辑器)\"></a>二、Cascade(粒子编辑器)</h1><p>粒子系统的核心就是粒子编辑器，在粒子编辑器里我们可以创造出琳琅满目的粒子特效。</p>\n<p>粒子编辑器包含Toolbar、Emitters、Details、Viewport和Curve Editor等视图。</p>\n<h2 id=\"1-ToolBar-工具栏\"><a href=\"#1-ToolBar-工具栏\" class=\"headerlink\" title=\"1.ToolBar(工具栏)\"></a>1.ToolBar(工具栏)</h2><p><img src=\"/2019/11/17/%E3%80%90UE4%E3%80%91UE4%E8%81%94%E7%BA%A7%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/Snipaste_2019-11-14_11-50-46.png\"></p>\n<h2 id=\"2-Emitters\"><a href=\"#2-Emitters\" class=\"headerlink\" title=\"2.Emitters\"></a>2.Emitters</h2><p>Emitters是用于控制粒子属性的视图，Emitters的基本组成单元就是Emitter(发射器)，这里的Emitter和前面提到的Emitter Actor有一些差异，二者都是粒子发射器，但是Emitter是属于粒子系统内部的发射器，主要用于对粒子系统的某一部分的粒子发射，如爆炸的粒子特效中可以由烟、火光和火花等粒子部分组成，Emitter就是用于发射这些粒子部分的发射器，而Emitter Actor则是用于发射整个粒子系统的发射器。</p>\n<h2 id=\"3-Emitter-发射器\"><a href=\"#3-Emitter-发射器\" class=\"headerlink\" title=\"3.Emitter(发射器)\"></a>3.Emitter(发射器)</h2><p>在Emitters视图中每一列就是一个Emitter，一个Emitter控制一个粒子部分。一个Emitter拥有Required和Spawn两个固有组成模块，即每个Emitter被创建出来就拥有Required和Spawn模块，且这两个模块不能删除。</p>\n<p>Emitter的执行顺序是自左而右的。</p>\n<p><img src=\"/2019/11/17/%E3%80%90UE4%E3%80%91UE4%E8%81%94%E7%BA%A7%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/Snipaste_2019-11-14_10-25-52.png\"></p>\n<h3 id=\"创建Emitter\"><a href=\"#创建Emitter\" class=\"headerlink\" title=\"创建Emitter\"></a>创建Emitter</h3><p>直接在Emitters视图的空白出右键选择New Particle Sprite Emitter即可。</p>\n<h3 id=\"赋值Emitter\"><a href=\"#赋值Emitter\" class=\"headerlink\" title=\"赋值Emitter\"></a>赋值Emitter</h3><p>选中需要复制的Emitter右键/Emiter/Duplicate Emitter即可。</p>\n<h3 id=\"删除Emitter\"><a href=\"#删除Emitter\" class=\"headerlink\" title=\"删除Emitter\"></a>删除Emitter</h3><p>选中需要删除的Emitter右键/Emitter/Delete Emitter，或直接按delete键。</p>\n<h2 id=\"4-Emitter的分类\"><a href=\"#4-Emitter的分类\" class=\"headerlink\" title=\"4.Emitter的分类\"></a>4.Emitter的分类</h2><p>直接创建的Emitter默认为普通Emitter即没有任何特殊属性的Emitter，要创建具有特殊属性的特殊的Emitter需要修改Emitter的TypeData属性，右键/TypeData选择需要的类型即可修改Emitter的类型。</p>\n<p><img src=\"/2019/11/17/%E3%80%90UE4%E3%80%91UE4%E8%81%94%E7%BA%A7%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/Snipaste_2019-11-14_10-51-44.png\"></p>\n<h3 id=\"AnimTrail-Data\"><a href=\"#AnimTrail-Data\" class=\"headerlink\" title=\"AnimTrail Data\"></a>AnimTrail Data</h3><p>骨骼动画发射器，AnimTrail可以使粒子跟随人物骨骼运动而运动，如下图的跟随人物手臂运动的彩虹带</p>\n<p><img src=\"/2019/11/17/%E3%80%90UE4%E3%80%91UE4%E8%81%94%E7%BA%A7%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/Snipaste_2019-11-14_10-58-31.png\"></p>\n<p>AnimTrail是配合UE4的动画系统一起使用的，使用AnimTrail我们需要选择一段动画片段如下图</p>\n<p><img src=\"/2019/11/17/%E3%80%90UE4%E3%80%91UE4%E8%81%94%E7%BA%A7%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/Snipaste_2019-11-15_15-05-48.png\"></p>\n<p>发射器会在选定的时间片段内发射粒子，在右侧的Trail栏中选定粒子需要跟随的骨骼和骨骼需要绑定的粒子系统，就可以使粒子跟随着骨骼运动了。</p>\n<h3 id=\"Beam-Data\"><a href=\"#Beam-Data\" class=\"headerlink\" title=\"Beam Data\"></a>Beam Data</h3><p>光束发射器，Beam有一个源点和一个目标点，粒子由源点发射运动到目标点销毁，Beam在粒子由源点运动到目标点的过程中可以设置粒子抖动，使粒子的运动具有抖动效果，如下图的闪电。</p>\n<p><img src=\"/2019/11/17/%E3%80%90UE4%E3%80%91UE4%E8%81%94%E7%BA%A7%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/Snipaste_2019-11-14_11-14-32.png\"></p>\n<p>Beam拥有一个专属Module–Beam，在这个模块里可以为Beam添加Source(源点)、Target(目标点)和Noise(噪声)，Noise就是控制粒子抖动的Module，要想粒子出现抖动有几点是必须要做的，即勾选Noise模块的Low Freq/Low Freq Enabled、设置Frequency(噪声点的频率，影响粒子抖动的平滑程度)；Source和Target模块的Suorce Tangent/Distribution/Constant和Target Tangent/Distribution/Constant(影响源点到目标点的粒子抖动的曲率)，要想这两个设置起作用还必须设置Source/Source Tangent Method为User Set，目标点也是一样的设置；还有一点就是要想粒子从源点向目标点运动还需要设置Beam Data模块的Beam/Beam Method为Target。</p>\n<h3 id=\"GPU-Sprites\"><a href=\"#GPU-Sprites\" class=\"headerlink\" title=\"GPU Sprites\"></a>GPU Sprites</h3><p>GPU Sprites是普通粒子的加强版，可以使粒子具有更完美的物理效果，但当对于普通粒子发射器来说更消耗GPU性能。</p>\n<p><strong>矢量场：</strong></p>\n<p>矢量场是GPU粒子独有的属性，GPU粒子在矢量成的控制下可以作出任意轨迹运用，如：</p>\n<p><img src=\"/2019/11/17/%E3%80%90UE4%E3%80%91UE4%E8%81%94%E7%BA%A7%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/Snipaste_2019-11-14_19-48-16.png\"></p>\n<p>矢量场有多个属性控制模块</p>\n<p><img src=\"/2019/11/17/%E3%80%90UE4%E3%80%91UE4%E8%81%94%E7%BA%A7%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/Snipaste_2019-11-14_19-47-55.png\"></p>\n<p>矢量场默认是看不见的，我们需要在Viewport里勾选View/Vector Fields，使矢量场可见。</p>\n<h3 id=\"Mesh-Data\"><a href=\"#Mesh-Data\" class=\"headerlink\" title=\"Mesh Data\"></a>Mesh Data</h3><p>网格发射器，Mesh可以使粒子使用模型网格，这样发射出来的粒子就是一个个具体的模型，如下图所示。</p>\n<img src=\"/2019/11/17/%E3%80%90UE4%E3%80%91UE4%E8%81%94%E7%BA%A7%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/Snipaste_2019-11-14_11-10-41.png\" style=\"zoom:50%;\">\n\n<h3 id=\"Ribbon-Data\"><a href=\"#Ribbon-Data\" class=\"headerlink\" title=\"Ribbon Data\"></a>Ribbon Data</h3><p>光带发射器，Ribbon可以记录粒子的运行轨迹，并可以对其属性进行编辑，如下图使用粒子运行轨迹制作的光带。</p>\n<img src=\"/2019/11/17/%E3%80%90UE4%E3%80%91UE4%E8%81%94%E7%BA%A7%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/Snipaste_2019-11-14_11-03-35.png\" style=\"zoom:50%;\">\n\n<p>Ribbon的粒子生成模块不是使用Spawn，而是Spawn PerUnit，由于Spawn是Emitter的固有Module所以无法移除，我们要启用Spawn PerUnit则需要将Spawn Module的Spawn/Distribution/Constant设置为0，达到间接禁用Spawn的效果。这样彩带粒子就是用Spawn PerUnit生成粒子了，想要彩带粒子跟随其他粒子运动我们还需要一个Module–Trail/Source，将Source Module里的Source/Source Mothod设置为PET2SRCM Particle，并且Source Name设置为需要跟随粒子部分的Emitter的名字，这样就可以产生一个跟随其他粒子的彩带了，当然这个彩带粒子是需要设置贴图的，否则尽管生成了，但是却没有渲染。</p>\n<h2 id=\"4-Module-模块\"><a href=\"#4-Module-模块\" class=\"headerlink\" title=\"4.Module(模块)\"></a>4.Module(模块)</h2><p>模块用于控制粒子某一方面的属性，在Emitter中每一行就是一个Module，Module的种类很多，这里只列举自己使用过的Module。</p>\n<p>UE4Module的执行顺序是自上而下的所以当一个Emitter中有两个相同的Module时，下面的Module会覆盖上面的Module。</p>\n<h3 id=\"添加Module\"><a href=\"#添加Module\" class=\"headerlink\" title=\"添加Module\"></a>添加Module</h3><p>选中需要添加Module的Emitter，右键选择需要的Module即可</p>\n<h3 id=\"移除Module\"><a href=\"#移除Module\" class=\"headerlink\" title=\"移除Module\"></a>移除Module</h3><p>选中需要移除的Module右键/Delete Module，或直接按Delete键。</p>\n<h3 id=\"拷贝Module\"><a href=\"#拷贝Module\" class=\"headerlink\" title=\"拷贝Module\"></a>拷贝Module</h3><p>Shift+拖动即可拷贝一个Module到另一个Emitter中。</p>\n<h3 id=\"Required\"><a href=\"#Required\" class=\"headerlink\" title=\"Required\"></a>Required</h3><p>Required控制粒子的显示方面的属性，如粒子贴图，显示模式等。</p>\n<ul>\n<li>Sub UV栏控制贴图的逐帧融合。</li>\n</ul>\n<h3 id=\"Spawn\"><a href=\"#Spawn\" class=\"headerlink\" title=\"Spawn\"></a>Spawn</h3><p>Spawn控制粒子的发射方面的属性，如粒子发射量，发射模式等。</p>\n<ul>\n<li>Spawn栏控制粒子持续性的发射；</li>\n<li>Burst栏控制粒子间歇性的爆炸发射。</li>\n</ul>\n<h3 id=\"LifeTime\"><a href=\"#LifeTime\" class=\"headerlink\" title=\"LifeTime\"></a>LifeTime</h3><p>LifeTime控制粒子的声明周期方面的属性。</p>\n<h3 id=\"Initial-Size\"><a href=\"#Initial-Size\" class=\"headerlink\" title=\"Initial Size\"></a>Initial Size</h3><p>Initial Size控制粒子初始尺寸方面的属性。</p>\n<h3 id=\"Initial-Velocity\"><a href=\"#Initial-Velocity\" class=\"headerlink\" title=\"Initial Velocity\"></a>Initial Velocity</h3><p>Initial Velocity控制粒子初始速度方面的属性。</p>\n<h3 id=\"Color-Over-Life\"><a href=\"#Color-Over-Life\" class=\"headerlink\" title=\"Color Over Life\"></a>Color Over Life</h3><p>Color Over Life控制粒子生命周期内的颜色变化方面的属性。</p>\n<p>生命周期的初始颜色是Color Over Life/Distribution/Constant Curve/Points/0/Out Val，</p>\n<p>生命周期的结束颜色是Color Over Life/Distribution/Constant Curve/Points/1/Out Val。</p>\n<h3 id=\"Initial-Location\"><a href=\"#Initial-Location\" class=\"headerlink\" title=\"Initial Location\"></a>Initial Location</h3><p>Initial Location控制粒子发射的初始位置方面的属性，通过Start Location/Distribution/Max和Min可以控制粒子发射时的位置分布，如Max，Min都为0时粒子只从一个点发射出来，当设置了值，粒子会在设置的范围内随机发射出来。</p>\n<h3 id=\"Const-Acceleration\"><a href=\"#Const-Acceleration\" class=\"headerlink\" title=\"Const Acceleration\"></a>Const Acceleration</h3><p>Const Acceleration控制粒子的运动的加速度。</p>\n<h3 id=\"Size-By-Speed\"><a href=\"#Size-By-Speed\" class=\"headerlink\" title=\"Size By Speed\"></a>Size By Speed</h3><p>Size By Speed控制粒子的尺寸随速度的变化，要想粒子的尺寸可以随速度变化需要将Required模块的Emitter/Screen Alignment设置为PSA Velocity。</p>\n<h3 id=\"Light\"><a href=\"#Light\" class=\"headerlink\" title=\"Light\"></a>Light</h3><p>Light控制粒子发光，但是似乎只有发生碰撞之后才会发光。</p>\n<h3 id=\"Actor-Collision\"><a href=\"#Actor-Collision\" class=\"headerlink\" title=\"Actor Collision\"></a>Actor Collision</h3><p>Actor Collision控制粒子的物理碰撞。</p>\n<h3 id=\"Orbit\"><a href=\"#Orbit\" class=\"headerlink\" title=\"Orbit\"></a>Orbit</h3><p>Obirt控制粒子的随机运动。</p>\n<h1 id=\"三、LOD-细节层次\"><a href=\"#三、LOD-细节层次\" class=\"headerlink\" title=\"三、LOD(细节层次)\"></a>三、LOD(细节层次)</h1><p>默认情况下任何创建出来的粒子系统默认为LOD0等级的细节层次，我们可以在Toolbar中的Add LOD添加细节层次，在LOD中切换细节层次。</p>\n<p><img src=\"/2019/11/17/%E3%80%90UE4%E3%80%91UE4%E8%81%94%E7%BA%A7%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/Snipaste_2019-11-15_15-41-29.png\"></p>\n<p>Details/LOD栏可以设置LOD切换与距离的关系，可以在不同的细节层次下修改Emitter不会对其他的细节层次产生影响，这样就可以很精确的控制各个细节层次了。</p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"一、粒子系统的一些基本概念\"><a href=\"#一、粒子系统的一些基本概念\" class=\"headerlink\" title=\"一、粒子系统的一些基本概念\"></a>一、粒子系统的一些基本概念</h1><h2 id=\"1-Particle-System-粒子系统\"><a href=\"#1-Particle-System-粒子系统\" class=\"headerlink\" title=\"1.Particle System(粒子系统)\"></a>1.Particle System(粒子系统)</h2><p>粒子系统如同贴图、模型一样属于UE4的驻留资产，不能单独存在于场景中，必须使用载体依托才能在场景中渲染出来，粒子系统包含粒子特效的所有配置。粒子系统在UE4中表现为如下样子：</p>\n<p><img src=\"/2019/11/17/%E3%80%90UE4%E3%80%91UE4%E8%81%94%E7%BA%A7%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/Snipaste_2019-11-14_09-41-14.png\"></p>\n<h3 id=\"创建粒子系统\"><a href=\"#创建粒子系统\" class=\"headerlink\" title=\"创建粒子系统\"></a>创建粒子系统</h3><p>在内容浏览器中右键选择Particle System可以直接创建粒子系统。</p>\n<p><img src=\"/2019/11/17/%E3%80%90UE4%E3%80%91UE4%E8%81%94%E7%BA%A7%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/Snipaste_2019-11-14_10-14-27.png\"></p>\n<h2 id=\"2-Emitter-Actor-粒子发射器\"><a href=\"#2-Emitter-Actor-粒子发射器\" class=\"headerlink\" title=\"2.Emitter Actor(粒子发射器)\"></a>2.Emitter Actor(粒子发射器)</h2><p>粒子发射器就是粒子系统的载体，粒子发射器承载粒子系统确定粒子系统在场景中的位置坐标等信息。但是似乎UE4没办法直接创建空的粒子发射器，UE4的粒子发射器在将粒子系统拖入场景中时，UE4会自动为该粒子系统创建一个粒子发射器。</p>\n<h2 id=\"3-Particle-System-Component-粒子系统组件\"><a href=\"#3-Particle-System-Component-粒子系统组件\" class=\"headerlink\" title=\"3.Particle System Component(粒子系统组件)\"></a>3.Particle System Component(粒子系统组件)</h2><p>粒子系统组件是一个包含了粒子系统的蓝图，粒子系统组件可以使用代码逻辑来控制粒子系统。</p>\n<h1 id=\"二、Cascade-粒子编辑器\"><a href=\"#二、Cascade-粒子编辑器\" class=\"headerlink\" title=\"二、Cascade(粒子编辑器)\"></a>二、Cascade(粒子编辑器)</h1><p>粒子系统的核心就是粒子编辑器，在粒子编辑器里我们可以创造出琳琅满目的粒子特效。</p>\n<p>粒子编辑器包含Toolbar、Emitters、Details、Viewport和Curve Editor等视图。</p>\n<h2 id=\"1-ToolBar-工具栏\"><a href=\"#1-ToolBar-工具栏\" class=\"headerlink\" title=\"1.ToolBar(工具栏)\"></a>1.ToolBar(工具栏)</h2><p><img src=\"/2019/11/17/%E3%80%90UE4%E3%80%91UE4%E8%81%94%E7%BA%A7%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/Snipaste_2019-11-14_11-50-46.png\"></p>\n<h2 id=\"2-Emitters\"><a href=\"#2-Emitters\" class=\"headerlink\" title=\"2.Emitters\"></a>2.Emitters</h2><p>Emitters是用于控制粒子属性的视图，Emitters的基本组成单元就是Emitter(发射器)，这里的Emitter和前面提到的Emitter Actor有一些差异，二者都是粒子发射器，但是Emitter是属于粒子系统内部的发射器，主要用于对粒子系统的某一部分的粒子发射，如爆炸的粒子特效中可以由烟、火光和火花等粒子部分组成，Emitter就是用于发射这些粒子部分的发射器，而Emitter Actor则是用于发射整个粒子系统的发射器。</p>\n<h2 id=\"3-Emitter-发射器\"><a href=\"#3-Emitter-发射器\" class=\"headerlink\" title=\"3.Emitter(发射器)\"></a>3.Emitter(发射器)</h2><p>在Emitters视图中每一列就是一个Emitter，一个Emitter控制一个粒子部分。一个Emitter拥有Required和Spawn两个固有组成模块，即每个Emitter被创建出来就拥有Required和Spawn模块，且这两个模块不能删除。</p>\n<p>Emitter的执行顺序是自左而右的。</p>\n<p><img src=\"/2019/11/17/%E3%80%90UE4%E3%80%91UE4%E8%81%94%E7%BA%A7%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/Snipaste_2019-11-14_10-25-52.png\"></p>\n<h3 id=\"创建Emitter\"><a href=\"#创建Emitter\" class=\"headerlink\" title=\"创建Emitter\"></a>创建Emitter</h3><p>直接在Emitters视图的空白出右键选择New Particle Sprite Emitter即可。</p>\n<h3 id=\"赋值Emitter\"><a href=\"#赋值Emitter\" class=\"headerlink\" title=\"赋值Emitter\"></a>赋值Emitter</h3><p>选中需要复制的Emitter右键/Emiter/Duplicate Emitter即可。</p>\n<h3 id=\"删除Emitter\"><a href=\"#删除Emitter\" class=\"headerlink\" title=\"删除Emitter\"></a>删除Emitter</h3><p>选中需要删除的Emitter右键/Emitter/Delete Emitter，或直接按delete键。</p>\n<h2 id=\"4-Emitter的分类\"><a href=\"#4-Emitter的分类\" class=\"headerlink\" title=\"4.Emitter的分类\"></a>4.Emitter的分类</h2><p>直接创建的Emitter默认为普通Emitter即没有任何特殊属性的Emitter，要创建具有特殊属性的特殊的Emitter需要修改Emitter的TypeData属性，右键/TypeData选择需要的类型即可修改Emitter的类型。</p>\n<p><img src=\"/2019/11/17/%E3%80%90UE4%E3%80%91UE4%E8%81%94%E7%BA%A7%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/Snipaste_2019-11-14_10-51-44.png\"></p>\n<h3 id=\"AnimTrail-Data\"><a href=\"#AnimTrail-Data\" class=\"headerlink\" title=\"AnimTrail Data\"></a>AnimTrail Data</h3><p>骨骼动画发射器，AnimTrail可以使粒子跟随人物骨骼运动而运动，如下图的跟随人物手臂运动的彩虹带</p>\n<p><img src=\"/2019/11/17/%E3%80%90UE4%E3%80%91UE4%E8%81%94%E7%BA%A7%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/Snipaste_2019-11-14_10-58-31.png\"></p>\n<p>AnimTrail是配合UE4的动画系统一起使用的，使用AnimTrail我们需要选择一段动画片段如下图</p>\n<p><img src=\"/2019/11/17/%E3%80%90UE4%E3%80%91UE4%E8%81%94%E7%BA%A7%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/Snipaste_2019-11-15_15-05-48.png\"></p>\n<p>发射器会在选定的时间片段内发射粒子，在右侧的Trail栏中选定粒子需要跟随的骨骼和骨骼需要绑定的粒子系统，就可以使粒子跟随着骨骼运动了。</p>\n<h3 id=\"Beam-Data\"><a href=\"#Beam-Data\" class=\"headerlink\" title=\"Beam Data\"></a>Beam Data</h3><p>光束发射器，Beam有一个源点和一个目标点，粒子由源点发射运动到目标点销毁，Beam在粒子由源点运动到目标点的过程中可以设置粒子抖动，使粒子的运动具有抖动效果，如下图的闪电。</p>\n<p><img src=\"/2019/11/17/%E3%80%90UE4%E3%80%91UE4%E8%81%94%E7%BA%A7%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/Snipaste_2019-11-14_11-14-32.png\"></p>\n<p>Beam拥有一个专属Module–Beam，在这个模块里可以为Beam添加Source(源点)、Target(目标点)和Noise(噪声)，Noise就是控制粒子抖动的Module，要想粒子出现抖动有几点是必须要做的，即勾选Noise模块的Low Freq/Low Freq Enabled、设置Frequency(噪声点的频率，影响粒子抖动的平滑程度)；Source和Target模块的Suorce Tangent/Distribution/Constant和Target Tangent/Distribution/Constant(影响源点到目标点的粒子抖动的曲率)，要想这两个设置起作用还必须设置Source/Source Tangent Method为User Set，目标点也是一样的设置；还有一点就是要想粒子从源点向目标点运动还需要设置Beam Data模块的Beam/Beam Method为Target。</p>\n<h3 id=\"GPU-Sprites\"><a href=\"#GPU-Sprites\" class=\"headerlink\" title=\"GPU Sprites\"></a>GPU Sprites</h3><p>GPU Sprites是普通粒子的加强版，可以使粒子具有更完美的物理效果，但当对于普通粒子发射器来说更消耗GPU性能。</p>\n<p><strong>矢量场：</strong></p>\n<p>矢量场是GPU粒子独有的属性，GPU粒子在矢量成的控制下可以作出任意轨迹运用，如：</p>\n<p><img src=\"/2019/11/17/%E3%80%90UE4%E3%80%91UE4%E8%81%94%E7%BA%A7%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/Snipaste_2019-11-14_19-48-16.png\"></p>\n<p>矢量场有多个属性控制模块</p>\n<p><img src=\"/2019/11/17/%E3%80%90UE4%E3%80%91UE4%E8%81%94%E7%BA%A7%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/Snipaste_2019-11-14_19-47-55.png\"></p>\n<p>矢量场默认是看不见的，我们需要在Viewport里勾选View/Vector Fields，使矢量场可见。</p>\n<h3 id=\"Mesh-Data\"><a href=\"#Mesh-Data\" class=\"headerlink\" title=\"Mesh Data\"></a>Mesh Data</h3><p>网格发射器，Mesh可以使粒子使用模型网格，这样发射出来的粒子就是一个个具体的模型，如下图所示。</p>\n<img src=\"/2019/11/17/%E3%80%90UE4%E3%80%91UE4%E8%81%94%E7%BA%A7%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/Snipaste_2019-11-14_11-10-41.png\" style=\"zoom:50%;\">\n\n<h3 id=\"Ribbon-Data\"><a href=\"#Ribbon-Data\" class=\"headerlink\" title=\"Ribbon Data\"></a>Ribbon Data</h3><p>光带发射器，Ribbon可以记录粒子的运行轨迹，并可以对其属性进行编辑，如下图使用粒子运行轨迹制作的光带。</p>\n<img src=\"/2019/11/17/%E3%80%90UE4%E3%80%91UE4%E8%81%94%E7%BA%A7%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/Snipaste_2019-11-14_11-03-35.png\" style=\"zoom:50%;\">\n\n<p>Ribbon的粒子生成模块不是使用Spawn，而是Spawn PerUnit，由于Spawn是Emitter的固有Module所以无法移除，我们要启用Spawn PerUnit则需要将Spawn Module的Spawn/Distribution/Constant设置为0，达到间接禁用Spawn的效果。这样彩带粒子就是用Spawn PerUnit生成粒子了，想要彩带粒子跟随其他粒子运动我们还需要一个Module–Trail/Source，将Source Module里的Source/Source Mothod设置为PET2SRCM Particle，并且Source Name设置为需要跟随粒子部分的Emitter的名字，这样就可以产生一个跟随其他粒子的彩带了，当然这个彩带粒子是需要设置贴图的，否则尽管生成了，但是却没有渲染。</p>\n<h2 id=\"4-Module-模块\"><a href=\"#4-Module-模块\" class=\"headerlink\" title=\"4.Module(模块)\"></a>4.Module(模块)</h2><p>模块用于控制粒子某一方面的属性，在Emitter中每一行就是一个Module，Module的种类很多，这里只列举自己使用过的Module。</p>\n<p>UE4Module的执行顺序是自上而下的所以当一个Emitter中有两个相同的Module时，下面的Module会覆盖上面的Module。</p>\n<h3 id=\"添加Module\"><a href=\"#添加Module\" class=\"headerlink\" title=\"添加Module\"></a>添加Module</h3><p>选中需要添加Module的Emitter，右键选择需要的Module即可</p>\n<h3 id=\"移除Module\"><a href=\"#移除Module\" class=\"headerlink\" title=\"移除Module\"></a>移除Module</h3><p>选中需要移除的Module右键/Delete Module，或直接按Delete键。</p>\n<h3 id=\"拷贝Module\"><a href=\"#拷贝Module\" class=\"headerlink\" title=\"拷贝Module\"></a>拷贝Module</h3><p>Shift+拖动即可拷贝一个Module到另一个Emitter中。</p>\n<h3 id=\"Required\"><a href=\"#Required\" class=\"headerlink\" title=\"Required\"></a>Required</h3><p>Required控制粒子的显示方面的属性，如粒子贴图，显示模式等。</p>\n<ul>\n<li>Sub UV栏控制贴图的逐帧融合。</li>\n</ul>\n<h3 id=\"Spawn\"><a href=\"#Spawn\" class=\"headerlink\" title=\"Spawn\"></a>Spawn</h3><p>Spawn控制粒子的发射方面的属性，如粒子发射量，发射模式等。</p>\n<ul>\n<li>Spawn栏控制粒子持续性的发射；</li>\n<li>Burst栏控制粒子间歇性的爆炸发射。</li>\n</ul>\n<h3 id=\"LifeTime\"><a href=\"#LifeTime\" class=\"headerlink\" title=\"LifeTime\"></a>LifeTime</h3><p>LifeTime控制粒子的声明周期方面的属性。</p>\n<h3 id=\"Initial-Size\"><a href=\"#Initial-Size\" class=\"headerlink\" title=\"Initial Size\"></a>Initial Size</h3><p>Initial Size控制粒子初始尺寸方面的属性。</p>\n<h3 id=\"Initial-Velocity\"><a href=\"#Initial-Velocity\" class=\"headerlink\" title=\"Initial Velocity\"></a>Initial Velocity</h3><p>Initial Velocity控制粒子初始速度方面的属性。</p>\n<h3 id=\"Color-Over-Life\"><a href=\"#Color-Over-Life\" class=\"headerlink\" title=\"Color Over Life\"></a>Color Over Life</h3><p>Color Over Life控制粒子生命周期内的颜色变化方面的属性。</p>\n<p>生命周期的初始颜色是Color Over Life/Distribution/Constant Curve/Points/0/Out Val，</p>\n<p>生命周期的结束颜色是Color Over Life/Distribution/Constant Curve/Points/1/Out Val。</p>\n<h3 id=\"Initial-Location\"><a href=\"#Initial-Location\" class=\"headerlink\" title=\"Initial Location\"></a>Initial Location</h3><p>Initial Location控制粒子发射的初始位置方面的属性，通过Start Location/Distribution/Max和Min可以控制粒子发射时的位置分布，如Max，Min都为0时粒子只从一个点发射出来，当设置了值，粒子会在设置的范围内随机发射出来。</p>\n<h3 id=\"Const-Acceleration\"><a href=\"#Const-Acceleration\" class=\"headerlink\" title=\"Const Acceleration\"></a>Const Acceleration</h3><p>Const Acceleration控制粒子的运动的加速度。</p>\n<h3 id=\"Size-By-Speed\"><a href=\"#Size-By-Speed\" class=\"headerlink\" title=\"Size By Speed\"></a>Size By Speed</h3><p>Size By Speed控制粒子的尺寸随速度的变化，要想粒子的尺寸可以随速度变化需要将Required模块的Emitter/Screen Alignment设置为PSA Velocity。</p>\n<h3 id=\"Light\"><a href=\"#Light\" class=\"headerlink\" title=\"Light\"></a>Light</h3><p>Light控制粒子发光，但是似乎只有发生碰撞之后才会发光。</p>\n<h3 id=\"Actor-Collision\"><a href=\"#Actor-Collision\" class=\"headerlink\" title=\"Actor Collision\"></a>Actor Collision</h3><p>Actor Collision控制粒子的物理碰撞。</p>\n<h3 id=\"Orbit\"><a href=\"#Orbit\" class=\"headerlink\" title=\"Orbit\"></a>Orbit</h3><p>Obirt控制粒子的随机运动。</p>\n<h1 id=\"三、LOD-细节层次\"><a href=\"#三、LOD-细节层次\" class=\"headerlink\" title=\"三、LOD(细节层次)\"></a>三、LOD(细节层次)</h1><p>默认情况下任何创建出来的粒子系统默认为LOD0等级的细节层次，我们可以在Toolbar中的Add LOD添加细节层次，在LOD中切换细节层次。</p>\n<p><img src=\"/2019/11/17/%E3%80%90UE4%E3%80%91UE4%E8%81%94%E7%BA%A7%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/Snipaste_2019-11-15_15-41-29.png\"></p>\n<p>Details/LOD栏可以设置LOD切换与距离的关系，可以在不同的细节层次下修改Emitter不会对其他的细节层次产生影响，这样就可以很精确的控制各个细节层次了。</p>\n"},{"title":"【UE4】UE4读写Json文件","date":"2019-11-06T13:10:15.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 一、准备工作\n\n如果我们想要在UE4中读写Json文件，那么我们必须使UE4包含<font color=red>Json和JsonUtilities</font>这两个模块，那么UE4如何添加模块呢？\n\nUE4添加预定义模块的方法很简单，我只需打开工程的.Biuld.cs文件，在其中的`PublicDependencyModuleNames.AddRange()`函数中追加两个模块即可，如：\n\n```C++\nusing UnrealBuildTool;\n\npublic class DATA_sys : ModuleRules\n{\n\tpublic DATA_sys(ReadOnlyTargetRules Target) : base(Target)\n\t{\n\t\tPCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs;\n\t\n\t\tPublicDependencyModuleNames.AddRange(new string[] { \"Core\", \"CoreUObject\", \"Engine\", \"InputCore\" ,\"Json\",\"JsonUtilities\"});\n\n\t\tPrivateDependencyModuleNames.AddRange(new string[] {  });\n\n\t\t// Uncomment if you are using Slate UI\n\t\t// PrivateDependencyModuleNames.AddRange(new string[] { \"Slate\", \"SlateCore\" });\n\t\t\n\t\t// Uncomment if you are using online features\n\t\t// PrivateDependencyModuleNames.Add(\"OnlineSubsystem\");\n\n\t\t// To include OnlineSubsystemSteam, add it to the plugins section in your uproject file with the Enabled attribute set to true\n\t}\n}\n```\n\n如果我们要添加自定义模块就有点麻烦了，当然这里就不赘述了。\n\n包含这两个模块之后，我们还需要用到<font color=red> Json.h、JsonObject.h、JsonSerializer.h</font>三个头文件，其中JsonSerializer.h是用于Json序列化与反序列化用的。\n\n至此我们就可以使用UE4自带的工具进行Json文件的读写工作了。\n\n# 二、Json文件写\n\n## 1.非序列化写入\n\n```C++\nvoid AMysqlJsonCpp::CreatJson()\n{\n\tFString filePath = FPaths::GameContentDir() + TEXT(\"MysqlConfig/Connect.json\");\n\tFString jsonStr;\n\tTSharedRef<TJsonWriter<>> jsonWriter = TJsonWriterFactory<>::Create(&jsonStr);\n\tjsonWriter->WriteObjectStart();\n\tjsonWriter->WriteValue(TEXT(\"server\"), TEXT(\"127.0.0.1\"));\n\tjsonWriter->WriteObjectEnd();\n\tjsonWriter->Close();\n\tFFileHelper::SaveStringToFile(jsonStr, *filePath);\n}\n```\n\n- `FPaths::GameContentDir()`返回当前工程目录的Content文件夹的路径，FPaths为UE4的路径读写工具；\n\n- `FString jsonStr`的作用是用于关联UE4的Json写工具TJsonWriter<>，作为输入流载体，且JsonStr必须是FString类型；\n\n- `TShareRef<T>`是UE4自身的共享指针类型；\n\n- `TJsonWriter<>`是UE4专门用于写Json的模板类，其中类型参数通常为TCHAR，其中有多个方法供开发者使用：\n\n  | 函数                                          | 作用                 |\n  | --------------------------------------------- | -------------------- |\n  | Close()                                       | 关闭写工具           |\n  | WriterArrayStart()                            | 开始一个Json数组     |\n  | WriterArrayEnd()                              | 结束一个Json数组     |\n  | WriterNull(FString)                           | 为一个键写一个空值   |\n  | WriterObjectStart()                           | 开始一个Json对象     |\n  | WriterObjectEnd()                             | 结束一个Json对象     |\n  | WriterValue(FString,FString/int32/float/bool) | 向Json文件写入键值对 |\n\n  \n\n- `TJsonWriterFactory<>::Create(FString)`是UE4用来生成Json写工具TJsonWriter<>的类，TJsonFactory<>只有一个方法就是Create；\n\n- `FFileHelper`UE4的文件读写工具，方法`SaveStringToFile(TJsonWriter*,FString*)`函数的作用就是将Json写工具中的Json数据写到FString字符串中的路径文件中。\n\n使用非序列化方式写入Json时，写入方式需要严格按照Json的语法格式来做，如最开始需要使用WriterObjectStart()创建一个根前括号，即Json语法中最外面一层的`{`，所有写入结束后需要使用WriterObjectEnd()声明根对象结束，即Json语法中的最外面一层的`}`，同理数组也需要按对象一样的方法进行处理。如此才能写入一个结构完整的Json文本。\n\n## 2.序列化写入\n\n```c++\nvoid AMyActor::Test()\n{\n\tTSharedPtr<FJsonObject> rootObj = MakeShareable(new FJsonObject());\n\trootObj->SetStringField(\"root\", \"1\");\n\tTArray<TSharedPtr<FJsonValue>> arrValue;\n\tTSharedPtr<FJsonValueString> tmp = MakeShareable(new FJsonValueString(\"array\"));\n\tarrValue.Add(tmp);\n\trootObj->SetArrayField(\"array\", arrValue);\n\tFString filePath = FPaths::GameContentDir() + TEXT(\"MysqlConfig/text.json\");\n\tFString jsonStr;\n\tTSharedRef<TJsonWriter<TCHAR>> jsonWriter = TJsonWriterFactory<TCHAR>::Create(&jsonStr);\n\tFJsonSerializer::Serialize(rootObj.ToSharedRef(), jsonWriter);\n\tFFileHelper::SaveStringToFile(jsonStr, *filePath);\n\tUE_LOG(LogTemp, Error, TEXT(\"%s\"),*filePath);\n}\n```\n\n序列化的写入方式则无需考虑按Json的语法结构进行写入，序列化的写入方式是通过一个FJsonObject对象进行Json文本的写入。\n\n- 首先使用MakeSahreable()函数创建一个FJsonObject对象并使用共享指针引用。\n- 然后我们便可以使用FJsonObject对象中的`SetArrayField(FString,TArray<FSharePtr<FJsonValue>>)`、`SetBoolFiled(FString,bool)`、`SetNumberField(FString,Number)`、`SetStringField(FString,FString)`、`SetObjectField(FString,TSharePtr<FJsonObject>)`、`SetField(FString,TSharePtr<FJsonValue>)`等函数向FJsonObject对象中写分别入数组、bool值、数字、字符串、对象和Json键值对。其中数组的写入较为麻烦，我们需要先向创建Json键值对类型共享指针的TArray数组`TArray<TSharePtr<FJsonValue>>`。并向数组中添加指向FJsonValue对象的共享指针后然后才可以使用SetArrayField进行数组的Json文本写入。\n- 我们序列化写好的FJsonObject对象需要转化为FString字符串才能向文本中写入数据，FJsonObject转化为FString输入流的方式就是`FJsonSerializer::Serialize(TSharePtr<FJsonObject>.ToShareRef(),TSharePtr<FJsonWriter>)`;其中`TSharePtr<FJsonWriter>`和非序列化写入一样需要绑定一个FString作为输入流载体。\n- 最后就可以通过FFileHelper::SaveStringToFile(FString,\\*FString)，前一个FString是输入流载体，后一个\\*FString是Json文件的存储路径。\n\n# 三、Json文件读\n\n## 1.反序列化读取\n\n\n\n```C++\nTArray<FName> AMysqlJsonCpp::ReadMysqlConnectConfig()\n{\n\tFString filePath = FPaths::GameContentDir() + TEXT(\"MysqlConfig/Connect.json\");\n\tif (FPaths::FileExists(filePath))\n\t{\n\t\tFString server;\n\t\tFString dbName;\n\t\tFString userId;\n\t\tFString passwd;\n\t\tTArray<FName> connectConfig;\n\t\tFString fileStr;\n\t\tFFileHelper::LoadFileToString(fileStr, *filePath);\n\t\tTSharedPtr<FJsonObject> rootObject = MakeShareable(new FJsonObject());\n\t\tTSharedRef<TJsonReader<>> jsonReader = TJsonReaderFactory<>::Create(fileStr);\n\t\tif (FJsonSerializer::Deserialize(jsonReader, rootObject))\n\t\t{\n\t\t\tserver = rootObject->GetStringField(\"server\");\n\t\t\tdbName = rootObject->GetStringField(\"dbName\");\n\t\t\tuserId = rootObject->GetStringField(\"userId\");\n\t\t\tpasswd = rootObject->GetStringField(\"passwd\");\n\t\t}\n\t\tconnectConfig.Add(FName(*server));\n\t\tconnectConfig.Add(FName(*dbName));\n\t\tconnectConfig.Add(FName(*userId));\n\t\tconnectConfig.Add(FName(*passwd));\n\t}\n\n\treturn TArray<FName>();\n}\n\n```\n\n- 首先Json文本的读取需要将Json文本以字符串的形式读入到一个FString的输入流载体中；\n- 然后我们需要将这个输入流载体绑定到TJsonReader<>读出工具上；\n- 然后使用`FJsonSerializer::Deserialize(TSharePtr<TJsonReader<>>,TSahrePtr<FJsonObject>)`将输入流载体的Json数据反序列化到FJsonObject对象中；\n- 最后我们就可以使用FJsonObject对象中的`GetArrayField(FString)`、`GetBoolFiled(FString)`、`GetNumberField(FString)`、`GetStringField(FString)`、`GetObjectField(FString)`、`GetField(FString)`等方法从Json对象中读取指定键的值了。","source":"_posts/【UE4】UE4读写Json文件.md","raw":"---\ntitle: 【UE4】UE4读写Json文件\ndate: 2019-11-06 21:10:15\ntags: UE4\ncategories: 知识记录\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 一、准备工作\n\n如果我们想要在UE4中读写Json文件，那么我们必须使UE4包含<font color=red>Json和JsonUtilities</font>这两个模块，那么UE4如何添加模块呢？\n\nUE4添加预定义模块的方法很简单，我只需打开工程的.Biuld.cs文件，在其中的`PublicDependencyModuleNames.AddRange()`函数中追加两个模块即可，如：\n\n```C++\nusing UnrealBuildTool;\n\npublic class DATA_sys : ModuleRules\n{\n\tpublic DATA_sys(ReadOnlyTargetRules Target) : base(Target)\n\t{\n\t\tPCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs;\n\t\n\t\tPublicDependencyModuleNames.AddRange(new string[] { \"Core\", \"CoreUObject\", \"Engine\", \"InputCore\" ,\"Json\",\"JsonUtilities\"});\n\n\t\tPrivateDependencyModuleNames.AddRange(new string[] {  });\n\n\t\t// Uncomment if you are using Slate UI\n\t\t// PrivateDependencyModuleNames.AddRange(new string[] { \"Slate\", \"SlateCore\" });\n\t\t\n\t\t// Uncomment if you are using online features\n\t\t// PrivateDependencyModuleNames.Add(\"OnlineSubsystem\");\n\n\t\t// To include OnlineSubsystemSteam, add it to the plugins section in your uproject file with the Enabled attribute set to true\n\t}\n}\n```\n\n如果我们要添加自定义模块就有点麻烦了，当然这里就不赘述了。\n\n包含这两个模块之后，我们还需要用到<font color=red> Json.h、JsonObject.h、JsonSerializer.h</font>三个头文件，其中JsonSerializer.h是用于Json序列化与反序列化用的。\n\n至此我们就可以使用UE4自带的工具进行Json文件的读写工作了。\n\n# 二、Json文件写\n\n## 1.非序列化写入\n\n```C++\nvoid AMysqlJsonCpp::CreatJson()\n{\n\tFString filePath = FPaths::GameContentDir() + TEXT(\"MysqlConfig/Connect.json\");\n\tFString jsonStr;\n\tTSharedRef<TJsonWriter<>> jsonWriter = TJsonWriterFactory<>::Create(&jsonStr);\n\tjsonWriter->WriteObjectStart();\n\tjsonWriter->WriteValue(TEXT(\"server\"), TEXT(\"127.0.0.1\"));\n\tjsonWriter->WriteObjectEnd();\n\tjsonWriter->Close();\n\tFFileHelper::SaveStringToFile(jsonStr, *filePath);\n}\n```\n\n- `FPaths::GameContentDir()`返回当前工程目录的Content文件夹的路径，FPaths为UE4的路径读写工具；\n\n- `FString jsonStr`的作用是用于关联UE4的Json写工具TJsonWriter<>，作为输入流载体，且JsonStr必须是FString类型；\n\n- `TShareRef<T>`是UE4自身的共享指针类型；\n\n- `TJsonWriter<>`是UE4专门用于写Json的模板类，其中类型参数通常为TCHAR，其中有多个方法供开发者使用：\n\n  | 函数                                          | 作用                 |\n  | --------------------------------------------- | -------------------- |\n  | Close()                                       | 关闭写工具           |\n  | WriterArrayStart()                            | 开始一个Json数组     |\n  | WriterArrayEnd()                              | 结束一个Json数组     |\n  | WriterNull(FString)                           | 为一个键写一个空值   |\n  | WriterObjectStart()                           | 开始一个Json对象     |\n  | WriterObjectEnd()                             | 结束一个Json对象     |\n  | WriterValue(FString,FString/int32/float/bool) | 向Json文件写入键值对 |\n\n  \n\n- `TJsonWriterFactory<>::Create(FString)`是UE4用来生成Json写工具TJsonWriter<>的类，TJsonFactory<>只有一个方法就是Create；\n\n- `FFileHelper`UE4的文件读写工具，方法`SaveStringToFile(TJsonWriter*,FString*)`函数的作用就是将Json写工具中的Json数据写到FString字符串中的路径文件中。\n\n使用非序列化方式写入Json时，写入方式需要严格按照Json的语法格式来做，如最开始需要使用WriterObjectStart()创建一个根前括号，即Json语法中最外面一层的`{`，所有写入结束后需要使用WriterObjectEnd()声明根对象结束，即Json语法中的最外面一层的`}`，同理数组也需要按对象一样的方法进行处理。如此才能写入一个结构完整的Json文本。\n\n## 2.序列化写入\n\n```c++\nvoid AMyActor::Test()\n{\n\tTSharedPtr<FJsonObject> rootObj = MakeShareable(new FJsonObject());\n\trootObj->SetStringField(\"root\", \"1\");\n\tTArray<TSharedPtr<FJsonValue>> arrValue;\n\tTSharedPtr<FJsonValueString> tmp = MakeShareable(new FJsonValueString(\"array\"));\n\tarrValue.Add(tmp);\n\trootObj->SetArrayField(\"array\", arrValue);\n\tFString filePath = FPaths::GameContentDir() + TEXT(\"MysqlConfig/text.json\");\n\tFString jsonStr;\n\tTSharedRef<TJsonWriter<TCHAR>> jsonWriter = TJsonWriterFactory<TCHAR>::Create(&jsonStr);\n\tFJsonSerializer::Serialize(rootObj.ToSharedRef(), jsonWriter);\n\tFFileHelper::SaveStringToFile(jsonStr, *filePath);\n\tUE_LOG(LogTemp, Error, TEXT(\"%s\"),*filePath);\n}\n```\n\n序列化的写入方式则无需考虑按Json的语法结构进行写入，序列化的写入方式是通过一个FJsonObject对象进行Json文本的写入。\n\n- 首先使用MakeSahreable()函数创建一个FJsonObject对象并使用共享指针引用。\n- 然后我们便可以使用FJsonObject对象中的`SetArrayField(FString,TArray<FSharePtr<FJsonValue>>)`、`SetBoolFiled(FString,bool)`、`SetNumberField(FString,Number)`、`SetStringField(FString,FString)`、`SetObjectField(FString,TSharePtr<FJsonObject>)`、`SetField(FString,TSharePtr<FJsonValue>)`等函数向FJsonObject对象中写分别入数组、bool值、数字、字符串、对象和Json键值对。其中数组的写入较为麻烦，我们需要先向创建Json键值对类型共享指针的TArray数组`TArray<TSharePtr<FJsonValue>>`。并向数组中添加指向FJsonValue对象的共享指针后然后才可以使用SetArrayField进行数组的Json文本写入。\n- 我们序列化写好的FJsonObject对象需要转化为FString字符串才能向文本中写入数据，FJsonObject转化为FString输入流的方式就是`FJsonSerializer::Serialize(TSharePtr<FJsonObject>.ToShareRef(),TSharePtr<FJsonWriter>)`;其中`TSharePtr<FJsonWriter>`和非序列化写入一样需要绑定一个FString作为输入流载体。\n- 最后就可以通过FFileHelper::SaveStringToFile(FString,\\*FString)，前一个FString是输入流载体，后一个\\*FString是Json文件的存储路径。\n\n# 三、Json文件读\n\n## 1.反序列化读取\n\n\n\n```C++\nTArray<FName> AMysqlJsonCpp::ReadMysqlConnectConfig()\n{\n\tFString filePath = FPaths::GameContentDir() + TEXT(\"MysqlConfig/Connect.json\");\n\tif (FPaths::FileExists(filePath))\n\t{\n\t\tFString server;\n\t\tFString dbName;\n\t\tFString userId;\n\t\tFString passwd;\n\t\tTArray<FName> connectConfig;\n\t\tFString fileStr;\n\t\tFFileHelper::LoadFileToString(fileStr, *filePath);\n\t\tTSharedPtr<FJsonObject> rootObject = MakeShareable(new FJsonObject());\n\t\tTSharedRef<TJsonReader<>> jsonReader = TJsonReaderFactory<>::Create(fileStr);\n\t\tif (FJsonSerializer::Deserialize(jsonReader, rootObject))\n\t\t{\n\t\t\tserver = rootObject->GetStringField(\"server\");\n\t\t\tdbName = rootObject->GetStringField(\"dbName\");\n\t\t\tuserId = rootObject->GetStringField(\"userId\");\n\t\t\tpasswd = rootObject->GetStringField(\"passwd\");\n\t\t}\n\t\tconnectConfig.Add(FName(*server));\n\t\tconnectConfig.Add(FName(*dbName));\n\t\tconnectConfig.Add(FName(*userId));\n\t\tconnectConfig.Add(FName(*passwd));\n\t}\n\n\treturn TArray<FName>();\n}\n\n```\n\n- 首先Json文本的读取需要将Json文本以字符串的形式读入到一个FString的输入流载体中；\n- 然后我们需要将这个输入流载体绑定到TJsonReader<>读出工具上；\n- 然后使用`FJsonSerializer::Deserialize(TSharePtr<TJsonReader<>>,TSahrePtr<FJsonObject>)`将输入流载体的Json数据反序列化到FJsonObject对象中；\n- 最后我们就可以使用FJsonObject对象中的`GetArrayField(FString)`、`GetBoolFiled(FString)`、`GetNumberField(FString)`、`GetStringField(FString)`、`GetObjectField(FString)`、`GetField(FString)`等方法从Json对象中读取指定键的值了。","slug":"【UE4】UE4读写Json文件","published":1,"updated":"2021-02-01T13:32:55.185Z","_id":"ckk9hocau0017dwr75lwb8vmf","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"一、准备工作\"><a href=\"#一、准备工作\" class=\"headerlink\" title=\"一、准备工作\"></a>一、准备工作</h1><p>如果我们想要在UE4中读写Json文件，那么我们必须使UE4包含<font color=\"red\">Json和JsonUtilities</font>这两个模块，那么UE4如何添加模块呢？</p>\n<p>UE4添加预定义模块的方法很简单，我只需打开工程的.Biuld.cs文件，在其中的<code>PublicDependencyModuleNames.AddRange()</code>函数中追加两个模块即可，如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-keyword\">using</span> UnrealBuildTool;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DATA_sys</span> :</span> ModuleRules<br>&#123;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">DATA_sys</span><span class=\"hljs-params\">(ReadOnlyTargetRules Target)</span> : <span class=\"hljs-title\">base</span><span class=\"hljs-params\">(Target)</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\tPCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs;<br>\t<br>\t\tPublicDependencyModuleNames.AddRange(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">string</span>[] &#123; <span class=\"hljs-string\">&quot;Core&quot;</span>, <span class=\"hljs-string\">&quot;CoreUObject&quot;</span>, <span class=\"hljs-string\">&quot;Engine&quot;</span>, <span class=\"hljs-string\">&quot;InputCore&quot;</span> ,<span class=\"hljs-string\">&quot;Json&quot;</span>,<span class=\"hljs-string\">&quot;JsonUtilities&quot;</span>&#125;);<br><br>\t\tPrivateDependencyModuleNames.AddRange(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">string</span>[] &#123;  &#125;);<br><br>\t\t<span class=\"hljs-comment\">// Uncomment if you are using Slate UI</span><br>\t\t<span class=\"hljs-comment\">// PrivateDependencyModuleNames.AddRange(new string[] &#123; &quot;Slate&quot;, &quot;SlateCore&quot; &#125;);</span><br>\t\t<br>\t\t<span class=\"hljs-comment\">// Uncomment if you are using online features</span><br>\t\t<span class=\"hljs-comment\">// PrivateDependencyModuleNames.Add(&quot;OnlineSubsystem&quot;);</span><br><br>\t\t<span class=\"hljs-comment\">// To include OnlineSubsystemSteam, add it to the plugins section in your uproject file with the Enabled attribute set to true</span><br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>如果我们要添加自定义模块就有点麻烦了，当然这里就不赘述了。</p>\n<p>包含这两个模块之后，我们还需要用到<font color=\"red\"> Json.h、JsonObject.h、JsonSerializer.h</font>三个头文件，其中JsonSerializer.h是用于Json序列化与反序列化用的。</p>\n<p>至此我们就可以使用UE4自带的工具进行Json文件的读写工作了。</p>\n<h1 id=\"二、Json文件写\"><a href=\"#二、Json文件写\" class=\"headerlink\" title=\"二、Json文件写\"></a>二、Json文件写</h1><h2 id=\"1-非序列化写入\"><a href=\"#1-非序列化写入\" class=\"headerlink\" title=\"1.非序列化写入\"></a>1.非序列化写入</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AMysqlJsonCpp::CreatJson</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tFString filePath = FPaths::GameContentDir() + TEXT(<span class=\"hljs-string\">&quot;MysqlConfig/Connect.json&quot;</span>);<br>\tFString jsonStr;<br>\tTSharedRef&lt;TJsonWriter&lt;&gt;&gt; jsonWriter = TJsonWriterFactory&lt;&gt;::Create(&amp;jsonStr);<br>\tjsonWriter-&gt;WriteObjectStart();<br>\tjsonWriter-&gt;WriteValue(TEXT(<span class=\"hljs-string\">&quot;server&quot;</span>), TEXT(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>));<br>\tjsonWriter-&gt;WriteObjectEnd();<br>\tjsonWriter-&gt;Close();<br>\tFFileHelper::SaveStringToFile(jsonStr, *filePath);<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li><p><code>FPaths::GameContentDir()</code>返回当前工程目录的Content文件夹的路径，FPaths为UE4的路径读写工具；</p>\n</li>\n<li><p><code>FString jsonStr</code>的作用是用于关联UE4的Json写工具TJsonWriter&lt;&gt;，作为输入流载体，且JsonStr必须是FString类型；</p>\n</li>\n<li><p><code>TShareRef&lt;T&gt;</code>是UE4自身的共享指针类型；</p>\n</li>\n<li><p><code>TJsonWriter&lt;&gt;</code>是UE4专门用于写Json的模板类，其中类型参数通常为TCHAR，其中有多个方法供开发者使用：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Close()</td>\n<td>关闭写工具</td>\n</tr>\n<tr>\n<td>WriterArrayStart()</td>\n<td>开始一个Json数组</td>\n</tr>\n<tr>\n<td>WriterArrayEnd()</td>\n<td>结束一个Json数组</td>\n</tr>\n<tr>\n<td>WriterNull(FString)</td>\n<td>为一个键写一个空值</td>\n</tr>\n<tr>\n<td>WriterObjectStart()</td>\n<td>开始一个Json对象</td>\n</tr>\n<tr>\n<td>WriterObjectEnd()</td>\n<td>结束一个Json对象</td>\n</tr>\n<tr>\n<td>WriterValue(FString,FString/int32/float/bool)</td>\n<td>向Json文件写入键值对</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<ul>\n<li><p><code>TJsonWriterFactory&lt;&gt;::Create(FString)</code>是UE4用来生成Json写工具TJsonWriter&lt;&gt;的类，TJsonFactory&lt;&gt;只有一个方法就是Create；</p>\n</li>\n<li><p><code>FFileHelper</code>UE4的文件读写工具，方法<code>SaveStringToFile(TJsonWriter*,FString*)</code>函数的作用就是将Json写工具中的Json数据写到FString字符串中的路径文件中。</p>\n</li>\n</ul>\n<p>使用非序列化方式写入Json时，写入方式需要严格按照Json的语法格式来做，如最开始需要使用WriterObjectStart()创建一个根前括号，即Json语法中最外面一层的<code>&#123;</code>，所有写入结束后需要使用WriterObjectEnd()声明根对象结束，即Json语法中的最外面一层的<code>&#125;</code>，同理数组也需要按对象一样的方法进行处理。如此才能写入一个结构完整的Json文本。</p>\n<h2 id=\"2-序列化写入\"><a href=\"#2-序列化写入\" class=\"headerlink\" title=\"2.序列化写入\"></a>2.序列化写入</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AMyActor::Test</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tTSharedPtr&lt;FJsonObject&gt; rootObj = MakeShareable(<span class=\"hljs-keyword\">new</span> FJsonObject());<br>\trootObj-&gt;SetStringField(<span class=\"hljs-string\">&quot;root&quot;</span>, <span class=\"hljs-string\">&quot;1&quot;</span>);<br>\tTArray&lt;TSharedPtr&lt;FJsonValue&gt;&gt; arrValue;<br>\tTSharedPtr&lt;FJsonValueString&gt; tmp = MakeShareable(<span class=\"hljs-keyword\">new</span> FJsonValueString(<span class=\"hljs-string\">&quot;array&quot;</span>));<br>\tarrValue.Add(tmp);<br>\trootObj-&gt;SetArrayField(<span class=\"hljs-string\">&quot;array&quot;</span>, arrValue);<br>\tFString filePath = FPaths::GameContentDir() + TEXT(<span class=\"hljs-string\">&quot;MysqlConfig/text.json&quot;</span>);<br>\tFString jsonStr;<br>\tTSharedRef&lt;TJsonWriter&lt;TCHAR&gt;&gt; jsonWriter = TJsonWriterFactory&lt;TCHAR&gt;::Create(&amp;jsonStr);<br>\tFJsonSerializer::Serialize(rootObj.ToSharedRef(), jsonWriter);<br>\tFFileHelper::SaveStringToFile(jsonStr, *filePath);<br>\tUE_LOG(LogTemp, Error, TEXT(<span class=\"hljs-string\">&quot;%s&quot;</span>),*filePath);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>序列化的写入方式则无需考虑按Json的语法结构进行写入，序列化的写入方式是通过一个FJsonObject对象进行Json文本的写入。</p>\n<ul>\n<li>首先使用MakeSahreable()函数创建一个FJsonObject对象并使用共享指针引用。</li>\n<li>然后我们便可以使用FJsonObject对象中的<code>SetArrayField(FString,TArray&lt;FSharePtr&lt;FJsonValue&gt;&gt;)</code>、<code>SetBoolFiled(FString,bool)</code>、<code>SetNumberField(FString,Number)</code>、<code>SetStringField(FString,FString)</code>、<code>SetObjectField(FString,TSharePtr&lt;FJsonObject&gt;)</code>、<code>SetField(FString,TSharePtr&lt;FJsonValue&gt;)</code>等函数向FJsonObject对象中写分别入数组、bool值、数字、字符串、对象和Json键值对。其中数组的写入较为麻烦，我们需要先向创建Json键值对类型共享指针的TArray数组<code>TArray&lt;TSharePtr&lt;FJsonValue&gt;&gt;</code>。并向数组中添加指向FJsonValue对象的共享指针后然后才可以使用SetArrayField进行数组的Json文本写入。</li>\n<li>我们序列化写好的FJsonObject对象需要转化为FString字符串才能向文本中写入数据，FJsonObject转化为FString输入流的方式就是<code>FJsonSerializer::Serialize(TSharePtr&lt;FJsonObject&gt;.ToShareRef(),TSharePtr&lt;FJsonWriter&gt;)</code>;其中<code>TSharePtr&lt;FJsonWriter&gt;</code>和非序列化写入一样需要绑定一个FString作为输入流载体。</li>\n<li>最后就可以通过FFileHelper::SaveStringToFile(FString,*FString)，前一个FString是输入流载体，后一个*FString是Json文件的存储路径。</li>\n</ul>\n<h1 id=\"三、Json文件读\"><a href=\"#三、Json文件读\" class=\"headerlink\" title=\"三、Json文件读\"></a>三、Json文件读</h1><h2 id=\"1-反序列化读取\"><a href=\"#1-反序列化读取\" class=\"headerlink\" title=\"1.反序列化读取\"></a>1.反序列化读取</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\">TArray&lt;FName&gt; <span class=\"hljs-title\">AMysqlJsonCpp::ReadMysqlConnectConfig</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tFString filePath = FPaths::GameContentDir() + TEXT(<span class=\"hljs-string\">&quot;MysqlConfig/Connect.json&quot;</span>);<br>\t<span class=\"hljs-keyword\">if</span> (FPaths::FileExists(filePath))<br>\t&#123;<br>\t\tFString server;<br>\t\tFString dbName;<br>\t\tFString userId;<br>\t\tFString passwd;<br>\t\tTArray&lt;FName&gt; connectConfig;<br>\t\tFString fileStr;<br>\t\tFFileHelper::LoadFileToString(fileStr, *filePath);<br>\t\tTSharedPtr&lt;FJsonObject&gt; rootObject = MakeShareable(<span class=\"hljs-keyword\">new</span> FJsonObject());<br>\t\tTSharedRef&lt;TJsonReader&lt;&gt;&gt; jsonReader = TJsonReaderFactory&lt;&gt;::Create(fileStr);<br>\t\t<span class=\"hljs-keyword\">if</span> (FJsonSerializer::Deserialize(jsonReader, rootObject))<br>\t\t&#123;<br>\t\t\tserver = rootObject-&gt;GetStringField(<span class=\"hljs-string\">&quot;server&quot;</span>);<br>\t\t\tdbName = rootObject-&gt;GetStringField(<span class=\"hljs-string\">&quot;dbName&quot;</span>);<br>\t\t\tuserId = rootObject-&gt;GetStringField(<span class=\"hljs-string\">&quot;userId&quot;</span>);<br>\t\t\tpasswd = rootObject-&gt;GetStringField(<span class=\"hljs-string\">&quot;passwd&quot;</span>);<br>\t\t&#125;<br>\t\tconnectConfig.Add(FName(*server));<br>\t\tconnectConfig.Add(FName(*dbName));<br>\t\tconnectConfig.Add(FName(*userId));<br>\t\tconnectConfig.Add(FName(*passwd));<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> TArray&lt;FName&gt;();<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<ul>\n<li>首先Json文本的读取需要将Json文本以字符串的形式读入到一个FString的输入流载体中；</li>\n<li>然后我们需要将这个输入流载体绑定到TJsonReader&lt;&gt;读出工具上；</li>\n<li>然后使用<code>FJsonSerializer::Deserialize(TSharePtr&lt;TJsonReader&lt;&gt;&gt;,TSahrePtr&lt;FJsonObject&gt;)</code>将输入流载体的Json数据反序列化到FJsonObject对象中；</li>\n<li>最后我们就可以使用FJsonObject对象中的<code>GetArrayField(FString)</code>、<code>GetBoolFiled(FString)</code>、<code>GetNumberField(FString)</code>、<code>GetStringField(FString)</code>、<code>GetObjectField(FString)</code>、<code>GetField(FString)</code>等方法从Json对象中读取指定键的值了。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"一、准备工作\"><a href=\"#一、准备工作\" class=\"headerlink\" title=\"一、准备工作\"></a>一、准备工作</h1><p>如果我们想要在UE4中读写Json文件，那么我们必须使UE4包含<font color=\"red\">Json和JsonUtilities</font>这两个模块，那么UE4如何添加模块呢？</p>\n<p>UE4添加预定义模块的方法很简单，我只需打开工程的.Biuld.cs文件，在其中的<code>PublicDependencyModuleNames.AddRange()</code>函数中追加两个模块即可，如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-keyword\">using</span> UnrealBuildTool;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DATA_sys</span> :</span> ModuleRules<br>&#123;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">DATA_sys</span><span class=\"hljs-params\">(ReadOnlyTargetRules Target)</span> : <span class=\"hljs-title\">base</span><span class=\"hljs-params\">(Target)</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\tPCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs;<br>\t<br>\t\tPublicDependencyModuleNames.AddRange(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">string</span>[] &#123; <span class=\"hljs-string\">&quot;Core&quot;</span>, <span class=\"hljs-string\">&quot;CoreUObject&quot;</span>, <span class=\"hljs-string\">&quot;Engine&quot;</span>, <span class=\"hljs-string\">&quot;InputCore&quot;</span> ,<span class=\"hljs-string\">&quot;Json&quot;</span>,<span class=\"hljs-string\">&quot;JsonUtilities&quot;</span>&#125;);<br><br>\t\tPrivateDependencyModuleNames.AddRange(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">string</span>[] &#123;  &#125;);<br><br>\t\t<span class=\"hljs-comment\">// Uncomment if you are using Slate UI</span><br>\t\t<span class=\"hljs-comment\">// PrivateDependencyModuleNames.AddRange(new string[] &#123; &quot;Slate&quot;, &quot;SlateCore&quot; &#125;);</span><br>\t\t<br>\t\t<span class=\"hljs-comment\">// Uncomment if you are using online features</span><br>\t\t<span class=\"hljs-comment\">// PrivateDependencyModuleNames.Add(&quot;OnlineSubsystem&quot;);</span><br><br>\t\t<span class=\"hljs-comment\">// To include OnlineSubsystemSteam, add it to the plugins section in your uproject file with the Enabled attribute set to true</span><br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>如果我们要添加自定义模块就有点麻烦了，当然这里就不赘述了。</p>\n<p>包含这两个模块之后，我们还需要用到<font color=\"red\"> Json.h、JsonObject.h、JsonSerializer.h</font>三个头文件，其中JsonSerializer.h是用于Json序列化与反序列化用的。</p>\n<p>至此我们就可以使用UE4自带的工具进行Json文件的读写工作了。</p>\n<h1 id=\"二、Json文件写\"><a href=\"#二、Json文件写\" class=\"headerlink\" title=\"二、Json文件写\"></a>二、Json文件写</h1><h2 id=\"1-非序列化写入\"><a href=\"#1-非序列化写入\" class=\"headerlink\" title=\"1.非序列化写入\"></a>1.非序列化写入</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AMysqlJsonCpp::CreatJson</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tFString filePath = FPaths::GameContentDir() + TEXT(<span class=\"hljs-string\">&quot;MysqlConfig/Connect.json&quot;</span>);<br>\tFString jsonStr;<br>\tTSharedRef&lt;TJsonWriter&lt;&gt;&gt; jsonWriter = TJsonWriterFactory&lt;&gt;::Create(&amp;jsonStr);<br>\tjsonWriter-&gt;WriteObjectStart();<br>\tjsonWriter-&gt;WriteValue(TEXT(<span class=\"hljs-string\">&quot;server&quot;</span>), TEXT(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>));<br>\tjsonWriter-&gt;WriteObjectEnd();<br>\tjsonWriter-&gt;Close();<br>\tFFileHelper::SaveStringToFile(jsonStr, *filePath);<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li><p><code>FPaths::GameContentDir()</code>返回当前工程目录的Content文件夹的路径，FPaths为UE4的路径读写工具；</p>\n</li>\n<li><p><code>FString jsonStr</code>的作用是用于关联UE4的Json写工具TJsonWriter&lt;&gt;，作为输入流载体，且JsonStr必须是FString类型；</p>\n</li>\n<li><p><code>TShareRef&lt;T&gt;</code>是UE4自身的共享指针类型；</p>\n</li>\n<li><p><code>TJsonWriter&lt;&gt;</code>是UE4专门用于写Json的模板类，其中类型参数通常为TCHAR，其中有多个方法供开发者使用：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Close()</td>\n<td>关闭写工具</td>\n</tr>\n<tr>\n<td>WriterArrayStart()</td>\n<td>开始一个Json数组</td>\n</tr>\n<tr>\n<td>WriterArrayEnd()</td>\n<td>结束一个Json数组</td>\n</tr>\n<tr>\n<td>WriterNull(FString)</td>\n<td>为一个键写一个空值</td>\n</tr>\n<tr>\n<td>WriterObjectStart()</td>\n<td>开始一个Json对象</td>\n</tr>\n<tr>\n<td>WriterObjectEnd()</td>\n<td>结束一个Json对象</td>\n</tr>\n<tr>\n<td>WriterValue(FString,FString/int32/float/bool)</td>\n<td>向Json文件写入键值对</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<ul>\n<li><p><code>TJsonWriterFactory&lt;&gt;::Create(FString)</code>是UE4用来生成Json写工具TJsonWriter&lt;&gt;的类，TJsonFactory&lt;&gt;只有一个方法就是Create；</p>\n</li>\n<li><p><code>FFileHelper</code>UE4的文件读写工具，方法<code>SaveStringToFile(TJsonWriter*,FString*)</code>函数的作用就是将Json写工具中的Json数据写到FString字符串中的路径文件中。</p>\n</li>\n</ul>\n<p>使用非序列化方式写入Json时，写入方式需要严格按照Json的语法格式来做，如最开始需要使用WriterObjectStart()创建一个根前括号，即Json语法中最外面一层的<code>&#123;</code>，所有写入结束后需要使用WriterObjectEnd()声明根对象结束，即Json语法中的最外面一层的<code>&#125;</code>，同理数组也需要按对象一样的方法进行处理。如此才能写入一个结构完整的Json文本。</p>\n<h2 id=\"2-序列化写入\"><a href=\"#2-序列化写入\" class=\"headerlink\" title=\"2.序列化写入\"></a>2.序列化写入</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AMyActor::Test</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tTSharedPtr&lt;FJsonObject&gt; rootObj = MakeShareable(<span class=\"hljs-keyword\">new</span> FJsonObject());<br>\trootObj-&gt;SetStringField(<span class=\"hljs-string\">&quot;root&quot;</span>, <span class=\"hljs-string\">&quot;1&quot;</span>);<br>\tTArray&lt;TSharedPtr&lt;FJsonValue&gt;&gt; arrValue;<br>\tTSharedPtr&lt;FJsonValueString&gt; tmp = MakeShareable(<span class=\"hljs-keyword\">new</span> FJsonValueString(<span class=\"hljs-string\">&quot;array&quot;</span>));<br>\tarrValue.Add(tmp);<br>\trootObj-&gt;SetArrayField(<span class=\"hljs-string\">&quot;array&quot;</span>, arrValue);<br>\tFString filePath = FPaths::GameContentDir() + TEXT(<span class=\"hljs-string\">&quot;MysqlConfig/text.json&quot;</span>);<br>\tFString jsonStr;<br>\tTSharedRef&lt;TJsonWriter&lt;TCHAR&gt;&gt; jsonWriter = TJsonWriterFactory&lt;TCHAR&gt;::Create(&amp;jsonStr);<br>\tFJsonSerializer::Serialize(rootObj.ToSharedRef(), jsonWriter);<br>\tFFileHelper::SaveStringToFile(jsonStr, *filePath);<br>\tUE_LOG(LogTemp, Error, TEXT(<span class=\"hljs-string\">&quot;%s&quot;</span>),*filePath);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>序列化的写入方式则无需考虑按Json的语法结构进行写入，序列化的写入方式是通过一个FJsonObject对象进行Json文本的写入。</p>\n<ul>\n<li>首先使用MakeSahreable()函数创建一个FJsonObject对象并使用共享指针引用。</li>\n<li>然后我们便可以使用FJsonObject对象中的<code>SetArrayField(FString,TArray&lt;FSharePtr&lt;FJsonValue&gt;&gt;)</code>、<code>SetBoolFiled(FString,bool)</code>、<code>SetNumberField(FString,Number)</code>、<code>SetStringField(FString,FString)</code>、<code>SetObjectField(FString,TSharePtr&lt;FJsonObject&gt;)</code>、<code>SetField(FString,TSharePtr&lt;FJsonValue&gt;)</code>等函数向FJsonObject对象中写分别入数组、bool值、数字、字符串、对象和Json键值对。其中数组的写入较为麻烦，我们需要先向创建Json键值对类型共享指针的TArray数组<code>TArray&lt;TSharePtr&lt;FJsonValue&gt;&gt;</code>。并向数组中添加指向FJsonValue对象的共享指针后然后才可以使用SetArrayField进行数组的Json文本写入。</li>\n<li>我们序列化写好的FJsonObject对象需要转化为FString字符串才能向文本中写入数据，FJsonObject转化为FString输入流的方式就是<code>FJsonSerializer::Serialize(TSharePtr&lt;FJsonObject&gt;.ToShareRef(),TSharePtr&lt;FJsonWriter&gt;)</code>;其中<code>TSharePtr&lt;FJsonWriter&gt;</code>和非序列化写入一样需要绑定一个FString作为输入流载体。</li>\n<li>最后就可以通过FFileHelper::SaveStringToFile(FString,*FString)，前一个FString是输入流载体，后一个*FString是Json文件的存储路径。</li>\n</ul>\n<h1 id=\"三、Json文件读\"><a href=\"#三、Json文件读\" class=\"headerlink\" title=\"三、Json文件读\"></a>三、Json文件读</h1><h2 id=\"1-反序列化读取\"><a href=\"#1-反序列化读取\" class=\"headerlink\" title=\"1.反序列化读取\"></a>1.反序列化读取</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\">TArray&lt;FName&gt; <span class=\"hljs-title\">AMysqlJsonCpp::ReadMysqlConnectConfig</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tFString filePath = FPaths::GameContentDir() + TEXT(<span class=\"hljs-string\">&quot;MysqlConfig/Connect.json&quot;</span>);<br>\t<span class=\"hljs-keyword\">if</span> (FPaths::FileExists(filePath))<br>\t&#123;<br>\t\tFString server;<br>\t\tFString dbName;<br>\t\tFString userId;<br>\t\tFString passwd;<br>\t\tTArray&lt;FName&gt; connectConfig;<br>\t\tFString fileStr;<br>\t\tFFileHelper::LoadFileToString(fileStr, *filePath);<br>\t\tTSharedPtr&lt;FJsonObject&gt; rootObject = MakeShareable(<span class=\"hljs-keyword\">new</span> FJsonObject());<br>\t\tTSharedRef&lt;TJsonReader&lt;&gt;&gt; jsonReader = TJsonReaderFactory&lt;&gt;::Create(fileStr);<br>\t\t<span class=\"hljs-keyword\">if</span> (FJsonSerializer::Deserialize(jsonReader, rootObject))<br>\t\t&#123;<br>\t\t\tserver = rootObject-&gt;GetStringField(<span class=\"hljs-string\">&quot;server&quot;</span>);<br>\t\t\tdbName = rootObject-&gt;GetStringField(<span class=\"hljs-string\">&quot;dbName&quot;</span>);<br>\t\t\tuserId = rootObject-&gt;GetStringField(<span class=\"hljs-string\">&quot;userId&quot;</span>);<br>\t\t\tpasswd = rootObject-&gt;GetStringField(<span class=\"hljs-string\">&quot;passwd&quot;</span>);<br>\t\t&#125;<br>\t\tconnectConfig.Add(FName(*server));<br>\t\tconnectConfig.Add(FName(*dbName));<br>\t\tconnectConfig.Add(FName(*userId));<br>\t\tconnectConfig.Add(FName(*passwd));<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> TArray&lt;FName&gt;();<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<ul>\n<li>首先Json文本的读取需要将Json文本以字符串的形式读入到一个FString的输入流载体中；</li>\n<li>然后我们需要将这个输入流载体绑定到TJsonReader&lt;&gt;读出工具上；</li>\n<li>然后使用<code>FJsonSerializer::Deserialize(TSharePtr&lt;TJsonReader&lt;&gt;&gt;,TSahrePtr&lt;FJsonObject&gt;)</code>将输入流载体的Json数据反序列化到FJsonObject对象中；</li>\n<li>最后我们就可以使用FJsonObject对象中的<code>GetArrayField(FString)</code>、<code>GetBoolFiled(FString)</code>、<code>GetNumberField(FString)</code>、<code>GetStringField(FString)</code>、<code>GetObjectField(FString)</code>、<code>GetField(FString)</code>等方法从Json对象中读取指定键的值了。</li>\n</ul>\n"},{"title":"【UE4】UE4连接MySQL","date":"2019-11-06T13:10:30.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 一、使用MySQLIntegration插件连接Mysql\n\n- Update Data from Query Async组件后面必须再跟一个其他的节点，节点才能正常执行\n- UE4 C++编程中不能出现私有私有变量？\n- UE4 C++静态变量？\n- MySQL Integration插件只支持sql语句，不支持存储过程\n- 在蓝图中实现的C++函数在蓝图中没法使用？\n- 暴露给蓝图的变量和函数必须是公有且非静态的\n- UE4 C++类创建对象，大象无形31页\n- UE4 C++编程中if else语句必须加{}\n\n## 1.MySQL Integration安装\n\nMySQL Integration插件可以直接在UE4商城中搜索到，直接下载安装即可，如何是从外部导入的离线包，直接将插件文件夹丢入UE4安装目录下的Engine\\Plugins文件夹下即可。\n\n## 2.激活MySQL Integration\n\n激活插件直接在UE4中的Edit/Plugins/Installed下找到MySQL Integration勾选Enabled即可，勾选插件之后UE4会提示需要重启UE4才可激活，重启软件就可以激活插件了。\n\n## 3.MySQL Integration提供的蓝图组件\n\n官方文档： https://sameek4.github.io/KodeSpire/Pages/MySQLIntegration.html \n\n### Set Connection Properties(Mysql连接)\n\nSet Connection Properties组件提供UE4对Mysql的连接服务。\n\n![](【UE4】UE4连接MySQL/Snipaste_2019-11-05_17-54-58.png)\n\n**输入：**\n\n- server：数据库的连接ip；\n- DBName：数据库的名字；\n- User ID：登录数据库用户名；\n- Password：登录数据库的用户密码；\n- Extra Param：SetConnectionProperties提供的额外参数传入；\n- Is Trusted：启用windows用户名和密码登录数据库。\n\n### Check  Connection State(Mysql连接状态检查)\n\n此组件提供对Mysql连接的状态的查询服务。\n\n![](【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-02-53.png)\n\n**输出：**\n\n- Error Message：输出错误信息；\n\n- Return Value：输出连接状态；\n\n  包含如下状态值(类型为插件定义的EMysqlConnectionStateEnum枚举)：\n\n  - Broken：数据库损坏；\n  - Closed：连接关闭；\n  - connecting：正在连接；\n  - Eecuting：正在发送命令；\n  - Fetching：数据库正在检索数据；\n  - Open：连接以正常打开，可以正常使用数据库。\n\n### Update Data from Query Async(异步发送非查询sql命令)\n\n![](【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-14-47.png)\n\n此组件提供非查询的sql命令发送服务，即发送insert，delete，create等命令。\n\n### Update Data from Query (同步发送非查询sql命令)\n\n![](【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-17-44.png)\n\n**输入：**\n\n- Query：sql命令字符串；\n\n**输出：**\n\n- Success Status：命令的执行状态\n\n  有三种执行状态值，类型为插件自定义的EMysqlSuccessStateEnum枚举，\n\n  - Executing：sql命令正在发送；\n  - Success：sql命令执行成功；\n  - Failed：sql命令执行失败。\n\n- Error Message：输出错误信息。\n\n### Check Query EXecution State(检查上一条命令的执行状态)\n\n此组件提任何sql命令的执行状态检查，<font color=red>但仅限检查Check Query EXecution State执行前的上一条sql语句的状态检查。</font>\n\n![](【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-26-48.png)\n\n输出内容和Update Data from Query一致。\n\n### Select Data from Query Async(异步发送查询命令)\n\n此组件仅限发送select语句，其他语句发送无效，<font color=red> 查询到的数据会存储到插件自带的数据结构中，可以使用下面介绍的Get Selected Table组件进行数据访问。</font>\n\n![](【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-27-48.png)\n\n## Get Selected Table(读取数据表)\n\n![](【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-34-52.png)\n\n**输出:**\n\n- Result by Column：以列的形式返回数据，<font color=red>返回一个MySQLDataTableStructures的结构体数据，每一个结构体就是一列，MySQLDataTableStructures结构体包含两个成员ColumnName(列名)和ColumnData(列数据)，其中ColumnData是一个FString类型的TArray数组，数组中每一个元数就是该列中某一行的数据。</font>\n- Result by Row：以行的形式返回数据，返回一个<font color=red> 返回一个MySQLDataRowStructures类型的结构体数组，每一个结构体就是一行，MySQLDataRowStructures结构体包含一个FString类型的TArray数组，数组中每一个元素就是该行中某一列的数据。</font>\n\n## 4.MySQL Integration的注意事项\n\n### MySQL Integration不支持存储过程\n\nMySQL Integration插件不支持数据库的存储过程的语法，在Query引脚输入“Call ProdureceName(ParameterList) ”是没有办法唤醒数据库中的存储过程的，所以很多的数据库中的查询和插入逻辑就需要在外部实现了。\n\n### MySQL Integration不提供C++函数\n\nMySQL Integration插件只提供蓝图组件不提供C++函数，也就是说数据库的连接查询等只能使用蓝图来实现，但大多数情况我们又必须在C++中访问数据库，在这钟情况下我们该如何做呢？\n\n目前，我只想到一种方法，就是在C++中创建访问数据库的类在类中声明数据库的访问函数，用这个类的蓝图子类来重写该数据库访问函数，以实现父类中该数据库访问函数，这是由C++继承中的重写的特性实现的。\n\n具体做法如下：\n\n首先在C++中创建一个专门负责连接数据库的类并在类中声明连接函数。\n\n```C++\n#include \"MysqlJsonCpp.h\"\n#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MysqlConnector.generated.h\"\n\nUCLASS()\nclass DATA_SYS_API AMysqlConnector : public AActor\n{\n\tGENERATED_BODY()\npublic:\t\n\n\tUPROPERTY(BlueprintReadWrite,Category = \"VariableRW\")\n\tFString errorMessage;\n\tUPROPERTY(BlueprintReadWrite, Category = \"VariableRW\")\n\tFString stateMessage;\n\nprotected:\n\n\tvirtual void BeginPlay() override;\n\npublic:\t\n\n\tAMysqlConnector();\n\tvirtual void Tick(float DeltaTime) override;\n\n\t//从配置文件ConnectConfig.json中读取Mysql连接配置文件\n\tvoid ConnectMysqlByConfig();\n    \n\t//使用MySQLIntegration插件连接Mysql\n\tUFUNCTION(BlueprintImplementableEvent,Category = \"OverridFunction\")\n\tvoid Connect(FName server, FName dbName, FName userId, FName passwd);\n    \n\t//使用MySQLIntegration插件检查连接状态\n\tUFUNCTION(BlueprintImplementableEvent, Category = \"OverridFunction\")\n\tbool ConnectState(FString &errorMessageParam,FString &stateMessageParam);\n\t//获取连接状态\n\tbool GetConnectState();\n};\n```\n\n上面的void Connect(FName server, FName dbName, FName userId, FName passwd);函数就是需要用蓝图实现的数据库连接函数，<font color =red> 这里要注意，这个函数只能在C++中声明，不可以实现，否则父类调用此函数时将无法关联到子类的重写，并且这个函数需要使用`BlueprintImplementableEvent`参数暴露给蓝图</font>。\n\n<font color =red> 这里还需要注意，如果这个函数中使用了变量的引用，那么这个变量也需要使用`UPROPERTY(BlueprintReadWrite, Category = \"VariableRW\")`暴漏给蓝图，如上面的`FString errorMessage;`一样。</font>\n\n这样我们就可以创建一个蓝图类来继承这个类，\n\n![](【UE4】UE4连接MySQL/Snipaste_2019-11-05_19-12-00.png)\n\n然后在该蓝图类的MyBlueprint/Functions/Override下看到我们在C++类中声明的函数，直接重写实现即可，如：\n\n![](【UE4】UE4连接MySQL/Snipaste_2019-11-05_19-14-07.png)\n\n实现时候我们就可以在C++中调用这个函数了，这个函数就会通过重写关联到蓝图自类中的重写过程，如此数据库便连接上了。\n\n# 二、使用C++库连接Mysql\n\n目前卡在#include<mysql.h>编译不通过。","source":"_posts/【UE4】UE4连接MySQL.md","raw":"---\ntitle: 【UE4】UE4连接MySQL\ndate: 2019-11-06 21:10:30\ntags: UE4\ncategories: 知识记录\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 一、使用MySQLIntegration插件连接Mysql\n\n- Update Data from Query Async组件后面必须再跟一个其他的节点，节点才能正常执行\n- UE4 C++编程中不能出现私有私有变量？\n- UE4 C++静态变量？\n- MySQL Integration插件只支持sql语句，不支持存储过程\n- 在蓝图中实现的C++函数在蓝图中没法使用？\n- 暴露给蓝图的变量和函数必须是公有且非静态的\n- UE4 C++类创建对象，大象无形31页\n- UE4 C++编程中if else语句必须加{}\n\n## 1.MySQL Integration安装\n\nMySQL Integration插件可以直接在UE4商城中搜索到，直接下载安装即可，如何是从外部导入的离线包，直接将插件文件夹丢入UE4安装目录下的Engine\\Plugins文件夹下即可。\n\n## 2.激活MySQL Integration\n\n激活插件直接在UE4中的Edit/Plugins/Installed下找到MySQL Integration勾选Enabled即可，勾选插件之后UE4会提示需要重启UE4才可激活，重启软件就可以激活插件了。\n\n## 3.MySQL Integration提供的蓝图组件\n\n官方文档： https://sameek4.github.io/KodeSpire/Pages/MySQLIntegration.html \n\n### Set Connection Properties(Mysql连接)\n\nSet Connection Properties组件提供UE4对Mysql的连接服务。\n\n![](【UE4】UE4连接MySQL/Snipaste_2019-11-05_17-54-58.png)\n\n**输入：**\n\n- server：数据库的连接ip；\n- DBName：数据库的名字；\n- User ID：登录数据库用户名；\n- Password：登录数据库的用户密码；\n- Extra Param：SetConnectionProperties提供的额外参数传入；\n- Is Trusted：启用windows用户名和密码登录数据库。\n\n### Check  Connection State(Mysql连接状态检查)\n\n此组件提供对Mysql连接的状态的查询服务。\n\n![](【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-02-53.png)\n\n**输出：**\n\n- Error Message：输出错误信息；\n\n- Return Value：输出连接状态；\n\n  包含如下状态值(类型为插件定义的EMysqlConnectionStateEnum枚举)：\n\n  - Broken：数据库损坏；\n  - Closed：连接关闭；\n  - connecting：正在连接；\n  - Eecuting：正在发送命令；\n  - Fetching：数据库正在检索数据；\n  - Open：连接以正常打开，可以正常使用数据库。\n\n### Update Data from Query Async(异步发送非查询sql命令)\n\n![](【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-14-47.png)\n\n此组件提供非查询的sql命令发送服务，即发送insert，delete，create等命令。\n\n### Update Data from Query (同步发送非查询sql命令)\n\n![](【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-17-44.png)\n\n**输入：**\n\n- Query：sql命令字符串；\n\n**输出：**\n\n- Success Status：命令的执行状态\n\n  有三种执行状态值，类型为插件自定义的EMysqlSuccessStateEnum枚举，\n\n  - Executing：sql命令正在发送；\n  - Success：sql命令执行成功；\n  - Failed：sql命令执行失败。\n\n- Error Message：输出错误信息。\n\n### Check Query EXecution State(检查上一条命令的执行状态)\n\n此组件提任何sql命令的执行状态检查，<font color=red>但仅限检查Check Query EXecution State执行前的上一条sql语句的状态检查。</font>\n\n![](【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-26-48.png)\n\n输出内容和Update Data from Query一致。\n\n### Select Data from Query Async(异步发送查询命令)\n\n此组件仅限发送select语句，其他语句发送无效，<font color=red> 查询到的数据会存储到插件自带的数据结构中，可以使用下面介绍的Get Selected Table组件进行数据访问。</font>\n\n![](【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-27-48.png)\n\n## Get Selected Table(读取数据表)\n\n![](【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-34-52.png)\n\n**输出:**\n\n- Result by Column：以列的形式返回数据，<font color=red>返回一个MySQLDataTableStructures的结构体数据，每一个结构体就是一列，MySQLDataTableStructures结构体包含两个成员ColumnName(列名)和ColumnData(列数据)，其中ColumnData是一个FString类型的TArray数组，数组中每一个元数就是该列中某一行的数据。</font>\n- Result by Row：以行的形式返回数据，返回一个<font color=red> 返回一个MySQLDataRowStructures类型的结构体数组，每一个结构体就是一行，MySQLDataRowStructures结构体包含一个FString类型的TArray数组，数组中每一个元素就是该行中某一列的数据。</font>\n\n## 4.MySQL Integration的注意事项\n\n### MySQL Integration不支持存储过程\n\nMySQL Integration插件不支持数据库的存储过程的语法，在Query引脚输入“Call ProdureceName(ParameterList) ”是没有办法唤醒数据库中的存储过程的，所以很多的数据库中的查询和插入逻辑就需要在外部实现了。\n\n### MySQL Integration不提供C++函数\n\nMySQL Integration插件只提供蓝图组件不提供C++函数，也就是说数据库的连接查询等只能使用蓝图来实现，但大多数情况我们又必须在C++中访问数据库，在这钟情况下我们该如何做呢？\n\n目前，我只想到一种方法，就是在C++中创建访问数据库的类在类中声明数据库的访问函数，用这个类的蓝图子类来重写该数据库访问函数，以实现父类中该数据库访问函数，这是由C++继承中的重写的特性实现的。\n\n具体做法如下：\n\n首先在C++中创建一个专门负责连接数据库的类并在类中声明连接函数。\n\n```C++\n#include \"MysqlJsonCpp.h\"\n#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MysqlConnector.generated.h\"\n\nUCLASS()\nclass DATA_SYS_API AMysqlConnector : public AActor\n{\n\tGENERATED_BODY()\npublic:\t\n\n\tUPROPERTY(BlueprintReadWrite,Category = \"VariableRW\")\n\tFString errorMessage;\n\tUPROPERTY(BlueprintReadWrite, Category = \"VariableRW\")\n\tFString stateMessage;\n\nprotected:\n\n\tvirtual void BeginPlay() override;\n\npublic:\t\n\n\tAMysqlConnector();\n\tvirtual void Tick(float DeltaTime) override;\n\n\t//从配置文件ConnectConfig.json中读取Mysql连接配置文件\n\tvoid ConnectMysqlByConfig();\n    \n\t//使用MySQLIntegration插件连接Mysql\n\tUFUNCTION(BlueprintImplementableEvent,Category = \"OverridFunction\")\n\tvoid Connect(FName server, FName dbName, FName userId, FName passwd);\n    \n\t//使用MySQLIntegration插件检查连接状态\n\tUFUNCTION(BlueprintImplementableEvent, Category = \"OverridFunction\")\n\tbool ConnectState(FString &errorMessageParam,FString &stateMessageParam);\n\t//获取连接状态\n\tbool GetConnectState();\n};\n```\n\n上面的void Connect(FName server, FName dbName, FName userId, FName passwd);函数就是需要用蓝图实现的数据库连接函数，<font color =red> 这里要注意，这个函数只能在C++中声明，不可以实现，否则父类调用此函数时将无法关联到子类的重写，并且这个函数需要使用`BlueprintImplementableEvent`参数暴露给蓝图</font>。\n\n<font color =red> 这里还需要注意，如果这个函数中使用了变量的引用，那么这个变量也需要使用`UPROPERTY(BlueprintReadWrite, Category = \"VariableRW\")`暴漏给蓝图，如上面的`FString errorMessage;`一样。</font>\n\n这样我们就可以创建一个蓝图类来继承这个类，\n\n![](【UE4】UE4连接MySQL/Snipaste_2019-11-05_19-12-00.png)\n\n然后在该蓝图类的MyBlueprint/Functions/Override下看到我们在C++类中声明的函数，直接重写实现即可，如：\n\n![](【UE4】UE4连接MySQL/Snipaste_2019-11-05_19-14-07.png)\n\n实现时候我们就可以在C++中调用这个函数了，这个函数就会通过重写关联到蓝图自类中的重写过程，如此数据库便连接上了。\n\n# 二、使用C++库连接Mysql\n\n目前卡在#include<mysql.h>编译不通过。","slug":"【UE4】UE4连接MySQL","published":1,"updated":"2021-02-01T13:33:37.109Z","_id":"ckk9hocau001adwr74wos09iu","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"一、使用MySQLIntegration插件连接Mysql\"><a href=\"#一、使用MySQLIntegration插件连接Mysql\" class=\"headerlink\" title=\"一、使用MySQLIntegration插件连接Mysql\"></a>一、使用MySQLIntegration插件连接Mysql</h1><ul>\n<li>Update Data from Query Async组件后面必须再跟一个其他的节点，节点才能正常执行</li>\n<li>UE4 C++编程中不能出现私有私有变量？</li>\n<li>UE4 C++静态变量？</li>\n<li>MySQL Integration插件只支持sql语句，不支持存储过程</li>\n<li>在蓝图中实现的C++函数在蓝图中没法使用？</li>\n<li>暴露给蓝图的变量和函数必须是公有且非静态的</li>\n<li>UE4 C++类创建对象，大象无形31页</li>\n<li>UE4 C++编程中if else语句必须加{}</li>\n</ul>\n<h2 id=\"1-MySQL-Integration安装\"><a href=\"#1-MySQL-Integration安装\" class=\"headerlink\" title=\"1.MySQL Integration安装\"></a>1.MySQL Integration安装</h2><p>MySQL Integration插件可以直接在UE4商城中搜索到，直接下载安装即可，如何是从外部导入的离线包，直接将插件文件夹丢入UE4安装目录下的Engine\\Plugins文件夹下即可。</p>\n<h2 id=\"2-激活MySQL-Integration\"><a href=\"#2-激活MySQL-Integration\" class=\"headerlink\" title=\"2.激活MySQL Integration\"></a>2.激活MySQL Integration</h2><p>激活插件直接在UE4中的Edit/Plugins/Installed下找到MySQL Integration勾选Enabled即可，勾选插件之后UE4会提示需要重启UE4才可激活，重启软件就可以激活插件了。</p>\n<h2 id=\"3-MySQL-Integration提供的蓝图组件\"><a href=\"#3-MySQL-Integration提供的蓝图组件\" class=\"headerlink\" title=\"3.MySQL Integration提供的蓝图组件\"></a>3.MySQL Integration提供的蓝图组件</h2><p>官方文档： <a href=\"https://sameek4.github.io/KodeSpire/Pages/MySQLIntegration.html\">https://sameek4.github.io/KodeSpire/Pages/MySQLIntegration.html</a> </p>\n<h3 id=\"Set-Connection-Properties-Mysql连接\"><a href=\"#Set-Connection-Properties-Mysql连接\" class=\"headerlink\" title=\"Set Connection Properties(Mysql连接)\"></a>Set Connection Properties(Mysql连接)</h3><p>Set Connection Properties组件提供UE4对Mysql的连接服务。</p>\n<p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E8%BF%9E%E6%8E%A5MySQL/Snipaste_2019-11-05_17-54-58.png\"></p>\n<p><strong>输入：</strong></p>\n<ul>\n<li>server：数据库的连接ip；</li>\n<li>DBName：数据库的名字；</li>\n<li>User ID：登录数据库用户名；</li>\n<li>Password：登录数据库的用户密码；</li>\n<li>Extra Param：SetConnectionProperties提供的额外参数传入；</li>\n<li>Is Trusted：启用windows用户名和密码登录数据库。</li>\n</ul>\n<h3 id=\"Check-Connection-State-Mysql连接状态检查\"><a href=\"#Check-Connection-State-Mysql连接状态检查\" class=\"headerlink\" title=\"Check  Connection State(Mysql连接状态检查)\"></a>Check  Connection State(Mysql连接状态检查)</h3><p>此组件提供对Mysql连接的状态的查询服务。</p>\n<p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E8%BF%9E%E6%8E%A5MySQL/Snipaste_2019-11-05_18-02-53.png\"></p>\n<p><strong>输出：</strong></p>\n<ul>\n<li><p>Error Message：输出错误信息；</p>\n</li>\n<li><p>Return Value：输出连接状态；</p>\n<p>包含如下状态值(类型为插件定义的EMysqlConnectionStateEnum枚举)：</p>\n<ul>\n<li>Broken：数据库损坏；</li>\n<li>Closed：连接关闭；</li>\n<li>connecting：正在连接；</li>\n<li>Eecuting：正在发送命令；</li>\n<li>Fetching：数据库正在检索数据；</li>\n<li>Open：连接以正常打开，可以正常使用数据库。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Update-Data-from-Query-Async-异步发送非查询sql命令\"><a href=\"#Update-Data-from-Query-Async-异步发送非查询sql命令\" class=\"headerlink\" title=\"Update Data from Query Async(异步发送非查询sql命令)\"></a>Update Data from Query Async(异步发送非查询sql命令)</h3><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E8%BF%9E%E6%8E%A5MySQL/Snipaste_2019-11-05_18-14-47.png\"></p>\n<p>此组件提供非查询的sql命令发送服务，即发送insert，delete，create等命令。</p>\n<h3 id=\"Update-Data-from-Query-同步发送非查询sql命令\"><a href=\"#Update-Data-from-Query-同步发送非查询sql命令\" class=\"headerlink\" title=\"Update Data from Query (同步发送非查询sql命令)\"></a>Update Data from Query (同步发送非查询sql命令)</h3><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E8%BF%9E%E6%8E%A5MySQL/Snipaste_2019-11-05_18-17-44.png\"></p>\n<p><strong>输入：</strong></p>\n<ul>\n<li>Query：sql命令字符串；</li>\n</ul>\n<p><strong>输出：</strong></p>\n<ul>\n<li><p>Success Status：命令的执行状态</p>\n<p>有三种执行状态值，类型为插件自定义的EMysqlSuccessStateEnum枚举，</p>\n<ul>\n<li>Executing：sql命令正在发送；</li>\n<li>Success：sql命令执行成功；</li>\n<li>Failed：sql命令执行失败。</li>\n</ul>\n</li>\n<li><p>Error Message：输出错误信息。</p>\n</li>\n</ul>\n<h3 id=\"Check-Query-EXecution-State-检查上一条命令的执行状态\"><a href=\"#Check-Query-EXecution-State-检查上一条命令的执行状态\" class=\"headerlink\" title=\"Check Query EXecution State(检查上一条命令的执行状态)\"></a>Check Query EXecution State(检查上一条命令的执行状态)</h3><p>此组件提任何sql命令的执行状态检查，<font color=\"red\">但仅限检查Check Query EXecution State执行前的上一条sql语句的状态检查。</font></p>\n<p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E8%BF%9E%E6%8E%A5MySQL/Snipaste_2019-11-05_18-26-48.png\"></p>\n<p>输出内容和Update Data from Query一致。</p>\n<h3 id=\"Select-Data-from-Query-Async-异步发送查询命令\"><a href=\"#Select-Data-from-Query-Async-异步发送查询命令\" class=\"headerlink\" title=\"Select Data from Query Async(异步发送查询命令)\"></a>Select Data from Query Async(异步发送查询命令)</h3><p>此组件仅限发送select语句，其他语句发送无效，<font color=\"red\"> 查询到的数据会存储到插件自带的数据结构中，可以使用下面介绍的Get Selected Table组件进行数据访问。</font></p>\n<p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E8%BF%9E%E6%8E%A5MySQL/Snipaste_2019-11-05_18-27-48.png\"></p>\n<h2 id=\"Get-Selected-Table-读取数据表\"><a href=\"#Get-Selected-Table-读取数据表\" class=\"headerlink\" title=\"Get Selected Table(读取数据表)\"></a>Get Selected Table(读取数据表)</h2><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E8%BF%9E%E6%8E%A5MySQL/Snipaste_2019-11-05_18-34-52.png\"></p>\n<p><strong>输出:</strong></p>\n<ul>\n<li>Result by Column：以列的形式返回数据，<font color=\"red\">返回一个MySQLDataTableStructures的结构体数据，每一个结构体就是一列，MySQLDataTableStructures结构体包含两个成员ColumnName(列名)和ColumnData(列数据)，其中ColumnData是一个FString类型的TArray数组，数组中每一个元数就是该列中某一行的数据。</font></li>\n<li>Result by Row：以行的形式返回数据，返回一个<font color=\"red\"> 返回一个MySQLDataRowStructures类型的结构体数组，每一个结构体就是一行，MySQLDataRowStructures结构体包含一个FString类型的TArray数组，数组中每一个元素就是该行中某一列的数据。</font></li>\n</ul>\n<h2 id=\"4-MySQL-Integration的注意事项\"><a href=\"#4-MySQL-Integration的注意事项\" class=\"headerlink\" title=\"4.MySQL Integration的注意事项\"></a>4.MySQL Integration的注意事项</h2><h3 id=\"MySQL-Integration不支持存储过程\"><a href=\"#MySQL-Integration不支持存储过程\" class=\"headerlink\" title=\"MySQL Integration不支持存储过程\"></a>MySQL Integration不支持存储过程</h3><p>MySQL Integration插件不支持数据库的存储过程的语法，在Query引脚输入“Call ProdureceName(ParameterList) ”是没有办法唤醒数据库中的存储过程的，所以很多的数据库中的查询和插入逻辑就需要在外部实现了。</p>\n<h3 id=\"MySQL-Integration不提供C-函数\"><a href=\"#MySQL-Integration不提供C-函数\" class=\"headerlink\" title=\"MySQL Integration不提供C++函数\"></a>MySQL Integration不提供C++函数</h3><p>MySQL Integration插件只提供蓝图组件不提供C++函数，也就是说数据库的连接查询等只能使用蓝图来实现，但大多数情况我们又必须在C++中访问数据库，在这钟情况下我们该如何做呢？</p>\n<p>目前，我只想到一种方法，就是在C++中创建访问数据库的类在类中声明数据库的访问函数，用这个类的蓝图子类来重写该数据库访问函数，以实现父类中该数据库访问函数，这是由C++继承中的重写的特性实现的。</p>\n<p>具体做法如下：</p>\n<p>首先在C++中创建一个专门负责连接数据库的类并在类中声明连接函数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&quot;MysqlJsonCpp.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&quot;CoreMinimal.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&quot;GameFramework/Actor.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&quot;MysqlConnector.generated.h&quot;</span></span><br><br>UCLASS()<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DATA_SYS_API</span> <span class=\"hljs-title\">AMysqlConnector</span> :</span> <span class=\"hljs-keyword\">public</span> AActor<br>&#123;<br>\tGENERATED_BODY()<br><span class=\"hljs-keyword\">public</span>:\t<br><br>\tUPROPERTY(BlueprintReadWrite,Category = <span class=\"hljs-string\">&quot;VariableRW&quot;</span>)<br>\tFString errorMessage;<br>\tUPROPERTY(BlueprintReadWrite, Category = <span class=\"hljs-string\">&quot;VariableRW&quot;</span>)<br>\tFString stateMessage;<br><br><span class=\"hljs-keyword\">protected</span>:<br><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">BeginPlay</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">override</span></span>;<br><br><span class=\"hljs-keyword\">public</span>:\t<br><br>\tAMysqlConnector();<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Tick</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> DeltaTime)</span> <span class=\"hljs-keyword\">override</span></span>;<br><br>\t<span class=\"hljs-comment\">//从配置文件ConnectConfig.json中读取Mysql连接配置文件</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ConnectMysqlByConfig</span><span class=\"hljs-params\">()</span></span>;<br>    <br>\t<span class=\"hljs-comment\">//使用MySQLIntegration插件连接Mysql</span><br>\tUFUNCTION(BlueprintImplementableEvent,Category = <span class=\"hljs-string\">&quot;OverridFunction&quot;</span>)<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">(FName server, FName dbName, FName userId, FName passwd)</span></span>;<br>    <br>\t<span class=\"hljs-comment\">//使用MySQLIntegration插件检查连接状态</span><br>\tUFUNCTION(BlueprintImplementableEvent, Category = <span class=\"hljs-string\">&quot;OverridFunction&quot;</span>)<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">ConnectState</span><span class=\"hljs-params\">(FString &amp;errorMessageParam,FString &amp;stateMessageParam)</span></span>;<br>\t<span class=\"hljs-comment\">//获取连接状态</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">GetConnectState</span><span class=\"hljs-params\">()</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>上面的void Connect(FName server, FName dbName, FName userId, FName passwd);函数就是需要用蓝图实现的数据库连接函数，<font color=\"red\"> 这里要注意，这个函数只能在C++中声明，不可以实现，否则父类调用此函数时将无法关联到子类的重写，并且这个函数需要使用<code>BlueprintImplementableEvent</code>参数暴露给蓝图</font>。</p>\n<p><font color=\"red\"> 这里还需要注意，如果这个函数中使用了变量的引用，那么这个变量也需要使用<code>UPROPERTY(BlueprintReadWrite, Category = &quot;VariableRW&quot;)</code>暴漏给蓝图，如上面的<code>FString errorMessage;</code>一样。</font></p>\n<p>这样我们就可以创建一个蓝图类来继承这个类，</p>\n<p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E8%BF%9E%E6%8E%A5MySQL/Snipaste_2019-11-05_19-12-00.png\"></p>\n<p>然后在该蓝图类的MyBlueprint/Functions/Override下看到我们在C++类中声明的函数，直接重写实现即可，如：</p>\n<p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E8%BF%9E%E6%8E%A5MySQL/Snipaste_2019-11-05_19-14-07.png\"></p>\n<p>实现时候我们就可以在C++中调用这个函数了，这个函数就会通过重写关联到蓝图自类中的重写过程，如此数据库便连接上了。</p>\n<h1 id=\"二、使用C-库连接Mysql\"><a href=\"#二、使用C-库连接Mysql\" class=\"headerlink\" title=\"二、使用C++库连接Mysql\"></a>二、使用C++库连接Mysql</h1><p>目前卡在#include&lt;mysql.h&gt;编译不通过。</p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"一、使用MySQLIntegration插件连接Mysql\"><a href=\"#一、使用MySQLIntegration插件连接Mysql\" class=\"headerlink\" title=\"一、使用MySQLIntegration插件连接Mysql\"></a>一、使用MySQLIntegration插件连接Mysql</h1><ul>\n<li>Update Data from Query Async组件后面必须再跟一个其他的节点，节点才能正常执行</li>\n<li>UE4 C++编程中不能出现私有私有变量？</li>\n<li>UE4 C++静态变量？</li>\n<li>MySQL Integration插件只支持sql语句，不支持存储过程</li>\n<li>在蓝图中实现的C++函数在蓝图中没法使用？</li>\n<li>暴露给蓝图的变量和函数必须是公有且非静态的</li>\n<li>UE4 C++类创建对象，大象无形31页</li>\n<li>UE4 C++编程中if else语句必须加{}</li>\n</ul>\n<h2 id=\"1-MySQL-Integration安装\"><a href=\"#1-MySQL-Integration安装\" class=\"headerlink\" title=\"1.MySQL Integration安装\"></a>1.MySQL Integration安装</h2><p>MySQL Integration插件可以直接在UE4商城中搜索到，直接下载安装即可，如何是从外部导入的离线包，直接将插件文件夹丢入UE4安装目录下的Engine\\Plugins文件夹下即可。</p>\n<h2 id=\"2-激活MySQL-Integration\"><a href=\"#2-激活MySQL-Integration\" class=\"headerlink\" title=\"2.激活MySQL Integration\"></a>2.激活MySQL Integration</h2><p>激活插件直接在UE4中的Edit/Plugins/Installed下找到MySQL Integration勾选Enabled即可，勾选插件之后UE4会提示需要重启UE4才可激活，重启软件就可以激活插件了。</p>\n<h2 id=\"3-MySQL-Integration提供的蓝图组件\"><a href=\"#3-MySQL-Integration提供的蓝图组件\" class=\"headerlink\" title=\"3.MySQL Integration提供的蓝图组件\"></a>3.MySQL Integration提供的蓝图组件</h2><p>官方文档： <a href=\"https://sameek4.github.io/KodeSpire/Pages/MySQLIntegration.html\">https://sameek4.github.io/KodeSpire/Pages/MySQLIntegration.html</a> </p>\n<h3 id=\"Set-Connection-Properties-Mysql连接\"><a href=\"#Set-Connection-Properties-Mysql连接\" class=\"headerlink\" title=\"Set Connection Properties(Mysql连接)\"></a>Set Connection Properties(Mysql连接)</h3><p>Set Connection Properties组件提供UE4对Mysql的连接服务。</p>\n<p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E8%BF%9E%E6%8E%A5MySQL/Snipaste_2019-11-05_17-54-58.png\"></p>\n<p><strong>输入：</strong></p>\n<ul>\n<li>server：数据库的连接ip；</li>\n<li>DBName：数据库的名字；</li>\n<li>User ID：登录数据库用户名；</li>\n<li>Password：登录数据库的用户密码；</li>\n<li>Extra Param：SetConnectionProperties提供的额外参数传入；</li>\n<li>Is Trusted：启用windows用户名和密码登录数据库。</li>\n</ul>\n<h3 id=\"Check-Connection-State-Mysql连接状态检查\"><a href=\"#Check-Connection-State-Mysql连接状态检查\" class=\"headerlink\" title=\"Check  Connection State(Mysql连接状态检查)\"></a>Check  Connection State(Mysql连接状态检查)</h3><p>此组件提供对Mysql连接的状态的查询服务。</p>\n<p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E8%BF%9E%E6%8E%A5MySQL/Snipaste_2019-11-05_18-02-53.png\"></p>\n<p><strong>输出：</strong></p>\n<ul>\n<li><p>Error Message：输出错误信息；</p>\n</li>\n<li><p>Return Value：输出连接状态；</p>\n<p>包含如下状态值(类型为插件定义的EMysqlConnectionStateEnum枚举)：</p>\n<ul>\n<li>Broken：数据库损坏；</li>\n<li>Closed：连接关闭；</li>\n<li>connecting：正在连接；</li>\n<li>Eecuting：正在发送命令；</li>\n<li>Fetching：数据库正在检索数据；</li>\n<li>Open：连接以正常打开，可以正常使用数据库。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Update-Data-from-Query-Async-异步发送非查询sql命令\"><a href=\"#Update-Data-from-Query-Async-异步发送非查询sql命令\" class=\"headerlink\" title=\"Update Data from Query Async(异步发送非查询sql命令)\"></a>Update Data from Query Async(异步发送非查询sql命令)</h3><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E8%BF%9E%E6%8E%A5MySQL/Snipaste_2019-11-05_18-14-47.png\"></p>\n<p>此组件提供非查询的sql命令发送服务，即发送insert，delete，create等命令。</p>\n<h3 id=\"Update-Data-from-Query-同步发送非查询sql命令\"><a href=\"#Update-Data-from-Query-同步发送非查询sql命令\" class=\"headerlink\" title=\"Update Data from Query (同步发送非查询sql命令)\"></a>Update Data from Query (同步发送非查询sql命令)</h3><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E8%BF%9E%E6%8E%A5MySQL/Snipaste_2019-11-05_18-17-44.png\"></p>\n<p><strong>输入：</strong></p>\n<ul>\n<li>Query：sql命令字符串；</li>\n</ul>\n<p><strong>输出：</strong></p>\n<ul>\n<li><p>Success Status：命令的执行状态</p>\n<p>有三种执行状态值，类型为插件自定义的EMysqlSuccessStateEnum枚举，</p>\n<ul>\n<li>Executing：sql命令正在发送；</li>\n<li>Success：sql命令执行成功；</li>\n<li>Failed：sql命令执行失败。</li>\n</ul>\n</li>\n<li><p>Error Message：输出错误信息。</p>\n</li>\n</ul>\n<h3 id=\"Check-Query-EXecution-State-检查上一条命令的执行状态\"><a href=\"#Check-Query-EXecution-State-检查上一条命令的执行状态\" class=\"headerlink\" title=\"Check Query EXecution State(检查上一条命令的执行状态)\"></a>Check Query EXecution State(检查上一条命令的执行状态)</h3><p>此组件提任何sql命令的执行状态检查，<font color=\"red\">但仅限检查Check Query EXecution State执行前的上一条sql语句的状态检查。</font></p>\n<p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E8%BF%9E%E6%8E%A5MySQL/Snipaste_2019-11-05_18-26-48.png\"></p>\n<p>输出内容和Update Data from Query一致。</p>\n<h3 id=\"Select-Data-from-Query-Async-异步发送查询命令\"><a href=\"#Select-Data-from-Query-Async-异步发送查询命令\" class=\"headerlink\" title=\"Select Data from Query Async(异步发送查询命令)\"></a>Select Data from Query Async(异步发送查询命令)</h3><p>此组件仅限发送select语句，其他语句发送无效，<font color=\"red\"> 查询到的数据会存储到插件自带的数据结构中，可以使用下面介绍的Get Selected Table组件进行数据访问。</font></p>\n<p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E8%BF%9E%E6%8E%A5MySQL/Snipaste_2019-11-05_18-27-48.png\"></p>\n<h2 id=\"Get-Selected-Table-读取数据表\"><a href=\"#Get-Selected-Table-读取数据表\" class=\"headerlink\" title=\"Get Selected Table(读取数据表)\"></a>Get Selected Table(读取数据表)</h2><p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E8%BF%9E%E6%8E%A5MySQL/Snipaste_2019-11-05_18-34-52.png\"></p>\n<p><strong>输出:</strong></p>\n<ul>\n<li>Result by Column：以列的形式返回数据，<font color=\"red\">返回一个MySQLDataTableStructures的结构体数据，每一个结构体就是一列，MySQLDataTableStructures结构体包含两个成员ColumnName(列名)和ColumnData(列数据)，其中ColumnData是一个FString类型的TArray数组，数组中每一个元数就是该列中某一行的数据。</font></li>\n<li>Result by Row：以行的形式返回数据，返回一个<font color=\"red\"> 返回一个MySQLDataRowStructures类型的结构体数组，每一个结构体就是一行，MySQLDataRowStructures结构体包含一个FString类型的TArray数组，数组中每一个元素就是该行中某一列的数据。</font></li>\n</ul>\n<h2 id=\"4-MySQL-Integration的注意事项\"><a href=\"#4-MySQL-Integration的注意事项\" class=\"headerlink\" title=\"4.MySQL Integration的注意事项\"></a>4.MySQL Integration的注意事项</h2><h3 id=\"MySQL-Integration不支持存储过程\"><a href=\"#MySQL-Integration不支持存储过程\" class=\"headerlink\" title=\"MySQL Integration不支持存储过程\"></a>MySQL Integration不支持存储过程</h3><p>MySQL Integration插件不支持数据库的存储过程的语法，在Query引脚输入“Call ProdureceName(ParameterList) ”是没有办法唤醒数据库中的存储过程的，所以很多的数据库中的查询和插入逻辑就需要在外部实现了。</p>\n<h3 id=\"MySQL-Integration不提供C-函数\"><a href=\"#MySQL-Integration不提供C-函数\" class=\"headerlink\" title=\"MySQL Integration不提供C++函数\"></a>MySQL Integration不提供C++函数</h3><p>MySQL Integration插件只提供蓝图组件不提供C++函数，也就是说数据库的连接查询等只能使用蓝图来实现，但大多数情况我们又必须在C++中访问数据库，在这钟情况下我们该如何做呢？</p>\n<p>目前，我只想到一种方法，就是在C++中创建访问数据库的类在类中声明数据库的访问函数，用这个类的蓝图子类来重写该数据库访问函数，以实现父类中该数据库访问函数，这是由C++继承中的重写的特性实现的。</p>\n<p>具体做法如下：</p>\n<p>首先在C++中创建一个专门负责连接数据库的类并在类中声明连接函数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&quot;MysqlJsonCpp.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&quot;CoreMinimal.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&quot;GameFramework/Actor.h&quot;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&quot;MysqlConnector.generated.h&quot;</span></span><br><br>UCLASS()<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DATA_SYS_API</span> <span class=\"hljs-title\">AMysqlConnector</span> :</span> <span class=\"hljs-keyword\">public</span> AActor<br>&#123;<br>\tGENERATED_BODY()<br><span class=\"hljs-keyword\">public</span>:\t<br><br>\tUPROPERTY(BlueprintReadWrite,Category = <span class=\"hljs-string\">&quot;VariableRW&quot;</span>)<br>\tFString errorMessage;<br>\tUPROPERTY(BlueprintReadWrite, Category = <span class=\"hljs-string\">&quot;VariableRW&quot;</span>)<br>\tFString stateMessage;<br><br><span class=\"hljs-keyword\">protected</span>:<br><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">BeginPlay</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">override</span></span>;<br><br><span class=\"hljs-keyword\">public</span>:\t<br><br>\tAMysqlConnector();<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Tick</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> DeltaTime)</span> <span class=\"hljs-keyword\">override</span></span>;<br><br>\t<span class=\"hljs-comment\">//从配置文件ConnectConfig.json中读取Mysql连接配置文件</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ConnectMysqlByConfig</span><span class=\"hljs-params\">()</span></span>;<br>    <br>\t<span class=\"hljs-comment\">//使用MySQLIntegration插件连接Mysql</span><br>\tUFUNCTION(BlueprintImplementableEvent,Category = <span class=\"hljs-string\">&quot;OverridFunction&quot;</span>)<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">(FName server, FName dbName, FName userId, FName passwd)</span></span>;<br>    <br>\t<span class=\"hljs-comment\">//使用MySQLIntegration插件检查连接状态</span><br>\tUFUNCTION(BlueprintImplementableEvent, Category = <span class=\"hljs-string\">&quot;OverridFunction&quot;</span>)<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">ConnectState</span><span class=\"hljs-params\">(FString &amp;errorMessageParam,FString &amp;stateMessageParam)</span></span>;<br>\t<span class=\"hljs-comment\">//获取连接状态</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">GetConnectState</span><span class=\"hljs-params\">()</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>上面的void Connect(FName server, FName dbName, FName userId, FName passwd);函数就是需要用蓝图实现的数据库连接函数，<font color=\"red\"> 这里要注意，这个函数只能在C++中声明，不可以实现，否则父类调用此函数时将无法关联到子类的重写，并且这个函数需要使用<code>BlueprintImplementableEvent</code>参数暴露给蓝图</font>。</p>\n<p><font color=\"red\"> 这里还需要注意，如果这个函数中使用了变量的引用，那么这个变量也需要使用<code>UPROPERTY(BlueprintReadWrite, Category = &quot;VariableRW&quot;)</code>暴漏给蓝图，如上面的<code>FString errorMessage;</code>一样。</font></p>\n<p>这样我们就可以创建一个蓝图类来继承这个类，</p>\n<p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E8%BF%9E%E6%8E%A5MySQL/Snipaste_2019-11-05_19-12-00.png\"></p>\n<p>然后在该蓝图类的MyBlueprint/Functions/Override下看到我们在C++类中声明的函数，直接重写实现即可，如：</p>\n<p><img src=\"/2019/11/06/%E3%80%90UE4%E3%80%91UE4%E8%BF%9E%E6%8E%A5MySQL/Snipaste_2019-11-05_19-14-07.png\"></p>\n<p>实现时候我们就可以在C++中调用这个函数了，这个函数就会通过重写关联到蓝图自类中的重写过程，如此数据库便连接上了。</p>\n<h1 id=\"二、使用C-库连接Mysql\"><a href=\"#二、使用C-库连接Mysql\" class=\"headerlink\" title=\"二、使用C++库连接Mysql\"></a>二、使用C++库连接Mysql</h1><p>目前卡在#include&lt;mysql.h&gt;编译不通过。</p>\n"},{"title":"【Unity3d】Animation","date":"2019-08-23T14:04:47.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n﻿1.总索引\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019061314131628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n1.1.视图简介\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190520144632375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190520143240580.png)\n2.动画分类\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613141413854.png)\n\n2.1.普通动画\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613141551260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\t2.2.人物角色动画\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613141959166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\t2.2.1.人物角色动画的导入\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613142213379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n+大图导向\n\t-骨骼映射视图的打开 ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190531125401236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\t-骨骼映射视图和骨骼映射表的修改![在这里插入图片描述](https://img-blog.csdnimg.cn/20190531125301603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n-三种动画的导入方式\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613142757765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)-模型导入注意事项\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613142937598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190531130631610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190531130654193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n2.3.IK动画\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613143849254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n2.4.TimeLine\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613143939800.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n+大图导向\n\t-存储\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613144055967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\t-Playable Track\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613144133197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n3.AnimatorController(状态机)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613144259619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n3.1.状态机的打开方式\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613144350891.png)\n3.2.Animator视图简介\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613144502456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n3.3.作用\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613144550261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n3.4.精细控制\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613144641944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n+大图导向\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613144744729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n3.5.混合树\n![在这里插入图片描述](https://img-blog.csdnimg.cn/201906131452528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n3.5.1.四种2D混合树\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613145340965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n3.5.2.大图导向\n -混合树的创建\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613145440631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n -1D混合树Inspector\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613144953557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n -2D混合树Inspector\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613145057715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n3.6.Avatar Mask骨骼遮罩\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613145729200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n4.MacthTarget场景动画匹配技术\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613145909634.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n4.1.核心方法\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613150056658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n4.2.MacthTarget函数细述\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613150207340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n4.3.难点\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613150430468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n+大图导向\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019061315050794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n5.相机运动\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613150709467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n+大图导向\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613150735692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n6.学习过程中遇到的问题\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613150827535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n7.函数方法\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613150913675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n8.动画的Inspector\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613151018312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)","source":"_posts/【Unity3d】Animation.md","raw":"---\ntitle: 【Unity3d】Animation\ndate: 2019-08-23 22:04:47\ntags: Unity3d\ncategories: 学习笔记\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n﻿1.总索引\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019061314131628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n1.1.视图简介\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190520144632375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190520143240580.png)\n2.动画分类\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613141413854.png)\n\n2.1.普通动画\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613141551260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\t2.2.人物角色动画\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613141959166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\t2.2.1.人物角色动画的导入\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613142213379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n+大图导向\n\t-骨骼映射视图的打开 ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190531125401236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\t-骨骼映射视图和骨骼映射表的修改![在这里插入图片描述](https://img-blog.csdnimg.cn/20190531125301603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n-三种动画的导入方式\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613142757765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)-模型导入注意事项\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613142937598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190531130631610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190531130654193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n2.3.IK动画\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613143849254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n2.4.TimeLine\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613143939800.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n+大图导向\n\t-存储\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613144055967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\t-Playable Track\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613144133197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n3.AnimatorController(状态机)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613144259619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n3.1.状态机的打开方式\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613144350891.png)\n3.2.Animator视图简介\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613144502456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n3.3.作用\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613144550261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n3.4.精细控制\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613144641944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n+大图导向\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613144744729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n3.5.混合树\n![在这里插入图片描述](https://img-blog.csdnimg.cn/201906131452528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n3.5.1.四种2D混合树\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613145340965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n3.5.2.大图导向\n -混合树的创建\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613145440631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n -1D混合树Inspector\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613144953557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n -2D混合树Inspector\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613145057715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n3.6.Avatar Mask骨骼遮罩\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613145729200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n4.MacthTarget场景动画匹配技术\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613145909634.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n4.1.核心方法\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613150056658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n4.2.MacthTarget函数细述\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613150207340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n4.3.难点\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613150430468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n+大图导向\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019061315050794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n5.相机运动\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613150709467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n+大图导向\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613150735692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n6.学习过程中遇到的问题\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613150827535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n7.函数方法\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613150913675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n8.动画的Inspector\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190613151018312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)","slug":"【Unity3d】Animation","published":1,"updated":"2021-02-01T13:34:01.038Z","_id":"ckk9hocav001ddwr74z0y3xk5","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>﻿1.总索引<br><img src=\"https://img-blog.csdnimg.cn/2019061314131628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>1.1.视图简介<br><img src=\"https://img-blog.csdnimg.cn/20190520144632375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190520143240580.png\" alt=\"在这里插入图片描述\"><br>2.动画分类<br><img src=\"https://img-blog.csdnimg.cn/20190613141413854.png\" alt=\"在这里插入图片描述\"></p>\n<p>2.1.普通动画<br><img src=\"https://img-blog.csdnimg.cn/20190613141551260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>    2.2.人物角色动画<br>    <img src=\"https://img-blog.csdnimg.cn/20190613141959166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>    2.2.1.人物角色动画的导入<br>    <img src=\"https://img-blog.csdnimg.cn/20190613142213379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>+大图导向<br>    -骨骼映射视图的打开 <img src=\"https://img-blog.csdnimg.cn/20190531125401236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>    -骨骼映射视图和骨骼映射表的修改<img src=\"https://img-blog.csdnimg.cn/20190531125301603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>-三种动画的导入方式<br><img src=\"https://img-blog.csdnimg.cn/20190613142757765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">-模型导入注意事项<br><img src=\"https://img-blog.csdnimg.cn/20190613142937598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190531130631610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>    <img src=\"https://img-blog.csdnimg.cn/20190531130654193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>2.3.IK动画<br><img src=\"https://img-blog.csdnimg.cn/20190613143849254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>2.4.TimeLine<br><img src=\"https://img-blog.csdnimg.cn/20190613143939800.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>+大图导向<br>    -存储<br>    <img src=\"https://img-blog.csdnimg.cn/20190613144055967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>    -Playable Track<br>    <img src=\"https://img-blog.csdnimg.cn/20190613144133197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>3.AnimatorController(状态机)<br><img src=\"https://img-blog.csdnimg.cn/20190613144259619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>3.1.状态机的打开方式<br><img src=\"https://img-blog.csdnimg.cn/20190613144350891.png\" alt=\"在这里插入图片描述\"><br>3.2.Animator视图简介<br><img src=\"https://img-blog.csdnimg.cn/20190613144502456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>3.3.作用<br><img src=\"https://img-blog.csdnimg.cn/20190613144550261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>3.4.精细控制<br><img src=\"https://img-blog.csdnimg.cn/20190613144641944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>+大图导向<br><img src=\"https://img-blog.csdnimg.cn/20190613144744729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>3.5.混合树<br><img src=\"https://img-blog.csdnimg.cn/201906131452528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>3.5.1.四种2D混合树<br><img src=\"https://img-blog.csdnimg.cn/20190613145340965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>3.5.2.大图导向<br> -混合树的创建<br> <img src=\"https://img-blog.csdnimg.cn/20190613145440631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> -1D混合树Inspector<br> <img src=\"https://img-blog.csdnimg.cn/20190613144953557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> -2D混合树Inspector<br> <img src=\"https://img-blog.csdnimg.cn/20190613145057715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>3.6.Avatar Mask骨骼遮罩<br><img src=\"https://img-blog.csdnimg.cn/20190613145729200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>4.MacthTarget场景动画匹配技术<br><img src=\"https://img-blog.csdnimg.cn/20190613145909634.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>4.1.核心方法<br><img src=\"https://img-blog.csdnimg.cn/20190613150056658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>4.2.MacthTarget函数细述<br><img src=\"https://img-blog.csdnimg.cn/20190613150207340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>4.3.难点<br><img src=\"https://img-blog.csdnimg.cn/20190613150430468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>+大图导向<br><img src=\"https://img-blog.csdnimg.cn/2019061315050794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>5.相机运动<br><img src=\"https://img-blog.csdnimg.cn/20190613150709467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>+大图导向<br><img src=\"https://img-blog.csdnimg.cn/20190613150735692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>6.学习过程中遇到的问题<br><img src=\"https://img-blog.csdnimg.cn/20190613150827535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>7.函数方法<br><img src=\"https://img-blog.csdnimg.cn/20190613150913675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>8.动画的Inspector<br><img src=\"https://img-blog.csdnimg.cn/20190613151018312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>﻿1.总索引<br><img src=\"https://img-blog.csdnimg.cn/2019061314131628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>1.1.视图简介<br><img src=\"https://img-blog.csdnimg.cn/20190520144632375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190520143240580.png\" alt=\"在这里插入图片描述\"><br>2.动画分类<br><img src=\"https://img-blog.csdnimg.cn/20190613141413854.png\" alt=\"在这里插入图片描述\"></p>\n<p>2.1.普通动画<br><img src=\"https://img-blog.csdnimg.cn/20190613141551260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>    2.2.人物角色动画<br>    <img src=\"https://img-blog.csdnimg.cn/20190613141959166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>    2.2.1.人物角色动画的导入<br>    <img src=\"https://img-blog.csdnimg.cn/20190613142213379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>+大图导向<br>    -骨骼映射视图的打开 <img src=\"https://img-blog.csdnimg.cn/20190531125401236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>    -骨骼映射视图和骨骼映射表的修改<img src=\"https://img-blog.csdnimg.cn/20190531125301603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>-三种动画的导入方式<br><img src=\"https://img-blog.csdnimg.cn/20190613142757765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">-模型导入注意事项<br><img src=\"https://img-blog.csdnimg.cn/20190613142937598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190531130631610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>    <img src=\"https://img-blog.csdnimg.cn/20190531130654193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>2.3.IK动画<br><img src=\"https://img-blog.csdnimg.cn/20190613143849254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>2.4.TimeLine<br><img src=\"https://img-blog.csdnimg.cn/20190613143939800.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>+大图导向<br>    -存储<br>    <img src=\"https://img-blog.csdnimg.cn/20190613144055967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>    -Playable Track<br>    <img src=\"https://img-blog.csdnimg.cn/20190613144133197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>3.AnimatorController(状态机)<br><img src=\"https://img-blog.csdnimg.cn/20190613144259619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>3.1.状态机的打开方式<br><img src=\"https://img-blog.csdnimg.cn/20190613144350891.png\" alt=\"在这里插入图片描述\"><br>3.2.Animator视图简介<br><img src=\"https://img-blog.csdnimg.cn/20190613144502456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>3.3.作用<br><img src=\"https://img-blog.csdnimg.cn/20190613144550261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>3.4.精细控制<br><img src=\"https://img-blog.csdnimg.cn/20190613144641944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>+大图导向<br><img src=\"https://img-blog.csdnimg.cn/20190613144744729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>3.5.混合树<br><img src=\"https://img-blog.csdnimg.cn/201906131452528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>3.5.1.四种2D混合树<br><img src=\"https://img-blog.csdnimg.cn/20190613145340965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>3.5.2.大图导向<br> -混合树的创建<br> <img src=\"https://img-blog.csdnimg.cn/20190613145440631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> -1D混合树Inspector<br> <img src=\"https://img-blog.csdnimg.cn/20190613144953557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> -2D混合树Inspector<br> <img src=\"https://img-blog.csdnimg.cn/20190613145057715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>3.6.Avatar Mask骨骼遮罩<br><img src=\"https://img-blog.csdnimg.cn/20190613145729200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>4.MacthTarget场景动画匹配技术<br><img src=\"https://img-blog.csdnimg.cn/20190613145909634.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>4.1.核心方法<br><img src=\"https://img-blog.csdnimg.cn/20190613150056658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>4.2.MacthTarget函数细述<br><img src=\"https://img-blog.csdnimg.cn/20190613150207340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>4.3.难点<br><img src=\"https://img-blog.csdnimg.cn/20190613150430468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>+大图导向<br><img src=\"https://img-blog.csdnimg.cn/2019061315050794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>5.相机运动<br><img src=\"https://img-blog.csdnimg.cn/20190613150709467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>+大图导向<br><img src=\"https://img-blog.csdnimg.cn/20190613150735692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>6.学习过程中遇到的问题<br><img src=\"https://img-blog.csdnimg.cn/20190613150827535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>7.函数方法<br><img src=\"https://img-blog.csdnimg.cn/20190613150913675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>8.动画的Inspector<br><img src=\"https://img-blog.csdnimg.cn/20190613151018312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"【Unity3d】Lightmap","date":"2019-08-25T11:40:08.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n![](【Unity3d】Lightmap/Unity_Lightmap.png)","source":"_posts/【Unity3d】Lightmap.md","raw":"---\ntitle: 【Unity3d】Lightmap\ndate: 2019-08-25 19:40:08\ntags: Unity3d\ncategories: 学习笔记\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n![](【Unity3d】Lightmap/Unity_Lightmap.png)","slug":"【Unity3d】Lightmap","published":1,"updated":"2021-02-01T13:34:11.534Z","_id":"ckk9hocaw001gdwr7gjee96ri","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p><img src=\"/2019/08/25/%E3%80%90Unity3d%E3%80%91Lightmap/Unity_Lightmap.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p><img src=\"/2019/08/25/%E3%80%90Unity3d%E3%80%91Lightmap/Unity_Lightmap.png\"></p>\n"},{"title":"【Unity3d】Space","date":"2019-08-25T11:43:04.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n![](【Unity3d】Space/Unity3d_Space.png)","source":"_posts/【Unity3d】Space.md","raw":"---\ntitle: 【Unity3d】Space\ndate: 2019-08-25 19:43:04\ntags: Unity3d\ncategories: 学习笔记\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n![](【Unity3d】Space/Unity3d_Space.png)","slug":"【Unity3d】Space","published":1,"updated":"2021-02-01T13:34:20.804Z","_id":"ckk9hocax001jdwr7fgmhft5u","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p><img src=\"/2019/08/25/%E3%80%90Unity3d%E3%80%91Space/Unity3d_Space.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p><img src=\"/2019/08/25/%E3%80%90Unity3d%E3%80%91Space/Unity3d_Space.png\"></p>\n"},{"title":"【Unity3d】Unity常用技巧笔记","date":"2019-08-27T03:34:44.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 为Image组件添加sprite\n\n![](【Unity3d】Unity常用技巧笔记/Snipaste_2019-08-27_11-35-00.png)","source":"_posts/【Unity3d】Unity常用技巧笔记.md","raw":"---\ntitle: 【Unity3d】Unity常用技巧笔记\ndate: 2019-08-27 11:34:44\ntags: Unity3d\ncategories: 学习笔记\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 为Image组件添加sprite\n\n![](【Unity3d】Unity常用技巧笔记/Snipaste_2019-08-27_11-35-00.png)","slug":"【Unity3d】Unity常用技巧笔记","published":1,"updated":"2021-02-01T13:34:35.317Z","_id":"ckk9hocay001mdwr78pvk8fc4","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"为Image组件添加sprite\"><a href=\"#为Image组件添加sprite\" class=\"headerlink\" title=\"为Image组件添加sprite\"></a>为Image组件添加sprite</h1><p><img src=\"/2019/08/27/%E3%80%90Unity3d%E3%80%91Unity%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7%E7%AC%94%E8%AE%B0/Snipaste_2019-08-27_11-35-00.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"为Image组件添加sprite\"><a href=\"#为Image组件添加sprite\" class=\"headerlink\" title=\"为Image组件添加sprite\"></a>为Image组件添加sprite</h1><p><img src=\"/2019/08/27/%E3%80%90Unity3d%E3%80%91Unity%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7%E7%AC%94%E8%AE%B0/Snipaste_2019-08-27_11-35-00.png\"></p>\n"},{"title":"【Unity3d】简单的存档与读档","date":"2019-08-23T14:24:08.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />﻿\n\n在Unity3d中，游戏的存档与读档主要由PlayerPrefs类来完成，在Windows下PlayerPrefs存档主要存储在注册表中，路径为HKCU\\Software\\[company name]\\[product name] ，这里的company name和product name由作者自己确定，在Edit->Project Settings->Player中可以设置\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190622143530421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\nPlayerSettings视图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190622143747327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n那么如何设计游戏存档呢？\n以笔者个人的经验而言，在游戏设计之初，我们就应该想好需要存档的数据，为需要保存的数据或状态设计可供读取的状态标志，以便以后在设计存档时，提供给PlayerPrefs类的方法使用。\nPlayerPrefs类提供如下方法供设计者使用\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190622144312778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n可以看到，PlayerPrefs类中没有提供对bool型数据的存储方法，由此可以看出为需要保存的数据或状态设计可供读取的状态标志的重要性，否则那些由bool型数据确定的状态将无法被存档。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190622151126795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n下面给一段示例代码：\n\n```\n /*\n     * inventory.charge--int--能量电池数量\n     * inventory.playerTransform--float--玩家位置\n     * talk.yeshu--int--man的任务进度\n     * talk.wyeshu--int--women的任务进度\n      */\n    void gameSave() {\n        PlayerPrefs.SetInt(\"charge\", inventory.charge);\n        PlayerPrefs.SetInt(\"yeshu\", talk.yeshu);\n        PlayerPrefs.SetInt(\"wyeshu\", talk.wyeshu);\n        PlayerPrefs.SetFloat(\"playerPosition.x\", inventory.playerTransform.position.x);\n        PlayerPrefs.SetFloat(\"playerPosition.y\", inventory.playerTransform.position.y);\n        PlayerPrefs.SetFloat(\"playerPosition.z\", inventory.playerTransform.position.z);\n        PlayerPrefs.Save();\n    }\n    void gameRead() {\n        if (PlayerPrefs.HasKey(\"charge\"))//存档读取的一般方式\n            inventory.charge = PlayerPrefs.GetInt(\"charge\");\n        if (PlayerPrefs.HasKey(\"yeshu\"))\n            talk.yeshu = PlayerPrefs.GetInt(\"yehsu\");\n        if (PlayerPrefs.HasKey(\"wyeshu\"))\n            talk.wyeshu = PlayerPrefs.GetInt(\"wyeshu\");\n        if (PlayerPrefs.HasKey(\"playerPosition.x\"))\n            x = PlayerPrefs.GetFloat(\"playerPosition.x\");\n        if (PlayerPrefs.HasKey(\"playerPosition.y\"))\n            y = PlayerPrefs.GetFloat(\"playerPosition.y\");\n        if (PlayerPrefs.HasKey(\"playerPosition.z\"))\n            z = PlayerPrefs.GetFloat(\"playerPosition.z\");\n        inventory.playerTransform.position = new Vector3(x, y, z);\n\n    }\n```\n\n那么对于已经产生的注册表我们如何查看呢？\n在Windows下通过注册表编辑器查看注册表，通过Win+R将呼出“运行”，输入“regedit”即可打开注册表编辑器在HKCU\\Software\\[company name]\\[product name] 路径下即可找到我们已经生成的注册表\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190622151747405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)","source":"_posts/【Unity3d】存档与读档.md","raw":"---\ntitle: 【Unity3d】简单的存档与读档\ndate: 2019-08-23 22:24:08\ntags: Unity3d\ncategories: 学习笔记\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />﻿\n\n在Unity3d中，游戏的存档与读档主要由PlayerPrefs类来完成，在Windows下PlayerPrefs存档主要存储在注册表中，路径为HKCU\\Software\\[company name]\\[product name] ，这里的company name和product name由作者自己确定，在Edit->Project Settings->Player中可以设置\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190622143530421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\nPlayerSettings视图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190622143747327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n那么如何设计游戏存档呢？\n以笔者个人的经验而言，在游戏设计之初，我们就应该想好需要存档的数据，为需要保存的数据或状态设计可供读取的状态标志，以便以后在设计存档时，提供给PlayerPrefs类的方法使用。\nPlayerPrefs类提供如下方法供设计者使用\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190622144312778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n可以看到，PlayerPrefs类中没有提供对bool型数据的存储方法，由此可以看出为需要保存的数据或状态设计可供读取的状态标志的重要性，否则那些由bool型数据确定的状态将无法被存档。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190622151126795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n下面给一段示例代码：\n\n```\n /*\n     * inventory.charge--int--能量电池数量\n     * inventory.playerTransform--float--玩家位置\n     * talk.yeshu--int--man的任务进度\n     * talk.wyeshu--int--women的任务进度\n      */\n    void gameSave() {\n        PlayerPrefs.SetInt(\"charge\", inventory.charge);\n        PlayerPrefs.SetInt(\"yeshu\", talk.yeshu);\n        PlayerPrefs.SetInt(\"wyeshu\", talk.wyeshu);\n        PlayerPrefs.SetFloat(\"playerPosition.x\", inventory.playerTransform.position.x);\n        PlayerPrefs.SetFloat(\"playerPosition.y\", inventory.playerTransform.position.y);\n        PlayerPrefs.SetFloat(\"playerPosition.z\", inventory.playerTransform.position.z);\n        PlayerPrefs.Save();\n    }\n    void gameRead() {\n        if (PlayerPrefs.HasKey(\"charge\"))//存档读取的一般方式\n            inventory.charge = PlayerPrefs.GetInt(\"charge\");\n        if (PlayerPrefs.HasKey(\"yeshu\"))\n            talk.yeshu = PlayerPrefs.GetInt(\"yehsu\");\n        if (PlayerPrefs.HasKey(\"wyeshu\"))\n            talk.wyeshu = PlayerPrefs.GetInt(\"wyeshu\");\n        if (PlayerPrefs.HasKey(\"playerPosition.x\"))\n            x = PlayerPrefs.GetFloat(\"playerPosition.x\");\n        if (PlayerPrefs.HasKey(\"playerPosition.y\"))\n            y = PlayerPrefs.GetFloat(\"playerPosition.y\");\n        if (PlayerPrefs.HasKey(\"playerPosition.z\"))\n            z = PlayerPrefs.GetFloat(\"playerPosition.z\");\n        inventory.playerTransform.position = new Vector3(x, y, z);\n\n    }\n```\n\n那么对于已经产生的注册表我们如何查看呢？\n在Windows下通过注册表编辑器查看注册表，通过Win+R将呼出“运行”，输入“regedit”即可打开注册表编辑器在HKCU\\Software\\[company name]\\[product name] 路径下即可找到我们已经生成的注册表\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190622151747405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)","slug":"【Unity3d】存档与读档","published":1,"updated":"2021-02-01T13:34:42.652Z","_id":"ckk9hocay001pdwr79y3y9y8t","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">﻿\n\n<p>在Unity3d中，游戏的存档与读档主要由PlayerPrefs类来完成，在Windows下PlayerPrefs存档主要存储在注册表中，路径为HKCU\\Software[company name][product name] ，这里的company name和product name由作者自己确定，在Edit-&gt;Project Settings-&gt;Player中可以设置<br><img src=\"https://img-blog.csdnimg.cn/20190622143530421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>PlayerSettings视图<br><img src=\"https://img-blog.csdnimg.cn/20190622143747327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>那么如何设计游戏存档呢？<br>以笔者个人的经验而言，在游戏设计之初，我们就应该想好需要存档的数据，为需要保存的数据或状态设计可供读取的状态标志，以便以后在设计存档时，提供给PlayerPrefs类的方法使用。<br>PlayerPrefs类提供如下方法供设计者使用<br><img src=\"https://img-blog.csdnimg.cn/20190622144312778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>可以看到，PlayerPrefs类中没有提供对bool型数据的存储方法，由此可以看出为需要保存的数据或状态设计可供读取的状态标志的重要性，否则那些由bool型数据确定的状态将无法被存档。<br><img src=\"https://img-blog.csdnimg.cn/20190622151126795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>下面给一段示例代码：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">    * inventory.charge--int--能量电池数量</span><br><span class=\"hljs-comment\">    * inventory.playerTransform--float--玩家位置</span><br><span class=\"hljs-comment\">    * talk.yeshu--int--man的任务进度</span><br><span class=\"hljs-comment\">    * talk.wyeshu--int--women的任务进度</span><br><span class=\"hljs-comment\">     */</span><br>   void game<span class=\"hljs-constructor\">Save()</span> &#123;<br>       PlayerPrefs.<span class=\"hljs-constructor\">SetInt(<span class=\"hljs-string\">&quot;charge&quot;</span>, <span class=\"hljs-params\">inventory</span>.<span class=\"hljs-params\">charge</span>)</span>;<br>       PlayerPrefs.<span class=\"hljs-constructor\">SetInt(<span class=\"hljs-string\">&quot;yeshu&quot;</span>, <span class=\"hljs-params\">talk</span>.<span class=\"hljs-params\">yeshu</span>)</span>;<br>       PlayerPrefs.<span class=\"hljs-constructor\">SetInt(<span class=\"hljs-string\">&quot;wyeshu&quot;</span>, <span class=\"hljs-params\">talk</span>.<span class=\"hljs-params\">wyeshu</span>)</span>;<br>       PlayerPrefs.<span class=\"hljs-constructor\">SetFloat(<span class=\"hljs-string\">&quot;playerPosition.x&quot;</span>, <span class=\"hljs-params\">inventory</span>.<span class=\"hljs-params\">playerTransform</span>.<span class=\"hljs-params\">position</span>.<span class=\"hljs-params\">x</span>)</span>;<br>       PlayerPrefs.<span class=\"hljs-constructor\">SetFloat(<span class=\"hljs-string\">&quot;playerPosition.y&quot;</span>, <span class=\"hljs-params\">inventory</span>.<span class=\"hljs-params\">playerTransform</span>.<span class=\"hljs-params\">position</span>.<span class=\"hljs-params\">y</span>)</span>;<br>       PlayerPrefs.<span class=\"hljs-constructor\">SetFloat(<span class=\"hljs-string\">&quot;playerPosition.z&quot;</span>, <span class=\"hljs-params\">inventory</span>.<span class=\"hljs-params\">playerTransform</span>.<span class=\"hljs-params\">position</span>.<span class=\"hljs-params\">z</span>)</span>;<br>       PlayerPrefs.<span class=\"hljs-constructor\">Save()</span>;<br>   &#125;<br>   void game<span class=\"hljs-constructor\">Read()</span> &#123;<br>       <span class=\"hljs-keyword\">if</span> (PlayerPrefs.<span class=\"hljs-constructor\">HasKey(<span class=\"hljs-string\">&quot;charge&quot;</span>)</span>)<span class=\"hljs-comment\">//存档读取的一般方式</span><br>           inventory.charge = PlayerPrefs.<span class=\"hljs-constructor\">GetInt(<span class=\"hljs-string\">&quot;charge&quot;</span>)</span>;<br>       <span class=\"hljs-keyword\">if</span> (PlayerPrefs.<span class=\"hljs-constructor\">HasKey(<span class=\"hljs-string\">&quot;yeshu&quot;</span>)</span>)<br>           talk.yeshu = PlayerPrefs.<span class=\"hljs-constructor\">GetInt(<span class=\"hljs-string\">&quot;yehsu&quot;</span>)</span>;<br>       <span class=\"hljs-keyword\">if</span> (PlayerPrefs.<span class=\"hljs-constructor\">HasKey(<span class=\"hljs-string\">&quot;wyeshu&quot;</span>)</span>)<br>           talk.wyeshu = PlayerPrefs.<span class=\"hljs-constructor\">GetInt(<span class=\"hljs-string\">&quot;wyeshu&quot;</span>)</span>;<br>       <span class=\"hljs-keyword\">if</span> (PlayerPrefs.<span class=\"hljs-constructor\">HasKey(<span class=\"hljs-string\">&quot;playerPosition.x&quot;</span>)</span>)<br>           x = PlayerPrefs.<span class=\"hljs-constructor\">GetFloat(<span class=\"hljs-string\">&quot;playerPosition.x&quot;</span>)</span>;<br>       <span class=\"hljs-keyword\">if</span> (PlayerPrefs.<span class=\"hljs-constructor\">HasKey(<span class=\"hljs-string\">&quot;playerPosition.y&quot;</span>)</span>)<br>           y = PlayerPrefs.<span class=\"hljs-constructor\">GetFloat(<span class=\"hljs-string\">&quot;playerPosition.y&quot;</span>)</span>;<br>       <span class=\"hljs-keyword\">if</span> (PlayerPrefs.<span class=\"hljs-constructor\">HasKey(<span class=\"hljs-string\">&quot;playerPosition.z&quot;</span>)</span>)<br>           z = PlayerPrefs.<span class=\"hljs-constructor\">GetFloat(<span class=\"hljs-string\">&quot;playerPosition.z&quot;</span>)</span>;<br>       inventory.playerTransform.position = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Vector3(<span class=\"hljs-params\">x</span>, <span class=\"hljs-params\">y</span>, <span class=\"hljs-params\">z</span>)</span>;<br><br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>那么对于已经产生的注册表我们如何查看呢？<br>在Windows下通过注册表编辑器查看注册表，通过Win+R将呼出“运行”，输入“regedit”即可打开注册表编辑器在HKCU\\Software[company name][product name] 路径下即可找到我们已经生成的注册表<br><img src=\"https://img-blog.csdnimg.cn/20190622151747405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">﻿\n\n<p>在Unity3d中，游戏的存档与读档主要由PlayerPrefs类来完成，在Windows下PlayerPrefs存档主要存储在注册表中，路径为HKCU\\Software[company name][product name] ，这里的company name和product name由作者自己确定，在Edit-&gt;Project Settings-&gt;Player中可以设置<br><img src=\"https://img-blog.csdnimg.cn/20190622143530421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>PlayerSettings视图<br><img src=\"https://img-blog.csdnimg.cn/20190622143747327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>那么如何设计游戏存档呢？<br>以笔者个人的经验而言，在游戏设计之初，我们就应该想好需要存档的数据，为需要保存的数据或状态设计可供读取的状态标志，以便以后在设计存档时，提供给PlayerPrefs类的方法使用。<br>PlayerPrefs类提供如下方法供设计者使用<br><img src=\"https://img-blog.csdnimg.cn/20190622144312778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>可以看到，PlayerPrefs类中没有提供对bool型数据的存储方法，由此可以看出为需要保存的数据或状态设计可供读取的状态标志的重要性，否则那些由bool型数据确定的状态将无法被存档。<br><img src=\"https://img-blog.csdnimg.cn/20190622151126795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>下面给一段示例代码：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">    * inventory.charge--int--能量电池数量</span><br><span class=\"hljs-comment\">    * inventory.playerTransform--float--玩家位置</span><br><span class=\"hljs-comment\">    * talk.yeshu--int--man的任务进度</span><br><span class=\"hljs-comment\">    * talk.wyeshu--int--women的任务进度</span><br><span class=\"hljs-comment\">     */</span><br>   void game<span class=\"hljs-constructor\">Save()</span> &#123;<br>       PlayerPrefs.<span class=\"hljs-constructor\">SetInt(<span class=\"hljs-string\">&quot;charge&quot;</span>, <span class=\"hljs-params\">inventory</span>.<span class=\"hljs-params\">charge</span>)</span>;<br>       PlayerPrefs.<span class=\"hljs-constructor\">SetInt(<span class=\"hljs-string\">&quot;yeshu&quot;</span>, <span class=\"hljs-params\">talk</span>.<span class=\"hljs-params\">yeshu</span>)</span>;<br>       PlayerPrefs.<span class=\"hljs-constructor\">SetInt(<span class=\"hljs-string\">&quot;wyeshu&quot;</span>, <span class=\"hljs-params\">talk</span>.<span class=\"hljs-params\">wyeshu</span>)</span>;<br>       PlayerPrefs.<span class=\"hljs-constructor\">SetFloat(<span class=\"hljs-string\">&quot;playerPosition.x&quot;</span>, <span class=\"hljs-params\">inventory</span>.<span class=\"hljs-params\">playerTransform</span>.<span class=\"hljs-params\">position</span>.<span class=\"hljs-params\">x</span>)</span>;<br>       PlayerPrefs.<span class=\"hljs-constructor\">SetFloat(<span class=\"hljs-string\">&quot;playerPosition.y&quot;</span>, <span class=\"hljs-params\">inventory</span>.<span class=\"hljs-params\">playerTransform</span>.<span class=\"hljs-params\">position</span>.<span class=\"hljs-params\">y</span>)</span>;<br>       PlayerPrefs.<span class=\"hljs-constructor\">SetFloat(<span class=\"hljs-string\">&quot;playerPosition.z&quot;</span>, <span class=\"hljs-params\">inventory</span>.<span class=\"hljs-params\">playerTransform</span>.<span class=\"hljs-params\">position</span>.<span class=\"hljs-params\">z</span>)</span>;<br>       PlayerPrefs.<span class=\"hljs-constructor\">Save()</span>;<br>   &#125;<br>   void game<span class=\"hljs-constructor\">Read()</span> &#123;<br>       <span class=\"hljs-keyword\">if</span> (PlayerPrefs.<span class=\"hljs-constructor\">HasKey(<span class=\"hljs-string\">&quot;charge&quot;</span>)</span>)<span class=\"hljs-comment\">//存档读取的一般方式</span><br>           inventory.charge = PlayerPrefs.<span class=\"hljs-constructor\">GetInt(<span class=\"hljs-string\">&quot;charge&quot;</span>)</span>;<br>       <span class=\"hljs-keyword\">if</span> (PlayerPrefs.<span class=\"hljs-constructor\">HasKey(<span class=\"hljs-string\">&quot;yeshu&quot;</span>)</span>)<br>           talk.yeshu = PlayerPrefs.<span class=\"hljs-constructor\">GetInt(<span class=\"hljs-string\">&quot;yehsu&quot;</span>)</span>;<br>       <span class=\"hljs-keyword\">if</span> (PlayerPrefs.<span class=\"hljs-constructor\">HasKey(<span class=\"hljs-string\">&quot;wyeshu&quot;</span>)</span>)<br>           talk.wyeshu = PlayerPrefs.<span class=\"hljs-constructor\">GetInt(<span class=\"hljs-string\">&quot;wyeshu&quot;</span>)</span>;<br>       <span class=\"hljs-keyword\">if</span> (PlayerPrefs.<span class=\"hljs-constructor\">HasKey(<span class=\"hljs-string\">&quot;playerPosition.x&quot;</span>)</span>)<br>           x = PlayerPrefs.<span class=\"hljs-constructor\">GetFloat(<span class=\"hljs-string\">&quot;playerPosition.x&quot;</span>)</span>;<br>       <span class=\"hljs-keyword\">if</span> (PlayerPrefs.<span class=\"hljs-constructor\">HasKey(<span class=\"hljs-string\">&quot;playerPosition.y&quot;</span>)</span>)<br>           y = PlayerPrefs.<span class=\"hljs-constructor\">GetFloat(<span class=\"hljs-string\">&quot;playerPosition.y&quot;</span>)</span>;<br>       <span class=\"hljs-keyword\">if</span> (PlayerPrefs.<span class=\"hljs-constructor\">HasKey(<span class=\"hljs-string\">&quot;playerPosition.z&quot;</span>)</span>)<br>           z = PlayerPrefs.<span class=\"hljs-constructor\">GetFloat(<span class=\"hljs-string\">&quot;playerPosition.z&quot;</span>)</span>;<br>       inventory.playerTransform.position = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Vector3(<span class=\"hljs-params\">x</span>, <span class=\"hljs-params\">y</span>, <span class=\"hljs-params\">z</span>)</span>;<br><br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>那么对于已经产生的注册表我们如何查看呢？<br>在Windows下通过注册表编辑器查看注册表，通过Win+R将呼出“运行”，输入“regedit”即可打开注册表编辑器在HKCU\\Software[company name][product name] 路径下即可找到我们已经生成的注册表<br><img src=\"https://img-blog.csdnimg.cn/20190622151747405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"【Unity3d】游戏截屏","date":"2019-08-23T14:26:13.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />﻿\n\n在Unity3d中游戏截屏操作比较简单，主要使用通过Application类下的CaptureScreenhot方法实现：\n\n```\nif (Input.GetKeyDown(KeyCode.P)) {\n            Application.CaptureScreenshot(\"截图\" +screenhotNom+\".jpg\");\n            screenhotNom++;//截图序号\n        }\n```\n\n截取的图片以设计者规定名字存储在与exe文件一起生成的的Data文件下，没有导出的项目直接存储到工程文件夹下\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190622155156312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n","source":"_posts/【Unity3d】游戏截屏.md","raw":"---\ntitle: 【Unity3d】游戏截屏\ndate: 2019-08-23 22:26:13\ntags: Unity3d\ncategories: 学习笔记\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />﻿\n\n在Unity3d中游戏截屏操作比较简单，主要使用通过Application类下的CaptureScreenhot方法实现：\n\n```\nif (Input.GetKeyDown(KeyCode.P)) {\n            Application.CaptureScreenshot(\"截图\" +screenhotNom+\".jpg\");\n            screenhotNom++;//截图序号\n        }\n```\n\n截取的图片以设计者规定名字存储在与exe文件一起生成的的Data文件下，没有导出的项目直接存储到工程文件夹下\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190622155156312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n","slug":"【Unity3d】游戏截屏","published":1,"updated":"2021-02-01T13:34:49.735Z","_id":"ckk9hocaz001sdwr73i2j20dm","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">﻿\n\n<p>在Unity3d中游戏截屏操作比较简单，主要使用通过Application类下的CaptureScreenhot方法实现：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">if</span> (Input.<span class=\"hljs-constructor\">GetKeyDown(KeyCode.P)</span>) &#123;<br>            Application.<span class=\"hljs-constructor\">CaptureScreenshot(<span class=\"hljs-string\">&quot;截图&quot;</span> +<span class=\"hljs-params\">screenhotNom</span>+<span class=\"hljs-string\">&quot;.jpg&quot;</span>)</span>;<br>            screenhotNom++;<span class=\"hljs-comment\">//截图序号</span><br>        &#125;<br></code></pre></td></tr></table></figure>\n<p>截取的图片以设计者规定名字存储在与exe文件一起生成的的Data文件下，没有导出的项目直接存储到工程文件夹下<br><img src=\"https://img-blog.csdnimg.cn/20190622155156312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">﻿\n\n<p>在Unity3d中游戏截屏操作比较简单，主要使用通过Application类下的CaptureScreenhot方法实现：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">if</span> (Input.<span class=\"hljs-constructor\">GetKeyDown(KeyCode.P)</span>) &#123;<br>            Application.<span class=\"hljs-constructor\">CaptureScreenshot(<span class=\"hljs-string\">&quot;截图&quot;</span> +<span class=\"hljs-params\">screenhotNom</span>+<span class=\"hljs-string\">&quot;.jpg&quot;</span>)</span>;<br>            screenhotNom++;<span class=\"hljs-comment\">//截图序号</span><br>        &#125;<br></code></pre></td></tr></table></figure>\n<p>截取的图片以设计者规定名字存储在与exe文件一起生成的的Data文件下，没有导出的项目直接存储到工程文件夹下<br><img src=\"https://img-blog.csdnimg.cn/20190622155156312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"【shell】shell基础","date":"2019-09-30T01:02:57.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n由于本文内有大量的markdwon转义未处理，导致远程同步不通过，所以本文引入外部ULR预览\n\n<https://blog.csdn.net/qq_39108291/article/details/101797244>\n\n","source":"_posts/【shell】shell基础.md","raw":"---\ntitle: 【shell】shell基础\ndate: 2019-09-30 09:02:57\ntags: shell\ncategories: 学习笔记\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n由于本文内有大量的markdwon转义未处理，导致远程同步不通过，所以本文引入外部ULR预览\n\n<https://blog.csdn.net/qq_39108291/article/details/101797244>\n\n","slug":"【shell】shell基础","published":1,"updated":"2021-02-01T13:32:49.325Z","_id":"ckk9hocb0001vdwr79ntm2hb7","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>由于本文内有大量的markdwon转义未处理，导致远程同步不通过，所以本文引入外部ULR预览</p>\n<p><a href=\"https://blog.csdn.net/qq_39108291/article/details/101797244\">https://blog.csdn.net/qq_39108291/article/details/101797244</a></p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>由于本文内有大量的markdwon转义未处理，导致远程同步不通过，所以本文引入外部ULR预览</p>\n<p><a href=\"https://blog.csdn.net/qq_39108291/article/details/101797244\">https://blog.csdn.net/qq_39108291/article/details/101797244</a></p>\n"},{"title":"【待解决】一些待解决的难题","date":"2019-10-10T14:15:48.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n这里记录一些待解决的程序难题\n\n# 1.\n\n1.这两种内存分配的方式，有什么不一样，\n2.初始化的s最后结果有什么不一样\n\n```C++\nint main()\n{\n\tstruct a {\n\t\tint id;\n\t\tstring s;\n\t};\n\ta *ptr1 = new a();\n\tptr1->s = \"hello\";\n\ta *ptr2 = (a*)malloc(sizeof(a));\n\tptr2->s = \"hello\";//这一句却会报异常，为什么？\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n\n\n# 2.\n\nList容器中empty()判空和size()==0判空有什么不同\n\n# 3.\n\n为什么函数外的指针的值没有变化\n\n```C++\nvoid getmemory(char *p)\n{\n\tp = new char[100];\n\tstrcpy_s(p,12, \"hello world\");\n\tprintf(\"%s\\n\", p);\n\treturn;\n}\nint main()\n{\n\tchar *p = NULL;\n\tgetmemory(p);\n\tprintf(\"%s\\n\", p);\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n而下面代码却可以改变\n\n```C++\nvoid getmemory(char **p)\n{\n\t*p = (char*)malloc(100);\n\tstrcpy_s(*p, 12,\"hello world\");\n\tprintf(\"%s\\n\", *p);\n\treturn;\n}\nint main()\n{\n\tchar *p = NULL;\n\tgetmemory(&p);\n\tprintf(\"%s\\n\", p);\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n","source":"_posts/【待解决】一些待解决的难题.md","raw":"---\ntitle: 【待解决】一些待解决的难题\ndate: 2019-10-10 22:15:48\ntags: 程序问题\ncategories: 待解决\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n这里记录一些待解决的程序难题\n\n# 1.\n\n1.这两种内存分配的方式，有什么不一样，\n2.初始化的s最后结果有什么不一样\n\n```C++\nint main()\n{\n\tstruct a {\n\t\tint id;\n\t\tstring s;\n\t};\n\ta *ptr1 = new a();\n\tptr1->s = \"hello\";\n\ta *ptr2 = (a*)malloc(sizeof(a));\n\tptr2->s = \"hello\";//这一句却会报异常，为什么？\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n\n\n# 2.\n\nList容器中empty()判空和size()==0判空有什么不同\n\n# 3.\n\n为什么函数外的指针的值没有变化\n\n```C++\nvoid getmemory(char *p)\n{\n\tp = new char[100];\n\tstrcpy_s(p,12, \"hello world\");\n\tprintf(\"%s\\n\", p);\n\treturn;\n}\nint main()\n{\n\tchar *p = NULL;\n\tgetmemory(p);\n\tprintf(\"%s\\n\", p);\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n而下面代码却可以改变\n\n```C++\nvoid getmemory(char **p)\n{\n\t*p = (char*)malloc(100);\n\tstrcpy_s(*p, 12,\"hello world\");\n\tprintf(\"%s\\n\", *p);\n\treturn;\n}\nint main()\n{\n\tchar *p = NULL;\n\tgetmemory(&p);\n\tprintf(\"%s\\n\", p);\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n","slug":"【待解决】一些待解决的难题","published":1,"updated":"2021-02-01T13:35:05.375Z","_id":"ckk9hocb1001xdwr744r64o2j","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>这里记录一些待解决的程序难题</p>\n<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h1><p>1.这两种内存分配的方式，有什么不一样，<br>2.初始化的s最后结果有什么不一样</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">a</span> &#123;</span><br>\t\t<span class=\"hljs-keyword\">int</span> id;<br>\t\t<span class=\"hljs-built_in\">string</span> s;<br>\t&#125;;<br>\ta *ptr1 = <span class=\"hljs-keyword\">new</span> a();<br>\tptr1-&gt;s = <span class=\"hljs-string\">&quot;hello&quot;</span>;<br>\ta *ptr2 = (a*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(a));<br>\tptr2-&gt;s = <span class=\"hljs-string\">&quot;hello&quot;</span>;<span class=\"hljs-comment\">//这一句却会报异常，为什么？</span><br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h1><p>List容器中empty()判空和size()==0判空有什么不同</p>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h1><p>为什么函数外的指针的值没有变化</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getmemory</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> *p)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">char</span>[<span class=\"hljs-number\">100</span>];<br>\tstrcpy_s(p,<span class=\"hljs-number\">12</span>, <span class=\"hljs-string\">&quot;hello world&quot;</span>);<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, p);<br>\t<span class=\"hljs-keyword\">return</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">char</span> *p = <span class=\"hljs-literal\">NULL</span>;<br>\tgetmemory(p);<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, p);<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>而下面代码却可以改变</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getmemory</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> **p)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t*p = (<span class=\"hljs-keyword\">char</span>*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">100</span>);<br>\tstrcpy_s(*p, <span class=\"hljs-number\">12</span>,<span class=\"hljs-string\">&quot;hello world&quot;</span>);<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, *p);<br>\t<span class=\"hljs-keyword\">return</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">char</span> *p = <span class=\"hljs-literal\">NULL</span>;<br>\tgetmemory(&amp;p);<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, p);<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>这里记录一些待解决的程序难题</p>\n<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h1><p>1.这两种内存分配的方式，有什么不一样，<br>2.初始化的s最后结果有什么不一样</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">a</span> &#123;</span><br>\t\t<span class=\"hljs-keyword\">int</span> id;<br>\t\t<span class=\"hljs-built_in\">string</span> s;<br>\t&#125;;<br>\ta *ptr1 = <span class=\"hljs-keyword\">new</span> a();<br>\tptr1-&gt;s = <span class=\"hljs-string\">&quot;hello&quot;</span>;<br>\ta *ptr2 = (a*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(a));<br>\tptr2-&gt;s = <span class=\"hljs-string\">&quot;hello&quot;</span>;<span class=\"hljs-comment\">//这一句却会报异常，为什么？</span><br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h1><p>List容器中empty()判空和size()==0判空有什么不同</p>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h1><p>为什么函数外的指针的值没有变化</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getmemory</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> *p)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">char</span>[<span class=\"hljs-number\">100</span>];<br>\tstrcpy_s(p,<span class=\"hljs-number\">12</span>, <span class=\"hljs-string\">&quot;hello world&quot;</span>);<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, p);<br>\t<span class=\"hljs-keyword\">return</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">char</span> *p = <span class=\"hljs-literal\">NULL</span>;<br>\tgetmemory(p);<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, p);<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>而下面代码却可以改变</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getmemory</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> **p)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t*p = (<span class=\"hljs-keyword\">char</span>*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">100</span>);<br>\tstrcpy_s(*p, <span class=\"hljs-number\">12</span>,<span class=\"hljs-string\">&quot;hello world&quot;</span>);<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, *p);<br>\t<span class=\"hljs-keyword\">return</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">char</span> *p = <span class=\"hljs-literal\">NULL</span>;<br>\tgetmemory(&amp;p);<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, p);<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"【日记】在武汉跑秋招的日子","date":"2019-10-12T09:06:06.000Z","password":"snoopy","abstract":"这里不可以看哦！","message":"绕路吧！","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n​\t今天是十月十二号，阴，天灰蒙蒙的，仿佛和我此时的心境一般，此时我心身具备，虽然在国庆结束的前一天我拿到了第一个offer，可能也是唯一的一个offer了，尽管这份工作是那么的不尽人意。\n\n![](【日记】在武汉跑秋招的日子/QQ图片20191012190626.jpg)\n\n​\t我呢，现在是三峡大学计算机与信息学院在校2020应届生，为了秋招我从今年5月份开始准备，当时打算的就业方向是Unity3d客户端开发，哎！现在想想当时自己是不是太幼稚了，完全没有考虑过就业形势，而是全凭自己的兴趣一头扎入进去，就开始不闻窗外的苦学。结果真正到了秋招的时候，自己完全蒙了，去武汉大学和华中科技大学的校招的游戏公司一双手数足以，去三峡大学招聘的只需要三个手指😂。结果可想而知，九月份奋斗了一个月，也就吃了一个月的灰。\n\n![](【日记】在武汉跑秋招的日子/QQ图片20191012190452.jpg)\n\n​\t我东谷伯伯说的好啊，穷人的孩子，不该有梦想，带着梦想的穷孩子只会过得很累。家里没有足够的经济支持你去追求这些梦想。穷人的孩子更多的应该是考虑现实，而不是追求兴趣，选专业就应该选好就业的，无论兴趣如何。因为生活在一个穷困的家庭，没有钱是万万不能的。你需要的是尽早的就业来当起这个家。可笑的是，我现在才明白，难道我选择专业的时候选择了兴趣，选择就业的时候选择兴趣，真的错了吗？\n\n​\t九月五号，我和儒哥踏上了前往武汉的动车，两个小时的动车路程加一个小时的地铁路程加十几分钟的滴滴路程，我们来的早已预约好的租房“武汉市洪山区竹苑小区四栋一单元302号房”，涉世不深的我第一次被社会割肉，房租交了1100软妹币，押金交了1300软妹币，大出血啊！从家里带的5000软妹币瞬间去掉一半，更可恶的是，第一个星期进去仅仅五天，水电费就花掉50，一个月下来水电费足足花了200。\n\n![](【日记】在武汉跑秋招的日子/QQ图片20191012190616.jpg)\n\n​\t入住第二天，上午我们来到了武大，只能说名校果然是名校，那环境，那楼宇，那面积，那宿舍都不是普通本科能比的，这天正好碰到武大有一场音乐艺术展，于是就去，里面一排排的钢琴，尽管看不懂，但是依旧觉得牛逼。纵穿武大，便来到了东湖，不得不说武汉的风景确实没得说。下午我们来到了华科，华科也不是一般的大，而且规划工整，那路是横七竖八，笔直笔直的，那绿植覆盖面积，走在校园里几乎不用晒太阳。我们也是骑着一个哈罗单车足足逛了一下午。到了晚上便开始了我们来到武行的第一场宣讲会--oppo华科宣讲会。\n\n![](【日记】在武汉跑秋招的日子/Snipaste_2019-09-08_09-15-55.png)\n\n![](【日记】在武汉跑秋招的日子/Snipaste_2019-09-08_09-23-19.png)\n\n![](【日记】在武汉跑秋招的日子/QQ图片20191012190552.jpg)\n\n![](【日记】在武汉跑秋招的日子/QQ图片20191012190600.jpg)\n\n![](【日记】在武汉跑秋招的日子/QQ图片20191012190518.jpg)\n\n![](【日记】在武汉跑秋招的日子/Snipaste_2019-09-08_09-28-22.png)\n\n![](【日记】在武汉跑秋招的日子/Snipaste_2019-09-08_09-34-22.png)\n\n​\t只有当自己切真切实的接触到了这些名校，切真切实的接触到了名校中的那些人，才会明白在大学四年里所说的那些名校差距原来如此之大。可能是高中三年太辛苦，亦或是预科一年太放纵，大学三年啊，我终究是没有学会多少东西。可这又怎能让我信服呢？我真的没有学到什么东西吗？大一，因为读了一年预科，我不再是出来扎到，于是乎我做了班级负责人，然后觉得太累，于是正式选举班委时选择了副班长，学生组织，我选择了院新媒体。一年来，我参加比赛，制作视频，最后也是拿了个校三等奖学金。大二，我成了新媒体摄像部的部长，我把精力都用来管理部门，教导干事，于是乎我们部门成了优秀部门。同年借着新媒体和宋哥，我们成立的木瓜传媒工作室，对外接单，曾三次远赴神农架，总盈利13000软妹币，同样也顺利拿下了那年的三等奖学金。大三,我和儒哥一起在必胜客兼职了半年，同时我做到了经济独立11一个月，差一个月的经济独立一年。同时在富云达学习了半年，也开始为找工作而忧心，大三呆在学校的时间确实少了很多，尽管没拿到奖学金，但是成绩确实是提升了很多。如此充实的大学生活，我真的什么也没学到吗？\n\n![](【日记】在武汉跑秋招的日子/QQ图片20191012190504.jpg)\n\n​\t事实证明，我真的很差劲，九月份，我和儒哥都开始了自己的秋招之旅，一整个九月，我跑了好几家游戏公司，成都摩丰，长沙的沃尔信息，武汉的微派网络，众娱，广州的速游网络，北京的多乐游戏，结果是一家没进。反观儒哥，他搞Web，结果一面就进了快客云，实习工资3700。顿时我被打击到哭泣，对没错因为恰逢中秋，我哭了，在和妈打的电话中哭得很彻底。这一次我想家了，想家想到了骨子里，这还是自从我小学六年级第一次离开父母留校寄宿以来最想家的一次，即使当年预科父亲送我来到宜昌离开我回家那次都没有这一次那么想家。想家也许是每一个在外漂泊的游子必定要经历的吧。\n\n​\t第二天我买上了回家的车票，早上九点到晚上十一点，我到家了，我终于暂时卸下了三个多月来的忧心忡忡。母亲知道我要回来就上山区采了皇竹笋，做了一顿竹笋酿，那是我这么久以来吃的最无忧无虑的一顿，心里没有忧愁，嘴里尽是美味，对面坐者母亲，顶上是家，可能这才是我想要的生活吧。每天能有一些时间在家陪陪父母，也不失是一种幸福。父母操劳了半辈子，送我和弟弟读书，弟弟不争气跑去复读了，我作为长子找工作的事本不应该让父母操心，因为父母操心也不打劲，只能为我干着急。于是我开始反思，走游戏开发这条路我真的走对了吗？我是不是应该换条路走呢？比如C++。\n\n![](【日记】在武汉跑秋招的日子/QQ图片20191012190448.jpg)\n\n![](【日记】在武汉跑秋招的日子/QQ图片20191012190414.jpg)\n\n![](【日记】在武汉跑秋招的日子/QQ图片20191012190444.jpg)\n\n​\t在家里的几天是我整个大三以来过的最舒心的几天，可是时间转瞬即逝，我又踏上了秋招之旅。九月25日，依旧没找到工作的我决定返校回去深造C++，然后国庆之后转行寻找C++的岗位。回到学校才发现学生时代的生活真的很美好，相比社会的残酷，校园原来真的是一个乐园，只是十几年的学生生活让我忽略了这一点。只剩最后一年的大学生活了，现在明白过来也为时不晚，且行还须且珍惜。\n\n​\t国庆过了，房租也到期了，我开始了寄居生活，儒哥找到了工作于是就在公司附近租了个房子，我便开始寄居在儒哥的房子里，十月七号，我拿到了第一个offer，蛛网传媒，这是一家半个游戏公司的公司，因为他们做游戏却不是做自己的游戏，并且他们不仅仅做游戏，还做其他的软件，类似一家外包公司。实习工资3000软妹币加餐补300。也许是我自己把待遇开低了，唉~也罢，谁让我九月份受够了打击呢？于此同时九月份投的很多家公司也都邮来了面试通知，我去了，却都凉凉了，在和我们班那些去华清远见培训的同学聊面试题的时候，我才知道自己的C++是有多菜，我真的没有什么可值得骄傲的，可笑的是，八月的时候我居然笑着说“找工作不难，难的是找一个好工作”，我啊，似乎是出来些什么问题了。\n\n![](【日记】在武汉跑秋招的日子/QQ图片20191012190638.jpg)\n\n​\t今天是十月十二号，我已经和房东商量好了，明天搬过去，住在武汉市银河湾，离公司蛮近的。后天就要去上班了，我的进修之旅还远没结束。\n\n​\t经历了这么多，那些平时不爱学习，成绩不好的同学反而找到了一个不错的工作，我这个自以为比他们优秀的学生却秋招那么惨，最终去了一家连自己都不觉得有多好的小公司，尽管我已经很努力的准备了三个月，很努力的学了三个月，可最终的结果却是那么的不尽人意，我很失落，我有问题，我的身上肯定出了什么问题，以至于我得到了一个如此不满意的结果。\n\n![](【日记】在武汉跑秋招的日子/QQ图片20191012190641.jpg)\n\n​\t也许生活就是这样雕琢一个孩子的吧，这次秋招我才意识到，自己眼中的优秀就是个屁，也许我该拾起初高中的那股劲了，大学的自己似乎过于放纵了，以至于成就了一个失败的自己。我的身上出问题了，我要找出来，我不比他们差，我不应该如此生活，我需要变强的，变得很强很强。现在得我真的没有资格说累，“累”，那是给别人说的。\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/【日记】在武汉跑秋招的日子.md","raw":"---\ntitle: 【日记】在武汉跑秋招的日子\ndate: 2019-10-12 17:06:06\ntags: 大事件\ncategories: 日记\npassword: snoopy\nabstract: 这里不可以看哦！\nmessage: 绕路吧！\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n​\t今天是十月十二号，阴，天灰蒙蒙的，仿佛和我此时的心境一般，此时我心身具备，虽然在国庆结束的前一天我拿到了第一个offer，可能也是唯一的一个offer了，尽管这份工作是那么的不尽人意。\n\n![](【日记】在武汉跑秋招的日子/QQ图片20191012190626.jpg)\n\n​\t我呢，现在是三峡大学计算机与信息学院在校2020应届生，为了秋招我从今年5月份开始准备，当时打算的就业方向是Unity3d客户端开发，哎！现在想想当时自己是不是太幼稚了，完全没有考虑过就业形势，而是全凭自己的兴趣一头扎入进去，就开始不闻窗外的苦学。结果真正到了秋招的时候，自己完全蒙了，去武汉大学和华中科技大学的校招的游戏公司一双手数足以，去三峡大学招聘的只需要三个手指😂。结果可想而知，九月份奋斗了一个月，也就吃了一个月的灰。\n\n![](【日记】在武汉跑秋招的日子/QQ图片20191012190452.jpg)\n\n​\t我东谷伯伯说的好啊，穷人的孩子，不该有梦想，带着梦想的穷孩子只会过得很累。家里没有足够的经济支持你去追求这些梦想。穷人的孩子更多的应该是考虑现实，而不是追求兴趣，选专业就应该选好就业的，无论兴趣如何。因为生活在一个穷困的家庭，没有钱是万万不能的。你需要的是尽早的就业来当起这个家。可笑的是，我现在才明白，难道我选择专业的时候选择了兴趣，选择就业的时候选择兴趣，真的错了吗？\n\n​\t九月五号，我和儒哥踏上了前往武汉的动车，两个小时的动车路程加一个小时的地铁路程加十几分钟的滴滴路程，我们来的早已预约好的租房“武汉市洪山区竹苑小区四栋一单元302号房”，涉世不深的我第一次被社会割肉，房租交了1100软妹币，押金交了1300软妹币，大出血啊！从家里带的5000软妹币瞬间去掉一半，更可恶的是，第一个星期进去仅仅五天，水电费就花掉50，一个月下来水电费足足花了200。\n\n![](【日记】在武汉跑秋招的日子/QQ图片20191012190616.jpg)\n\n​\t入住第二天，上午我们来到了武大，只能说名校果然是名校，那环境，那楼宇，那面积，那宿舍都不是普通本科能比的，这天正好碰到武大有一场音乐艺术展，于是就去，里面一排排的钢琴，尽管看不懂，但是依旧觉得牛逼。纵穿武大，便来到了东湖，不得不说武汉的风景确实没得说。下午我们来到了华科，华科也不是一般的大，而且规划工整，那路是横七竖八，笔直笔直的，那绿植覆盖面积，走在校园里几乎不用晒太阳。我们也是骑着一个哈罗单车足足逛了一下午。到了晚上便开始了我们来到武行的第一场宣讲会--oppo华科宣讲会。\n\n![](【日记】在武汉跑秋招的日子/Snipaste_2019-09-08_09-15-55.png)\n\n![](【日记】在武汉跑秋招的日子/Snipaste_2019-09-08_09-23-19.png)\n\n![](【日记】在武汉跑秋招的日子/QQ图片20191012190552.jpg)\n\n![](【日记】在武汉跑秋招的日子/QQ图片20191012190600.jpg)\n\n![](【日记】在武汉跑秋招的日子/QQ图片20191012190518.jpg)\n\n![](【日记】在武汉跑秋招的日子/Snipaste_2019-09-08_09-28-22.png)\n\n![](【日记】在武汉跑秋招的日子/Snipaste_2019-09-08_09-34-22.png)\n\n​\t只有当自己切真切实的接触到了这些名校，切真切实的接触到了名校中的那些人，才会明白在大学四年里所说的那些名校差距原来如此之大。可能是高中三年太辛苦，亦或是预科一年太放纵，大学三年啊，我终究是没有学会多少东西。可这又怎能让我信服呢？我真的没有学到什么东西吗？大一，因为读了一年预科，我不再是出来扎到，于是乎我做了班级负责人，然后觉得太累，于是正式选举班委时选择了副班长，学生组织，我选择了院新媒体。一年来，我参加比赛，制作视频，最后也是拿了个校三等奖学金。大二，我成了新媒体摄像部的部长，我把精力都用来管理部门，教导干事，于是乎我们部门成了优秀部门。同年借着新媒体和宋哥，我们成立的木瓜传媒工作室，对外接单，曾三次远赴神农架，总盈利13000软妹币，同样也顺利拿下了那年的三等奖学金。大三,我和儒哥一起在必胜客兼职了半年，同时我做到了经济独立11一个月，差一个月的经济独立一年。同时在富云达学习了半年，也开始为找工作而忧心，大三呆在学校的时间确实少了很多，尽管没拿到奖学金，但是成绩确实是提升了很多。如此充实的大学生活，我真的什么也没学到吗？\n\n![](【日记】在武汉跑秋招的日子/QQ图片20191012190504.jpg)\n\n​\t事实证明，我真的很差劲，九月份，我和儒哥都开始了自己的秋招之旅，一整个九月，我跑了好几家游戏公司，成都摩丰，长沙的沃尔信息，武汉的微派网络，众娱，广州的速游网络，北京的多乐游戏，结果是一家没进。反观儒哥，他搞Web，结果一面就进了快客云，实习工资3700。顿时我被打击到哭泣，对没错因为恰逢中秋，我哭了，在和妈打的电话中哭得很彻底。这一次我想家了，想家想到了骨子里，这还是自从我小学六年级第一次离开父母留校寄宿以来最想家的一次，即使当年预科父亲送我来到宜昌离开我回家那次都没有这一次那么想家。想家也许是每一个在外漂泊的游子必定要经历的吧。\n\n​\t第二天我买上了回家的车票，早上九点到晚上十一点，我到家了，我终于暂时卸下了三个多月来的忧心忡忡。母亲知道我要回来就上山区采了皇竹笋，做了一顿竹笋酿，那是我这么久以来吃的最无忧无虑的一顿，心里没有忧愁，嘴里尽是美味，对面坐者母亲，顶上是家，可能这才是我想要的生活吧。每天能有一些时间在家陪陪父母，也不失是一种幸福。父母操劳了半辈子，送我和弟弟读书，弟弟不争气跑去复读了，我作为长子找工作的事本不应该让父母操心，因为父母操心也不打劲，只能为我干着急。于是我开始反思，走游戏开发这条路我真的走对了吗？我是不是应该换条路走呢？比如C++。\n\n![](【日记】在武汉跑秋招的日子/QQ图片20191012190448.jpg)\n\n![](【日记】在武汉跑秋招的日子/QQ图片20191012190414.jpg)\n\n![](【日记】在武汉跑秋招的日子/QQ图片20191012190444.jpg)\n\n​\t在家里的几天是我整个大三以来过的最舒心的几天，可是时间转瞬即逝，我又踏上了秋招之旅。九月25日，依旧没找到工作的我决定返校回去深造C++，然后国庆之后转行寻找C++的岗位。回到学校才发现学生时代的生活真的很美好，相比社会的残酷，校园原来真的是一个乐园，只是十几年的学生生活让我忽略了这一点。只剩最后一年的大学生活了，现在明白过来也为时不晚，且行还须且珍惜。\n\n​\t国庆过了，房租也到期了，我开始了寄居生活，儒哥找到了工作于是就在公司附近租了个房子，我便开始寄居在儒哥的房子里，十月七号，我拿到了第一个offer，蛛网传媒，这是一家半个游戏公司的公司，因为他们做游戏却不是做自己的游戏，并且他们不仅仅做游戏，还做其他的软件，类似一家外包公司。实习工资3000软妹币加餐补300。也许是我自己把待遇开低了，唉~也罢，谁让我九月份受够了打击呢？于此同时九月份投的很多家公司也都邮来了面试通知，我去了，却都凉凉了，在和我们班那些去华清远见培训的同学聊面试题的时候，我才知道自己的C++是有多菜，我真的没有什么可值得骄傲的，可笑的是，八月的时候我居然笑着说“找工作不难，难的是找一个好工作”，我啊，似乎是出来些什么问题了。\n\n![](【日记】在武汉跑秋招的日子/QQ图片20191012190638.jpg)\n\n​\t今天是十月十二号，我已经和房东商量好了，明天搬过去，住在武汉市银河湾，离公司蛮近的。后天就要去上班了，我的进修之旅还远没结束。\n\n​\t经历了这么多，那些平时不爱学习，成绩不好的同学反而找到了一个不错的工作，我这个自以为比他们优秀的学生却秋招那么惨，最终去了一家连自己都不觉得有多好的小公司，尽管我已经很努力的准备了三个月，很努力的学了三个月，可最终的结果却是那么的不尽人意，我很失落，我有问题，我的身上肯定出了什么问题，以至于我得到了一个如此不满意的结果。\n\n![](【日记】在武汉跑秋招的日子/QQ图片20191012190641.jpg)\n\n​\t也许生活就是这样雕琢一个孩子的吧，这次秋招我才意识到，自己眼中的优秀就是个屁，也许我该拾起初高中的那股劲了，大学的自己似乎过于放纵了，以至于成就了一个失败的自己。我的身上出问题了，我要找出来，我不比他们差，我不应该如此生活，我需要变强的，变得很强很强。现在得我真的没有资格说累，“累”，那是给别人说的。\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"【日记】在武汉跑秋招的日子","published":1,"updated":"2021-02-01T15:28:31.122Z","_id":"ckk9hocb20021dwr72cg209tu","comments":1,"layout":"post","photos":[],"link":"","content":"<script src=\"/crypto-js.js\"></script><script src=\"/mcommon.js\"></script><h3 id=\"encrypt-message\">绕路吧！</h3><link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css\"> <link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\"> <script src=\"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js\"></script> <script src=\"//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js\"></script> <div id=\"security\"> <div> <div class=\"input-group\"> <input type=\"text\" class=\"form-control\" aria-label=\"Enter the password.\" id=\"pass\"/> <div class=\"input-group-btn\"> <button type=\"button\" class=\"btn btn-default\" onclick=\"decryptAES()\">Decrypt</button> </div> </div> </div> </div> <div id=\"encrypt-blog\" style=\"display:none\"> U2FsdGVkX1+o4KYraDGhsUa1vfelrJISwVG6HY48UKAMBuyOSXjYFc8KJ/VJAUAQnlr5arLy2y/6zjl9tPV9T2XKs8C95pWT6586ainVo7WKtqNOSaZ3z0lOR89jP7gi89eBYK+/fRByvpQHHEpNP2pdIP19Xa/Px7KgXrZ65NmbBL9wHUvpbA00H2Nk8xKG14b0KYZTura8GCoSCg5FS+qZMWRygqzMpJqVJd+aGVPhUbddpibDr85s37sJPrRS3h10GXUf/XFCS/rN+XVdOH5HEQX4oarT3WDi5bX8XMZbgIVOZ8niffa1AEE2Kf6VLbsOdH9qbGr00+pFZxe/h53usmSHCBPWnRJ6GUa1PBiCIqVTBHd/iNQSWK0BtM0NohfWrujM6P1pNk9MnQhnazIgteqk/Eu0p7ZATSTDzMc7YNTm+uGIs7zLUuTHOxU2QIgH6MDI5DHHlYBXR+u2TXHP4+C99jgjg9pgXbY9mHto+GY+UVLRvx4S1lGpTbe0aqXk/TlbhvJYmePWmPv9qRcJyH9JLdd8aKQfPPpz2psnkCZpO+N1KtmuznSQARnL08GTvBSRLZtdg2hapL6F5++OHSWvA7u+XIN672rH1ZWjmzknOezJUoI2Pm+wgckP6c5YadEXmcL/3pn140DFI9P7aIKmdfr/C+Qsg6RtA6ghYO7CBx1bOm8j8jkd+/CHpO63E7ILrDb5qzKjii6wLp2NUrvk0lQKB7PKdEl+wWNW9cSTP3FZqy0JN/UsWulSFJ1LfE3SkT/AoGr8+4MqyOdCcOImHNPMwpj+ImG3Rzi0U/WXn5RHCwdrKgXNVV0ZKX4BclB0HsJyFINn4ooJZxRSGbqHfJufDiL2PRvf2HSwMYfBESehPGC2JqszYu2C2W26yjqyqEldceOIniODjJLaKmU0Ra93cYpMzWT0k4h+YaNlo3itAYobRKUF+Dsn6jgmQhXOiaC7L+r4Ubr0x4dQUY7rsIA5N4e8dWmh+UtAIXY6suehzCVih9N3LQB51eCBzt6guIq4ncMjvK9jFChAniXqbcXraJthQoIA1zMOCNXGoigH4hEBSY1/s80kbqXXvTw7u2Q6TI4a5yXDRh42TrPVE3qqfCkZkb8A6CUwMdWBQgalLdW6buDk1VluOQ6lbyR/urWZlBJkqZWwXc5gb+/jmnpXEzryLaECrxqFuRXxhYJH4ryTJ6b+V5iiwV8y7ebFLj/F5V7YbT8S3t/IWp2vafJgbT+SAs/eEY7VFbnX3SjquxwaoHQuiy85/bas+FNtUGTvBiMU11dQzK7V9KgwDqyWRUxmJpXpR/N/4xTXAp/s7n980XjyfavoVfaC+HIUy4zlxBR366x9hOd2t0eq3KNIS1jUqVAqcNRdzOeZCRMP1UIPsojDrgRBqvl2I0wZ8mNKwvCmT7NpFvb1YS3oxTO71avYbQ2kcPQe9JKnB89nKSLtLUyYID6Ux2/34UnzpqtT7+B9FnmyXLiMFsA5p75Onm2XKZwFy05kQ3c2ZQNpx/k9DcbocWKfTMRd4N0aflMCPReyt7x3nirnk3pCtqoy82fAjY5LLTRR9sPEFQB+YqCdoIltcZcAztliFB6TeOP0DhsbJB3T8IRc9lkqGtzLkX5asWZRYhug50TR6B8sdIjzwRH5WnrEOgx5CD5+vMvRl1/Ye1qPjba1KEADPOx0b6zsQ5EN32aVZZezN5ypGbaOXfLJu+38R5SazQF9Bn+UamUy6LicfjQvBU21Nw0cXOjgeTTJPEPRMYgt+LmHQF0jBf/MkpLyQnUPgmWD0U8PsnO7qGQ34CBil1uPxel/+PiOfzOmg3+DrhHuIgHUCyE3xfT3heoTwawLZ4DwNYjIfir1vMzNDEikwFwFc9cKgNqM9QLj+zdr/xllQOsPVaIB2zcIYBU5OgriRPvsUFZ2JwHBWJWbOf5JolrY8YTYGzfBHpIq+qAWqVcfW+7CudcSlUpp8bWeV8jWMlY5oqovmoaKZQzJKtEgJdYy2RSQGgbiZD4Fj6ZAcWGeNIaO9JvYAFibVrh2mLdt33cbot5W83YH/i+krPMaeYZTV1UyP4WD/hypZ8vbsQ7jdHV174qoSDCjoCV7brqn9YJW96Xma0Hp41sMCLXWmXtHcER2WxEqPB3vLpfhZadZbDmydwjrlXPbolr52IrH88lQ+aVXSft12XvGPM8aWM+JokKfkNEReeh9v6+HjXsYsFsajOlyCMq8v5NvRYPKvKo4EOe9Kq2bnVZClugswGhlv4dKUcgOwbmOJZy5zAPUwztui/xfpnPir+ekuiv1YhI+hCYIfpnIA/p4HFOStjYBOXUwwdiUAUo04z+kEwu9DPiwJLZwUquB7+ruvdFuYCJfEQhxuXrM4qt7o0CqMXVBVfrRNHC4T4poWv9TS6m+NxrEFpqa9ay3Y1hox+CBYxBMvkUWnSmUjKWMG30G+IyCbPdefNAJvs9Q02QlczXxQoUmK54N+AgWZMJzpayo+sHi7L6146gHdMokrc3A9FULJnivp29NjipP4F6sa3GLjRWxFLp44LSImzukopwZ/1InkVUgeQo/hsnAZzhhaboqe5vQnda6A6o0zWEnmEdfk6Q0PaD7Yd6PnEketf0YOhRyq9P+0E5hMWLdfIOdfcEVB8ynMUhztSMW61/YPeeEUnl9FueaQNyM84HC5aObwGWTJnT1kY+z1Z3j5NjEEwf0sfrgWSdlCvqSMmIqta7ZmbN5naaH05eOI8qkQ8925bmKq3rCGXtVovxPUDkQG9JjO6ca5Slwo+13Ui0t4InSITwA/W2poDRnpnX+Yqmd0ZKG00nqi3fnNH3SMRR9ULY8GwnpB1swTb3i7Bp166/839HemUo6OC6eRyU39QdFXDuoV7zOOBdQaC7o2B3jVcbXr/5TClZbfRbTPT8s0i2ErPdyI+WRQIooXiyhXrtNJI+5BWy/jtETSpWto2Bw4ODP26ZfX/B/1cUGJaeNSpjYBCEoflB5Abi5N2ft6wdDVgOLUeLSkYd7CqKplChqxlHQ3HpR6HbPYQ3do7Ir0duZa3ywoAyr+8jeel831gMj1YIlcV9HLzF6eslvLG3Rfpe8gb7kOn+gGn2iMc8C77N3ZmlpFsh+IC2Ji+YYY7rM/Krrx+a4OAf/AKAim8cDkou55beJ9ysw8pk6AaocYvQj0ULcAC4OMhNONxMNcfEqEdAy5+TbGDkEgxKwbOpUOuAcJRPBXcy1zxItI8XicKJOPbxA6kAt3Ocjvd7xT8Rmowx9vvqhRc4ffRVdg0eOoRnM6I+zxKYssR9EcPqxwDB3qN7yUaWRyiM6bB/aAA6yWL5d1Q90wZ1xacuVyw44bQr+GDBbpNGJ5cwH1ayL/LGWufy5mDT6UPxW3wtGqnRRAHPNXRgEQwDju0V6XzxzEJ3KKh+MQr6otvLcQHmOQ3+Nd1SkhQ+wMUsR7ptqhNy94uKyArWmB14UEW2q1wLs9ofx3CvSeJyb9yWALqjmHQt8PECKwjTVh/KogQpv7VGHPcx0Zo+c2eIAXjEUs1kCeOO+dfJ6WAgQKFgER5kgMftWd7RA24OuhPx6zwr72WVKwTaCNu5/I01qbhRz6t/N3rAdfTvc5CHaUSDpWz2IisIm3LZ0LB9a9yvd/MUAcU6KU6z9cp3lET5lrFxP2da4RoBCXQLlCgyobXxQhe6iHgYdRq6bkMHQI8NvQN+fmgrLDCw07KAepTT0HBJ08LdCj5iqiBucYS4sSWrizyvYRR+QBRQsR3dPBuKRh8Ui2C+pINz0xitG8i26XhClRCCQA7YJXeXvgzt/lEZchioxuf7zAy3Pm3+DJsbHfKaJ5EJAWtlPl1sKzRmoTb7frPTMNlMr238tnrQxRKiGKYgaTceiEWddlGgofueRhEMW/zqNtYasClW9Vd4oVnjcWB+uxRSFXZxAoRkN8bnCsRZsVBtT/EBuM1axlCWoU/u3Udwc92QpKZk31BujFoW6glBts0S1DaMIRu1joutNjL5sZX2VuhxRBPDukWMQH8z0P+NloJzRw0xD3RxlwcZXdBjkC1nlzFX8OwzPF0TZ5OwxJfypDrvC7M0YRIwvIOu2IBOhcEGm95adaFtrmrlMFvYh3nTL4w1SEdI+V/GX84U1Wkng1fxJxshC+2m7M7tNReQL09uniExBgclOP6B6CK/xo9lgADilAsBAghy9sKmc2wPsjny5AJWZ8+E8uGEFGiCmtk9Ta13Ejki4G7cfF1SOGpTCcLzLT84cLGDrQh0P50lEKuG2a0W/WOOaipnVbhY0u5TsfwtsLDifieHO2PgR2FyQn2h//yBSaFvnQ+2ojljhjBqDH26KxeI+Y8Q2zD2mRNUcq8QHMzNVHkSCDOPywQAh6hsr+HKzf2kA9dQWE17I1HcPHVYdp3Ti3UmNNgNE0NCaOXjle/ZUQ2A8//YgEAc+PCItxUYTScLu/PMVpzbJMxZBheC2v4Oinf/sViW4k8+VgCZh8X6n6alAKMZSrCgraPZcCPGblreV8QFWEpg2XT7YDdEjmaWBv/xw00+8U5ZXbP7tPZmCLGysIkjSBNkBcTF2F1SgrFhmt/vCEl/Kc4BNwlZIaGd9BN2Q7yWYqFFB7yURv7mOBLNXCAHSZEHGlRpKtSn71DC8i/hYKco3Y5gLR90je5FeBRhX1OEyuiPgmHNe6ieCsxOjM0Wz/mPmXgm2c1hTx1epnlX2r7pDdzxw1O9nHt6bBsXr0pgUXij7DOh93gU7LxZdaYsnh6PMKsRI8+B2ijsfM5jrL4kTu/mp4X7zrFAl9hmk9vW7siBMlonkeH3lDejimZwaQP6KyZCywCGnGzgdWIqZzCYYnx/wzHt6AUEPA8AeTwlsnrCkCjPtshTsjgT+SMxg2bscTJInk2/BuABjPH3xjFu5TvdQaF8D/iIM6krlHGvTMTRg8p+JeqyFav4LN76t4THDQvxZJa1JbFSUppT1pvoTEo70T5jjwwblZ7CgaIPt7ssKcS13K23THNVGWiRZgzNtp0+rwOk0A7YOq4WvGv/Courz6HP30fBP3qzkJGA1F+//N85aP8yUQxAa96+U5z/UMmqI/yFg/oAChxoP5023sH8QfMJAmMdPTmMTg9nBEQtpxJo45Ui9xy6TvdjLXU63kegcalmiEuo2+obJTknYujbVmfQKC/SiQ1wLIKwnRkkMg6A/HdRl51TrZm/xSUGJ0bUYtN8rbFd7ZvBYM1aeElInTl43otplLye2v8OBgXbICNBsAOFM7XGDRH8Yv2HPdQptwzFR7uKvX+NSzCgdVfbMlujcV5Owp3HZzWcJzUNbSHiOHE2KM/zieIJJbHEMcv4Kk8VDBGad8sV4cSV5J16A9hYSnVcjAOHjMF9jZzLHVXg3+ttTRhMriCkbS8AdIsrcC+/DjNgPsCc1xwtjHQcy5+oChnxncb6ZWwMMBavIHUMzGQIPg9+7snE79Frl1bKnWm/NNYQCUyA7M/wF8QH5fKd9rBqtdXshLGEoQNmS+HIFPZxVd4PfayyPZrsZZ02YWJMtiUjh2nvhNsfagYioXw8XRNPb8sovmnf2LnDG+SEGHaKeIytqGzsQ0F7aNz1huWkEex+ziTop3thBPDvzYNrJZt3n7H9or0LOaqzVKEdbI020akdQnZ39qt5GP73ZDLJSRIAblx/bi+4ThwdPxgKQ1d01g+nA2jT5hGQSVKEJ7qqm0xGEz/05L9ZRIi93wbf48AvRSmLg+M3I4oTfkF3+yAogJ4TuLmPemlyFSJ4OwNrIz7FW27Di0vfOgvCpH+KrQa2Jyusiy/OCVwI2IIr0T9LR6yh0TN4di3WkYFmdSVvGVRvd1xbiv/CkcO9vN+gfs92oeFk8FZ1Uq8wdtV1VUoS3xm+hEeLbTZtOYMjzFfMhiBpToUCYh1M46PbAgI93uwit+3w2K5WYA6K2rZj0TXjvqQZfQp4GvBPFzVYOJgwwTr03WIuXyWRqP/ZMa+42xRhLiUV/x2SIsteMUtcp7GTNDdPxxEamPSphIJBkTyQkMSZGbEilHRkDNbTYDO8C7LgGb+zppAprccbLTBsJCRasPWwULsoK+YOk5CNUB+KTK2UGeynqpQVekjBf2WDJlIcn81xQlgJEcgONVxCs3p1howek0IBO0HNjA/M0E+P+9xliGNkAGNKAb+3IjayHXs309b5ICUu3z81zj2SJqKgxedgJ/IHJBTjHgG1IGJnyrjSDwNXwBy0nJ3kQVfZmC1gXX022Y17VyJsKF6IDFIfhhXuWzxJWkvuPDpJiiSzQpe9ypiJzLASNEMcByhKMIkYH0mrgZ2COTJIPyiILNfKEmFMYu5le8MafgL8bUmHgEdgkix3FkOIHylwtetnmfafxse2alMCUYPfrvmsr3tnHDZBE2jAW7N4aLEUUif65E5PjOv6EoLq5WOOUfIIRssRPBxmlp8hJoqsJs/8ZgzSdRPxxU+q06fcKiu0Y1cbnUUL6fdIaBRupkCYwqoHyhU9B06z+CcjPqbTwalNrrLKmw3TX3G0m28TP3xwNyEzI1yGFNWSMLNQfoaf7d6H13EzFUT/z5t4YXVndZ5mR++4gAFSFQ1x7qU4dXVDNMD3O2bwdPnFzB/j+6/NXR75c2wpO9q50oLlXi80xT1Bt57shnVP3Agoq+kvJYCgqooFFQhRRiS+WPYe7bR7xUsNOdYFmNxkT4qUK194GiCACwkwgzoo1Df5IxgclkmePUqqYw54E4ysh8JNYBCeo861OJYWafZh68XdjR0fUmG/tsKq1sLqffDptUgpHhGn8qr07En8MBM89sEV3wTUrvj4kFRJbJq9m3A7hFHi8/7zM3OH6aGjN39ob/zKycO8cBOMOV/kBdgHXLCxYxxPb8/+tBo3K6sz45kYpTAsLKWwP3q4cPZ36+DbF2cKqrObia7GuUabAQxYFRdsNp2ortVVoZnXEAmCApux4iqrfKZKwz60DBLRFPOquDt8YzU0vqvC+icUmyZ6m/whSw8Bi2RUtrka2Hljj/oXpbkVwEUMSIMenP456hbf4xl7MaRl1CQdVx4SFvntnrEIy2o85oPMmdSxZyjr8lM9kmDBprCIvJgCCQVK3CwN22vxH8rd++aP6nx0nMts1X1qN5h880ZZMGkxIzW8Jv8Xg5LYQUu9gY8mZuerIgSgh1RMm2bbFN5whFhE8sxFsQ+jXE2nHB468ii7rLDeSCN0MGHq66nEhOHH9VryeawaXaJGNgrlH/fDA3zseMto9abJDneJuQsJky9xPoKn5fcWiY3pwPc165+RbFLhxvGipsmaqw+eTg4EyFlcQTIG8ejpn1XLpEiIkPJz9ijGJI8TEWpTk7zHtjmLHRZyDGIj5PHHGL6R9A/VptBAmL1F6ko3itGxh7XhVnKsoAGJMns757SWTVVkJ0uFxM1SXv3m4HWZJiQTLprJC+m42q9rI7OK80knRruFozcM+LLH+omkKCsAYYs31tnGeSdVnJVYTLp1yhr/T8anTH2MuOuAvPK3W87idFsLPAL+biW3icbo8IoBgXh9Q7iV9UV9+rEKBXdzahG6jHwyu9UvCSFQZdRgIGitqiheGFdrRAqLh5r6U7jdX4mKJG+YWGaXoY+V5xMsuB/CXTpf21XVMwC+/4wYDiZHFFQBbMgYrxhu/npfe5DqYIQj7pwPW1IYELwJygaVu7r7m2ZiOBz/Vc2crVCf+nXeIa6TXbumW3zWorbJYJrCKhcDbbWmPyaIsvpY75asYEEZebW2lh3810Rjhb7LNn1eWBWHm3ch1a3zbSSJtEE6SJL4gS3FUYpNXUhObSY7F+1VU37HQKS623nvKJShWOlYNnyDx/WZeBwrMJa9O1kZJfgY8kvPDMQylyYnK86zMLRPDeEFfXWYlXSJcEopxXpbYCU0lOtlS6ujGxRZH/dw7gPbCYV66y5hiC1Bo50AXUO8TIXLy97mfdPCiQJCC0NLit+lKRgbFtfNjE0NOjT5UNCDLEsbHS/URFGGk+jhuu/i2nqpqTtUSwyY6zzikLeoV2eSiCVYr2cEKeHYXZ8G+fC3jRCrq+iaqkfuLTfFIteHmZKuIyCWRgQMYV9HlRavmG3tkuugRK02fGMxlINq+VLrJYbtfmlDw5RpZM+XRcatgDdgiF1wVDHYMUga9LMKS6jYYQ0UO87suoOuBTlfCmmT67whhaly6CB0U+ltoFeDG+xi+jQc42yb4SUZ0rhVJKSRFc4JAe0uzojfFTpCUBtzmJQHxeSS+FeELaR564r9eXTDTKNeTUpCO2NW+IZE5sy2TiEWMmxdw1Vg50TGHTTfIo5XY/nLA/kRHw2vQX28eQC/sAPMEJqZW7GHv8+7sVEo2Gc6MRsbCmYlXmB4dXXldcVVO6Idfzc+WMwfpnWe/DtLxeCcqS3CF3AhJNmrZe6hMBwy3QS9e8UR2tfz6o5K6CZekmA+sID2xIX4TahtJxIkRmKAT0ldSIEGWPu3mu5rk8wlGf7luMfWh4NWC5v7KoCQ/8WbfSjIaQ4oCQDyXMslqg96X90NtoW4TU29jqTyzB/UteYvsG3pY0UoIg2KLUWuKYl1QV7ZDqx3m+SsB3PDJQ/WC3tvg7r6lUsbpMnEbG4cnFbW+KPCw3KJ6DNv4hl5OH8pJ78Jjh9A3LSkqY6JKUY+2I82IhbbI510yikEsb9CAvYiexOE6LuaEjlqZ89wsOAeIVqueNDKzwD7Lqo6yOLEteCAv85uxpWY1954ZOpzTngZHXHKH4juLMULsCHxoscfjvXunCFVP8m+saOKNbDKaOgtxNX+MbYP49KyPQWH3l0Q0qA/9Ex0tBayb9VpZj5bKCht1iGjkzaxfSMCxqjOxAG59vsznYbGuP+uP9ITDwNGbG3Jesl9Fft2TgRTHn6muXkHDeIRHUo6EAEXXt/INoVVbEKs5ttKPddyW7HkmpsfF6FyncV/GDY/1UjqfXPYusT1vZuuedBDuUW2Rj70xb+1gx+G7MtqO0MJcuVj17/uLziwXwYl7W0VHeMzUA1bgvbbfHtg713vCwLKekGf8n4NL+SHEYezUIrLIflxWkj9u3T4voQENp2YcEFbHTXH2Ahd6motWaUnOlMmVnU51LNLBjjQ2fxygo0+UL1QHLOUlUgjl0obo79cN7fQe25MNfYxnjPVeyin9MNWD4Y/c6m+WzYM7ibD2fnWGDffUUK9qXriNw6qMDHir09N+MO06Hxp+ZJNB7VoIbWqPSwSqCyguV/RPLt+JFtADA6uZf01n5YWEk2EsN3vrI2fVxiumMca6J9NVeIylgsccfogI8uIajdPX/+xH6AiB0fS/leezFWxOv4fvJ92UU8d2h1o1qL42wn+tywkqSzboVNdcynOy7kjvnwG8d96xntGG/n1fvVTXExQI5sV7ICCLsJ02WdQeUJgh+S9WY1dEeyQIeGfdJV7dzVOguKfEz1n9D09wuMe+Uc2CuaUZq6/Az8X/L0KYxdyF7qS3pcbrhRkFNANSX+XCCUNrmTQrgvOOJGCmRS30Wz1tObh9gtoK89vfnQH2SxTSCAjsqZGtBabCAVhe9TDPrqqKDjc3F2eo2p3WJhcrcenIbYCmRQVW4ta2ezuLtzKaFHrbqsHd+c0GrLLFzq6pRj+3mhm7paU37btOSf7R9ya5zgYvClMWVJ5DbDu7oWyiSLysJYp85P4BgLMw6zq9rvgC6VeuW0YQJRXIlIFkkgfIXu5e6HghTjW0pKOxN7lAFDZlUYvMEiCpHArv8nZ0RJqN0Lv3aSAd/uaxcB12VdWfvFpkOqFaSCgNRQ63lUMF++FP6xoD8i7nAeMYawxuvykHZX65t6N49WGYpta2MHncJk1OMRCa3x+YNyBa4swMQmFvDFgasCI3GlNmlv6QEZwu5fEF6rUnSlUp+2ZgAhsuU8TpI0TLaf4uA5GHX7GUr6Qmqxtr1kEZsGjy8nnIJZR8nmnkmC+EanoHnNv2+BXGUqXg9OtfTlPLPdOtbv4w/P3revwgknBkqBM/mYksX+lHGNknFF+zbcKmDZOUw18AYPHlz/Vete3Jugmo65nzH0GDqO4ZeCoeCEDRgJiWeDvW6tOiGdcm7j9XFlk5OE0JQzmqjNGgHxrq2ftOvN58y05Ao/X6Jiwr1/Ty5CeVdr5w5q2HFgHjbJs/luHyt8wXT+xu/yE5EkXat79o+W4N2GBLU/3THC7Ae8CM6T2C9X84PX3rUWNU8PDFOSV6jEYsUuJHaoy2M3/SENglHlbKhrXbSy4KCiMddzdCKsYA+8e+rK3tUTedFHqPL1ryVQP2fl9rfZdBd9+org0d0MTEPWGigcceKMt2uP3XM+TgVPTkzolHGlUcXu+UlMIvZ1mhHnwFo0Nnbs3nscrOW8xCLEXwEOUkkHPOcxviaVTuWGWjIRTxIEemm3xNlbqKwY5N+Dd/5JyDVcWQvU/ug01eE6IVUTEWGSrGM57WtkKr1I4GjtgzoVoDAH1uxIJpVJjW5VBk2T3ljQLywzN1UTUEGHK+LKG37QklmdbmXAdh8jMI/1n5DGX6xmk+usE740SKp9+yuN4QhSWxHmKcoviwr6+MhmQ85v03R6SlhMTkBXTS5VaKtVJtCO44IBcYrkfncr4Kd+JS84noLtw7wSnpLf8mkPkOnVmE94CUiKn8PBXLdd6qfnHFEAYOlAYICGzl+zSJypMCOV3Tl/wn16kzW1ZaPcH7nOaF/+DEzr5G9GXiUoYlfM9imhIXan4KmerNkTot4grPvA14m1dsa9/HL32y+bRyla+DlWlLh3l65b05rDpdA+xR6H1AfZq0pGm0KYVQ+2a9CxOIn9V0KV0inX0MToCLGLCK6WFm8+DZqVgulKWKShUw6rOU0k8XK3qHYk2eDVPUnhlGi0kbgW0M+nU9lpMvnF8TIXq/a8uw/ttFnMDgQ3cXmODFhqB+b9dR70QgxQmUf//nUAzZ5CrOLEUmQR/SAdfE4i3fq07oWJwZOyms9uXOzn13O4hpWr89iVGG0GS2dlKB1hCSJ4x822ZtooCTVHvRonidpDIEFCN3jdvf0jv5wavS6LdOLkPFljH6NW3sVZr98V5Em/RUocf1GcJXImN6sYJ79JRUefH/FbqWbypuBg39rdsJ07xIfeoPapORb2SkpDOdhPKG04KYin7EnNmVDt7p4+WZl4fqeBvUDuauSRc62RQCVryq2q7nQj9S8uCCmaOeVvyW1rn/eB9ribMu1rg5XHNeuo5+G4g+RRmgecBOfHgDsKVrYr+gpiZWzBCoxFU55/AkeU2LarQGNlWXLPQNou0dsGnIJ/OQqvsrRi5E0PpiShwhgspPf4ILho0OusXOmwiO6ms3Klxjyqn1yoGt4IL5IowfQuyF1BO1m1VVjANU83lJSAacO8iLOD4QfWbwMUIODg5Ye5rk3m6dyOYCjBwIBGTim6jYASepUCpU2rYnqPhhGxd43caAXAiXymqUx+wD9KRnd0bkNGkh/KIG6Y2RDLKjvyuYqC9v3jrAk8jS2tBMk+AoXV19nQSiYSy5Nlw/UZaQi5y4llqBwNNUyNs75pWZEFMu+aaWUvPPnIkV1xf5p7dBHwbeP7Lz8i37LuOWN4lPB/XYG7Ftx04YsrXBTdWrxlhzxgJx6st5FLEWACE7rha2TGpjGmJbr/kE8vjIz+p3/l9DJ0GtvTbDNcuBji+gJCqeFjeylodp9I5tXtCEgRFKtlshHlQtR3/WmeJvr4+nvWormaN5ASKo1AaFQzlt1D6dmRXnzTeLZSU5LduTeurhmAxRJTzoOcyD3LuTI1U+pFqOOxzp6+Q/rPmtsWCa8OsbVjdnhPS+hHyK/i2j0ngGRdLSPauoR/LVy7ZgvYG2QhdSWtAC4Fj37ZaC+h3TmYMes6pNzzU0TjkYS3h9uuVXHN30QE5KhZxWWfI5DQoYUwrEDmkaAuhqikLePPV0BAco0xqIdxyuw9Fx2d4IP6fXf+xWgQRTpITGTNV0z0p0nBMNPv977yweh7Yvx9qr/NwfAqF3ywcccS10Zg8/N1clAm9pKXKHxektA9SNbEIhyKADVynvnJfa5165J3CjZZ36RRZ2lCnhfUk2f7UAojtNc1mP3FxImCMyzJvxLnJQyvkQJXIH83uQAIZkULBAo4icKE5Dn5gx9OqF47JCC00AaUKWXqj/HUuRVK9nPYxki10LtTZvx3NIZ8YY0pOPLc2JOfxwttETrDPtrgwHLYBloKHbmagWyLGy5htOiJ/t03fD0QeMI1UrclLQlkoenql/dVucb5+Sy12+qJ2I5BjEX6c9CKXGJrZ+X61AQgaSOIfMQrCV2FBduRI5vSqmWRqvMYUj7QFUg0Okhgzchp72zs5jMTxgZf0ttM5uM4LPSphgV6fO4xQYTPmbc3hx6qZCf3gj4I3I7oIc2+1GFleexyZLZDa4kGJJYq0YI8IKwoXvBaabVL3SLRAFSwpKx+DD72E3gTnQInuz5srnG/XSxox8cpnh8Glr9C9tBpKcYXOn1NfiBOsQWsLRHXhCUKZZmXvkPM/cbZdKSq/5PgSXAmT1MdAfcPLon+DM+/YZHxRwXin4eni0wUbVoT19MnD0iuDyjLnZf6z6NyjSmUJf9q/IbbwsCpxQ2lqDJfhU2sXfTnaMBpctTjnELB7kUUZ45m0WILgciAlpcDki4lzxMWnyZQNSu6ucBrExBK2DlyVZ1/qhMFRgzNBGRERgWjN8oT6++szOvbtiiVtEOyDq2ihASvFu5K7zes7mwbZtp8n5hB8VXHNtLvILXMrA3qo9De9O3tpiL7axb18fntPAvexjeUAKwvub6lEACyXdEcXzDFFCI6SpkmXK3++Q6vKdsy+6Idok9yEtoYRZkV1w2c/k/B5kgmnIoprVJzdYbA0jSV+txNp6wxsM/NLHOC/dqmdUBrUyvkKRxyRyb6qUKHHCGuwem/m5hH1Nm+L4ktD27KmsuGCP7MWwMh+sH8/CYxDZ2c6QTVpf1NT3dJ+zKbISvn2xQ3UmV+8xoFBEroyNXb2clbz4pobuu4aCHzX+9cU2gyBKdheolAPHLI/jKKESMOYB5tq/om6C2Ruqbv0/cz3SS5jEfIyzVFiOQnAwb8wNsbIkom81QgIlLiHnN2mU1MIvwwqzVUPx0HQNGhvLKyF7VjDrslvf85nendhJn+8UpU2qG3s7yOmVa76P3gsd3ttLfwUzVKb63zDOJ17OmXt81psE5tBFIQxljR/ilYe38p63dzH7ct1LpHlw8CqwQACjx8lmXPiAI3SwDQqn5hGuVFpPloWYDxmp9eVrRePHxZCmYVGnraBh2uTMoDI6FLx//pQxbEoOh86mVc2SROtrJaqfZLP4p1xFna1iwa7t4M0rP/cLdJaKjoqqg1qQMBhsxcde3nn0UEulL9bDVrzm+GQwqLTujfEk9fs/z7X78ET/Z3Zo7+tv1YPZ7E9mFlVJ/kOSlvD5YlRpPce0JX+7uCSxq0jUQlatrHtt5il+wlmNnZGaz7jzdeDwHOUJfBkm/Age9Xxar53egrK36S5w+zxeFr/ocPMPZMOZZq7ldbXxzd9Jar5vDLygx9jyeeAcr35rW5Y+MFhuH+fpHrJ/93oO6nMYKMHH2GtWkjKvYD5PQF1G84IAutpnZ/vCQeoTaQu//EEC6mBx2X3VZvgnJ6y/SeDpp09t2CWwM3d71MC/pz3h7DYezo9T4xBBR0f7uCL6rOnH8sPhrvSZAH7xvVH2d9U7i0ds2tjWDSswqTdSSUfIKNuqaGbSAQL+NFaK44VANRsVJk0r3naixzbrbJ3UmcMbEn/RyQia6+hRrfH65KHq6ogKVotst18plbnxQ+PJXGucdbQZGVi6LdUCpUk9/e9ZWJI2yxvXbEYtxi7IHhboT1tF3qDxt7wKCbRkFM+SOtCjWWnTTMbdh7RJPePP52TdSytamc5B/bGaY3kKxqIIMpqWvYR3y31TAafm7jOdduihwpoN0dhiQY7etAuZ6jyZIk+Bs2U7eqXJATsKtQJUzLFOxHgSu3mYDY1+SuEHNFQyThzk+1FM7+C4G9NdOuh7evHMVRNEBlSyR/29yEN+iZvE6Lfis2Bgp02hGKfhVQaSPD+O/Ag8xtG7AKESqZCbX4LZSqx4icItOeoxIOZ1ajXUE7WnKRi4Gd7bWQ9vbciSqo/zgAxT9q3Nr6RkMpZ/tBq8HKdinkauLX2kTk2/sWMx8h3IMvAoSCr0Vm+Xd9OaXF9PkWz5/5BVtd8r18xp3ZCkmjFvukLgkib8Endl6C7QyEzJuHqBPrd8wX0n+5Bumq/NBwV2HDO25nGdP/q5aof9lTjkJx4lqEG0pG6b2ZWqKfnKh1LNBDHWF9GIH/2adrtHk3qvZrrY9y0MwfRlU2TpRLzDtjgamobeECFfGfaDkfe6hSBD7Gkp/0ChqggyMZMIj9r9PdH/gfLAK3OnZjK8D/VWEH8CmmfalUPfXoyouXO/94invtcAh/h6aP8BTzFyAxxriwC0XIxArS3ejxsyx6AOvlQN/Y5eeSWuVSvltXSewk+aUn1rCeb1+XvKJTfwD1AjniOwAJ4vfnpsRua0Kp5VXCVdu5K4wP4/+VNxZRI4E0Lzzlt2WKDStpTAJHCHiIpRP7h1Xe5jgFZhYGjgDOfg4Wi8X3sSVeKjdAmhlHQA3euGMarlXe9TdCn3aA3H09f2H3kmRtPxLOzP7FyT/5ucoM/hnizdagcWiWqCiCcyBZX3l/97OqPY6nd2NWf3QGM2rJlevpv2ARFJyhs7oq4qTt5YAHB6ObqBSGpeNb1SN6yOX7ILJsSJhCgr/hygTT5cX0UTNJqikuzR0S2L/HCcZXoqo2BxkZFz0fM0AlvchfwESzyN/h/SvoSEcTvOxDqjDUGEmjOHY+zpNtasOdiXJ7MdpC0kk0B3VzorCp6BZNiCHmarL924cpM+/A+gxqee3TG9lSbswLXyUcXFJjol+ER7EfOcTkkOvU/IQHEQtQYTGOYto//hsypjFjqQb/L2rH1i+ZAw7jfUTfxyCaY73k+jfVvDrtBcYvcBvfJN6YZcMr7b5rXZZuVnDybTP9+tVrAWfj+rhpkSPbxWBFzXHkWm8OWj8tpM0RpTvdOkcEMN22JpcxnRodHgDsao6R9WFIGT1vp6r5+480ctiGUdIw7yKlDXqq0DRtdv7QzZB9q7CSuGeUFqtcDL9g7sk/XTHLLt4NIpQBCX5ySZLtWUPUXlqBFKAJr7ZrHerHF8zfD45AYsxX9nqTRJ1GzQ9aaC1wAVdfwdaOjXolY8Rk1LcRrS8sgp65LOdQqjRpdtECX41o+FE5nlWSIRB8aWXEGV4QU78nWhboqm0qtodL8NgButlo9LU5Rya7mDKfc5cYDtOC19tF2ioaxRlOvNp0Ly3XBX7BDSg+xmlyINw8F32AVke582Fhxs+V8Utx3w3S6W3mePIHcKceIcoqK6pZmf7lO6oHcBszSAuFw/5yKgdOFo5wRqIDiiMCwR910XSwpcFbX8qnmY1pOc2iTLkVScp5PMfVYBCD2F/2/1lHCMDbHzTsuUqS6M7jgAzhc6b0+Re5egubVabSk0fhbGcF84pe8IqcHUMljTARwd+EbiGUAeqDYRXU6d+doP/R3tsyYaBACtAhIyuBpc29ZsXFJlPt/nnQxEP5HKwf8LOEaBHyljtFrc8JTFJwtpWuzeGAUpGD6GR+s6fzJvTTvusuoBG2dflwahMMG4qLYWAZ3uQQ9ANa+qCdcx7HB527WuYYcDnGYqoQpN6yI8ICHUliz8qYdO6Zl8iv0/Q45Brj80UBUxZmi9KdNTVw68Swv7KfvZxy91UDt4DLMt/wyYtIGScKnRyXqx/A56yzxrm6BYDgih6ejv6Kj9cYzRUgzVQn9SaU3UGqI+DEcElwfKSLdWG/Tcc1f4BKK2ScdFZbjrIYXDOFYzJYsK1z9PbmB4IBXmWXRzcvSO3vSjSwUJe6oVuxVcMSI/1I4zkalOy6sjekcx6p15cf2jLqQXTP9XjunOFt+vtKP/FrQMzVyY6czqLOl16/+AVtkKwrLkukVfhXAXYTlWRQ4xvmgXizPS5o7WZ0NmHq+Om2YCAfdPNF/Q93//ZystAr9MNsDbAJyKN5xZroeXAD9oEKIuskAD7yvtl/PfLYQgDOyGQvgvw8Ewb0q5ba2kf9wp7J6ZxemT9zdBdjT5mqx1IAGSGeau80+VrZ06L+9DDFU7sQyZdpj8rC9LCgUPG+nLSosTRi9ZHd1cflNXM9xjUyUAsUfKFQMPg+Aoi4O1zJE+RGbYncGPnlFelvdUiwa2AY1rW98Cf5qrm6OXaiWmuT0PB8r0CRi2ZFOBq0M0oHslAoeS/s05fbBU1s3bCF2oL/DaJS4HA1eTiyIusgnCPHfaxOZ4Qem17ReFTbPHRMmM2xNX/vJQMA3PG7IGyXQHmu9SyQ7cIzDWRxDj/KIM9KH7Phm5mL3OTiIHc3mEHYuZVj2pIQc9VaTgje3+64T6xGMUMj6z7EZhNBmE1oLy74cqVaW+Ta7ECnrUtO1VRRt+hOLLEP/86xJpBFIzZqb5mC574yKK3ihH9gYiP16d9xW/IZIw6maQIlXBBbYWVoEyEWO2CbkWRLRoFfHbT1Y56dVH+QBMOL9Ld/+IFyRv8M8jzo429YJxNirbHoKzi9S3YB9NdcfNZqwg3wUCdh2cVl5vRbpO9JB3XsB9mv7Eq7NaPUvDs/nUirXlW3Ss2rlwpbH1R3WWOQuWYyJ6/6l+SJpqtk7y6TfQtp+EOKtAeei8rdcCT8Td4gS1iLHGMv4eoBYovRXDglUt4+tchlHXTB0gMXwWyr4vyvsGjqMuiwyZ1C6iGulj0o6O+qNNdLYJDSWUkS2dgzIvKlAGcZci3Oni6+wHAOMgx5ZkrAF6GZal8EM/D5v00HWtbHYo/NJhTt7nVWdOXfXZtjrZIFNpR6+WyClbzqs3cMY/dIglCPKyIDNYyOKX0HP5W36Th36tmcvBh08OWcWJRDse69ORA2J/8d5CsL7qtUXCR1+WaM6Cyb1WjQ63LBUc9oo7w8+vdCkjW7ZiNGVckZrcPKQAPVu6CH6bf6MlksvbrAJ4tBTEPGBl1nns4mwOV51BIQbeRWbDt1OqNNDMTgqdG7cyybkZi4dED8ZEtpRtG0NH+n0TFDPfsgudi+TG7JGWdnNlKA0ZG5G78lTU6Ulx4C8lVeJyC2KTdak7eLWuioEUUn4XHQ0TEWbQAwHU0701dLKLgCUEMw5WtMGhIAnHf0jR1tUj8IcWNTT0+59XB/3OhwSuxvPEe/dJBb75juFU77QQQ+uykAF+Yr9zSI0waewUPFncoT52IH8c5XHe81KzbAxPaE0InOcPCnJnqkIyKfwE7B7ExKFG6rmLZIEBIfDPSKh5BSfpIqT0lPZXDsRO1oLH4CTy3zIg+sAudeijJuAsmeFFo6kGeEHVkexfs5YempHr6QqBeq6TpDc5AzN1lX/9W5m8Tk7+Beduv0bt4ZJRn25NP2Nykyo0KM2LirUtU9JqTvCTV3GJV4MkkGpZVG4Tkk/RW1St72pCqbYgfvpJqdIoq0A5G8FpEpufT3QAFBYU7AGJ4tYahSlkqArePY/COpvk2vmkyFMuyC7pD0gWhND8toFV1h0cuBZNXTFqMqRFq6tVH+x3qJ0VIt1EBrsvS0RfwqpfsHJsHHSkAm1uoaeAU9VCIxgygqa0EbkEjsopnQYwzIn7I/jcUBj64o0V63Q+M35/ke6f6AHjda1doRLHTJfRXMCvgl2Cxusc/sY8hyosbiMQgXb94zs0xriL9pPN1Axq6SmblbRKTUkYfXIwqkbdKFZj2zgOd32vBclX9cwoinsyO83qIZR+jxUrYSAK8yQ2IokZ3bVa9hyeWtEXBujAqgFXbISh9op3bFqJwKvLLAJ4jSsLAKQ9ZE4l+2jyFObvcZy7eviTV77XJSwKTFsbM6Xnxqd/G5VKeXbwXAp1JDcfBTuihcxii7zqDKBNYkGYtGRgUCAL2LbitYUeG5o2yfuGzu60yCzQg+vT2qS2wifJesvZqgvTy7hVHWTHQFT9K26GrhqvORVIEUg/9XwKd9uGJJK/1szYUKWFAh6IUkW9FXuSp0Te+oEVY2azmDHvy5+ZcFrWRH083GzzrX3MgOhBe6lim01ir/aOtX1WhvprnHFaGOqnzEy5tWDY/zuIGJByo/TEuakOwXMkKb3kGN5UHCPc1sV+sXQ81ZHk3DMDzgSZMmlUnzni98z5YdbSGadEHlxU5D3IG49SSRNaWOJJig08Ueu+bwgut7+UwjbWc6eaDTJg23+aQK3fQNnasTNO+QZibxjMT6pWjQsUz4jx6FYqrwTua57ciwQ9tdxhfjhXdQi6C0c4idS5gVykahaHI0RGQ+hd0zkzbuFQA74B0Sy3sGESDEjXvloe+3OxzvPjmhahGNxQlL+oZYDovP/7uacqSlma8kPXPMTQiYAE504CWHIv1QHueGUt84/VY7JTn5BEVBqUm56dzVPfA/ZU7AALJZNglTfkAorY6NNGo/LsNSL2QNoi6+Xq7HGBbWe+i2K+f+X+3GttlnGsNeQDQo9HK2VYriQgdmAYgW/IXgfBxCC3gZTMbtarbXeWsIm2z576K5ukWbqytEjf3JCuD58uGXrX9yzKWt2XX1+O88Tf6SXAAOiQiJcI0RftObl0e5/mTQeqUCrX4vvP8TqvFe6XQD55Alv/hCxtB7P/RKQRsvHmg+s6u172QTTEtvHbyssy4XFVJoqJBIJuniB7B5BdTa9xTGmkKDhDHzyyPAXTzaXOEG9+3tH3Yjtl+mO5cV4Pvq7xwt5d0xnj7sqNov8zNKugGpH/Tt626hpx7t9slev+dcePluS8sdC1hFn2+/3844ssOKYQpztThVnWNdDl071pH+FN3uyBfS9wCJFU+7SlTk39zZnG9XfqOket3aCpNTewpNaVDhEnvEK/d9q50DUloGWT5acNjUnX60aouWKqe+4A45XQvlcjY3Z+4kZhVNZni15uUqBdDLBacxnhQ+cIsvZ3dEVIclr4OaFBjYt5W0R6xC4DEmeAub/fvtTBOdCopSbzj/Vd1dC0WFlnut/AEzlbTl2S8LxqWDGobuqdXkhMhF7QAykrBw3ZEeKkzUTZn6RY1Bt3eTWnQjD4dZQzGi3rWPHBmhQPe6enmI0N+Ciig4yTaaA2q5N1FeUZE91b8vFuHqSOa7ZM2P3VMW/WLA8cMlHlgBOw57v3FtDsnPxnDGqErpgWWvieq/A8twdjOWNftokU3pKbIVAi8FtQ9WyVstZxGL5qXIFA9hw2Yl7W7NfneNqA3vzwkmlYMd8uWTZsKPXxY/dDyfPNGUyMHfqe6GfZqmo40p0mpUfVZbyHuxKGbHW9nygaBF9TYdgTCJoebQPZwt+qulbVUoXkbo5MaK+8TMAj5Nz4dHQ9zaND1yud1yZIPhJjhX8SNE32nIQ5qRwWDtMaSub4YyE+d24cbe3j67VFds93twOU8RQp3kqE4GMui1a0hzNXnICc4NFPRhuGXL9xIRnSZqhctpBqVeHTNSwEDT0q2WlhF7gm8Jmj1pjz3n2hpCef30JFPU3cTUFYUsRAxIgHulLOEVR9yxT1pVK1cYo7YJz65/LOwq+Knwx8QdQ3Mw6YPRpHR7GNtuI11Yp04zbRqjkbrcVwuUz1YoRK83iU34D9sd+lUjQwHZJL7uDoIMqQc1HgTmI5mmfrFnhL22xBv1KntZPSRr3cJEzbZv4XiV71B0tuWk7Vcf5k1yzVfjioviFpRng5ZmAa/1EnTEFmBFD+N545sYzJv4V+TfAYOzk1psovKb4AqaHgP7gxDpcfiOvhQBMLRA7vxcmDix45CJmzTnEGnm7XbT9PYT+cO+dPYay96u8ohBme1Ccec9PXBYGLjCZYEfQ+vvK7UUiqVcDDW5al0/euKvUoKNMrBQN04dc681tV4CvBvW+fHLxwjTc0UvmP20W2qhKp6sq3HRXlFYOTOPRDyiPaBk4lm1s+bSY9Botyd2nIQboigVOtC4vl+CACBJzloNkIZ9Dhrjd1/B2oTwQCS5ZreBtyHtwXPt0tpmaju9gYr0rYVbxMS9KFfb/XCnmj2+Br7129CKV558B7TtUsbZ5XPTuhyVEuJDKIl/C8UWsMDwd966A9Cqmy6OLWvfF3HHFtUpy2GKUP4GvM9sge9gOAGRFVCCh6V61tLmLHW+VLBLC5jpFGcyGyX3LNHdt7jmhEgr2kvK2VKxCOlsU8Ehq0mTI2sn83cH4HSFxzMOIiyFehzbX4KWGHHMOoDjnh7bRyNaBZcgneQVl1Bf7gVCEHvituZI/58cR/3iO/yga4p4vRpewX7iTsCQ/rbJUffNWl9NRQX7BC1WNE82/5lyhn+O3/zu41NBVW/UKdeXrwJjMtOqW3hOYfIQFfMTzjFFAuzYNzOEbYiQBXmkhhxsxPC+dkHFvYzk9TJUNmlISoG8RyY0Z7VKlo4uOXNS2ZnMmyfsObp40KEQ7c/YAop0u8ZsL1Z+V2F9jmCv0PzLWGMTNu6rPf6jG2mXVQ8W7tV0lkIPI1NcJ28LX8dsBUG8NWVUU5VCxkTRMdjtFLOD1jHN8rRRS7S+xED8akjmLfsgP1eVZqkkJ8d6YoUYTtidGqiDxEZdYzA3teDnJsVYirfxJ79rSGL5c4CrzKP60DispPdcSesX45cVjXdceiGHmm8uV1AQm/HXfdlIkH4S4tAafa+ruN0H4R3XuLUKGJoh8XXwFnT/y0UAQdOE6XFcPcfWU9RchCBygIvZAw2esWqyouYYlGchIp4LL9woq1DSDJwBUwS4mpaA/x1Ide0VLYgsUFq4d59EmX16/sLJNAZ0zub6lXtO+EPo0We1NIBZyRWdm5HWMciNv8SKGdhqYi6vlyIFlkX6K+EHVU0tSbfn5IcvG9DnveR6/tSgAhBw34ml5G2OFrTFUM/FnSDj2O81I8dbXqfrwYYEPRWHdSMnp1OUYWPsmAFmMYBdLko2lPgcHepwNmipeS/OrVmSJRC6i+fkV4XQKKelGKFOTw72wso6pHYrIY2MLZ9JGAF+QT+DT39SirLPpzWCrzjtmlT02vJxobck0FD3Jzr5E82s62fwtUuwlkGiVPH8ovA9LhEKQ/zSnbZFHpoOGuxixISh8qrPkZ4uekr1HYxWTWvayU3hufDaxE+6UV1aXvXnTrkDA+YnUwP3LzK52VU99Ds3aZSbCfNQJD0pbB+s8PgLdFHuNzMEQ4vfNIOCTWg1uFQiNxfPKbBWoQQhovScZxUgcCCnG2MtX7w+hgNEpskFDI4yH11I9obkKnX3vAoHyG5EEKh9lRcyRby+N+tvUIiVvAgwYj/Ps3fw/Bm00UvBPwvkpKhnaPng3STk9D0dBn1NNm2mHVXAmqx0u3gyAmo0OlAfiBIMU6N3RZkUEk6n9ywxh31a/mpWu4BTiHLBUBX879BALxXwiP6Mg67VAAhwSIb5zjeOMHaUICTDkFIG9yUENuMTl7Inuzr3nebErOl7h5rt6WRL/1C+HSTjl/ge4myepz7OfmmIE0uF5XVoQ4MFQorFK279FkBks4SjnPsjS+EujIoFMyK8JMxw3vuQ2QQvlqlamm2vV/vWuDhcfB050YE3Eb9aOskR7RJ5KRZ/3ZuEfiOKXOUgAjGkV6+ZlWa0qC2zpwj44dSD3VPsGpBRNGylQ6B/R2TyhkdaW7oKoq6n0N24wobnqY9jfTUC0ivtNlfLMpPzp32c+SNt2oEjqs6ZEd8GIx9lwtC7YEIVdBzyDcvlD8kByszfjO721S+sXAyvlqtO23+7tYjgCdkGgy33QDDD53YhA1EDU/cTNea/HO5w+IkmfwE6kfuB8pmCCIW1BJYVbSVR6A462ReOzYPcW9b+8A8vBp54XbBGb6pjq/HvW/dMUe3zR8yGWbRQVWeqsXmK5KlVJSfCWDz0I5HpYlo9WbQHzDR2mFYU380W/3c4zccOGBGGjwFjsF6FiyoCbPcgbtE38yMEbrAa2Vx6kEaxWEp+SAu3m6p64D5KvbCMzs9ewwGbYAJ34mU1004AvoNBNwvUIVQ6On0rzZMHTZ2v3TbmrRXd0xY29OMRTNWkaW99SDOEub0c90YyRzBSrSkdEvSaJBSKbiT3lzuhdPG275qbv1KjJswMQwTctKcbmFrilnP7ZBkeHMv0vJlX/JvYci8fqhUDCQdY4YedR6IHVPuK8wCk/zsDbtxh51N+XF1W4bc3lMTSa65QrZQgWDIw3DHwVddOKA1ICNOc3xo1OCzB7sZ1bl4Bllbcu8+tDlcK+NpnA7VufafMsRVygguZXEB0T2HaGPvbHp8vtG57ux1CfV5E9cbrMZRUua47QNYTtk2W7MVjG9Chvjt4Eg4+BoiZuzqoADaW0CflH5p2tW26Ed1XVH84V55Vm1w5JheGHNgjqgvgBYEKQzBOs7i6NclxswKmI4pSIo69KHWwpMKfopo+70fyTMw5zPShNfA7d20gmIAV8qhEFSojtXApoT7z8Se67TRahvhLVuvJvMD3hMemhANQMOjW/aDL8C5WDaGl7TnFvYVmtsiWdY17JyOps8MlYMJLDWsHy43CmA4hW8hdtA/d8xWLIuJxW0WxSWIKNJFFBkO8wkbkFlcr4kD8kAr+EfoPwtTuUci9ZTz6VtWCPSl2uLh3+y0btTJ56cTTH6/MSUevSRa4aa/a1haR9qwYNO9slqCSgq2bE6DwKDeC5DcWkd57y3beA3hpnzaTKdob55e9tbGz0NoVScOCi2QSlCHEx0pr7jIzFhvJkJW4dZsAIZ5JKKuZuJCNAbWjX3uKeHV2DJZAyHT3jdZjptg2Xrnpq+tOhTvJsfpJNUi4oGzAglO1iyCRB/4hjelOPG3AcmIqRTw1nJm3sIUrn7G1Lb4Ktt9KJ8P2C3T1gB7kRhHuRxKEvLc5YtBPXSNbSs9FojiscizCB5sVj8LvoynurBgEGge7r9Kb6HVCMQKLgf5iWa2N+WjbSn9mGeew03zYrKKANqcv8S8rU6H+5xSY6z87TBphsP4e348Z3s/rrobVsBNWfPkM27UpCyoWnbT8Ni0ZJlLFs/y6i5IDXeWU/XdizWePi8HGw/IFZHKYYfqGqIAL+4pj+M2TP//cPQgopVvIv50A+/oIUDpmDXImniGNvufS8Hub+M6rXqz+QdtoSVMucRco1qbQ/Tq3mnw0+bxKMY4vI1YwDfiTrWAw+syKOrYABclIGTj67knvObQJFwrnLIHjh1f42azaQbzJW06n+BpmbfaJQgmI1t90cDxjjXJeufz+P7W/ptxibetN7pDT1rMjHmygzvBldIOW/XuFc8m9j0jmZlFA3gyWXt8nAjwQmBKfiCD+nH60tyBOJFCnQ9R9jKcbWk9ldexUfnYoyAECxmc9QiJ6lagLh9AJQNvo0s0KMwq+BpvEEOfJ7CWU69oFXWBtxj813Pm8qt0OM74OGm9PVYbh5KW4D0CFxNAdakoXQtpoV5LI5CqOOkW1Myfbei0eGiaQEDK+ZNZS3OiWwgaho/fNk3LtupRWD8vlnprmq/xqrOtDs2reH15N26W+baJGZPEFQHeAHbJidi3OGKC2qeC7dicwobYHKfnzfqHwis9ZdzsI3z+uTjUtKCmxQsk81DkZcZTOvaeY4pwxOS3MNSSdMcYFvAb+J+QqOUdQFQpOtNwhrVerWEnQ/qufEQyNLbXGKjytEd6uiRvgoj4P9w7IefwX+FkCb+kg49FqOkQ93ToeSbttx+/ekbbnjSL21qq0eYijRSA9umSZ7jIhVKyfWbRA6Tsy3omyr2XdEtWazW74P90pd6L7+FSHHWf+35+AdqIDIlJ9xumIXfDAhPXaU+9gUHL8Yp74A6iy3JMJOoObR5pkkxq5JknizOvBEq3bEii+138qDaxPMgi05GjegPAplU10UZhmtOxd5TyOBmhRNx4M0ViixCYGTEq86MWrmk6NuvZKtjg1ITAd1zs/j2gF9/weszV3iTIk9F1PTuS0I5HjqrLKlB4s2GHvTCWzvAB5Vu0wEQvU1+pIjtLYhn3oRKGWoZmMKk486y/AHgaJsF+AkuhP8i3ZEpRRixoPOLj9nqMF1eOWjrsIXDJqCziBdezFDMCiMcGbyJIkho69km4AgmcIjDI0NMwU1tlcULCbI8cKxLMV4yMwl0YWxVmF2rCyrleRl7ktp5Qim8Ndg+R9ts+qamhS3vIVKp1CTYSfWBrH3wz4PkBJrjg/GFiSBpoUfmZqNHpA8s5XerqGIdxh3o+tKXI3yFPMHP5048tfqq8JzVCArDJFgKyXarmsObMF8/aDW+srSUFLqfXm7eeVv5KXm7B336M5z4Y7f+UdeKkC+gdMNRdj90wOGMAde1ZFx5RWRRlMO7MVIF5aJju0xfldAAigWnxf43vZ9tkC3hxqSL9JDfD8qP1sDW3on4wvkvImGCeEDUrZj0cVwll9mt+/aBS8v2/GxCBlx7w636ejQNNcDvwabvT2JkiDvB8KbmSOCrV0014cAHrkl9uS5pe7jGSCfPfq+2C/WTjcdt0YBfn9cW735glkzZ8k5rSX6PX+khiRuDTmDmZ1z1K0IdcnF2ivKIeYxCzmZtZbeN8RucFYWLZqAEqLVHoaI/fAcGVuTVCMB2VPhO5Vlt+R75TB8C3dffkWGmbqkHO1ue5jFuJRSoSwkJ16Y5HdswGYkw+klAf6z3mzxrgNG+rCFPBQo/0whM/twDfDrotd6e+jBpkE7G6rbFhAJKlahLMSeXzDp+s3vgozuxiI3OYj1Fw6k/r20QXZYvbNx7H8sUOJyLYQdLzOpoT/3l6xwghw4DjMN8HfoCxD0RW1GWruGaK7MphjIrb1K++rUWohQ+rlNdXUh+d+9N38uaFvzGyKJh81l7WL8W74u4QOcj2o2eX2v/Rle1lwi6f8xMxRgV37qwaRRX/wcMD61kam55G6xbaN8JL51Cc1FdiYudLQWyG4mTDMQQFk5CN76YeYAX+uthltMsf8T36r/Z4HSYX3/QI7pdpMv/8XawPWZ2wXNs3H5tofzMlxx3OebBmzEz35DSQSbIgbSFpGfHtOujJTjab8L6DU4CVf6bmgkxbr9IsrRVZZ7WLnyUa7T1iEQ67dTIBiXGbn8Atjf9zTpuJ8Gn+VYCvJ81+N6L+BliNly4nSyDOs9+ml8zynnyXDIEML8i8T8D2IN/VQS6P9S3/B3mOMTqv+UwzzBlLHfNzXf7K7wTx32X7DDkiTro2dGW3QWwwAH1j/nskWOHl1+wmRuRMchYVMh4EcZd4d1NeK1AMIy9kvgarccnBQ+15gSnsSJvCoudIPD3S7+d6h4NOjbfnAgqJOReVU9QvLiZTiIS8tDWO0xpNoSFqaFVm7GDEcnFInf3P19m3nuHxkGzyGNLu+Gkn6Wp9AP0gOr9h5o7L+ZzwrG7pdLV4LaPrSOigzyBaUKjVjjhcoHm/Nj6L8HgUOj085UaIy0xOr+9ZtGK6rdH1ZkLRi/eBJOm9AQqD28QVCl+rb4u7Q+tjErQBOVe3E+WXsjXT10Z2Y1dogbosHKuWE6Zg4SbaaCP9DptNMTqUHBJUWW0eBsPKaXY3fLEEhC/ktwmlxgR5tQvHUWED6zh8rNGxFl9uLVHJHgFF12uaJDOjK/CudNAMDPKJCyURuGB0BHDTTvoOVIXWGJY6JDEvXUHO+g5aiYDzEHY0/7R39f84/OnsoqCnUajr9UOUBjZgFrR2izsiVYuu6BLNc/PP7DpyeS5yHwmidj5ouoMCb0M5wTXsh6zFsQBgxN3oG4KSey+FpIMXH34ZIXm5+pqo/N2FffzBxAD1bZlWt/XoXEveGplxjP3p5icfpZ/61tPK3E1JOZS1AtKdB4IrsWxyKMJCvT/VJOofK7nOZFFGYEZU7FMRmS+LpXjxoDSvzA/9AX2irYOtLsy+eJSPjnrFCp+52frS85EDPQnxYgi/x30snmAt7v3m2Bp1I3ZnyXQyC+hJj5QbdhNf9W55MPxRSwZxhYX8J3vHOw7WNsoRjjSM7wy+awD70Lz5IMGVfEq92V/szXTl0O/rD5NUka65TBzrWHOvSUFeaMOX9nRAYVPDyxYS+HL/h8WUmSE1t1FVGbk8hz9JF8pv1cZ8mO4qeXPAOiC5W0Gk9l55EC9poVEo7GfPkb+q2SJ7gEJMoxg4uhxXMXTqnMHJ97qiNfMZezmlNFMmf7J/rTzT+B1GOdPZRVKaiaM4jVYCJ/rIuRrR0hrc0tVZPMFERBMFG+EvvCkhefuwyDxRSzOISGCn6lMdoNRXixKEfd9oWwc9nbJU84okCun+cFhUuTH2O15GDRxygRrdRTIWmoMJh67e8giBSUs2lfD+N8T/d5kP1rNEwXdduDfp5k8NmER1d3NTL66Pu+ujKhDsHa++7KRI4KltIcL9AhPs0NP3fmo0EduMv9E4nl7EA8j8PHJrkKDi5v8rD8waX6X2J1CC0aQMGNp0hwaRJ3redjkTDvxmS6nFjxHfqPqILMnfRFO93/4owftBh7BM/MeweZsWQ42iIF8wRCYHK8hQ2wwcPkcL70R35n6AgGsy7Nr2g4Y1ISha/RZwv2igcXkrj1D6iUePuQ0/8YflyaalU9hnBBSOBwTVxeCBuGYZbvWoqb19MG+aSbMaFIk/WQ6fPDeAgN1ODT9R23qFUdqUaw1NAHmaDM9Ma3f6ih6tLGlkwqjkY+OJV1V8OqtiuSDztO6KU3MU/1KsTyUNgnI+CNsbeTABaSLpg57iKn3WoaSO4qmENYgbWX+L3RT1RwzgXWFOVRMbtLaymrodHBmBYZlSq9xc8PMlWoZi7hGm9Fa9HE7trVMbGhC4gsc1tm4vEHuOen1k62vMOYy4ninF11mbxJ35afG96OPod7CPPb9rvmHhvUCDm8itxowOFWmQHBl9WuPFa1Jn48soG7ZjrYaFvnip8cicwwsyAudVGvi7QpBKGhzmQRQysjhX6nJeYTCQAXsXZ4AY00grgasQG9pKlPRwAQ2oajSlmR7E0YCZsj4p8Y4JX2AJCN6D2waZ0Tp4GEj5c9PRed0c/WnIr3nYx2fwTC3Q9kygWH8hKPMpq2EMB2c9wcoEmuJO9uDldUaooPCdYaStwdlH2UjK7UFFXk6flRrjRIIiYwT7kt8P5C0T8qjUXhPuDm1dh4sBCirvkdPStNhw+OrNfotRUcRP4gZLB2duzUNRGN3PCgEGcItjsHFZaC0s6ySucuJOG6XXgs+3ls+eTRB1f5ySU0HWHj8BvMcHl7cQKaOVOi+ln3zsOqJn0rdMzSJwVFAebVh/sbSMuFFowfWkra8jE1fNHqT38k7pBow4PeFAmi/gU3pmEz3BvuMW9WrR7ybu2OIdRo8Cp8vfuez8NgffhkxtlwYuNnoWbh+is5QHqxKKEOeVMbYL++enO+42tNHFtC5gysZuspSkjCbXTupw0Pk7b6Bf4/83wFLnMBQ6/rHVGtzik7z1QbMEeCIOi8GXxs0TtmITgLHIbPS75hssK9MuVGgZmZGUYfmx0FnkCfDdjXDnVbOw3WPhkvKWMTreO7Dxl/NcMKVJDSbCLjCjHHjl6UV5j+einglDjr9Fj+lS1ACJLLTmDaR8Fb+Bvqo8PlDHJC+XKY+IW5ERTbNotNp8iLqsvYaRhQ6QevtMgiXBwIXI955I+YS802lcjHSP1nvZtaYlEYZ7TGorFpv7EWVPKF21x45GjN5bL9j1173jPA97JjAWF8WgYRUCGrPkk8qwBOmfEpnz2AFTlz26YYO8FnkIoCqmKXtKCNYM8LV063I8D9a53QuvqVBeirzXvRBRGEMag2iGJNUnPBPV88Vj18Prcnbf0vL0Ta9CVLnt0A2iXW2DiiQlnLi4RcDrNsCKOAJ6t2BsOhf2kd5mfF+Cquq9osZUzc9/xb4FrA51SgNVeK3b5k4yNVSz1UQyT/H9oqrGnEa8Qr4tb57Im/kFl+xvuWPd950CziP2Dw7MBMhkJIr6X6rLXArClPIGGOIKGbpC7Bd5JvPqUTqJdPLZHIQThUll8eKY+T43ajjbkWmipI+9CHF4b4WL6s73jiShcf/z+TFnkJbGv1RBOnxRpOprA9bMbvhgFkA2ExCz5aWPBWtS9Z+WEoVRj2Jl/E38tfkj1YOPtniLiUssSqMNotzlCGwZhhDvD+ALmvcjoZVWH3VjbljJwXi+foOcH6RK4cPaWKecMlIZXxYH6L6t54KRNbVp4AK26VGkOZJn6BFOq4eSdt3kcuFhiKknm+u2c8bBUtQDllfgPMo3FlJBSqwQAZrSHlZSBgm5TBdtu2LA+7UXdyDLjJHdL63X5+bwyHuiDl9176RcA6XZMC2Y9bCCi8eqX8gM0cbYdLpWQM5dMR6mCK+KoW4qAvPTx0fisPGnwB4qSMuLrv6USbZShZPOfQc2GHz2SO5NA317QZPnusmqg8Nwkvq2rWOVHfWyhC8CqdhlRk49L3EUc8+FOJKFltBM50aH2/DgQhpc67I8zc4r7avA3uSFadw2LUnrtZjckZeES22WlW0+AuXlGOTqcCmDJCuK06TpVjcef5H4+UF/R/Tk9SAWkW6xvcV6OkbGPUvhNec2uuSlXH1Ov0sZ8rHwGsO4GH9OgvifdgJOt8obkdBPyzutL+FaT/lt99cHiTFYsHBpprVfi9GRzGxjhcuz7BL7oHs4CdVvRgp3XNrFKlebQjh7rKlAz6dch/eYsZN5RfKHoptVhGHn2NF6mnLSXN57Ob99UFtrZubwuv+H40qI+KFzwLtDAVRgXXCx4ceL8cFYbUCaMZwNsR17aEj04t0v3rWEDsvpoSoW94WEZYfYE/lNhAQNNpZ0Ty0tEl0ulvGMyCLMfjJqf47q5C/8UffCQTKxpvRXhzAb9AawR07/mzerJoTBAd/J9Oebv1pQwXcO0e8lWc+soiqaJDMjL0EWNaeud3GRB2g6uKtMufxyGpI/rjCBBW9rfELHVnYMSXlX1GLCcFtuTag4UDZVy+5FUabx5rYCl2H51XAt/r5NcOPrAB1n2Wrj1ktPE8ymYTv7wtJ6Kzry1oIwvy1lpGG1bs/pv9c/h1m/3qWGATcMKTHaAMP2CdzbJPPqOiy/O65+xDwCR+IWBHfHyGoR0zgGPTk/SgEM8qBrroWjTyRoB4BHlHI5OfrggB8LYY2ziMvcho6BY/d36rTHlBHOxRMWz3Vn1nYpyyERRJ7iY7Kc+nUXMp0o83l8evKIhT4qNShiSZMx1b3xYhhs8ZdVwL5XRiz9BHYkH5uLq4YimOrxxNS0/MF5lNwjK98KasEdAnBRODMeNPsl6VJL1+QSh53l+WaTUYfitj476bzQCp/jTtwftOCWnzqRgjf3lM8PBRD0QpCjQyk/O/yOif/jOWM/kn3Pz0u5L83M4vj1a1yN99INUdIyi91ff50d7triAjO6jev3xLwSGCMIrKSwd1OjJoUKt0YoFNrOOv4KrMiGJAXQICU86WYHLhkrFfRcBUb6m2QwnlonWuyplLo0Jr7RYtmBY4YRzV669bVWpeoL5mvqG4DVhLygJGOz/0UVoSm+YGkiFQV0j/NqCsu3J26PDfQ+ViXJLxz+BjGN3t4kEqcvfulFgpp457EqTQOZBgl99Zk6uF+0E4wpGDCy31ymnawe5Gub1MjhlqdYDeyJ9P8AIk1H5y4596gnFbI+YuOiIxYac0qSFeSgM5EUxD/4F+anCx/69CAu397gUzqfggCLveU2PVSuclY7iT/9necPcCLZqD9Defwce+wph2jr+B9lchKgQZ34SfYQyCQsA+PmJL7QrhN8UUn62L9wzJOMsZmWLy6qKCSKW8zNy6snatTZSfJIzVJRLS+L3rRw/svL90Uzy053JnO44ppKdLsxpQNBoGmBYBsHEu1q/iqCyXfXQJpwLu2BiKtZv3sOwsYbpQeqhG6GZNY32KSgQAGQuh5+Mn2qR8nDoju/MlHY4TjupFS7aWwqwzqlApVkU1r/Sk41e1uWaa1X/IIzAypzIX0W1eJ9N7AzrkL+jNMJc9Sy/RiWgjSq0f8Q2Gg/4sPnR/laO7okrojalMgF3UT7JkmbVsnEdDdixPuTzNk57QYpfJd2g7iV06U0mrRSd961qV2TU9UvoEu/FhqmI3yJsXdEGqPb/RfTo9lVQCSJ9YJGywa6st+E45/kaLb6GMGcDl0+sMMN8WwZoxlkEGI3hDUUhzLh4r/jB1TGWKPsNvop9AUQx+jIQG5MttrGS/+CK53qU5p3pMfUDRRSUbp3biZciEAa7VDaO7AU27omts2DLD8LjtQpHWalIPskqwnaSf5hH8GfATgHuEGPposvwpdt4fMtqWjBylqrib3Y7PtqpTeS1MfB5NibkKfQMe74vFUqFoo7L6bTzRJMvegio9xw0gWmqbl2F4ZtLpB0i6pegWjNHbMVEMM6YMJfTaY6q45SXP6PR2+4qmKDMDZwfu8zKtSXJ1irtVUm8WbPJ52ZlEbACdITNhI1/IcasJPDPiqknoTt1Z0XctHiuqssQJtvzlATNvxA8d8BXvjUZoMF6zz66arJfXdgQxapl1hywA7/onaEpactwSZhr98V7/bk/2uVcOUA3UPfLoBB8TXnkv1uLDkfpQwZ/mGUafJ1B9jg6CUi4yo3MPfFvbebi0UYt4FT1FymyuqeWeeOqewrY0iUxo/7a9147AtuYZAf3/yhj19kNWKVP3ffSPA4sEd54I2mbZXDfMxYaoVK/qcmRBvPrVxYEXSu6MU1hUVrsNWEWI8VGPrbFI5+oq8TJWZSIgBAqRQgyQjBdjhTDoaPgfC+KcSNQe63Ow/c/0MXB4Y8d9PNa1QuKPxR33WNq5jEtC7Q5ebaRa4L9E8Ky6HRtkmacTcus+GHIBUqlgGiTYm2+m3D41xHCZJFfYhwMTfAotkAZSSxDwlxp+U/6ODM1Vwq2NEIBbm2cXTh7OMmqZ/P+93IUguOJkK9Ex+KSzYpVRga4hJk5glZSK7u7Qg05exAP6kv7l9zbDP7CrjxZWo7eTq9Lcr8VAvQDmmuzHWk6CpJzbI9OVF5V+Z5A+2DDvgI/uw/KfvbJvE6Ja6uXfMJdh+1HH0NhON4pe6etG16zTc1w2ABICN3wHmdA/78K5E9iCuFXu3IIiJ6BaAuxyQV9HmsxWixiwre5TGrPVGjn9VktocLbcfLMf583Qp4Ehigwhgxk7UyLzbPSdcE12DuylBm0MkmQ0Lj5gMhqSUe1adJSUU5K6iBoR0YO+k32/Jtr0qNVUCCuoRKtwziBxxg/t9sc+tpdkGmkarD+/zAcfhV5bX8PRn43KekCSR/+1V2nX8eoe/2s2I/xGDFeKUL06O2ca5IIMmBppkNzfycVwMlkmduYojwo0iLvt4zkiZCl2pzceV/Lz0NxXaQ0cmOQhV/IHLfmbxSWm9VOk81D1yD5Ltcq5GFVHCXP7SuzWB9bJKi1FBNTKtwGmKmm3ykuaWr5l075DRg0OwLThaIeIRHdFXspvOD1ckt0e11oSoIwk69Xr8k8vYcXcpH2l9RLXv2ZPsdI2P9VpG+M1VIrPyNjRCWh0QtHzM6ntt9dsNJKmdKPFI7BOO7RU0GxNzIUug8xuksea1WNoRn20UZ4GYIAompOnQ1S8N+gOA/2WkEmJziLrWZJA8zcPbSxbj03Iub6K/DdUiFyDvkPY1CMXPjNvylVx8ah7EwgMgoZoGfVY46QtkWBtyG/xDjsY6v0GkfECKeV9KG1kXCgTyyfmYQnu9a3H5AUpXzHflnb7DHZVsAy54OOkKoA5HaaxcvVHKE3JUmN3kfNUfG2xVBcebZUOPtiPhRdCPepdsNSeglMKd8Z3zr70pO1s73ff83ddY46XAP+/4qopwkN605PTh5PdkT8rJFmSryOae/GyNw9zYRfs+ckKt+Yp+BRhAHhJ15SVTpU/z400H7+5srqtbN0C8qgbh/RDOOW5R/oAlpa8AeTnUeYyUgdpjyiPsCOg6PgdnWm7SBmLux5N6XH4e3DIke/JSSOw0FrevHQpLP7xleC41RYW5rSZShX1oxB+69DbZDx/KvuEnG24tM2gWvejqGWC2/N6/XhtZmQ+Opezsx05W/4Fk/HH+pw37auNM49/XmbE751neWtocV1PE7n0SqX1uzka4lUzrr++3hVWuelcea7zjE363SHstEzDi40aeCJ+WcR2DL5zxYyuZwmbn6j96jQdsetoIay/2+WmAfXeDBYjsQY0ktzGWTikIjJyyL1+tVzHCTgAnDWUZG33A1hrZ7vw+yrjLeVwEZeXEPwACDRzZIU3AlnpQR9zCyXvZ1Ndbhm5EtmFCE149w88jqtuPoD10sril5O4kb5XdiZhnQsSqTmj32Vj45vLvkP6Fj7I2axgblIC9YrXNk0JrxGao4FUIFK/sug7xBG+g/CZF5PZcKoyNSU6fPF6EWlRsLZpZMGF9pemb4cwUrPE4OAINmlFdPUp1ti/NvJYawSAmOs4wAxko5Q0L0IV07bjox3x5CmYZtl2rbmGBke8NxW47lXx8+mPh8inYeExIHxnq6zF854tQsX/W1L1rDPqQYlOLqOt3NCV+utWE8ck3KlOFNPMghsVaIQFyG7NmPiuW4oxEXW1rOhVC+KZP45eo3ryr15yPgbLac+5oIvBp3aIn4bYWUfw/O9RqKnFGLbxm4BCoh6DyvygHoOYbrM7tn11P7eVG0eHlzFo+4aOtKUKi/ZjIEyuhef1W2RLm6WaiVfVVnlnXLeEjlQb8ftlBhxLo6ns+IuEPbb6YXiQ8C9e8ISpuwWqbgE1tcaYezRFpsRRRfpW3QauIvWAbXP5dCWL7sHAokQhwQ0d1RtCJEqbZewm3lvsqgVljSCGoEcY1KegkRh+YDYjzKyVQGP3gYGxNLWBPOzYf24IHEmlcl1UqhlSUl0sqWUtNNrQixNIi+Xpwfcp/+IHUAax9rYGlzpXadqCjunNVg2Mgnz3ouecXzs0jrg+1vFWtSJxIHq2LyzimB5bHpp1M6oKZnAztP6dRkQir0AEobHDar071pwMPS3GcYVXdTl1RYLLy6+PP6Ej8U9HpnkPln+d0B+smm/GyF6ntEUwVEkay0m30cCWy8VqCHwqqiWV+Fu57egNCxa5c6cfhkmRKIQEFlu1CeuScmnT9dylWxyeUDVTHoI6lqX6aDuaOkCjTpirltYpOhLuJ0RtaQTn2+C6/m5iLaq/E6TE+eVjdbEULtVx3vpCvRsuXiHJZEMcqG+geGC8a9h2AoulRcBc3AA0NOarukFrTbJOh3bACr1HtXZgYJEF4SC/9z1NNyF9Cm44ZDXESmB7Yi2VsFFd/xladRn419XfZut5Vpam928/mZAFls2dRQHJX7etav+DHVXuxKjTdHjDg9wNe/dQUcPoLwv+zEVaE//QSjZtLJWIBvTh9JsGwHGMJyaGV4Fm9Z+rGFRJM55RtS/Ub61O6KaHMLPWxvzCnTW3HJ+WDF8EnHx25e0wgWFeWZzl4149Fyzet7HoQGMOfbgvqnhQGm1fKWGx2mZ9HguJMzRHj58wGk4KPlJjiX/LH63ljFIHpnLjp0azi1GngZ1CaZTryLcgLvFAimBc/KIzcdj8hcsX8q82BsLngaNHtFkQt+69Jv8esI8mmMFT5LuwveFiGvblHSSx6EYVIpeudWXUswzeIuZobK2jv+2PnKc3Q9uKtZSnPKPEra6/P0il7JPFem0OZ0kl2jAGU+QA97eLo+7+UR0uj0kBWdE6V8HrAIv1bmAvve4D7D6vBxURNMIP9lw+4WfG7pMiks1RfHKpHzbsSLboItogs2m4KgLNIXtgl5BoRlgtk2uj0JUbRaqCeuJA89Z9+vW5VOvkeJQVECOACzZgiVyyrTUU9hWOfGr52ApCYy32pJQuDr0OZ+2ET0E+SPfLAcmsZlVCr77Qw1RdSdUN0vBtoi6lGzBUujRiUkCb8C26uZyMV3wLAy3N7vtSsPEtN6iYviTAUPerdKWouEjXCOlkAMYVUmjc1A9dAxPGSjqDBlOPhqp03sidNzt9Dg6XkiV59ZXwzJzmsasJu97m5V38/RcEowhRI5Ebks2YnJ6ZBBoW37WLV/AFATzt9m7/N2CkyOCydAcpteTInZtO4QLSLS5S/8Vm7baJMKWL1Kh8rHjHXtn4JNJN1ZWizVKdAAIQh0tieRFw52U4LvIjK8jaEA4EH1evRDEmQi6mkuOsDz/gEUTW1HTvj/lIMXmAdsZAyimHEjQiPteZ5LGSJgsV9Gx9rMEhUn2djnVpxVrLxJvtBgSouqcCr7kmTwHgGEp+YNGh2Ka4p+CYs6w5u8G2D80ES1ryHLxcG8N1VV11i9v28UCbogFt+blvoonWQuhyH0YGNSLtaPq0R/+OqUd3SQS2lPgleNozP3LW+2oczN2xFZ2MbN/gt3zHX9vbjzFQLNypoclr+wD+k/j0/V2KhgQVY8QiaWCuHhgdRHYlfg8uNl6cqo9C9Ce/R5PHMs278URPUNjApOwqMCe3hxsHzHOlySYwN+baEO7QWbB40O0/EFvsGI/zw7BNP3PNMuC2KniHM7hosYG+sECtpcGQcqSYABYv9MnltZPWBrJtBxZXLIaNomD6XSwzfesEDEalnTOEfu6UKj2/OozY8m1thixOZQyXEW+guOzyofGftDFzu2tNd6UoFq9aCgG2F91l9VC5Za5k0WDlJpfU0FBAc2tXUzhLH9vS/C9FYQVpYXjIaroZOjkm7nrlDzraZk5uFjFxn0ZBU/TwRxvwZtPBXuQyPoBjbJkUarj19oucAT9mETESvnH+/A5jlIqCx5qHGhAI/R5k7mXXcIZ7jL9NOf75Vcsthzxa30E/ZtWmxF0OlilBmsAbDKKFDe93VjZtrnNoSv4RiswHHGgbfHOcXCQD2atGJxCYpdApVglqagddrWjXrfSEDWWkUtp6d0eRcAAF9lOFWwnN97vJfR18bJj4ou6Ypu80H/9eXLjaAAVq9JjLwalDX+dN4NbCFjp3ARKnNS4VNbJ0kSRAtav5oikXNcYtXcVYkktA+Ts1GuntFZWM82v4lKzN1EaW3KPC8Qg1jm547iIbA4timmdtFl/n5W9coJGB8UiqA/n78MQjELJYoIp5WE6DpZCtG760XnU31Wjp6mrPGTN2hRx0+4Mo3cE74ZFeyR3WJoIX0K/z/1N5oQR5V+GZtrS/pCqE7ssvFKi3ZRo1JnbHAUzboVH1JrAYNXJQ1G4OETfPxv+1GQ7pSBWZF4U9Il3+C1a+ldZH6Jy1uT+cH89hPa6Pa+GsfKQPd1jjjUrXFX52e3GGF/mkWOCy8b56JlK+839Rp3e2YU5UAcJP6y2qa5F+Ch7EOhRkunyD8de9/xSQvxFD3a6Sl1qRUxgkvwC51kAVHMqCuoI+6/0IZuBrM0YoEQB1vMLOlvPWMkVOraOBanoGcyHLm5Ux24Gi37hv/mAjbjRTw91Q4622UClenBcGBEfoF9BD6p/ChNyP0wKGqTp4HKbXYpF0ornLuQM4PAdk7SPMRCYvXnmm6DWOv73w0EJV0uTGH/UC8a10hdpaShOx7MAKYkX4Yal2ENmLANkAHdWrTK7wC60VJocDzQ2wz9wfeGNBsv6BOtDhturPO5b8JLjhV9+WwCBkohSlqAc/SKCSlxMPyRqEKamefcL6AjUDSPYDJrgQFKLh+oU9Fg77wXZ5FoTfhaWjORN3muTxp1N6rKZO54AQkyWcYyVyV9brh+KvhE0Vy5Ixdw43jlnbhjiM0CxdKOQkh9B4CZQ3dWWOpuv1Rt4aJKZMKT0Ol6eZxugTwhwY9R+sh6A0vtktAPSlDC7ODJXfxh2IQly6IMsXumtiIpKr1Z7EpZOxyLg7cRDOC5XYlB5o2bGmIUNz/Ie0cTSuo05ZNvCHP+yPDEAsR2F/+ELV9WVe+ndGAPAgV1JtQuoOy7Tu0UKikSw+ekvLAw90PPHgZxdFPwGNddRqvnFJHnZ9dBfTLZSql3AlxZQB9UclVAIF2XmGGSoWt2TPCCt4Y3K9K562wM5YoYZBu1UA1l0T8hhYVIV5cH/45b082y+2mlNRxkFgB7opny3/J1bG3PNP+TR/VEcs5ZseS8uj1Z1//6EIEU1zRhYS2ZaMhV3KvIX2Et8GsZf2f8446qXqQTxjPtOSUX3hgo03uEPseT9T2Ty5L47HMi0Z+BkyaePPqlpAxzvI/qjlqOhrw+6HxcUp4bv03tp4IeiCsQOiu5/It41PbHwxpnrzZD0pVI2AQvqvUr2gxuM7jYgC3+pl3Q42QfKx4969SQm/8MSWn+StkvfURaQfHiJzBYJd7ZrViWL+Q8IBP2BkB6z3LuXH5m3SLEpD4ZWQxGbykPyIz980IxTGC9FnIMRaDKK0JZPUWchVWq8jZAxBxU1Wvw51jVMPyQHWrsS+yp8sN45Ga2sda+BI1HZ9AQGCLU3KMSDMXpp9ggbyUkcdky3AMZCLgfU5kCrhkexVCXU3XRZCBWzOjK/KUHiUcKRK7sP2J7+NQnyi23ToXCGeUO6DJ15INjKBNR9EwxTe5JY7ySENMeovHKGiIsKWUF/Z5QtLyFKOG0U5kCIKdwHCZkmzhcmqhTUV/rd+vcvaEi6fpdkskddPNkHOH/Mo9Q7hrxm5WG1VHxa/OfF9LgQYtCVTsde7Fx6sD6AVwpZwohx/K6boO5t4YnJdrG44ldAkaoqv8QzDTXSbLUyDdOdxA5Tn5Wt9l8ycNfWGms7D4P0k4HxtyrQpAhFyu5Zqu/BCAnyb1wOGi542ipyGAAolb7R66DQKJhP55Am9MuyLUWOR5IRn5NWs+elOyzj4Rbc6w7eK1z6rRRqF0w0+WVLxSzAWCAw0ZjCCPP2GjnQh4RZA8DWpzygPxF2SjnAao8F20FcXnAPxS0yLtepIErgfJBRgSPXdI2LOvqM8DpJwAQrztsgqyxfL8xNP2sZ9Xnu74OtFDp48egGr4y0cgTCv3gSZab0dcgzIfTklA57E1TPKRs5oo1305nMviIni6kCtcr2CVuVcGeZGz1ZvC8ro3NcemHJC+NFBHnoBsuMiZjexeS1q5XNWyZeikvUQu+b2KMDkRqdbif6czwfN9+RqTn0fsvsK0XlBY2HeM3qKWFDABHdlRsH3hd2sTEd87Ysg74FQLltykxNH6FrQE4l/KLlTYPu3FHIkzuZFyjlV47UhpmUsryqa58w4ZTKbajm2G1thS4PKymb6JqOFDScwH7oDhTOYmz5RPxvqGDLYwGkgpvO908ZguIg4+765DT3/LPuRyhSfoiTtCaDFZ+7L41yoO6cj8na1kDwV3WC2rkzgbVF5TUQBa25YcGbdx2hVi8fyhAhnwbOIrS7HJcsIRfgrtd0P2gqc5819vDU99nu/LE6bpQ8ohTs4jODf8IzsHMqTOuBbnbIqgRQ+ctEnH8kb09Ik5tIBFnfs//7745+VD8Q007buzznpf2IV9nmLmpNR9Yav1yea+RHTSYrUoOtfscAKY93OEhcUaoCfIBdvDeiNjpSeXzpWtJenav9IJH7E++frBRaICMN7sseORi1NG5u3Zq0C+h6R7sJxUe+V/HR22+C+pg2nzYUbjhirwt1rHkNRgfQSElHmxStimjvQs5SXiBLs11dWlaoz5OeygxPZQfHGrOQuR6MLLLHBSgrJBK8VabhZKezkBulSw0qXb6BGm9FsvyDOFSRQ0Q7QjglXRVrO9MDx2OK7reBaREB5276L/8vQ5BS1lL4mpSk0S3JqppLJ7WAyOuhSD7Gc1FrCKab4ocBVegkZYDtaEtpdGhZl5aa4MKfP3Qjt607UBg/Ig7uhXOVIyMTsRj7zcZxK8nXCZ7iN12SibUr4ux0FKqH2LYdOY0gcewMrGRO8eBQ7FKe3YQ+oUEIu9WMTPmSYyOZy9m1pH42XDKONewMJ4mJWZnp7n48SRcVyu85nojoi7aPEYmevixI6tt6cJImHdly+jTqye869YxZ8rIe9N5XXAHS+iRdGFlgaOEtDv6ECCD0+uhMzZ+RAeJ+qosxYxl8MwEGKlPoykmAwenhQDZ7fXCQBgBkgJPcpTYTqDMLonnezK6uug6FERlNLbSlHuyF5vPZNDbOa8Za6pVhEbZmPicv6xHZdOlQVevG9CKvJZX8Q2cKN4w+y1UwJIxJPu0iHKCQWUkdt+a+TJeDhMY7zre0V5mW4mhnJpvOoLjBBGwZHRfPOXVOX144dqWeSHzxk8kZfLRDEB/Nlgfe3S2TtJ/rp60cRvxAXZSktb2Xv11EDYivHp+YcgGeiOiqx7xXhkyDBGGog+pYm4FzBkDgc2MahUbq5KQTUShkb3trQcBw7X/69l5R2XgjI8IroHsb5iNdvdpfE9/riORESAcSq2462cvz/e3Qckl/qs6/DHEzAGdQHZfZnl/BPUWjeHKv4WKLEwZ1btVm3vLH3Qe7SwJ2mFs5UChaGr4PUl3gHEe820o2Z3l4Yc1IipWE5WPzF/RaQUg9PbthUmEyIJOPHjSnfyPPzAnW1D5fdE42jXUVtgrCNOpJcPS+I8TKKiEOzC9MOaH4H3r25H6KQsfIR9 </div>","site":{"data":{}},"excerpt":"这里不可以看哦！","more":"这里不可以看哦！","origin":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>​    今天是十月十二号，阴，天灰蒙蒙的，仿佛和我此时的心境一般，此时我心身具备，虽然在国庆结束的前一天我拿到了第一个offer，可能也是唯一的一个offer了，尽管这份工作是那么的不尽人意。</p>\n<p><img src=\"/2019/10/12/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E5%9C%A8%E6%AD%A6%E6%B1%89%E8%B7%91%E7%A7%8B%E6%8B%9B%E7%9A%84%E6%97%A5%E5%AD%90/QQ%E5%9B%BE%E7%89%8720191012190626.jpg\"></p>\n<p>​    我呢，现在是三峡大学计算机与信息学院在校2020应届生，为了秋招我从今年5月份开始准备，当时打算的就业方向是Unity3d客户端开发，哎！现在想想当时自己是不是太幼稚了，完全没有考虑过就业形势，而是全凭自己的兴趣一头扎入进去，就开始不闻窗外的苦学。结果真正到了秋招的时候，自己完全蒙了，去武汉大学和华中科技大学的校招的游戏公司一双手数足以，去三峡大学招聘的只需要三个手指😂。结果可想而知，九月份奋斗了一个月，也就吃了一个月的灰。</p>\n<p><img src=\"/2019/10/12/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E5%9C%A8%E6%AD%A6%E6%B1%89%E8%B7%91%E7%A7%8B%E6%8B%9B%E7%9A%84%E6%97%A5%E5%AD%90/QQ%E5%9B%BE%E7%89%8720191012190452.jpg\"></p>\n<p>​    我东谷伯伯说的好啊，穷人的孩子，不该有梦想，带着梦想的穷孩子只会过得很累。家里没有足够的经济支持你去追求这些梦想。穷人的孩子更多的应该是考虑现实，而不是追求兴趣，选专业就应该选好就业的，无论兴趣如何。因为生活在一个穷困的家庭，没有钱是万万不能的。你需要的是尽早的就业来当起这个家。可笑的是，我现在才明白，难道我选择专业的时候选择了兴趣，选择就业的时候选择兴趣，真的错了吗？</p>\n<p>​    九月五号，我和儒哥踏上了前往武汉的动车，两个小时的动车路程加一个小时的地铁路程加十几分钟的滴滴路程，我们来的早已预约好的租房“武汉市洪山区竹苑小区四栋一单元302号房”，涉世不深的我第一次被社会割肉，房租交了1100软妹币，押金交了1300软妹币，大出血啊！从家里带的5000软妹币瞬间去掉一半，更可恶的是，第一个星期进去仅仅五天，水电费就花掉50，一个月下来水电费足足花了200。</p>\n<p><img src=\"/2019/10/12/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E5%9C%A8%E6%AD%A6%E6%B1%89%E8%B7%91%E7%A7%8B%E6%8B%9B%E7%9A%84%E6%97%A5%E5%AD%90/QQ%E5%9B%BE%E7%89%8720191012190616.jpg\"></p>\n<p>​    入住第二天，上午我们来到了武大，只能说名校果然是名校，那环境，那楼宇，那面积，那宿舍都不是普通本科能比的，这天正好碰到武大有一场音乐艺术展，于是就去，里面一排排的钢琴，尽管看不懂，但是依旧觉得牛逼。纵穿武大，便来到了东湖，不得不说武汉的风景确实没得说。下午我们来到了华科，华科也不是一般的大，而且规划工整，那路是横七竖八，笔直笔直的，那绿植覆盖面积，走在校园里几乎不用晒太阳。我们也是骑着一个哈罗单车足足逛了一下午。到了晚上便开始了我们来到武行的第一场宣讲会–oppo华科宣讲会。</p>\n<p><img src=\"/2019/10/12/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E5%9C%A8%E6%AD%A6%E6%B1%89%E8%B7%91%E7%A7%8B%E6%8B%9B%E7%9A%84%E6%97%A5%E5%AD%90/Snipaste_2019-09-08_09-15-55.png\"></p>\n<p><img src=\"/2019/10/12/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E5%9C%A8%E6%AD%A6%E6%B1%89%E8%B7%91%E7%A7%8B%E6%8B%9B%E7%9A%84%E6%97%A5%E5%AD%90/Snipaste_2019-09-08_09-23-19.png\"></p>\n<p><img src=\"/2019/10/12/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E5%9C%A8%E6%AD%A6%E6%B1%89%E8%B7%91%E7%A7%8B%E6%8B%9B%E7%9A%84%E6%97%A5%E5%AD%90/QQ%E5%9B%BE%E7%89%8720191012190552.jpg\"></p>\n<p><img src=\"/2019/10/12/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E5%9C%A8%E6%AD%A6%E6%B1%89%E8%B7%91%E7%A7%8B%E6%8B%9B%E7%9A%84%E6%97%A5%E5%AD%90/QQ%E5%9B%BE%E7%89%8720191012190600.jpg\"></p>\n<p><img src=\"/2019/10/12/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E5%9C%A8%E6%AD%A6%E6%B1%89%E8%B7%91%E7%A7%8B%E6%8B%9B%E7%9A%84%E6%97%A5%E5%AD%90/QQ%E5%9B%BE%E7%89%8720191012190518.jpg\"></p>\n<p><img src=\"/2019/10/12/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E5%9C%A8%E6%AD%A6%E6%B1%89%E8%B7%91%E7%A7%8B%E6%8B%9B%E7%9A%84%E6%97%A5%E5%AD%90/Snipaste_2019-09-08_09-28-22.png\"></p>\n<p><img src=\"/2019/10/12/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E5%9C%A8%E6%AD%A6%E6%B1%89%E8%B7%91%E7%A7%8B%E6%8B%9B%E7%9A%84%E6%97%A5%E5%AD%90/Snipaste_2019-09-08_09-34-22.png\"></p>\n<p>​    只有当自己切真切实的接触到了这些名校，切真切实的接触到了名校中的那些人，才会明白在大学四年里所说的那些名校差距原来如此之大。可能是高中三年太辛苦，亦或是预科一年太放纵，大学三年啊，我终究是没有学会多少东西。可这又怎能让我信服呢？我真的没有学到什么东西吗？大一，因为读了一年预科，我不再是出来扎到，于是乎我做了班级负责人，然后觉得太累，于是正式选举班委时选择了副班长，学生组织，我选择了院新媒体。一年来，我参加比赛，制作视频，最后也是拿了个校三等奖学金。大二，我成了新媒体摄像部的部长，我把精力都用来管理部门，教导干事，于是乎我们部门成了优秀部门。同年借着新媒体和宋哥，我们成立的木瓜传媒工作室，对外接单，曾三次远赴神农架，总盈利13000软妹币，同样也顺利拿下了那年的三等奖学金。大三,我和儒哥一起在必胜客兼职了半年，同时我做到了经济独立11一个月，差一个月的经济独立一年。同时在富云达学习了半年，也开始为找工作而忧心，大三呆在学校的时间确实少了很多，尽管没拿到奖学金，但是成绩确实是提升了很多。如此充实的大学生活，我真的什么也没学到吗？</p>\n<p><img src=\"/2019/10/12/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E5%9C%A8%E6%AD%A6%E6%B1%89%E8%B7%91%E7%A7%8B%E6%8B%9B%E7%9A%84%E6%97%A5%E5%AD%90/QQ%E5%9B%BE%E7%89%8720191012190504.jpg\"></p>\n<p>​    事实证明，我真的很差劲，九月份，我和儒哥都开始了自己的秋招之旅，一整个九月，我跑了好几家游戏公司，成都摩丰，长沙的沃尔信息，武汉的微派网络，众娱，广州的速游网络，北京的多乐游戏，结果是一家没进。反观儒哥，他搞Web，结果一面就进了快客云，实习工资3700。顿时我被打击到哭泣，对没错因为恰逢中秋，我哭了，在和妈打的电话中哭得很彻底。这一次我想家了，想家想到了骨子里，这还是自从我小学六年级第一次离开父母留校寄宿以来最想家的一次，即使当年预科父亲送我来到宜昌离开我回家那次都没有这一次那么想家。想家也许是每一个在外漂泊的游子必定要经历的吧。</p>\n<p>​    第二天我买上了回家的车票，早上九点到晚上十一点，我到家了，我终于暂时卸下了三个多月来的忧心忡忡。母亲知道我要回来就上山区采了皇竹笋，做了一顿竹笋酿，那是我这么久以来吃的最无忧无虑的一顿，心里没有忧愁，嘴里尽是美味，对面坐者母亲，顶上是家，可能这才是我想要的生活吧。每天能有一些时间在家陪陪父母，也不失是一种幸福。父母操劳了半辈子，送我和弟弟读书，弟弟不争气跑去复读了，我作为长子找工作的事本不应该让父母操心，因为父母操心也不打劲，只能为我干着急。于是我开始反思，走游戏开发这条路我真的走对了吗？我是不是应该换条路走呢？比如C++。</p>\n<p><img src=\"/2019/10/12/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E5%9C%A8%E6%AD%A6%E6%B1%89%E8%B7%91%E7%A7%8B%E6%8B%9B%E7%9A%84%E6%97%A5%E5%AD%90/QQ%E5%9B%BE%E7%89%8720191012190448.jpg\"></p>\n<p><img src=\"/2019/10/12/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E5%9C%A8%E6%AD%A6%E6%B1%89%E8%B7%91%E7%A7%8B%E6%8B%9B%E7%9A%84%E6%97%A5%E5%AD%90/QQ%E5%9B%BE%E7%89%8720191012190414.jpg\"></p>\n<p><img src=\"/2019/10/12/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E5%9C%A8%E6%AD%A6%E6%B1%89%E8%B7%91%E7%A7%8B%E6%8B%9B%E7%9A%84%E6%97%A5%E5%AD%90/QQ%E5%9B%BE%E7%89%8720191012190444.jpg\"></p>\n<p>​    在家里的几天是我整个大三以来过的最舒心的几天，可是时间转瞬即逝，我又踏上了秋招之旅。九月25日，依旧没找到工作的我决定返校回去深造C++，然后国庆之后转行寻找C++的岗位。回到学校才发现学生时代的生活真的很美好，相比社会的残酷，校园原来真的是一个乐园，只是十几年的学生生活让我忽略了这一点。只剩最后一年的大学生活了，现在明白过来也为时不晚，且行还须且珍惜。</p>\n<p>​    国庆过了，房租也到期了，我开始了寄居生活，儒哥找到了工作于是就在公司附近租了个房子，我便开始寄居在儒哥的房子里，十月七号，我拿到了第一个offer，蛛网传媒，这是一家半个游戏公司的公司，因为他们做游戏却不是做自己的游戏，并且他们不仅仅做游戏，还做其他的软件，类似一家外包公司。实习工资3000软妹币加餐补300。也许是我自己把待遇开低了，唉~也罢，谁让我九月份受够了打击呢？于此同时九月份投的很多家公司也都邮来了面试通知，我去了，却都凉凉了，在和我们班那些去华清远见培训的同学聊面试题的时候，我才知道自己的C++是有多菜，我真的没有什么可值得骄傲的，可笑的是，八月的时候我居然笑着说“找工作不难，难的是找一个好工作”，我啊，似乎是出来些什么问题了。</p>\n<p><img src=\"/2019/10/12/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E5%9C%A8%E6%AD%A6%E6%B1%89%E8%B7%91%E7%A7%8B%E6%8B%9B%E7%9A%84%E6%97%A5%E5%AD%90/QQ%E5%9B%BE%E7%89%8720191012190638.jpg\"></p>\n<p>​    今天是十月十二号，我已经和房东商量好了，明天搬过去，住在武汉市银河湾，离公司蛮近的。后天就要去上班了，我的进修之旅还远没结束。</p>\n<p>​    经历了这么多，那些平时不爱学习，成绩不好的同学反而找到了一个不错的工作，我这个自以为比他们优秀的学生却秋招那么惨，最终去了一家连自己都不觉得有多好的小公司，尽管我已经很努力的准备了三个月，很努力的学了三个月，可最终的结果却是那么的不尽人意，我很失落，我有问题，我的身上肯定出了什么问题，以至于我得到了一个如此不满意的结果。</p>\n<p><img src=\"/2019/10/12/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E5%9C%A8%E6%AD%A6%E6%B1%89%E8%B7%91%E7%A7%8B%E6%8B%9B%E7%9A%84%E6%97%A5%E5%AD%90/QQ%E5%9B%BE%E7%89%8720191012190641.jpg\"></p>\n<p>​    也许生活就是这样雕琢一个孩子的吧，这次秋招我才意识到，自己眼中的优秀就是个屁，也许我该拾起初高中的那股劲了，大学的自己似乎过于放纵了，以至于成就了一个失败的自己。我的身上出问题了，我要找出来，我不比他们差，我不应该如此生活，我需要变强的，变得很强很强。现在得我真的没有资格说累，“累”，那是给别人说的。</p>\n","encrypt":true,"template":"<link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css\"> <link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\"> <script src=\"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js\"></script> <script src=\"//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js\"></script> <div id=\"security\"> <div> <div class=\"input-group\"> <input type=\"text\" class=\"form-control\" aria-label=\"Enter the password.\" id=\"pass\"/> <div class=\"input-group-btn\"> <button type=\"button\" class=\"btn btn-default\" onclick=\"decryptAES()\">Decrypt</button> </div> </div> </div> </div> <div id=\"encrypt-blog\" style=\"display:none\"> {{content}} </div>"},{"title":"程序编程高级","date":"2019-08-25T11:23:48.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n![](【程序编程】程序编程高级/程序编程高级.png)","source":"_posts/【程序编程】程序编程高级.md","raw":"---\ntitle: 程序编程高级\ndate: 2019-08-25 19:23:48\ntags: 程序编程原理\ncategories: 学习笔记\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n![](【程序编程】程序编程高级/程序编程高级.png)","slug":"【程序编程】程序编程高级","published":1,"updated":"2021-02-01T13:34:59.914Z","_id":"ckk9hocb30024dwr7gbbne02d","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p><img src=\"/2019/08/25/%E3%80%90%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A8%8B%E3%80%91%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7/%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p><img src=\"/2019/08/25/%E3%80%90%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A8%8B%E3%80%91%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7/%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7.png\"></p>\n"},{"title":"【算法】一些牛逼轰轰的算法记录","date":"2019-10-08T14:07:36.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 1.判断点是否在三角形内\n\n## 衍生：快速计算三角形面积\n\n```C++\n#include <iostream>\n#include <string>\n#include <math.h>\n#define S_FLOAT 0.00000001\n\nusing namespace std;\n//点类型\ntypedef struct Point\n{\n\tfloat x;\n\tfloat y;\n\tPoint() {}\n\tPoint(float x,float y)\n\t{\n\t\tthis->x = x;\n\t\tthis->y = y;\n\t}\n};\n//计算三角形面积\nfloat GetTriangleSquar(const Point a, const Point b, const Point c)\n{\n\tPoint AB, BC;\n\tAB.x = b.x - a.x;\n\tAB.y = b.y - a.y;\n\tBC.x = c.x - b.x;\n\tBC.y = c.y - b.y;\n\treturn fabs(AB.x*BC.y - AB.y*BC.x) / 2;\n}\n//判断点是否在三角形内\nstring IsInTriang(Point a, Point b, Point c, Point d)\n{\n\tfloat Sabc, Sabd, Sacd, Sbcd;\n\tSabc = GetTriangleSquar(a, b, c);\n\tSabd = GetTriangleSquar(a, b, d);\n\tSacd = GetTriangleSquar(a, c, d);\n\tSbcd = GetTriangleSquar(b, c, d);\n\tfloat Sums = Sabd + Sacd + Sbcd;\n\tcout << \"Sabd:\" << Sabd << endl << \"Sacd:\" << Sacd << endl << \"Sbcd:\" << Sbcd << endl;\n\tcout<< \"Sabc:\"<<Sabc<<endl<<\"Sums:\"<<Sums << endl;\n\tif ((-S_FLOAT < (Sabc - Sums) && (Sabc - Sums) < S_FLOAT))\n\t\treturn \"Yes\";\n\telse return \"No\";\n}\n//测试函数\nvoid Test()\n{\n\tPoint a(2, 2), b(0, 0), c(4, 0), d(2, 1);\n\tcout << IsInTriang(a, b, c, d) << endl;\n}\nint main()\n{\n\tTest();\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n","source":"_posts/【算法】一些牛逼轰轰的算法记录.md","raw":"---\ntitle: 【算法】一些牛逼轰轰的算法记录\ndate: 2019-10-08 22:07:36\ntags: 算法\ncategories: 知识记录\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 1.判断点是否在三角形内\n\n## 衍生：快速计算三角形面积\n\n```C++\n#include <iostream>\n#include <string>\n#include <math.h>\n#define S_FLOAT 0.00000001\n\nusing namespace std;\n//点类型\ntypedef struct Point\n{\n\tfloat x;\n\tfloat y;\n\tPoint() {}\n\tPoint(float x,float y)\n\t{\n\t\tthis->x = x;\n\t\tthis->y = y;\n\t}\n};\n//计算三角形面积\nfloat GetTriangleSquar(const Point a, const Point b, const Point c)\n{\n\tPoint AB, BC;\n\tAB.x = b.x - a.x;\n\tAB.y = b.y - a.y;\n\tBC.x = c.x - b.x;\n\tBC.y = c.y - b.y;\n\treturn fabs(AB.x*BC.y - AB.y*BC.x) / 2;\n}\n//判断点是否在三角形内\nstring IsInTriang(Point a, Point b, Point c, Point d)\n{\n\tfloat Sabc, Sabd, Sacd, Sbcd;\n\tSabc = GetTriangleSquar(a, b, c);\n\tSabd = GetTriangleSquar(a, b, d);\n\tSacd = GetTriangleSquar(a, c, d);\n\tSbcd = GetTriangleSquar(b, c, d);\n\tfloat Sums = Sabd + Sacd + Sbcd;\n\tcout << \"Sabd:\" << Sabd << endl << \"Sacd:\" << Sacd << endl << \"Sbcd:\" << Sbcd << endl;\n\tcout<< \"Sabc:\"<<Sabc<<endl<<\"Sums:\"<<Sums << endl;\n\tif ((-S_FLOAT < (Sabc - Sums) && (Sabc - Sums) < S_FLOAT))\n\t\treturn \"Yes\";\n\telse return \"No\";\n}\n//测试函数\nvoid Test()\n{\n\tPoint a(2, 2), b(0, 0), c(4, 0), d(2, 1);\n\tcout << IsInTriang(a, b, c, d) << endl;\n}\nint main()\n{\n\tTest();\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n","slug":"【算法】一些牛逼轰轰的算法记录","published":1,"updated":"2021-02-01T13:35:50.233Z","_id":"ckk9hocbe0038dwr7g7g7hmyk","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"1-判断点是否在三角形内\"><a href=\"#1-判断点是否在三角形内\" class=\"headerlink\" title=\"1.判断点是否在三角形内\"></a>1.判断点是否在三角形内</h1><h2 id=\"衍生：快速计算三角形面积\"><a href=\"#衍生：快速计算三角形面积\" class=\"headerlink\" title=\"衍生：快速计算三角形面积\"></a>衍生：快速计算三角形面积</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;math.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> S_FLOAT 0.00000001</span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><span class=\"hljs-comment\">//点类型</span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point</span></span><br><span class=\"hljs-class\">&#123;</span><br>\t<span class=\"hljs-keyword\">float</span> x;<br>\t<span class=\"hljs-keyword\">float</span> y;<br>\tPoint() &#123;&#125;<br>\tPoint(<span class=\"hljs-keyword\">float</span> x,<span class=\"hljs-keyword\">float</span> y)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;x = x;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;y = y;<br>\t&#125;<br>&#125;;<br><span class=\"hljs-comment\">//计算三角形面积</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">float</span> <span class=\"hljs-title\">GetTriangleSquar</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Point a, <span class=\"hljs-keyword\">const</span> Point b, <span class=\"hljs-keyword\">const</span> Point c)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tPoint AB, BC;<br>\tAB.x = b.x - a.x;<br>\tAB.y = b.y - a.y;<br>\tBC.x = c.x - b.x;<br>\tBC.y = c.y - b.y;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">fabs</span>(AB.x*BC.y - AB.y*BC.x) / <span class=\"hljs-number\">2</span>;<br>&#125;<br><span class=\"hljs-comment\">//判断点是否在三角形内</span><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">IsInTriang</span><span class=\"hljs-params\">(Point a, Point b, Point c, Point d)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">float</span> Sabc, Sabd, Sacd, Sbcd;<br>\tSabc = GetTriangleSquar(a, b, c);<br>\tSabd = GetTriangleSquar(a, b, d);<br>\tSacd = GetTriangleSquar(a, c, d);<br>\tSbcd = GetTriangleSquar(b, c, d);<br>\t<span class=\"hljs-keyword\">float</span> Sums = Sabd + Sacd + Sbcd;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;Sabd:&quot;</span> &lt;&lt; Sabd &lt;&lt; <span class=\"hljs-built_in\">endl</span> &lt;&lt; <span class=\"hljs-string\">&quot;Sacd:&quot;</span> &lt;&lt; Sacd &lt;&lt; <span class=\"hljs-built_in\">endl</span> &lt;&lt; <span class=\"hljs-string\">&quot;Sbcd:&quot;</span> &lt;&lt; Sbcd &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t<span class=\"hljs-built_in\">cout</span>&lt;&lt; <span class=\"hljs-string\">&quot;Sabc:&quot;</span>&lt;&lt;Sabc&lt;&lt;<span class=\"hljs-built_in\">endl</span>&lt;&lt;<span class=\"hljs-string\">&quot;Sums:&quot;</span>&lt;&lt;Sums &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t<span class=\"hljs-keyword\">if</span> ((-S_FLOAT &lt; (Sabc - Sums) &amp;&amp; (Sabc - Sums) &lt; S_FLOAT))<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Yes&quot;</span>;<br>\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;No&quot;</span>;<br>&#125;<br><span class=\"hljs-comment\">//测试函数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Test</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tPoint a(2, 2), b(0, 0), c(4, 0), d(2, 1);<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; IsInTriang(a, b, c, d) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tTest();<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"1-判断点是否在三角形内\"><a href=\"#1-判断点是否在三角形内\" class=\"headerlink\" title=\"1.判断点是否在三角形内\"></a>1.判断点是否在三角形内</h1><h2 id=\"衍生：快速计算三角形面积\"><a href=\"#衍生：快速计算三角形面积\" class=\"headerlink\" title=\"衍生：快速计算三角形面积\"></a>衍生：快速计算三角形面积</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;math.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> S_FLOAT 0.00000001</span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><span class=\"hljs-comment\">//点类型</span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point</span></span><br><span class=\"hljs-class\">&#123;</span><br>\t<span class=\"hljs-keyword\">float</span> x;<br>\t<span class=\"hljs-keyword\">float</span> y;<br>\tPoint() &#123;&#125;<br>\tPoint(<span class=\"hljs-keyword\">float</span> x,<span class=\"hljs-keyword\">float</span> y)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;x = x;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;y = y;<br>\t&#125;<br>&#125;;<br><span class=\"hljs-comment\">//计算三角形面积</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">float</span> <span class=\"hljs-title\">GetTriangleSquar</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Point a, <span class=\"hljs-keyword\">const</span> Point b, <span class=\"hljs-keyword\">const</span> Point c)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tPoint AB, BC;<br>\tAB.x = b.x - a.x;<br>\tAB.y = b.y - a.y;<br>\tBC.x = c.x - b.x;<br>\tBC.y = c.y - b.y;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">fabs</span>(AB.x*BC.y - AB.y*BC.x) / <span class=\"hljs-number\">2</span>;<br>&#125;<br><span class=\"hljs-comment\">//判断点是否在三角形内</span><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">IsInTriang</span><span class=\"hljs-params\">(Point a, Point b, Point c, Point d)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">float</span> Sabc, Sabd, Sacd, Sbcd;<br>\tSabc = GetTriangleSquar(a, b, c);<br>\tSabd = GetTriangleSquar(a, b, d);<br>\tSacd = GetTriangleSquar(a, c, d);<br>\tSbcd = GetTriangleSquar(b, c, d);<br>\t<span class=\"hljs-keyword\">float</span> Sums = Sabd + Sacd + Sbcd;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;Sabd:&quot;</span> &lt;&lt; Sabd &lt;&lt; <span class=\"hljs-built_in\">endl</span> &lt;&lt; <span class=\"hljs-string\">&quot;Sacd:&quot;</span> &lt;&lt; Sacd &lt;&lt; <span class=\"hljs-built_in\">endl</span> &lt;&lt; <span class=\"hljs-string\">&quot;Sbcd:&quot;</span> &lt;&lt; Sbcd &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t<span class=\"hljs-built_in\">cout</span>&lt;&lt; <span class=\"hljs-string\">&quot;Sabc:&quot;</span>&lt;&lt;Sabc&lt;&lt;<span class=\"hljs-built_in\">endl</span>&lt;&lt;<span class=\"hljs-string\">&quot;Sums:&quot;</span>&lt;&lt;Sums &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t<span class=\"hljs-keyword\">if</span> ((-S_FLOAT &lt; (Sabc - Sums) &amp;&amp; (Sabc - Sums) &lt; S_FLOAT))<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Yes&quot;</span>;<br>\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;No&quot;</span>;<br>&#125;<br><span class=\"hljs-comment\">//测试函数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Test</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tPoint a(2, 2), b(0, 0), c(4, 0), d(2, 1);<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; IsInTriang(a, b, c, d) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tTest();<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"网络游戏基础","date":"2019-08-25T11:34:37.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n![](【网络游戏】网络游戏基础/网络游戏基础.jpg)","source":"_posts/【网络游戏】网络游戏基础.md","raw":"---\ntitle: 网络游戏基础\ndate: 2019-08-25 19:34:37\ntags: 游戏网络\ncategories: 学习笔记\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n![](【网络游戏】网络游戏基础/网络游戏基础.jpg)","slug":"【网络游戏】网络游戏基础","published":1,"updated":"2021-02-01T13:36:09.505Z","_id":"ckk9hocbf0039dwr7083oboaf","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p><img src=\"/2019/08/25/%E3%80%90%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E3%80%91%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E5%9F%BA%E7%A1%80.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p><img src=\"/2019/08/25/%E3%80%90%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E3%80%91%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E5%9F%BA%E7%A1%80.jpg\"></p>\n"},{"title":"物联网通信基础","date":"2019-08-25T11:22:09.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n![](【网络通信】物联网通信基础/物联网通信技术基础.png)","source":"_posts/【网络通信】物联网通信基础.md","raw":"---\ntitle: 物联网通信基础\ndate: 2019-08-25 19:22:09\ntags: 网络通信\ncategories: 学习笔记\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n![](【网络通信】物联网通信基础/物联网通信技术基础.png)","slug":"【网络通信】物联网通信基础","published":1,"updated":"2021-02-01T13:35:59.695Z","_id":"ckk9hocbg003bdwr7diksgnby","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p><img src=\"/2019/08/25/%E3%80%90%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E3%80%91%E7%89%A9%E8%81%94%E7%BD%91%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80/%E7%89%A9%E8%81%94%E7%BD%91%E9%80%9A%E4%BF%A1%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p><img src=\"/2019/08/25/%E3%80%90%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E3%80%91%E7%89%A9%E8%81%94%E7%BD%91%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80/%E7%89%A9%E8%81%94%E7%BD%91%E9%80%9A%E4%BF%A1%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80.png\"></p>\n"},{"title":"【计算机图形学】多边形填充算法","date":"2019-08-23T13:55:31.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n首先对于如下的多边形：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190618080545123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\n# 1.有效边表填充算法\n\n## **1.1.有效边表填充算法分为如下几个步骤**：\n\n​\t1.1.1.将多边形所有的边分别与扫描线1计算交点，得到交点集，与扫描线计算的边没有顺序要求。\n​\t1.1.2.将点集按标x的大小递增排序，得到有序点集。\n​\t1.1.3.将有序点集两两配对，得到对应的像素区间。\n​\t1.1.4.将像素区间内的像素填充颜色，至此第一条扫描线上处于多边形内的的像素填充完毕。\n​\t1.1.5.扫描线标号加1，重复以上步骤，直至到最后一条扫描线。\n​\t如：对于扫描线3（y=3）与多边形所有的边计算交点，得到与P3P4交于点（4.5，3），与P3P2交于点（2.4，3），与P5P6交于点（8.8，3），与P5P4交于点（7，3）。\n​\t圆整处理得到点集（5，3）、（2，3）、（9，3）、（7，3）。\n​\t递增排序得到有序点集（2，3）、（5，3）、（7，3）、（9，3）。\n​\t两两配对得到扫描线3上的填充像素区间[2，5]、[7，9]。\n​\t填充区间内的所有像素。\n​\t得到如图所示的填充效果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190617115850448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n全部填充得到如下效果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190617115915999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\n## **1.2.至此我们发现如下疑问：**\n\n​\t1.2.1.像素填充的多边形面积大于多边形实际面积。\n​\t可能上图不太明显，我们举一个明显一点的例子，如下正方形：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190617115935411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n我们填充后的效果为：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190617115949648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n​\t而正方形的实际面积是4，在显示器上一个像素为一面积，正方形应该占4个像素点，而实际却占了9个像素点，对于这种问题，有效边表填充算法采用“左闭右开”，“下闭上开”的原则进行像素点的填充，按照此原则，正方形的填充效果如下：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190617120002618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n1.2.1.对于点集（1，3）、（1，8）它们分别为扫描线1与P3P2、P3P4、P5P4、P5P6的交点，而在实际计算中它们仍只是两个点，如果处理不当，计算机可能会两两配对得到区间（3，8）而填充到错误的像素区间。\n对于此问题，有效边表填充算法采用分类连接点进行处理。\n有效边表填充算法将多边形的各个连接点分为三类连接点：\n\n### **+普通连接点：**\n\n​\t连接点所在的两条边分别处于其所在的扫描线的上方和下方，如P2点。\n\n### **+局部最低点：**\n\n​\t连接点所在的两条边都处于其所在的扫描线的上方，如P3、P5点。\n\n### **+局部最高点：**\n\n​\t连接点所在的两条边都处于其所在的扫描线的下方，如：P4、P1、P6点。\n​\t在填充开始前，有效边填充算法先对多边形所有的连接点进行分类，判断其在点集中的数量。\n有效边填充算法采用如下原则对多边形的连接点进行处理：\n\n### **1.2.2.普通连接点的处理原则**\n\n​\t以P2为例，根据“下闭上开”原则，对于P3P2上的点P2不予填充，P2P1上的点P2需要填充，P2点只填充1次，顾在扫描线7的填充像素点集中P2点的个数记为1，即可以不处理。\n\n### **1.2.3.局部最低点的处理原则**\n\n​\t以P3为例，根据“下闭上开”原则，对于P3P2上的点P3需要填充，P3P4上的点P3也需要填充，P3填充2次，扫描线1的填充像素点集中，再添加一个P3点，使其中有两个P3点，在像素点集中将P3点的个数记为2，P5点进行同样的处理，这样当算法进行两两配对时，得到的像素区间为[3，3]、[5，5]，如此即可避免出现[3，8]的点集区间，解决此类情况的填充错误。\n\n## **1.2.4.局部最高点的处理原则**\n\n​\t以P1点为例，根据“下闭上开”原则，对于P2P1上的P1点不予填充，P0P1上的P1点也不予填充，P1填充0次，扫描线12的像素填充点集中P1点的个数记为0，即从点集中删除P1点，这样的处理符合多边形整体的“下闭上开”原则。\n至此，多边形的有效边表填充算法的填充原理已经完成。\n但是，我们在填充多边形之前还需要进行一项很重要的工作—---根据多边形计算其有效边表，首先我们要了解什么是有效边。\n**有效边**：多边形与当前扫描线相交的边称为有效边，有效边的引入可以有效的避免扫描边与多边形的所有的边进行交点计算，提高算法的效率。\n**有效边表**：有效边按与扫描线交点x坐标递增顺序存放的链表。\n**有效边表节点结构**：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190618080124847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n示例：扫描线1的有效边表如下：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190618081306344.png)\n**桶表**：有效边表按扫描线自增顺序存放的表，可以是链表，也可以是顺序表。\n**桶表的结构**：\n​\t如：多边形P0-P6的桶表为：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190618082918644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n​\t有效边表可以有效的减少计算量，提升多边形的填充效率，如所有的扫描线中，计算机只需要计算扫描线1、扫描线7和扫描线8，且扫描线1只需和边P2P3、P3P4、P4P5、P5P6计算交点，而无需与所有边计算交点，有效边填充算法是目前最有效的多边形填充算法之一。\n至此，多边形的有效边填充算法全部完成。\n\n# 2.边缘填充算法\n\n## **2.1.算法原理：**\n\n​\t先计算多边形每条边与扫描线的交点，然后将交点右侧的所有像素颜色全部取补色。\n\n## **2.2.补色的定义：**\n\n​\t对于黑白图像，白色的补色为黑色，黑色补色为白色，对于彩色图像，前景色取补就是将前景色置为背景色，背景色取补就是将背景声置为前景色。\n示例：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190618092226427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n​\t边缘填充算法的填充效率受到右侧填充像素的数量影响，当多边形靠近屏幕左侧时，计算机将填充大量无用像素，大大降低的算法的性能，浪费了系统资源。\n于是有人提出这样的改进：首先在进行多边形填充之前，先扫描一遍多边形，得出多边形的包围盒，并在适当的位置加入一条栅栏。\n包围盒：包围多边形的最小矩形。\n\n## **2.3.加入包围盒和栅栏的边缘填充算法原理：**\n\n​\t每次填充前先判断当前边在栅栏的左侧还是右侧，若在左侧，则取补边以右，栅栏以左的像素；若在右侧，则取补边以右，栅栏以左的像素。\n示例：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190621084324207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n​\t可以看出，加入包围盒和栅栏的边缘填充算法极大的减少了需要填充像素的数量，对填充效率的提升是显著的。\n​\t观察边缘填充算法的两幅图，我们是可以察觉到的，边缘填充算法，对多边形的顶点与边的填充不甚理想，边缘填充算法没有给定具体填充时，直线上的点是否包含在填充范围内，笔者试过两种情况的对比------填充时包含直线上的点和填充时不包含直线上的点，得出的结果，多边形的顶点与边的填充都不理想，但是，填充时包含直线上的点的填充方法的最总结果，使多边形在整体上满足“左闭右开”，“下闭上开”原则，顾才用此方法作图。然而，边缘填充算法的填充原理是没有考虑边界的，即多边形的所有像素都填充为一个颜色，无论多边形内部还是多边形的边和顶点，在实际填充效果中，多边形所有像素都填充为一个颜色的填充方式，顶点和边对整体的效果不大，即可以忽略，所以边缘填充算法依旧是效率极高的填充算法之一。\n\n# 3.种子填充算法\n\n3.1.种子填充算法是区域填充算法中的一种，种子填充算法分为：四邻接点种子填充算法和八邻接点种子填充算法。\n在此之前，我们需要了解一些概念：\n\n### **3.1.1.四邻接点：**\n\n​\t任易一个种子像素，其左右上下这四个像素成为这个种子像素的四邻接点。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190621092132813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\n### **3.1.2.八邻接点：**\n\n​\t任易一个种子像素，其左右上下及左上、右下、右上、左上这八个像素成为这个种子像素的八邻接点。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190621092334685.png)\n\n### **3.1.3.四连通域：**\n\n​\t多边形中能被四邻接点遍历填充的区域。\n\n### **3.1.4.八连通域：**\n\n​\t多边形中能被八邻接点遍历填充的区域。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190621094757411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\n### **3.1.5.四连通边界：**\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190621094925910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\n### **3.1.6.八连通边界：**\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190621095031628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\n## **3.2.适用场景：**\n\n​\t区域填充算法适用于多边形的边界与内部使用不同的填充色的场景。\n\n## **3.3.多边形边界的颜色：**\n\n​\t边界的颜色由绘制多边形时的画笔确定。\n\n## **3.4.多边形内部的颜色填充步骤**\n\n​\t3.4.1.在多边形内部任易选择一个像素作为种子像素。\n​\t3.4.2.将种子像素入栈。\n​\t3.4.3.如果栈不为空，则将栈顶元素出栈。\n​\t3.4.4.按填充色绘制出栈像素。\n​\t3.4.5.按四邻接点（左、上、右、下）（或八邻接点（左、左上、上、右上、右、右下、下、左下））顺序搜索与出栈像素相邻的4（或8）个像素，若该像素的颜色不是填充色并且也不是边界色，则把该像素入栈，否则丢弃该像素。\n​\t不难想象，当多边形的面积极大时，入栈的像素像素将是巨量，有的像素可能即是一个像素的邻接点又是另一个像素的邻接点，以致部分像素入栈多次，此情况下填充过程将大量占用栈存储空间，甚至过量占用空间，致使栈空间不足，导致其他程序无空间可用，如此既不能完成填充，又会造成空间溢出，甚至系统崩溃，所以种子填充算法的缺点极为严重。\n\n## **3.5.改进------扫描种子填充算法**\n\n​\t3.5.1.在多边形内部选择一个像素作为种子像素。\n​\t3.5.2.将种子像素入栈。\n​\t3.5.3.若栈不为空，则将栈顶元素出栈\n​\t3.5.4.沿出栈像素所在扫描线，对出栈像素左右像素依次填充，直至遇到边界像素为止。\n​\t3.5.5.记录该区间的范围，将最左端的像素记为Xl，将最右端的像素记为Xr。\n​\t3.5.6.检查与当前扫描线相邻的上下两条扫描线中在区间[Xl，Xr]里的有关像素是否全为边界像素或以填充像素，若存在非边界且未填充的像素，则把区间最右端像素取作种子像素入栈。\n​\t扫描种子填充像素每次只将区间最右端的像素入栈，极大的减少了入栈像素，不仅减少了栈空间的占用，还有效的提高了填充效率和填充速度。\n\n\n\n","source":"_posts/【计算机图形学】多变形填充算法原理.md","raw":"---\ntitle: 【计算机图形学】多边形填充算法\ndate: 2019-08-23 21:55:31\ntags: 图形学\ncategories: 学习笔记\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n首先对于如下的多边形：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190618080545123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\n# 1.有效边表填充算法\n\n## **1.1.有效边表填充算法分为如下几个步骤**：\n\n​\t1.1.1.将多边形所有的边分别与扫描线1计算交点，得到交点集，与扫描线计算的边没有顺序要求。\n​\t1.1.2.将点集按标x的大小递增排序，得到有序点集。\n​\t1.1.3.将有序点集两两配对，得到对应的像素区间。\n​\t1.1.4.将像素区间内的像素填充颜色，至此第一条扫描线上处于多边形内的的像素填充完毕。\n​\t1.1.5.扫描线标号加1，重复以上步骤，直至到最后一条扫描线。\n​\t如：对于扫描线3（y=3）与多边形所有的边计算交点，得到与P3P4交于点（4.5，3），与P3P2交于点（2.4，3），与P5P6交于点（8.8，3），与P5P4交于点（7，3）。\n​\t圆整处理得到点集（5，3）、（2，3）、（9，3）、（7，3）。\n​\t递增排序得到有序点集（2，3）、（5，3）、（7，3）、（9，3）。\n​\t两两配对得到扫描线3上的填充像素区间[2，5]、[7，9]。\n​\t填充区间内的所有像素。\n​\t得到如图所示的填充效果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190617115850448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n全部填充得到如下效果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190617115915999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\n## **1.2.至此我们发现如下疑问：**\n\n​\t1.2.1.像素填充的多边形面积大于多边形实际面积。\n​\t可能上图不太明显，我们举一个明显一点的例子，如下正方形：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190617115935411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n我们填充后的效果为：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190617115949648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n​\t而正方形的实际面积是4，在显示器上一个像素为一面积，正方形应该占4个像素点，而实际却占了9个像素点，对于这种问题，有效边表填充算法采用“左闭右开”，“下闭上开”的原则进行像素点的填充，按照此原则，正方形的填充效果如下：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190617120002618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n1.2.1.对于点集（1，3）、（1，8）它们分别为扫描线1与P3P2、P3P4、P5P4、P5P6的交点，而在实际计算中它们仍只是两个点，如果处理不当，计算机可能会两两配对得到区间（3，8）而填充到错误的像素区间。\n对于此问题，有效边表填充算法采用分类连接点进行处理。\n有效边表填充算法将多边形的各个连接点分为三类连接点：\n\n### **+普通连接点：**\n\n​\t连接点所在的两条边分别处于其所在的扫描线的上方和下方，如P2点。\n\n### **+局部最低点：**\n\n​\t连接点所在的两条边都处于其所在的扫描线的上方，如P3、P5点。\n\n### **+局部最高点：**\n\n​\t连接点所在的两条边都处于其所在的扫描线的下方，如：P4、P1、P6点。\n​\t在填充开始前，有效边填充算法先对多边形所有的连接点进行分类，判断其在点集中的数量。\n有效边填充算法采用如下原则对多边形的连接点进行处理：\n\n### **1.2.2.普通连接点的处理原则**\n\n​\t以P2为例，根据“下闭上开”原则，对于P3P2上的点P2不予填充，P2P1上的点P2需要填充，P2点只填充1次，顾在扫描线7的填充像素点集中P2点的个数记为1，即可以不处理。\n\n### **1.2.3.局部最低点的处理原则**\n\n​\t以P3为例，根据“下闭上开”原则，对于P3P2上的点P3需要填充，P3P4上的点P3也需要填充，P3填充2次，扫描线1的填充像素点集中，再添加一个P3点，使其中有两个P3点，在像素点集中将P3点的个数记为2，P5点进行同样的处理，这样当算法进行两两配对时，得到的像素区间为[3，3]、[5，5]，如此即可避免出现[3，8]的点集区间，解决此类情况的填充错误。\n\n## **1.2.4.局部最高点的处理原则**\n\n​\t以P1点为例，根据“下闭上开”原则，对于P2P1上的P1点不予填充，P0P1上的P1点也不予填充，P1填充0次，扫描线12的像素填充点集中P1点的个数记为0，即从点集中删除P1点，这样的处理符合多边形整体的“下闭上开”原则。\n至此，多边形的有效边表填充算法的填充原理已经完成。\n但是，我们在填充多边形之前还需要进行一项很重要的工作—---根据多边形计算其有效边表，首先我们要了解什么是有效边。\n**有效边**：多边形与当前扫描线相交的边称为有效边，有效边的引入可以有效的避免扫描边与多边形的所有的边进行交点计算，提高算法的效率。\n**有效边表**：有效边按与扫描线交点x坐标递增顺序存放的链表。\n**有效边表节点结构**：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190618080124847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n示例：扫描线1的有效边表如下：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190618081306344.png)\n**桶表**：有效边表按扫描线自增顺序存放的表，可以是链表，也可以是顺序表。\n**桶表的结构**：\n​\t如：多边形P0-P6的桶表为：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190618082918644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n​\t有效边表可以有效的减少计算量，提升多边形的填充效率，如所有的扫描线中，计算机只需要计算扫描线1、扫描线7和扫描线8，且扫描线1只需和边P2P3、P3P4、P4P5、P5P6计算交点，而无需与所有边计算交点，有效边填充算法是目前最有效的多边形填充算法之一。\n至此，多边形的有效边填充算法全部完成。\n\n# 2.边缘填充算法\n\n## **2.1.算法原理：**\n\n​\t先计算多边形每条边与扫描线的交点，然后将交点右侧的所有像素颜色全部取补色。\n\n## **2.2.补色的定义：**\n\n​\t对于黑白图像，白色的补色为黑色，黑色补色为白色，对于彩色图像，前景色取补就是将前景色置为背景色，背景色取补就是将背景声置为前景色。\n示例：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190618092226427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n​\t边缘填充算法的填充效率受到右侧填充像素的数量影响，当多边形靠近屏幕左侧时，计算机将填充大量无用像素，大大降低的算法的性能，浪费了系统资源。\n于是有人提出这样的改进：首先在进行多边形填充之前，先扫描一遍多边形，得出多边形的包围盒，并在适当的位置加入一条栅栏。\n包围盒：包围多边形的最小矩形。\n\n## **2.3.加入包围盒和栅栏的边缘填充算法原理：**\n\n​\t每次填充前先判断当前边在栅栏的左侧还是右侧，若在左侧，则取补边以右，栅栏以左的像素；若在右侧，则取补边以右，栅栏以左的像素。\n示例：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190621084324207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n​\t可以看出，加入包围盒和栅栏的边缘填充算法极大的减少了需要填充像素的数量，对填充效率的提升是显著的。\n​\t观察边缘填充算法的两幅图，我们是可以察觉到的，边缘填充算法，对多边形的顶点与边的填充不甚理想，边缘填充算法没有给定具体填充时，直线上的点是否包含在填充范围内，笔者试过两种情况的对比------填充时包含直线上的点和填充时不包含直线上的点，得出的结果，多边形的顶点与边的填充都不理想，但是，填充时包含直线上的点的填充方法的最总结果，使多边形在整体上满足“左闭右开”，“下闭上开”原则，顾才用此方法作图。然而，边缘填充算法的填充原理是没有考虑边界的，即多边形的所有像素都填充为一个颜色，无论多边形内部还是多边形的边和顶点，在实际填充效果中，多边形所有像素都填充为一个颜色的填充方式，顶点和边对整体的效果不大，即可以忽略，所以边缘填充算法依旧是效率极高的填充算法之一。\n\n# 3.种子填充算法\n\n3.1.种子填充算法是区域填充算法中的一种，种子填充算法分为：四邻接点种子填充算法和八邻接点种子填充算法。\n在此之前，我们需要了解一些概念：\n\n### **3.1.1.四邻接点：**\n\n​\t任易一个种子像素，其左右上下这四个像素成为这个种子像素的四邻接点。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190621092132813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\n### **3.1.2.八邻接点：**\n\n​\t任易一个种子像素，其左右上下及左上、右下、右上、左上这八个像素成为这个种子像素的八邻接点。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190621092334685.png)\n\n### **3.1.3.四连通域：**\n\n​\t多边形中能被四邻接点遍历填充的区域。\n\n### **3.1.4.八连通域：**\n\n​\t多边形中能被八邻接点遍历填充的区域。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190621094757411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\n### **3.1.5.四连通边界：**\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190621094925910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\n### **3.1.6.八连通边界：**\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190621095031628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\n## **3.2.适用场景：**\n\n​\t区域填充算法适用于多边形的边界与内部使用不同的填充色的场景。\n\n## **3.3.多边形边界的颜色：**\n\n​\t边界的颜色由绘制多边形时的画笔确定。\n\n## **3.4.多边形内部的颜色填充步骤**\n\n​\t3.4.1.在多边形内部任易选择一个像素作为种子像素。\n​\t3.4.2.将种子像素入栈。\n​\t3.4.3.如果栈不为空，则将栈顶元素出栈。\n​\t3.4.4.按填充色绘制出栈像素。\n​\t3.4.5.按四邻接点（左、上、右、下）（或八邻接点（左、左上、上、右上、右、右下、下、左下））顺序搜索与出栈像素相邻的4（或8）个像素，若该像素的颜色不是填充色并且也不是边界色，则把该像素入栈，否则丢弃该像素。\n​\t不难想象，当多边形的面积极大时，入栈的像素像素将是巨量，有的像素可能即是一个像素的邻接点又是另一个像素的邻接点，以致部分像素入栈多次，此情况下填充过程将大量占用栈存储空间，甚至过量占用空间，致使栈空间不足，导致其他程序无空间可用，如此既不能完成填充，又会造成空间溢出，甚至系统崩溃，所以种子填充算法的缺点极为严重。\n\n## **3.5.改进------扫描种子填充算法**\n\n​\t3.5.1.在多边形内部选择一个像素作为种子像素。\n​\t3.5.2.将种子像素入栈。\n​\t3.5.3.若栈不为空，则将栈顶元素出栈\n​\t3.5.4.沿出栈像素所在扫描线，对出栈像素左右像素依次填充，直至遇到边界像素为止。\n​\t3.5.5.记录该区间的范围，将最左端的像素记为Xl，将最右端的像素记为Xr。\n​\t3.5.6.检查与当前扫描线相邻的上下两条扫描线中在区间[Xl，Xr]里的有关像素是否全为边界像素或以填充像素，若存在非边界且未填充的像素，则把区间最右端像素取作种子像素入栈。\n​\t扫描种子填充像素每次只将区间最右端的像素入栈，极大的减少了入栈像素，不仅减少了栈空间的占用，还有效的提高了填充效率和填充速度。\n\n\n\n","slug":"【计算机图形学】多变形填充算法原理","published":1,"updated":"2021-02-01T13:35:36.186Z","_id":"ckk9hocbh003cdwr70i2k320s","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>首先对于如下的多边形：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190618080545123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"1-有效边表填充算法\"><a href=\"#1-有效边表填充算法\" class=\"headerlink\" title=\"1.有效边表填充算法\"></a>1.有效边表填充算法</h1><h2 id=\"1-1-有效边表填充算法分为如下几个步骤：\"><a href=\"#1-1-有效边表填充算法分为如下几个步骤：\" class=\"headerlink\" title=\"1.1.有效边表填充算法分为如下几个步骤：\"></a><strong>1.1.有效边表填充算法分为如下几个步骤</strong>：</h2><p>​    1.1.1.将多边形所有的边分别与扫描线1计算交点，得到交点集，与扫描线计算的边没有顺序要求。<br>​    1.1.2.将点集按标x的大小递增排序，得到有序点集。<br>​    1.1.3.将有序点集两两配对，得到对应的像素区间。<br>​    1.1.4.将像素区间内的像素填充颜色，至此第一条扫描线上处于多边形内的的像素填充完毕。<br>​    1.1.5.扫描线标号加1，重复以上步骤，直至到最后一条扫描线。<br>​    如：对于扫描线3（y=3）与多边形所有的边计算交点，得到与P3P4交于点（4.5，3），与P3P2交于点（2.4，3），与P5P6交于点（8.8，3），与P5P4交于点（7，3）。<br>​    圆整处理得到点集（5，3）、（2，3）、（9，3）、（7，3）。<br>​    递增排序得到有序点集（2，3）、（5，3）、（7，3）、（9，3）。<br>​    两两配对得到扫描线3上的填充像素区间[2，5]、[7，9]。<br>​    填充区间内的所有像素。<br>​    得到如图所示的填充效果：<br><img src=\"https://img-blog.csdnimg.cn/20190617115850448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>全部填充得到如下效果：<br><img src=\"https://img-blog.csdnimg.cn/20190617115915999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"1-2-至此我们发现如下疑问：\"><a href=\"#1-2-至此我们发现如下疑问：\" class=\"headerlink\" title=\"1.2.至此我们发现如下疑问：\"></a><strong>1.2.至此我们发现如下疑问：</strong></h2><p>​    1.2.1.像素填充的多边形面积大于多边形实际面积。<br>​    可能上图不太明显，我们举一个明显一点的例子，如下正方形：<br><img src=\"https://img-blog.csdnimg.cn/20190617115935411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>我们填充后的效果为：<br><img src=\"https://img-blog.csdnimg.cn/20190617115949648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>​    而正方形的实际面积是4，在显示器上一个像素为一面积，正方形应该占4个像素点，而实际却占了9个像素点，对于这种问题，有效边表填充算法采用“左闭右开”，“下闭上开”的原则进行像素点的填充，按照此原则，正方形的填充效果如下：<br><img src=\"https://img-blog.csdnimg.cn/20190617120002618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>1.2.1.对于点集（1，3）、（1，8）它们分别为扫描线1与P3P2、P3P4、P5P4、P5P6的交点，而在实际计算中它们仍只是两个点，如果处理不当，计算机可能会两两配对得到区间（3，8）而填充到错误的像素区间。<br>对于此问题，有效边表填充算法采用分类连接点进行处理。<br>有效边表填充算法将多边形的各个连接点分为三类连接点：</p>\n<h3 id=\"普通连接点：\"><a href=\"#普通连接点：\" class=\"headerlink\" title=\"+普通连接点：\"></a><strong>+普通连接点：</strong></h3><p>​    连接点所在的两条边分别处于其所在的扫描线的上方和下方，如P2点。</p>\n<h3 id=\"局部最低点：\"><a href=\"#局部最低点：\" class=\"headerlink\" title=\"+局部最低点：\"></a><strong>+局部最低点：</strong></h3><p>​    连接点所在的两条边都处于其所在的扫描线的上方，如P3、P5点。</p>\n<h3 id=\"局部最高点：\"><a href=\"#局部最高点：\" class=\"headerlink\" title=\"+局部最高点：\"></a><strong>+局部最高点：</strong></h3><p>​    连接点所在的两条边都处于其所在的扫描线的下方，如：P4、P1、P6点。<br>​    在填充开始前，有效边填充算法先对多边形所有的连接点进行分类，判断其在点集中的数量。<br>有效边填充算法采用如下原则对多边形的连接点进行处理：</p>\n<h3 id=\"1-2-2-普通连接点的处理原则\"><a href=\"#1-2-2-普通连接点的处理原则\" class=\"headerlink\" title=\"1.2.2.普通连接点的处理原则\"></a><strong>1.2.2.普通连接点的处理原则</strong></h3><p>​    以P2为例，根据“下闭上开”原则，对于P3P2上的点P2不予填充，P2P1上的点P2需要填充，P2点只填充1次，顾在扫描线7的填充像素点集中P2点的个数记为1，即可以不处理。</p>\n<h3 id=\"1-2-3-局部最低点的处理原则\"><a href=\"#1-2-3-局部最低点的处理原则\" class=\"headerlink\" title=\"1.2.3.局部最低点的处理原则\"></a><strong>1.2.3.局部最低点的处理原则</strong></h3><p>​    以P3为例，根据“下闭上开”原则，对于P3P2上的点P3需要填充，P3P4上的点P3也需要填充，P3填充2次，扫描线1的填充像素点集中，再添加一个P3点，使其中有两个P3点，在像素点集中将P3点的个数记为2，P5点进行同样的处理，这样当算法进行两两配对时，得到的像素区间为[3，3]、[5，5]，如此即可避免出现[3，8]的点集区间，解决此类情况的填充错误。</p>\n<h2 id=\"1-2-4-局部最高点的处理原则\"><a href=\"#1-2-4-局部最高点的处理原则\" class=\"headerlink\" title=\"1.2.4.局部最高点的处理原则\"></a><strong>1.2.4.局部最高点的处理原则</strong></h2><p>​    以P1点为例，根据“下闭上开”原则，对于P2P1上的P1点不予填充，P0P1上的P1点也不予填充，P1填充0次，扫描线12的像素填充点集中P1点的个数记为0，即从点集中删除P1点，这样的处理符合多边形整体的“下闭上开”原则。<br>至此，多边形的有效边表填充算法的填充原理已经完成。<br>但是，我们在填充多边形之前还需要进行一项很重要的工作——根据多边形计算其有效边表，首先我们要了解什么是有效边。<br><strong>有效边</strong>：多边形与当前扫描线相交的边称为有效边，有效边的引入可以有效的避免扫描边与多边形的所有的边进行交点计算，提高算法的效率。<br><strong>有效边表</strong>：有效边按与扫描线交点x坐标递增顺序存放的链表。<br><strong>有效边表节点结构</strong>：<br><img src=\"https://img-blog.csdnimg.cn/20190618080124847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>示例：扫描线1的有效边表如下：<br><img src=\"https://img-blog.csdnimg.cn/20190618081306344.png\" alt=\"在这里插入图片描述\"><br><strong>桶表</strong>：有效边表按扫描线自增顺序存放的表，可以是链表，也可以是顺序表。<br><strong>桶表的结构</strong>：<br>​    如：多边形P0-P6的桶表为：<br><img src=\"https://img-blog.csdnimg.cn/20190618082918644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>​    有效边表可以有效的减少计算量，提升多边形的填充效率，如所有的扫描线中，计算机只需要计算扫描线1、扫描线7和扫描线8，且扫描线1只需和边P2P3、P3P4、P4P5、P5P6计算交点，而无需与所有边计算交点，有效边填充算法是目前最有效的多边形填充算法之一。<br>至此，多边形的有效边填充算法全部完成。</p>\n<h1 id=\"2-边缘填充算法\"><a href=\"#2-边缘填充算法\" class=\"headerlink\" title=\"2.边缘填充算法\"></a>2.边缘填充算法</h1><h2 id=\"2-1-算法原理：\"><a href=\"#2-1-算法原理：\" class=\"headerlink\" title=\"2.1.算法原理：\"></a><strong>2.1.算法原理：</strong></h2><p>​    先计算多边形每条边与扫描线的交点，然后将交点右侧的所有像素颜色全部取补色。</p>\n<h2 id=\"2-2-补色的定义：\"><a href=\"#2-2-补色的定义：\" class=\"headerlink\" title=\"2.2.补色的定义：\"></a><strong>2.2.补色的定义：</strong></h2><p>​    对于黑白图像，白色的补色为黑色，黑色补色为白色，对于彩色图像，前景色取补就是将前景色置为背景色，背景色取补就是将背景声置为前景色。<br>示例：<br><img src=\"https://img-blog.csdnimg.cn/20190618092226427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>​    边缘填充算法的填充效率受到右侧填充像素的数量影响，当多边形靠近屏幕左侧时，计算机将填充大量无用像素，大大降低的算法的性能，浪费了系统资源。<br>于是有人提出这样的改进：首先在进行多边形填充之前，先扫描一遍多边形，得出多边形的包围盒，并在适当的位置加入一条栅栏。<br>包围盒：包围多边形的最小矩形。</p>\n<h2 id=\"2-3-加入包围盒和栅栏的边缘填充算法原理：\"><a href=\"#2-3-加入包围盒和栅栏的边缘填充算法原理：\" class=\"headerlink\" title=\"2.3.加入包围盒和栅栏的边缘填充算法原理：\"></a><strong>2.3.加入包围盒和栅栏的边缘填充算法原理：</strong></h2><p>​    每次填充前先判断当前边在栅栏的左侧还是右侧，若在左侧，则取补边以右，栅栏以左的像素；若在右侧，则取补边以右，栅栏以左的像素。<br>示例：<br><img src=\"https://img-blog.csdnimg.cn/20190621084324207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>​    可以看出，加入包围盒和栅栏的边缘填充算法极大的减少了需要填充像素的数量，对填充效率的提升是显著的。<br>​    观察边缘填充算法的两幅图，我们是可以察觉到的，边缘填充算法，对多边形的顶点与边的填充不甚理想，边缘填充算法没有给定具体填充时，直线上的点是否包含在填充范围内，笔者试过两种情况的对比——填充时包含直线上的点和填充时不包含直线上的点，得出的结果，多边形的顶点与边的填充都不理想，但是，填充时包含直线上的点的填充方法的最总结果，使多边形在整体上满足“左闭右开”，“下闭上开”原则，顾才用此方法作图。然而，边缘填充算法的填充原理是没有考虑边界的，即多边形的所有像素都填充为一个颜色，无论多边形内部还是多边形的边和顶点，在实际填充效果中，多边形所有像素都填充为一个颜色的填充方式，顶点和边对整体的效果不大，即可以忽略，所以边缘填充算法依旧是效率极高的填充算法之一。</p>\n<h1 id=\"3-种子填充算法\"><a href=\"#3-种子填充算法\" class=\"headerlink\" title=\"3.种子填充算法\"></a>3.种子填充算法</h1><p>3.1.种子填充算法是区域填充算法中的一种，种子填充算法分为：四邻接点种子填充算法和八邻接点种子填充算法。<br>在此之前，我们需要了解一些概念：</p>\n<h3 id=\"3-1-1-四邻接点：\"><a href=\"#3-1-1-四邻接点：\" class=\"headerlink\" title=\"3.1.1.四邻接点：\"></a><strong>3.1.1.四邻接点：</strong></h3><p>​    任易一个种子像素，其左右上下这四个像素成为这个种子像素的四邻接点。<br><img src=\"https://img-blog.csdnimg.cn/20190621092132813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"3-1-2-八邻接点：\"><a href=\"#3-1-2-八邻接点：\" class=\"headerlink\" title=\"3.1.2.八邻接点：\"></a><strong>3.1.2.八邻接点：</strong></h3><p>​    任易一个种子像素，其左右上下及左上、右下、右上、左上这八个像素成为这个种子像素的八邻接点。<br><img src=\"https://img-blog.csdnimg.cn/20190621092334685.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"3-1-3-四连通域：\"><a href=\"#3-1-3-四连通域：\" class=\"headerlink\" title=\"3.1.3.四连通域：\"></a><strong>3.1.3.四连通域：</strong></h3><p>​    多边形中能被四邻接点遍历填充的区域。</p>\n<h3 id=\"3-1-4-八连通域：\"><a href=\"#3-1-4-八连通域：\" class=\"headerlink\" title=\"3.1.4.八连通域：\"></a><strong>3.1.4.八连通域：</strong></h3><p>​    多边形中能被八邻接点遍历填充的区域。<br><img src=\"https://img-blog.csdnimg.cn/20190621094757411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"3-1-5-四连通边界：\"><a href=\"#3-1-5-四连通边界：\" class=\"headerlink\" title=\"3.1.5.四连通边界：\"></a><strong>3.1.5.四连通边界：</strong></h3><p><img src=\"https://img-blog.csdnimg.cn/20190621094925910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"3-1-6-八连通边界：\"><a href=\"#3-1-6-八连通边界：\" class=\"headerlink\" title=\"3.1.6.八连通边界：\"></a><strong>3.1.6.八连通边界：</strong></h3><p><img src=\"https://img-blog.csdnimg.cn/20190621095031628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"3-2-适用场景：\"><a href=\"#3-2-适用场景：\" class=\"headerlink\" title=\"3.2.适用场景：\"></a><strong>3.2.适用场景：</strong></h2><p>​    区域填充算法适用于多边形的边界与内部使用不同的填充色的场景。</p>\n<h2 id=\"3-3-多边形边界的颜色：\"><a href=\"#3-3-多边形边界的颜色：\" class=\"headerlink\" title=\"3.3.多边形边界的颜色：\"></a><strong>3.3.多边形边界的颜色：</strong></h2><p>​    边界的颜色由绘制多边形时的画笔确定。</p>\n<h2 id=\"3-4-多边形内部的颜色填充步骤\"><a href=\"#3-4-多边形内部的颜色填充步骤\" class=\"headerlink\" title=\"3.4.多边形内部的颜色填充步骤\"></a><strong>3.4.多边形内部的颜色填充步骤</strong></h2><p>​    3.4.1.在多边形内部任易选择一个像素作为种子像素。<br>​    3.4.2.将种子像素入栈。<br>​    3.4.3.如果栈不为空，则将栈顶元素出栈。<br>​    3.4.4.按填充色绘制出栈像素。<br>​    3.4.5.按四邻接点（左、上、右、下）（或八邻接点（左、左上、上、右上、右、右下、下、左下））顺序搜索与出栈像素相邻的4（或8）个像素，若该像素的颜色不是填充色并且也不是边界色，则把该像素入栈，否则丢弃该像素。<br>​    不难想象，当多边形的面积极大时，入栈的像素像素将是巨量，有的像素可能即是一个像素的邻接点又是另一个像素的邻接点，以致部分像素入栈多次，此情况下填充过程将大量占用栈存储空间，甚至过量占用空间，致使栈空间不足，导致其他程序无空间可用，如此既不能完成填充，又会造成空间溢出，甚至系统崩溃，所以种子填充算法的缺点极为严重。</p>\n<h2 id=\"3-5-改进——扫描种子填充算法\"><a href=\"#3-5-改进——扫描种子填充算法\" class=\"headerlink\" title=\"3.5.改进——扫描种子填充算法\"></a><strong>3.5.改进——扫描种子填充算法</strong></h2><p>​    3.5.1.在多边形内部选择一个像素作为种子像素。<br>​    3.5.2.将种子像素入栈。<br>​    3.5.3.若栈不为空，则将栈顶元素出栈<br>​    3.5.4.沿出栈像素所在扫描线，对出栈像素左右像素依次填充，直至遇到边界像素为止。<br>​    3.5.5.记录该区间的范围，将最左端的像素记为Xl，将最右端的像素记为Xr。<br>​    3.5.6.检查与当前扫描线相邻的上下两条扫描线中在区间[Xl，Xr]里的有关像素是否全为边界像素或以填充像素，若存在非边界且未填充的像素，则把区间最右端像素取作种子像素入栈。<br>​    扫描种子填充像素每次只将区间最右端的像素入栈，极大的减少了入栈像素，不仅减少了栈空间的占用，还有效的提高了填充效率和填充速度。</p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>首先对于如下的多边形：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190618080545123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"1-有效边表填充算法\"><a href=\"#1-有效边表填充算法\" class=\"headerlink\" title=\"1.有效边表填充算法\"></a>1.有效边表填充算法</h1><h2 id=\"1-1-有效边表填充算法分为如下几个步骤：\"><a href=\"#1-1-有效边表填充算法分为如下几个步骤：\" class=\"headerlink\" title=\"1.1.有效边表填充算法分为如下几个步骤：\"></a><strong>1.1.有效边表填充算法分为如下几个步骤</strong>：</h2><p>​    1.1.1.将多边形所有的边分别与扫描线1计算交点，得到交点集，与扫描线计算的边没有顺序要求。<br>​    1.1.2.将点集按标x的大小递增排序，得到有序点集。<br>​    1.1.3.将有序点集两两配对，得到对应的像素区间。<br>​    1.1.4.将像素区间内的像素填充颜色，至此第一条扫描线上处于多边形内的的像素填充完毕。<br>​    1.1.5.扫描线标号加1，重复以上步骤，直至到最后一条扫描线。<br>​    如：对于扫描线3（y=3）与多边形所有的边计算交点，得到与P3P4交于点（4.5，3），与P3P2交于点（2.4，3），与P5P6交于点（8.8，3），与P5P4交于点（7，3）。<br>​    圆整处理得到点集（5，3）、（2，3）、（9，3）、（7，3）。<br>​    递增排序得到有序点集（2，3）、（5，3）、（7，3）、（9，3）。<br>​    两两配对得到扫描线3上的填充像素区间[2，5]、[7，9]。<br>​    填充区间内的所有像素。<br>​    得到如图所示的填充效果：<br><img src=\"https://img-blog.csdnimg.cn/20190617115850448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>全部填充得到如下效果：<br><img src=\"https://img-blog.csdnimg.cn/20190617115915999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"1-2-至此我们发现如下疑问：\"><a href=\"#1-2-至此我们发现如下疑问：\" class=\"headerlink\" title=\"1.2.至此我们发现如下疑问：\"></a><strong>1.2.至此我们发现如下疑问：</strong></h2><p>​    1.2.1.像素填充的多边形面积大于多边形实际面积。<br>​    可能上图不太明显，我们举一个明显一点的例子，如下正方形：<br><img src=\"https://img-blog.csdnimg.cn/20190617115935411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>我们填充后的效果为：<br><img src=\"https://img-blog.csdnimg.cn/20190617115949648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>​    而正方形的实际面积是4，在显示器上一个像素为一面积，正方形应该占4个像素点，而实际却占了9个像素点，对于这种问题，有效边表填充算法采用“左闭右开”，“下闭上开”的原则进行像素点的填充，按照此原则，正方形的填充效果如下：<br><img src=\"https://img-blog.csdnimg.cn/20190617120002618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>1.2.1.对于点集（1，3）、（1，8）它们分别为扫描线1与P3P2、P3P4、P5P4、P5P6的交点，而在实际计算中它们仍只是两个点，如果处理不当，计算机可能会两两配对得到区间（3，8）而填充到错误的像素区间。<br>对于此问题，有效边表填充算法采用分类连接点进行处理。<br>有效边表填充算法将多边形的各个连接点分为三类连接点：</p>\n<h3 id=\"普通连接点：\"><a href=\"#普通连接点：\" class=\"headerlink\" title=\"+普通连接点：\"></a><strong>+普通连接点：</strong></h3><p>​    连接点所在的两条边分别处于其所在的扫描线的上方和下方，如P2点。</p>\n<h3 id=\"局部最低点：\"><a href=\"#局部最低点：\" class=\"headerlink\" title=\"+局部最低点：\"></a><strong>+局部最低点：</strong></h3><p>​    连接点所在的两条边都处于其所在的扫描线的上方，如P3、P5点。</p>\n<h3 id=\"局部最高点：\"><a href=\"#局部最高点：\" class=\"headerlink\" title=\"+局部最高点：\"></a><strong>+局部最高点：</strong></h3><p>​    连接点所在的两条边都处于其所在的扫描线的下方，如：P4、P1、P6点。<br>​    在填充开始前，有效边填充算法先对多边形所有的连接点进行分类，判断其在点集中的数量。<br>有效边填充算法采用如下原则对多边形的连接点进行处理：</p>\n<h3 id=\"1-2-2-普通连接点的处理原则\"><a href=\"#1-2-2-普通连接点的处理原则\" class=\"headerlink\" title=\"1.2.2.普通连接点的处理原则\"></a><strong>1.2.2.普通连接点的处理原则</strong></h3><p>​    以P2为例，根据“下闭上开”原则，对于P3P2上的点P2不予填充，P2P1上的点P2需要填充，P2点只填充1次，顾在扫描线7的填充像素点集中P2点的个数记为1，即可以不处理。</p>\n<h3 id=\"1-2-3-局部最低点的处理原则\"><a href=\"#1-2-3-局部最低点的处理原则\" class=\"headerlink\" title=\"1.2.3.局部最低点的处理原则\"></a><strong>1.2.3.局部最低点的处理原则</strong></h3><p>​    以P3为例，根据“下闭上开”原则，对于P3P2上的点P3需要填充，P3P4上的点P3也需要填充，P3填充2次，扫描线1的填充像素点集中，再添加一个P3点，使其中有两个P3点，在像素点集中将P3点的个数记为2，P5点进行同样的处理，这样当算法进行两两配对时，得到的像素区间为[3，3]、[5，5]，如此即可避免出现[3，8]的点集区间，解决此类情况的填充错误。</p>\n<h2 id=\"1-2-4-局部最高点的处理原则\"><a href=\"#1-2-4-局部最高点的处理原则\" class=\"headerlink\" title=\"1.2.4.局部最高点的处理原则\"></a><strong>1.2.4.局部最高点的处理原则</strong></h2><p>​    以P1点为例，根据“下闭上开”原则，对于P2P1上的P1点不予填充，P0P1上的P1点也不予填充，P1填充0次，扫描线12的像素填充点集中P1点的个数记为0，即从点集中删除P1点，这样的处理符合多边形整体的“下闭上开”原则。<br>至此，多边形的有效边表填充算法的填充原理已经完成。<br>但是，我们在填充多边形之前还需要进行一项很重要的工作——根据多边形计算其有效边表，首先我们要了解什么是有效边。<br><strong>有效边</strong>：多边形与当前扫描线相交的边称为有效边，有效边的引入可以有效的避免扫描边与多边形的所有的边进行交点计算，提高算法的效率。<br><strong>有效边表</strong>：有效边按与扫描线交点x坐标递增顺序存放的链表。<br><strong>有效边表节点结构</strong>：<br><img src=\"https://img-blog.csdnimg.cn/20190618080124847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>示例：扫描线1的有效边表如下：<br><img src=\"https://img-blog.csdnimg.cn/20190618081306344.png\" alt=\"在这里插入图片描述\"><br><strong>桶表</strong>：有效边表按扫描线自增顺序存放的表，可以是链表，也可以是顺序表。<br><strong>桶表的结构</strong>：<br>​    如：多边形P0-P6的桶表为：<br><img src=\"https://img-blog.csdnimg.cn/20190618082918644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>​    有效边表可以有效的减少计算量，提升多边形的填充效率，如所有的扫描线中，计算机只需要计算扫描线1、扫描线7和扫描线8，且扫描线1只需和边P2P3、P3P4、P4P5、P5P6计算交点，而无需与所有边计算交点，有效边填充算法是目前最有效的多边形填充算法之一。<br>至此，多边形的有效边填充算法全部完成。</p>\n<h1 id=\"2-边缘填充算法\"><a href=\"#2-边缘填充算法\" class=\"headerlink\" title=\"2.边缘填充算法\"></a>2.边缘填充算法</h1><h2 id=\"2-1-算法原理：\"><a href=\"#2-1-算法原理：\" class=\"headerlink\" title=\"2.1.算法原理：\"></a><strong>2.1.算法原理：</strong></h2><p>​    先计算多边形每条边与扫描线的交点，然后将交点右侧的所有像素颜色全部取补色。</p>\n<h2 id=\"2-2-补色的定义：\"><a href=\"#2-2-补色的定义：\" class=\"headerlink\" title=\"2.2.补色的定义：\"></a><strong>2.2.补色的定义：</strong></h2><p>​    对于黑白图像，白色的补色为黑色，黑色补色为白色，对于彩色图像，前景色取补就是将前景色置为背景色，背景色取补就是将背景声置为前景色。<br>示例：<br><img src=\"https://img-blog.csdnimg.cn/20190618092226427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>​    边缘填充算法的填充效率受到右侧填充像素的数量影响，当多边形靠近屏幕左侧时，计算机将填充大量无用像素，大大降低的算法的性能，浪费了系统资源。<br>于是有人提出这样的改进：首先在进行多边形填充之前，先扫描一遍多边形，得出多边形的包围盒，并在适当的位置加入一条栅栏。<br>包围盒：包围多边形的最小矩形。</p>\n<h2 id=\"2-3-加入包围盒和栅栏的边缘填充算法原理：\"><a href=\"#2-3-加入包围盒和栅栏的边缘填充算法原理：\" class=\"headerlink\" title=\"2.3.加入包围盒和栅栏的边缘填充算法原理：\"></a><strong>2.3.加入包围盒和栅栏的边缘填充算法原理：</strong></h2><p>​    每次填充前先判断当前边在栅栏的左侧还是右侧，若在左侧，则取补边以右，栅栏以左的像素；若在右侧，则取补边以右，栅栏以左的像素。<br>示例：<br><img src=\"https://img-blog.csdnimg.cn/20190621084324207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>​    可以看出，加入包围盒和栅栏的边缘填充算法极大的减少了需要填充像素的数量，对填充效率的提升是显著的。<br>​    观察边缘填充算法的两幅图，我们是可以察觉到的，边缘填充算法，对多边形的顶点与边的填充不甚理想，边缘填充算法没有给定具体填充时，直线上的点是否包含在填充范围内，笔者试过两种情况的对比——填充时包含直线上的点和填充时不包含直线上的点，得出的结果，多边形的顶点与边的填充都不理想，但是，填充时包含直线上的点的填充方法的最总结果，使多边形在整体上满足“左闭右开”，“下闭上开”原则，顾才用此方法作图。然而，边缘填充算法的填充原理是没有考虑边界的，即多边形的所有像素都填充为一个颜色，无论多边形内部还是多边形的边和顶点，在实际填充效果中，多边形所有像素都填充为一个颜色的填充方式，顶点和边对整体的效果不大，即可以忽略，所以边缘填充算法依旧是效率极高的填充算法之一。</p>\n<h1 id=\"3-种子填充算法\"><a href=\"#3-种子填充算法\" class=\"headerlink\" title=\"3.种子填充算法\"></a>3.种子填充算法</h1><p>3.1.种子填充算法是区域填充算法中的一种，种子填充算法分为：四邻接点种子填充算法和八邻接点种子填充算法。<br>在此之前，我们需要了解一些概念：</p>\n<h3 id=\"3-1-1-四邻接点：\"><a href=\"#3-1-1-四邻接点：\" class=\"headerlink\" title=\"3.1.1.四邻接点：\"></a><strong>3.1.1.四邻接点：</strong></h3><p>​    任易一个种子像素，其左右上下这四个像素成为这个种子像素的四邻接点。<br><img src=\"https://img-blog.csdnimg.cn/20190621092132813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"3-1-2-八邻接点：\"><a href=\"#3-1-2-八邻接点：\" class=\"headerlink\" title=\"3.1.2.八邻接点：\"></a><strong>3.1.2.八邻接点：</strong></h3><p>​    任易一个种子像素，其左右上下及左上、右下、右上、左上这八个像素成为这个种子像素的八邻接点。<br><img src=\"https://img-blog.csdnimg.cn/20190621092334685.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"3-1-3-四连通域：\"><a href=\"#3-1-3-四连通域：\" class=\"headerlink\" title=\"3.1.3.四连通域：\"></a><strong>3.1.3.四连通域：</strong></h3><p>​    多边形中能被四邻接点遍历填充的区域。</p>\n<h3 id=\"3-1-4-八连通域：\"><a href=\"#3-1-4-八连通域：\" class=\"headerlink\" title=\"3.1.4.八连通域：\"></a><strong>3.1.4.八连通域：</strong></h3><p>​    多边形中能被八邻接点遍历填充的区域。<br><img src=\"https://img-blog.csdnimg.cn/20190621094757411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"3-1-5-四连通边界：\"><a href=\"#3-1-5-四连通边界：\" class=\"headerlink\" title=\"3.1.5.四连通边界：\"></a><strong>3.1.5.四连通边界：</strong></h3><p><img src=\"https://img-blog.csdnimg.cn/20190621094925910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"3-1-6-八连通边界：\"><a href=\"#3-1-6-八连通边界：\" class=\"headerlink\" title=\"3.1.6.八连通边界：\"></a><strong>3.1.6.八连通边界：</strong></h3><p><img src=\"https://img-blog.csdnimg.cn/20190621095031628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"3-2-适用场景：\"><a href=\"#3-2-适用场景：\" class=\"headerlink\" title=\"3.2.适用场景：\"></a><strong>3.2.适用场景：</strong></h2><p>​    区域填充算法适用于多边形的边界与内部使用不同的填充色的场景。</p>\n<h2 id=\"3-3-多边形边界的颜色：\"><a href=\"#3-3-多边形边界的颜色：\" class=\"headerlink\" title=\"3.3.多边形边界的颜色：\"></a><strong>3.3.多边形边界的颜色：</strong></h2><p>​    边界的颜色由绘制多边形时的画笔确定。</p>\n<h2 id=\"3-4-多边形内部的颜色填充步骤\"><a href=\"#3-4-多边形内部的颜色填充步骤\" class=\"headerlink\" title=\"3.4.多边形内部的颜色填充步骤\"></a><strong>3.4.多边形内部的颜色填充步骤</strong></h2><p>​    3.4.1.在多边形内部任易选择一个像素作为种子像素。<br>​    3.4.2.将种子像素入栈。<br>​    3.4.3.如果栈不为空，则将栈顶元素出栈。<br>​    3.4.4.按填充色绘制出栈像素。<br>​    3.4.5.按四邻接点（左、上、右、下）（或八邻接点（左、左上、上、右上、右、右下、下、左下））顺序搜索与出栈像素相邻的4（或8）个像素，若该像素的颜色不是填充色并且也不是边界色，则把该像素入栈，否则丢弃该像素。<br>​    不难想象，当多边形的面积极大时，入栈的像素像素将是巨量，有的像素可能即是一个像素的邻接点又是另一个像素的邻接点，以致部分像素入栈多次，此情况下填充过程将大量占用栈存储空间，甚至过量占用空间，致使栈空间不足，导致其他程序无空间可用，如此既不能完成填充，又会造成空间溢出，甚至系统崩溃，所以种子填充算法的缺点极为严重。</p>\n<h2 id=\"3-5-改进——扫描种子填充算法\"><a href=\"#3-5-改进——扫描种子填充算法\" class=\"headerlink\" title=\"3.5.改进——扫描种子填充算法\"></a><strong>3.5.改进——扫描种子填充算法</strong></h2><p>​    3.5.1.在多边形内部选择一个像素作为种子像素。<br>​    3.5.2.将种子像素入栈。<br>​    3.5.3.若栈不为空，则将栈顶元素出栈<br>​    3.5.4.沿出栈像素所在扫描线，对出栈像素左右像素依次填充，直至遇到边界像素为止。<br>​    3.5.5.记录该区间的范围，将最左端的像素记为Xl，将最右端的像素记为Xr。<br>​    3.5.6.检查与当前扫描线相邻的上下两条扫描线中在区间[Xl，Xr]里的有关像素是否全为边界像素或以填充像素，若存在非边界且未填充的像素，则把区间最右端像素取作种子像素入栈。<br>​    扫描种子填充像素每次只将区间最右端的像素入栈，极大的减少了入栈像素，不仅减少了栈空间的占用，还有效的提高了填充效率和填充速度。</p>\n"},{"title":"【C++】C++STL标准模板库","date":"2019-10-06T02:20:37.000Z","_content":"\n\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 一、STL的基本概念\n\n## 1.什么是STL\n\n STL (Standard Template Librany）标准准模板庠是惠普实验室开发的一系列软件的统称。现在主要出现在C++中，但在被引入C++之前该技木就已存在了很长一段吋间了。\n\nSTL的从广义上讲分为三类: algorithm (算法)、container (容器)和iterator (迭代器)，容器和算法通过迭代器可以进行无缝链接。几乎所有的代码都釆用了模板类和模板函数的方式,这相比于传统的由函数和类组成的库来说提供了更好的代码重用机会。在C++标准中，STL 被组织为下面的13个尖文件:`<algorithm>`、`<deque>`、`<functional>`、`<iterator>`、`<vector>`、`<list>`、 `<map>`、`<memory>`、`<numerio>`、`<queue>`、`<set>`、\t`<stack>` 和`<utility>`。\n\n![](【C++】C++STL标准模板库/Snipaste_2019-10-06_10-41-56.png)\n\n我们详细的说六大组件：\n\n- 容器(Container)\n- 算法(Algorithm)\n- 迭代器(Iterator)\n- 仿函数(Function object)\n- 适配器(Adaptor)\n- 空间配置器(allocator)\n\n## 2.STL的好处\n\n- STL是C++的一部分，因此不用额外安装什么，它被内建在你的编译器之内。\n\n- STL的一个重要特点是数据结构和算法的分离。尽管这是个简单的概念，但是这种分离确实使得STL变得非常通用。\n  例如，在STL 的vector容器中，可以放入元素、 基础数据类型变量、元素的地址;\n  STL的sort()函数可以用来操作vector,list等容器。\n\n- 程序员可以不用思考STL具体的实现过程，只要能够熟综使用STL就OK了。这样他们就可以把精力放在程序开发的别的方面。\n\n- STL 具有高可重用性，高性能，高移植性，跨平台的优点。\n\n    高可重用性: STL 中几乎所有的代码都采用了模板类和模版函数的方式实现，这相比于传统的由函数和类组成的库来说提供了更好的代码重用机会。关于模板的知识，已经给大家介绍了。\n\n  高性能:如map可以高效地从十万条记录里面查找出指定的记录，因为map是采用红黑树的变体实现的。\n\n  高移植性:如在项目A上用STL编写的模块，可以直接移植到项目B上。\n\n  跨平台:如用windows的Visual Studio编写的代码可以在Mac OS的XCode上直接运行。\n\n- 了解到STL的这些好处，我们知道STL无疑是最值得C++程序员骄傲的一部分。每一个C++程序员都应该好好学习STL.只有能够熟练使用STL的程序员，才是好的C++程序员。\n\n# 二、容器\n\n## 1.容器\n\n  在实际的开发过程中，数据结构本身的重要性不会逊于操作于数据结构的算法的重要性，当程序中存在着对时间要求很高的部分时，数据结构的选择就显得更加重要。\n\n  经典的数据结构数量有限，但是我们常常重复着一些为了实现向量、链表等结构而编写的代码，这些代码都十分相似，只是为了适应不同数据的变化而在细节上有所出入。STL容器就为我们提供了这样的方便，它允许我们重复利用己有的实现构造自己的特定类型下的数据结构，通过设置-些模板，STL 容器对最常用的数据结构提供了支持，这些模板的参数允许我们指定容器中元素的数据类型，可以将我们许多重复而乏味的工作简化。\n\n​\t容器部分主要由头文件`<vector>`, `<list>`, `<deque>`, `<set>`, `<map>`, `<stack>`和`<queue>`组成。对于常用的一些容器和容器适配器(可以看作由其它容器实现的容器)，可以通过下表总结一:下它们和相应头文件的对应关系。\n\n![](【C++】C++STL标准模板库/Snipaste_2019-10-06_10-41-56.png)\n\n## 2.容器的分类\n\n### 序列式容器(Sequence containers) \n\n每个元素都有固定位置--取决于插入时机和地点，和元素值无关。如：vector、deque、 Iist。\n\n### 关联式容器(Associated containers) \n\n元素位置取决于特定的排序准则，和插入顺序无关。如：sset、multiset、 map、multimapu。\n\n![](【C++】C++STL标准模板库/Snipaste_2019-10-06_14-36-13.png)\n\n## 3.string类\n\n### string类的本质\n\n`string`类本质上其实就是`char*`的容器，是`cahr*`的封装。\n\n### string类的遍历\n\n**使用[]遍历：**\n\n```C++\nstring str = \"string_str\";\nfor (int i = 0; i < str.length(); i++)\n\tcout << str[i];\n```\n\n**使用迭代器遍历：**\n\n```C++\nstring str = \"string_str\";\nfor(string::iteratori=str.begin();i<str.end();i++)\n\tcout <<*i;\n```\n\n<font color=red> 注意这里的`i`是一个指向string::iterator类型的指针。</font>\n\n**使用at()遍历：**\n\n```C++\nstring str = \"string_str\";\nfor (int i = 0; i < str.length(); i++)\n\tcout << str.at(i);\n```\n\n`at()`与`[]`不同的是，当访问发生越界等错误时，`at()`会自动抛出异常，而`[]`不会抛出异常而中断程序。\n\n### string解封成char*\n\nC++为string类提供了一个专门的函数<font color = red> **str.c_str()**</font>，str是string类型的对象，但是需要注意的是`str.c_str()`返回的是一个<font color = red> **const char***</font>，不能再被赋值给其他的变量，但是我们可以直接将`str.c_str()`当作`char*`来使用，如：`str.c_str()[1]`，即通过`char*`指针访问str中的第二个元素。\n\n### string类中一些常用函数\n\n|      | 函数名                                       | 作用                                                         |\n| ---- | -------------------------------------------- | ------------------------------------------------------------ |\n| 复制 | str.copy(char *buf,int cout)                 | 从字符串str中拷贝cout个字符到char数组buf中                   |\n| 连接 | str.append(string strs)                      | 将字符串strs连接到str之后，支持string和char*                 |\n| 查找 | int str.find(char *strs,int index)           | 从字符串str中的第index索引开始查找strs子串或字符，返回查找到的第一个匹配值的索引，返回的索引也可以使用迭代器来接收 |\n| 替换 | str.replace(int index,int length,char *strs) | 在字符串str中，从index索引开始用strs字符串替换length个长度的子串 |\n| 删除 | str.erase(int index,int length)              | 删除字符出str从index位置开始的length长度的字符               |\n| 插入 | str.insert(int index,char *strs)             | 从str字符串的index位置开始插入字串strs                       |\n\n###  string类中常用算法函数\n\n```C++\nstring str = \"string_str_io_stdsfx.h_iostream\";\ntransform(str.begin(), str.end(), str.begin(), toupper);\ncout << str << endl;\n```\n\ntransform算法包含在`#include <algorithm>`头文件中\n\n**transform算法的使用：**\n\n**原型：**transform(first,last,result,op);\n\nfirst是容器的首迭代器，last为容器的末迭代器，result为存放结果的容器，op为要进行操作的一元函数对象或sturct、class。\n\n**代码解释：**str.begin()返回一个指向str首部位置的迭代器，str.end()返回一个指向str尾部位置的迭代器，因为我们把输出结果继续存放在str中，且迭代器始于容器相联系的，所以存放结果的容器也是str.begin()，而我们对str做的操作是将小写字母装换为大写，C++提供了标准的转换函数,所以操作函数为toupper。\n\n**transform算法的另一个重载形式：**\n\n**原型：**transform(first1,last1,first2,result,binary_op);\n\nfirst1是第一个容器的首迭代 器，last1为第一个容器的末迭代器，first2为第二个容器的首迭代器，result为存放结果的容器，binary_op为要进行操作的二元函数 对象或sturct、class。\n\n需要注意的是，两个容器first1和first2中的元素数量必须相等，否则会抛异常。\n\n## 4.vector容器\n\n- vector是将元素置于一个<font color=red> **动态数组**</font>中加以管理的容器\n- vector支持随机存取元素，支持索引存取（[],at()）和迭代器存取\n- vector在尾部添加和移除元素速度快，在中部和头部速度慢\n- 使用vector容易需要包含`#include<vector>`头文件\n\n### vector常用方法\n\n<table>\n  <tr>\n    <th> </th>\n    <th>函数</th>\n    <th>作用</th>\n  </tr>\n  <tr>\n    <td rowspan=\"4\">读取与赋值</td>\n    <td>front(void)</td>\n    <td>获取容器首元素，既可以作左值也可以作右值</td>\n  </tr>\n  <tr>\n    <td>back(void)</td>\n    <td>获取容器尾元素，既可以作左值也可以作右值</td>\n  </tr>\n  <tr>\n    <td>push_back(T t)</td>\n    <td>在容器的尾部添加元素</td>\n  </tr>\n  <tr>\n    <td>pop_back(T t)</td>\n    <td>删除容器最后一个元素</td> \n  </tr>\n  <tr>\n    <td rowspan=\"4\">只读</td>\n    <td>begin(void)</td>\n    <td>获取容器首部迭代器</td> \n  </tr>\n  <tr>\n    <td>end(void)</td>\n    <td>获取容器尾部迭代器</td> \n  </tr>\n  <tr>\n    <td>rbegin(void)</td>\n    <td>获取逆序首部迭代器，实际指向容器的尾部，只能使用vector&#60int&#62::reverse_iterator逆序迭代器接收</td> \n  </tr>\n  <tr>\n    <td>rend(void)</td>\n    <td>获取逆序尾部部迭代器，实际指向容器的首部，只能使用vector&#60int&#62::reverse_iterator逆序迭代器接收</td> \n  </tr>\n  <tr>\n    <td rowspan=\"2\">删除</td>\n    <td>erase(iterator pos)</td>\n    <td>删除迭代器pos指向位置的元素</td> \n  </tr>\n  <tr>\n    <td>erase(iterator begin,iterator end)</td>\n    <td>从迭代器begin指向位置开始到end指向位置结束，区间删除元素</td> \n  </tr>\n  <tr>\n    <td>插入</td>\n    <td>insert(iterator pos,T t)</td>\n    <td>在pos迭代器指向的位置插入元素t，insert中的迭代器pos只能是begin()或end()否则会报错，似乎不止其他的迭代器</td> \n  </tr>\n    <td>判空</td>\n    <td>empty(void)</td>\n    <td>容器判空</td> \n  </tr>\n</table>\n\n## 5.deque容器\n\n- deque容器是一个双端数组，在双端数组的两端均可以插入和删除元素\n- 使用deque容器需要包头文件`#include<deque>`\n\ndeque容器可以说是vector容器的升级版，deque的用法基本和vector一致，但是deque不仅提供push_back()，pop_back()还提供<font color = red> **push_front()**</font> 和<font color = red> **pop_front()**</font>。\n\n## 6.stack容器\n\n- stack容器是一个栈模型\n- 使用stack容器需要包含头文件`#include<stack>`\n\n### stack常用方法\n\n| 函数      | 作用         |\n| --------- | ------------ |\n| push(T t) | 元素入栈顶   |\n| pop()     | 栈顶元素出栈 |\n| top()     | 获取栈顶元素 |\n\n## 7.queue容器\n\n- queue容器是一个队列模型\n- 使用queue容器需要包含头文件`#include<queue>`\n\n### queue常用方法\n\n| 函数      | 作用                                   |\n| --------- | -------------------------------------- |\n| push(T t) | 元素入队尾                             |\n| pop()     | 队首元素出队                           |\n| front()   | 获取队首元素，既可以作左值也可以作右值 |\n| back()    | 获取队尾元素，既可以作左值也可以作右值 |\n\n## 8.list容器\n\n- list容器是一个双向链表模型，可以高效的进行元素的插入和删除操作\n- list容器不支持随机访问，即不支持[],at()和iterator + n(如：begin()+1)等形式的访问\n- 使用list容器需要包含头文件`#include<list>`\n\nlist容器除了不支持随机访问外，用法和deque容器的用法基本一致，除此之外list容器还提供一个<font color = red> **remove(T t)**</font>函数来根据元素内容删除元素\n\n使用list容器时有一点需要注意<font color = red> **list容器在使用erase删除元素时，遵循左闭右开的原则**</font>，如：\n\n```C++\nlist<int> li;\nfor (int i = 0; i < 5; i++)\n\tli.push_back(i);\nfor (list<int>::iterator it = li.begin(); it != li.end(); it++)\n\tcout << *it;\ncout << endl;\nlist<int>::iterator it1 = li.begin();//it1指向元素0\nlist<int>::iterator it2 = li.begin();\nit2++; it2++; it2++;//此时it2指向元素3\nli.erase(it1, it2);\nfor (list<int>::iterator it = li.begin(); it != li.end(); it++)\n\tcout << *it;\ncout << endl;\n```\n\n**输出结果：**\n\n```\n01234\n34\n```\n\n可以看到erase在删除0-3的元素时删除了0，1，2而没有删除3，即左闭右开。\n\n## 9.priority_queue容器\n\n- `priority_queue`容器是一个具有优先级的队列，又叫优先级队列适配器，分为最大优先级队列和最小优先级队列两种\n\n- priority_queue容器是一种特殊的queue容器，所以也需要包含头文件`#include<queue>`\n\n默认的定义`priority_queue<T> pr`的优先级队列是最大优先级队列，显示定义最大优先级队列：`priority_queue<int,vector<int>,less<int>> pr`，`less`是一个谓词后面再学习，显示定义最小优先级队列：`priority_queue<int,vector<int>,greater<int>> pr`，其中使用`greater`需要包含头文件`#include<functional>`。\n\n`priority_queue`容器的用法基本和`queue`一致，除此之外，`priority_queue`容器提供一个`top()`函数来获取队首元素，而`queue`容器没有这个方法。\n\n**示例：**\n\n```C++\npriority_queue<int,vector<int>,greater<int>> pr;\npr.push(12);\npr.push(4);\npr.push(10);\npr.push(20);\ncout << \"最小元素：\" <<pr.top() << endl;\nwhile (pr.size() > 0)\n{\n\tcout << pr.top() << \",\";\n\tpr.pop();\n}\n```\n\n**输出结果：**\n\n```\n最小元素：4\n4,10,12,20,\n```\n\n## 10.set容器\n\n- `set`是一个<font color=red>**集合**</font>容器，其中所包含的元素是<font color=red>**唯一**</font>的，<font color=red>**集合中的元素按一定的顺序排序**</font>，元素的插入过程是按排序规则插入，所以不能指定位置插入\n- `set`采用红黑树变体的数据结构实现，红黑树属于平衡二叉树，在插入和删除操作上比`vector`容器速度更快\n- `set`容器不支持[]和at()来存取元素\n- <font color=red>**set不支持直接修改容器中的元素**</font>，因为元素是自动排序的，如果希望修改一个元素值，就必须删除这个元素再插入新元素\n- 要使用`set`容器需要包含头文件`#include<set>`\n\n### set容器的基本特性\n\n默认情况下，直接定义的set容器采用最小优先排序，和priority_queue容器恰好相反，`set<T> se`就是隐式的`set<T,less<T>> se`，定义最大优先排序的set容器需要显示定义：`set<T,greater<T>> se`。\n\n我们来看一个例子：\n\n```C++\nset<string,greater<string>> se;//采用最大优先排序\nfor (int i = 0; i < 5; i++)//生成随机字符串元素\n{\n\tint tmp = rand();\n\tstring str = \"\";\n\twhile (str.length()<=3)\n\t{\n\t\tif(tmp >= 97 && tmp <= 122)\n\t\t\tstr += tmp;\n\t\ttmp = rand();\n\t}\n\tse.insert(str);\n}\nse.insert(\"strs\");//插入相同的字符串元素\nse.insert(\"strs\");\nse.insert(\"strs\");\nfor (set<string, greater<string>>::iterator it = se.begin(); it != se.end(); it++)\n\tcout << *it << endl;\n```\n\n**输出结果：**\n\n```\nwqye\nvfep\nstrs\nomsk\nkfnm\ncdsb\n```\n\n可以看到，容器里的字符串确实按照字符串的比较规则按从大到小的顺序排列着，并且无论我们插入多少个相同的元素，在容器内只会存储一个相同的元素值。\n\n值得注意的是：\n\n`set`容器只提供了`insert(T t)`函数来插入元素。\n\n### 自定义元素的排序\n\n自定义类作元素可能会出现类中有多个字段，而我们需要其中的某一个字段来作为关键字在`set`容器中排序，要实现这样的行为，我们就需要用到<font color=red>**仿函数**</font>了。\n\n#### 什么是仿函数？\n\n仿函数实质上就是一个做了`()`重载的结构体，因为重载了`()`使用起来类似函数，所以称之为仿函数。\n\n我们来看一个例子：\n\n```C++\nclass Student\n{\npublic:\n\tstring name;\n\tint age;\n\tbool isStudent;\n\tStudent(const string name, const int age, const bool isStudent)\n\t{\n\t\tthis->age = age;\n\t\tthis->name = name;\n\t\tthis->isStudent = isStudent;\n\t}\n};\nstruct AgeSort//仿函数\n{\n\tbool operator()(const Student &lift, const Student &right)\n\t{\n\t\treturn (lift.age < right.age);\n\t}\n};\nint main()\n{\n\tset<Student, AgeSort> se;\n\tStudent s1(\"Alian\", 23, true);\n\tStudent s2(\"Blank\", 20, true);\n\tStudent s3(\"Cary\", 43, false);\n\tStudent s4(\"Davel\", 23, true);\n\tse.insert(s1); se.insert(s2);\n\tse.insert(s3); se.insert(s4);\n\tfor (set<Student, AgeSort>::iterator it = se.begin(); it != se.end(); it++)\n\t\tcout << it->name << \"\\t\" << it->age << \"\\t\" << it->isStudent << endl;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**输出结果：**\n\n```\nBlank   20      1\nAlian   23      1\nCary    43      0\n```\n\n其中`AgeSort`就是仿函数，它的比较关键字是`Student.age`，所以`set`容器对象se会以age作为排序关键字，其实我们之前使用的`less<>`和`greater<>`也是反函数，只不过是C++预定义好的仿函数。\n\n细心的朋友可能会发现，我们插入的s4对象居然不再容器里！！！这是因为set容器中的元素具有唯一性，而set容器是通过关键字来识别元素的，所当碰到关键字相同的元素时，set只会存储一个元素。\n\n那么这种情况该怎么解决呢？答案是set容器没有办法解决这种情况，如果有出现这种情况，就不能使用set容器而改用multiset容器。\n\n在后面的算法模块我们详细介绍仿函数。\n\n### set常用函数\n\n| 函数             | 作用                                                         |\n| ---------------- | ------------------------------------------------------------ |\n| find(T t)        | 查找元素t，返回指向t元素的迭代器，查找失败返回指向set.end()的迭代器 |\n| count(T t)       | 返回容器中元素t的个数，值要么是0，要么是1                    |\n| lower_bound(T t) | 返回一个指向>=t元素的迭代器，如果t存在则指向t，如果t不存在则指向t后面的一个元素 |\n| upper_bound(T t) | 返回一个指向>t元素的迭代器，即t元素后面的一个元素            |\n| equal_range(T t) | 返回一个包含两个set类型的迭代器的对组pair<set<T>::iterator,set<T>::iterator>第一个迭代器指向t元素，第二个迭代器指向t后面的一个元素，如果t不存在，则两个迭代器都指向t后面的一个元素 |\n\n### <font color=blue> 小知识</font>\n\n<font color=blue> 事实上容器中的`insert`函数是有返回值的，`insert`的返回值是一个对组(pair)类型的泛型`pair<set<T>::iterator, bool>`的对象，`pair`是一个只有两个字段的模板，我们可以直接定义`pair<set<T>::iterator, bool>`类型对象来接收`insert`函数的返回值，如：</font>\n\n```C++\npair<set<Student,AgeSort>::iterator, bool> pait=se.insert(s1);\n```\n\n<font color=blue> 我们可以通过`pair.first`和`pair.second`来访问对组中的两个元素，通过`pair.first`来访问对组中的第一个元素`set<Student,AgeSort>::iterator`类型的迭代器，通过`pair.first->first`，和`pair.first->second`可以访问迭代器所指向的容器元素，我们通过`pair.second`来访问对组中的第二个元素，bool型的元素记录的是insert函数插入是否成功，如果插入成功则记录true，否则记录false。</font>\n\n## 11.multiset容器\n\n- `multiset`容器可以说是set容器的升级版，multiset容器支持多个相同键值的元素的存储，所以要使用`multiset`需要包含头文件`#include<set>`\n\nmultiset的用法和set一致。\n\n## 12.map容器\n\n- `map`是标准的关联式容器，一个`map`元素是一个键值对(key,value),`map`提供基于键值的快速检索能力\n- `map`中<font color=red>` key`值是唯一的</font>\n- `map`容器中的元素也是按一定顺序排列的，元素插入过程是按排序规则插入的，所以不能指定位置插入\n- `map`容器的具体实现也是采用红黑二叉树变体的平衡二叉树的数据结构，在插入和删除的操作上比`vector`更快\n- 与`set`不同的是`map`支持直接存取`key`值对应的`value`，也支持[]操作符\n- 要使用`map`容器就需要包含头文件`#include<map>`\n\n### map的元素插入\n\n```C++\nint main()\n{\n\tmap<int, string> ma;\n\t//方法一\n\tma.insert(pair<int, string>(1, \"pair\"));\n\tma.insert(pair<int, string>(1, \"pair_02\"));\n\t//方法二\n\tma.insert(make_pair(2, \"make_pair\"));\n\tma.insert(make_pair(2, \"make_pair_02\"));\n\t//方法三\n\tma.insert(map<int, string>::value_type(3, \"value_type\"));\n\tma.insert(map<int, string>::value_type(3, \"value_type_02\"));\n\t//方法四\n\tma[4] = \"map\";\n\tma[4] = \"map_02\";\n\tfor (map<int, string>::iterator it = ma.begin(); it != ma.end(); it++)\n\t\tcout << it->first << \"\\t\" << it->second << endl;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**输出结果：**\n\n```\n1       pair\n2       make_pair\n3       value_type\n4       map_02\n```\n\n上面四种方法都可以向map容器里添加元素，但是四者中也有一些微小的区别，前面三种方法在插入相同键值时，只会保存第一存储的结果，之后插入相同键值的元素时都会插入失败，而第四种方法则是后面赋值的元素覆盖前面赋值的元素。\n\nmap似乎没办法来指定是从大到小排序或是从小到大排序\n\nmap除了元素的形式不同，在其他方面map的用法基本和set一致\n\n## 13.multimap容器\n\n`multimap`容器和`multiset`容器一样，是`map`容器的升级版，支持一个键对应多个值，所以`multimap`的一个重要应用场景就是数据分组。\n\n## 14.容器在使用过程必须要注意的地方\n\n<font color=red> 因为在将元素添加到容器里时，C++执行的是容器的默认的拷贝构造函数，将元素拷贝到容器里，这个过程是一个浅拷贝，既然是浅拷贝就会面临浅拷贝的两次内存释放的问题，尤其是类元素，所以在添加一些具有指针字段的元素到容器里时，一定在类里定义一个深拷贝的拷贝构造函数和=的重载函数。</font>\n\n## 15.各个容器的比较\n\n|              | vector   | deque    | list     | set    | multiset | map         | multimap    |\n| ------------ | -------- | -------- | -------- | ------ | -------- | ----------- | ----------- |\n| 内存结构     | 单端数组 | 双端数组 | 双向链表 | 二叉树 | 二叉树   | 二叉树      | 二叉树      |\n| 随机存取     | 是       | 是       | 否       | 否     | 否       | 对key而言是 | 否          |\n| 元素检索     | 慢       | 慢       | 非常慢   | 快     | 快       | 对key而言快 | 对key而言快 |\n| 快速安插移除 | 尾端     | 头尾两端 | 任何位置 | -      | -        | -           | -           |\n\n# 三、算法\n\n## 1.算法\n\n​\t函数库对数据类型的选择对其可重用性起着至关重要的作用。举例来说，一个求方根的函数，在使用浮点数作为其参数类型的情况下的可重用性肯定比使用整型作为它的参数类性要高。而C++通过模板的机制允许推迟对某些类型的选择，直到真正想使用模板或者说对模板进行特化的时候，STL就利用了这一点提供了相当多的有用算法。它是在一个有效的框架中完成这些算法的--可以将所有的类型划分为少数的几类，然后就可以在模版的参数中使用一种类型替换掉同一种类中的其他类型。\n\n  STL提供了大约100个实现算法的模版函数，比如算法for_ each 将为指定序列中的每一个元素调用指定的函数，stable_ _sort 以你所指定的规则对序列进行稳定性排序等等，这样一-来,只要熟悉了STL之后，许多代码可以被大大的化简，只需要通过调用一-两个算法模板，就可以完成所需要的功能并大大地提升效率。\n\n  算法部分主要由头文件`<algorithm>`, `<numeric>`和`<functional>`组成。`<algorithm>`是所 有STL头文件中最大的一个(尽管它很好理解)，它是由一大堆模版函数组成的，可以认为每个函数在很大程度上都是独立的，其中常用到的功能范围涉及到比较、交换、查找、遍历操作、复制、修改、移除、反转、排序、合并等等。`<numeric>`体积很小，只包括几个在序列上面进行简单数学运算的模板函数，包括加法和乘法在序列上的一些操作。`<functional>`中则定义了一些模板类，用以声明函数对象。\n\n## 2.算法的分类\n\n### 非可变序列算法\n\n计数算法：count,count_if等 \n\n搜索算法：search,find,find_if,find_list_of等\n\n比较算法：equal,mismatch,lexicographical_compare等\n\n### 可变排序算法\n\n删除算法：remove,remove_if,remove_copy等\n\n修改算法：for_each,transform等\n\n排序算法：sort,stable_sort,partial_sort等\n\n## 3.仿函数\n\n\n\n## 4.一些常用的算法模板\n\n### find算法\n\n**原型:**`iterator find(iterator begin,iterator end,T t)`\n\n在容器的begin迭代器所指向的位置开始到end所指向的位置结束，查找元素t，如果找到了，则返回指向t的迭代器。\n\n# 四、迭代器\n\n## 1.迭代器\n\n​\t迭代器从作用上来说是最基本的部分，可是理解起来比前两者都要费力一些。软件设计有一个基本原则，所有的问题都可以通过引进一个间接层来简化，这种简化在 STL中就是用迭代器来完成的。概括来说，迭代器在STL中用来将算法和容器联系起来，起着一种黏和剂的作用。几乎STL提供的所有算法都是通过送代器存取元素序列进行工作的，每一个容器都定义了其本身所专有的选代器，用以存取容器中的元素。\n\n​\t迭代器部分主要由头文件`<utility>`,`<iterator>`和`<memory>`组成。`<utility>`是-一个很小的头文件，它包括了贯穿使用在STL中的几个模板的声明，`<iterator>`中提供 了迭代器使用的许多方法，而对于`<memory>`的描述则十分的困难，它以不同寻常的方式为容器中的元素分配存储空间，同时也为某些算法执行期间产生的临时对象提供机制,`<memory>`中的主要部分是模板类`alocator`,它负责产生所有容器中的默认分配器。\n\n## 2.迭代器的基本原理\n\n- 迭代器是一个“可遍历STL容器内全部或部分元素”的对象\n\n- 迭代器指出容器中的一个特定位置\n\n- 迭代器就如同一个指针\n\n- 迭代器提供对一个容器中的对象的访问方法，并且可以定义了容器中对象的范围\n\n## 3.迭代器的分类\n\n**输入迭代器**:也有叫法称之为“只读迭代器”，它从容器中读取元素，只能一次读入一个元素向前移动，只支持一遍算法，同一个输入迭代器不能两遍遍历一个序列。\n\n**输出迭代器**:也有叫法称之为“只写迭代器”，它往容器中写入元素，只能一次写入一个元素向前移动，只支持一遍算法，同一个输出迭代器不能两遍遍历一个序列。\n\n**正向迭代器**:组合输入送代器和输出迭代器的功能,还可以多次解析一个迭代器指定的位置，可以对一个值进行多次读/写。\n\n**双向达代器**:组合正向迭代器的功能，还可以通过-操作符向后移动位置。\n\n**随机访问送代器**:组合双向送代器的功能，还可以向前向后跳过任意个位置，可以直接访问容器中任何位置的元素。\n\n# ","source":"_posts/【C++】C++STL标准模板库.md","raw":"---\ntitle: 【C++】C++STL标准模板库\ndate: 2019-10-06 10:20:37\ntags: C++\ncategories: 学习笔记\n---\n\n\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 一、STL的基本概念\n\n## 1.什么是STL\n\n STL (Standard Template Librany）标准准模板庠是惠普实验室开发的一系列软件的统称。现在主要出现在C++中，但在被引入C++之前该技木就已存在了很长一段吋间了。\n\nSTL的从广义上讲分为三类: algorithm (算法)、container (容器)和iterator (迭代器)，容器和算法通过迭代器可以进行无缝链接。几乎所有的代码都釆用了模板类和模板函数的方式,这相比于传统的由函数和类组成的库来说提供了更好的代码重用机会。在C++标准中，STL 被组织为下面的13个尖文件:`<algorithm>`、`<deque>`、`<functional>`、`<iterator>`、`<vector>`、`<list>`、 `<map>`、`<memory>`、`<numerio>`、`<queue>`、`<set>`、\t`<stack>` 和`<utility>`。\n\n![](【C++】C++STL标准模板库/Snipaste_2019-10-06_10-41-56.png)\n\n我们详细的说六大组件：\n\n- 容器(Container)\n- 算法(Algorithm)\n- 迭代器(Iterator)\n- 仿函数(Function object)\n- 适配器(Adaptor)\n- 空间配置器(allocator)\n\n## 2.STL的好处\n\n- STL是C++的一部分，因此不用额外安装什么，它被内建在你的编译器之内。\n\n- STL的一个重要特点是数据结构和算法的分离。尽管这是个简单的概念，但是这种分离确实使得STL变得非常通用。\n  例如，在STL 的vector容器中，可以放入元素、 基础数据类型变量、元素的地址;\n  STL的sort()函数可以用来操作vector,list等容器。\n\n- 程序员可以不用思考STL具体的实现过程，只要能够熟综使用STL就OK了。这样他们就可以把精力放在程序开发的别的方面。\n\n- STL 具有高可重用性，高性能，高移植性，跨平台的优点。\n\n    高可重用性: STL 中几乎所有的代码都采用了模板类和模版函数的方式实现，这相比于传统的由函数和类组成的库来说提供了更好的代码重用机会。关于模板的知识，已经给大家介绍了。\n\n  高性能:如map可以高效地从十万条记录里面查找出指定的记录，因为map是采用红黑树的变体实现的。\n\n  高移植性:如在项目A上用STL编写的模块，可以直接移植到项目B上。\n\n  跨平台:如用windows的Visual Studio编写的代码可以在Mac OS的XCode上直接运行。\n\n- 了解到STL的这些好处，我们知道STL无疑是最值得C++程序员骄傲的一部分。每一个C++程序员都应该好好学习STL.只有能够熟练使用STL的程序员，才是好的C++程序员。\n\n# 二、容器\n\n## 1.容器\n\n  在实际的开发过程中，数据结构本身的重要性不会逊于操作于数据结构的算法的重要性，当程序中存在着对时间要求很高的部分时，数据结构的选择就显得更加重要。\n\n  经典的数据结构数量有限，但是我们常常重复着一些为了实现向量、链表等结构而编写的代码，这些代码都十分相似，只是为了适应不同数据的变化而在细节上有所出入。STL容器就为我们提供了这样的方便，它允许我们重复利用己有的实现构造自己的特定类型下的数据结构，通过设置-些模板，STL 容器对最常用的数据结构提供了支持，这些模板的参数允许我们指定容器中元素的数据类型，可以将我们许多重复而乏味的工作简化。\n\n​\t容器部分主要由头文件`<vector>`, `<list>`, `<deque>`, `<set>`, `<map>`, `<stack>`和`<queue>`组成。对于常用的一些容器和容器适配器(可以看作由其它容器实现的容器)，可以通过下表总结一:下它们和相应头文件的对应关系。\n\n![](【C++】C++STL标准模板库/Snipaste_2019-10-06_10-41-56.png)\n\n## 2.容器的分类\n\n### 序列式容器(Sequence containers) \n\n每个元素都有固定位置--取决于插入时机和地点，和元素值无关。如：vector、deque、 Iist。\n\n### 关联式容器(Associated containers) \n\n元素位置取决于特定的排序准则，和插入顺序无关。如：sset、multiset、 map、multimapu。\n\n![](【C++】C++STL标准模板库/Snipaste_2019-10-06_14-36-13.png)\n\n## 3.string类\n\n### string类的本质\n\n`string`类本质上其实就是`char*`的容器，是`cahr*`的封装。\n\n### string类的遍历\n\n**使用[]遍历：**\n\n```C++\nstring str = \"string_str\";\nfor (int i = 0; i < str.length(); i++)\n\tcout << str[i];\n```\n\n**使用迭代器遍历：**\n\n```C++\nstring str = \"string_str\";\nfor(string::iteratori=str.begin();i<str.end();i++)\n\tcout <<*i;\n```\n\n<font color=red> 注意这里的`i`是一个指向string::iterator类型的指针。</font>\n\n**使用at()遍历：**\n\n```C++\nstring str = \"string_str\";\nfor (int i = 0; i < str.length(); i++)\n\tcout << str.at(i);\n```\n\n`at()`与`[]`不同的是，当访问发生越界等错误时，`at()`会自动抛出异常，而`[]`不会抛出异常而中断程序。\n\n### string解封成char*\n\nC++为string类提供了一个专门的函数<font color = red> **str.c_str()**</font>，str是string类型的对象，但是需要注意的是`str.c_str()`返回的是一个<font color = red> **const char***</font>，不能再被赋值给其他的变量，但是我们可以直接将`str.c_str()`当作`char*`来使用，如：`str.c_str()[1]`，即通过`char*`指针访问str中的第二个元素。\n\n### string类中一些常用函数\n\n|      | 函数名                                       | 作用                                                         |\n| ---- | -------------------------------------------- | ------------------------------------------------------------ |\n| 复制 | str.copy(char *buf,int cout)                 | 从字符串str中拷贝cout个字符到char数组buf中                   |\n| 连接 | str.append(string strs)                      | 将字符串strs连接到str之后，支持string和char*                 |\n| 查找 | int str.find(char *strs,int index)           | 从字符串str中的第index索引开始查找strs子串或字符，返回查找到的第一个匹配值的索引，返回的索引也可以使用迭代器来接收 |\n| 替换 | str.replace(int index,int length,char *strs) | 在字符串str中，从index索引开始用strs字符串替换length个长度的子串 |\n| 删除 | str.erase(int index,int length)              | 删除字符出str从index位置开始的length长度的字符               |\n| 插入 | str.insert(int index,char *strs)             | 从str字符串的index位置开始插入字串strs                       |\n\n###  string类中常用算法函数\n\n```C++\nstring str = \"string_str_io_stdsfx.h_iostream\";\ntransform(str.begin(), str.end(), str.begin(), toupper);\ncout << str << endl;\n```\n\ntransform算法包含在`#include <algorithm>`头文件中\n\n**transform算法的使用：**\n\n**原型：**transform(first,last,result,op);\n\nfirst是容器的首迭代器，last为容器的末迭代器，result为存放结果的容器，op为要进行操作的一元函数对象或sturct、class。\n\n**代码解释：**str.begin()返回一个指向str首部位置的迭代器，str.end()返回一个指向str尾部位置的迭代器，因为我们把输出结果继续存放在str中，且迭代器始于容器相联系的，所以存放结果的容器也是str.begin()，而我们对str做的操作是将小写字母装换为大写，C++提供了标准的转换函数,所以操作函数为toupper。\n\n**transform算法的另一个重载形式：**\n\n**原型：**transform(first1,last1,first2,result,binary_op);\n\nfirst1是第一个容器的首迭代 器，last1为第一个容器的末迭代器，first2为第二个容器的首迭代器，result为存放结果的容器，binary_op为要进行操作的二元函数 对象或sturct、class。\n\n需要注意的是，两个容器first1和first2中的元素数量必须相等，否则会抛异常。\n\n## 4.vector容器\n\n- vector是将元素置于一个<font color=red> **动态数组**</font>中加以管理的容器\n- vector支持随机存取元素，支持索引存取（[],at()）和迭代器存取\n- vector在尾部添加和移除元素速度快，在中部和头部速度慢\n- 使用vector容易需要包含`#include<vector>`头文件\n\n### vector常用方法\n\n<table>\n  <tr>\n    <th> </th>\n    <th>函数</th>\n    <th>作用</th>\n  </tr>\n  <tr>\n    <td rowspan=\"4\">读取与赋值</td>\n    <td>front(void)</td>\n    <td>获取容器首元素，既可以作左值也可以作右值</td>\n  </tr>\n  <tr>\n    <td>back(void)</td>\n    <td>获取容器尾元素，既可以作左值也可以作右值</td>\n  </tr>\n  <tr>\n    <td>push_back(T t)</td>\n    <td>在容器的尾部添加元素</td>\n  </tr>\n  <tr>\n    <td>pop_back(T t)</td>\n    <td>删除容器最后一个元素</td> \n  </tr>\n  <tr>\n    <td rowspan=\"4\">只读</td>\n    <td>begin(void)</td>\n    <td>获取容器首部迭代器</td> \n  </tr>\n  <tr>\n    <td>end(void)</td>\n    <td>获取容器尾部迭代器</td> \n  </tr>\n  <tr>\n    <td>rbegin(void)</td>\n    <td>获取逆序首部迭代器，实际指向容器的尾部，只能使用vector&#60int&#62::reverse_iterator逆序迭代器接收</td> \n  </tr>\n  <tr>\n    <td>rend(void)</td>\n    <td>获取逆序尾部部迭代器，实际指向容器的首部，只能使用vector&#60int&#62::reverse_iterator逆序迭代器接收</td> \n  </tr>\n  <tr>\n    <td rowspan=\"2\">删除</td>\n    <td>erase(iterator pos)</td>\n    <td>删除迭代器pos指向位置的元素</td> \n  </tr>\n  <tr>\n    <td>erase(iterator begin,iterator end)</td>\n    <td>从迭代器begin指向位置开始到end指向位置结束，区间删除元素</td> \n  </tr>\n  <tr>\n    <td>插入</td>\n    <td>insert(iterator pos,T t)</td>\n    <td>在pos迭代器指向的位置插入元素t，insert中的迭代器pos只能是begin()或end()否则会报错，似乎不止其他的迭代器</td> \n  </tr>\n    <td>判空</td>\n    <td>empty(void)</td>\n    <td>容器判空</td> \n  </tr>\n</table>\n\n## 5.deque容器\n\n- deque容器是一个双端数组，在双端数组的两端均可以插入和删除元素\n- 使用deque容器需要包头文件`#include<deque>`\n\ndeque容器可以说是vector容器的升级版，deque的用法基本和vector一致，但是deque不仅提供push_back()，pop_back()还提供<font color = red> **push_front()**</font> 和<font color = red> **pop_front()**</font>。\n\n## 6.stack容器\n\n- stack容器是一个栈模型\n- 使用stack容器需要包含头文件`#include<stack>`\n\n### stack常用方法\n\n| 函数      | 作用         |\n| --------- | ------------ |\n| push(T t) | 元素入栈顶   |\n| pop()     | 栈顶元素出栈 |\n| top()     | 获取栈顶元素 |\n\n## 7.queue容器\n\n- queue容器是一个队列模型\n- 使用queue容器需要包含头文件`#include<queue>`\n\n### queue常用方法\n\n| 函数      | 作用                                   |\n| --------- | -------------------------------------- |\n| push(T t) | 元素入队尾                             |\n| pop()     | 队首元素出队                           |\n| front()   | 获取队首元素，既可以作左值也可以作右值 |\n| back()    | 获取队尾元素，既可以作左值也可以作右值 |\n\n## 8.list容器\n\n- list容器是一个双向链表模型，可以高效的进行元素的插入和删除操作\n- list容器不支持随机访问，即不支持[],at()和iterator + n(如：begin()+1)等形式的访问\n- 使用list容器需要包含头文件`#include<list>`\n\nlist容器除了不支持随机访问外，用法和deque容器的用法基本一致，除此之外list容器还提供一个<font color = red> **remove(T t)**</font>函数来根据元素内容删除元素\n\n使用list容器时有一点需要注意<font color = red> **list容器在使用erase删除元素时，遵循左闭右开的原则**</font>，如：\n\n```C++\nlist<int> li;\nfor (int i = 0; i < 5; i++)\n\tli.push_back(i);\nfor (list<int>::iterator it = li.begin(); it != li.end(); it++)\n\tcout << *it;\ncout << endl;\nlist<int>::iterator it1 = li.begin();//it1指向元素0\nlist<int>::iterator it2 = li.begin();\nit2++; it2++; it2++;//此时it2指向元素3\nli.erase(it1, it2);\nfor (list<int>::iterator it = li.begin(); it != li.end(); it++)\n\tcout << *it;\ncout << endl;\n```\n\n**输出结果：**\n\n```\n01234\n34\n```\n\n可以看到erase在删除0-3的元素时删除了0，1，2而没有删除3，即左闭右开。\n\n## 9.priority_queue容器\n\n- `priority_queue`容器是一个具有优先级的队列，又叫优先级队列适配器，分为最大优先级队列和最小优先级队列两种\n\n- priority_queue容器是一种特殊的queue容器，所以也需要包含头文件`#include<queue>`\n\n默认的定义`priority_queue<T> pr`的优先级队列是最大优先级队列，显示定义最大优先级队列：`priority_queue<int,vector<int>,less<int>> pr`，`less`是一个谓词后面再学习，显示定义最小优先级队列：`priority_queue<int,vector<int>,greater<int>> pr`，其中使用`greater`需要包含头文件`#include<functional>`。\n\n`priority_queue`容器的用法基本和`queue`一致，除此之外，`priority_queue`容器提供一个`top()`函数来获取队首元素，而`queue`容器没有这个方法。\n\n**示例：**\n\n```C++\npriority_queue<int,vector<int>,greater<int>> pr;\npr.push(12);\npr.push(4);\npr.push(10);\npr.push(20);\ncout << \"最小元素：\" <<pr.top() << endl;\nwhile (pr.size() > 0)\n{\n\tcout << pr.top() << \",\";\n\tpr.pop();\n}\n```\n\n**输出结果：**\n\n```\n最小元素：4\n4,10,12,20,\n```\n\n## 10.set容器\n\n- `set`是一个<font color=red>**集合**</font>容器，其中所包含的元素是<font color=red>**唯一**</font>的，<font color=red>**集合中的元素按一定的顺序排序**</font>，元素的插入过程是按排序规则插入，所以不能指定位置插入\n- `set`采用红黑树变体的数据结构实现，红黑树属于平衡二叉树，在插入和删除操作上比`vector`容器速度更快\n- `set`容器不支持[]和at()来存取元素\n- <font color=red>**set不支持直接修改容器中的元素**</font>，因为元素是自动排序的，如果希望修改一个元素值，就必须删除这个元素再插入新元素\n- 要使用`set`容器需要包含头文件`#include<set>`\n\n### set容器的基本特性\n\n默认情况下，直接定义的set容器采用最小优先排序，和priority_queue容器恰好相反，`set<T> se`就是隐式的`set<T,less<T>> se`，定义最大优先排序的set容器需要显示定义：`set<T,greater<T>> se`。\n\n我们来看一个例子：\n\n```C++\nset<string,greater<string>> se;//采用最大优先排序\nfor (int i = 0; i < 5; i++)//生成随机字符串元素\n{\n\tint tmp = rand();\n\tstring str = \"\";\n\twhile (str.length()<=3)\n\t{\n\t\tif(tmp >= 97 && tmp <= 122)\n\t\t\tstr += tmp;\n\t\ttmp = rand();\n\t}\n\tse.insert(str);\n}\nse.insert(\"strs\");//插入相同的字符串元素\nse.insert(\"strs\");\nse.insert(\"strs\");\nfor (set<string, greater<string>>::iterator it = se.begin(); it != se.end(); it++)\n\tcout << *it << endl;\n```\n\n**输出结果：**\n\n```\nwqye\nvfep\nstrs\nomsk\nkfnm\ncdsb\n```\n\n可以看到，容器里的字符串确实按照字符串的比较规则按从大到小的顺序排列着，并且无论我们插入多少个相同的元素，在容器内只会存储一个相同的元素值。\n\n值得注意的是：\n\n`set`容器只提供了`insert(T t)`函数来插入元素。\n\n### 自定义元素的排序\n\n自定义类作元素可能会出现类中有多个字段，而我们需要其中的某一个字段来作为关键字在`set`容器中排序，要实现这样的行为，我们就需要用到<font color=red>**仿函数**</font>了。\n\n#### 什么是仿函数？\n\n仿函数实质上就是一个做了`()`重载的结构体，因为重载了`()`使用起来类似函数，所以称之为仿函数。\n\n我们来看一个例子：\n\n```C++\nclass Student\n{\npublic:\n\tstring name;\n\tint age;\n\tbool isStudent;\n\tStudent(const string name, const int age, const bool isStudent)\n\t{\n\t\tthis->age = age;\n\t\tthis->name = name;\n\t\tthis->isStudent = isStudent;\n\t}\n};\nstruct AgeSort//仿函数\n{\n\tbool operator()(const Student &lift, const Student &right)\n\t{\n\t\treturn (lift.age < right.age);\n\t}\n};\nint main()\n{\n\tset<Student, AgeSort> se;\n\tStudent s1(\"Alian\", 23, true);\n\tStudent s2(\"Blank\", 20, true);\n\tStudent s3(\"Cary\", 43, false);\n\tStudent s4(\"Davel\", 23, true);\n\tse.insert(s1); se.insert(s2);\n\tse.insert(s3); se.insert(s4);\n\tfor (set<Student, AgeSort>::iterator it = se.begin(); it != se.end(); it++)\n\t\tcout << it->name << \"\\t\" << it->age << \"\\t\" << it->isStudent << endl;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**输出结果：**\n\n```\nBlank   20      1\nAlian   23      1\nCary    43      0\n```\n\n其中`AgeSort`就是仿函数，它的比较关键字是`Student.age`，所以`set`容器对象se会以age作为排序关键字，其实我们之前使用的`less<>`和`greater<>`也是反函数，只不过是C++预定义好的仿函数。\n\n细心的朋友可能会发现，我们插入的s4对象居然不再容器里！！！这是因为set容器中的元素具有唯一性，而set容器是通过关键字来识别元素的，所当碰到关键字相同的元素时，set只会存储一个元素。\n\n那么这种情况该怎么解决呢？答案是set容器没有办法解决这种情况，如果有出现这种情况，就不能使用set容器而改用multiset容器。\n\n在后面的算法模块我们详细介绍仿函数。\n\n### set常用函数\n\n| 函数             | 作用                                                         |\n| ---------------- | ------------------------------------------------------------ |\n| find(T t)        | 查找元素t，返回指向t元素的迭代器，查找失败返回指向set.end()的迭代器 |\n| count(T t)       | 返回容器中元素t的个数，值要么是0，要么是1                    |\n| lower_bound(T t) | 返回一个指向>=t元素的迭代器，如果t存在则指向t，如果t不存在则指向t后面的一个元素 |\n| upper_bound(T t) | 返回一个指向>t元素的迭代器，即t元素后面的一个元素            |\n| equal_range(T t) | 返回一个包含两个set类型的迭代器的对组pair<set<T>::iterator,set<T>::iterator>第一个迭代器指向t元素，第二个迭代器指向t后面的一个元素，如果t不存在，则两个迭代器都指向t后面的一个元素 |\n\n### <font color=blue> 小知识</font>\n\n<font color=blue> 事实上容器中的`insert`函数是有返回值的，`insert`的返回值是一个对组(pair)类型的泛型`pair<set<T>::iterator, bool>`的对象，`pair`是一个只有两个字段的模板，我们可以直接定义`pair<set<T>::iterator, bool>`类型对象来接收`insert`函数的返回值，如：</font>\n\n```C++\npair<set<Student,AgeSort>::iterator, bool> pait=se.insert(s1);\n```\n\n<font color=blue> 我们可以通过`pair.first`和`pair.second`来访问对组中的两个元素，通过`pair.first`来访问对组中的第一个元素`set<Student,AgeSort>::iterator`类型的迭代器，通过`pair.first->first`，和`pair.first->second`可以访问迭代器所指向的容器元素，我们通过`pair.second`来访问对组中的第二个元素，bool型的元素记录的是insert函数插入是否成功，如果插入成功则记录true，否则记录false。</font>\n\n## 11.multiset容器\n\n- `multiset`容器可以说是set容器的升级版，multiset容器支持多个相同键值的元素的存储，所以要使用`multiset`需要包含头文件`#include<set>`\n\nmultiset的用法和set一致。\n\n## 12.map容器\n\n- `map`是标准的关联式容器，一个`map`元素是一个键值对(key,value),`map`提供基于键值的快速检索能力\n- `map`中<font color=red>` key`值是唯一的</font>\n- `map`容器中的元素也是按一定顺序排列的，元素插入过程是按排序规则插入的，所以不能指定位置插入\n- `map`容器的具体实现也是采用红黑二叉树变体的平衡二叉树的数据结构，在插入和删除的操作上比`vector`更快\n- 与`set`不同的是`map`支持直接存取`key`值对应的`value`，也支持[]操作符\n- 要使用`map`容器就需要包含头文件`#include<map>`\n\n### map的元素插入\n\n```C++\nint main()\n{\n\tmap<int, string> ma;\n\t//方法一\n\tma.insert(pair<int, string>(1, \"pair\"));\n\tma.insert(pair<int, string>(1, \"pair_02\"));\n\t//方法二\n\tma.insert(make_pair(2, \"make_pair\"));\n\tma.insert(make_pair(2, \"make_pair_02\"));\n\t//方法三\n\tma.insert(map<int, string>::value_type(3, \"value_type\"));\n\tma.insert(map<int, string>::value_type(3, \"value_type_02\"));\n\t//方法四\n\tma[4] = \"map\";\n\tma[4] = \"map_02\";\n\tfor (map<int, string>::iterator it = ma.begin(); it != ma.end(); it++)\n\t\tcout << it->first << \"\\t\" << it->second << endl;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**输出结果：**\n\n```\n1       pair\n2       make_pair\n3       value_type\n4       map_02\n```\n\n上面四种方法都可以向map容器里添加元素，但是四者中也有一些微小的区别，前面三种方法在插入相同键值时，只会保存第一存储的结果，之后插入相同键值的元素时都会插入失败，而第四种方法则是后面赋值的元素覆盖前面赋值的元素。\n\nmap似乎没办法来指定是从大到小排序或是从小到大排序\n\nmap除了元素的形式不同，在其他方面map的用法基本和set一致\n\n## 13.multimap容器\n\n`multimap`容器和`multiset`容器一样，是`map`容器的升级版，支持一个键对应多个值，所以`multimap`的一个重要应用场景就是数据分组。\n\n## 14.容器在使用过程必须要注意的地方\n\n<font color=red> 因为在将元素添加到容器里时，C++执行的是容器的默认的拷贝构造函数，将元素拷贝到容器里，这个过程是一个浅拷贝，既然是浅拷贝就会面临浅拷贝的两次内存释放的问题，尤其是类元素，所以在添加一些具有指针字段的元素到容器里时，一定在类里定义一个深拷贝的拷贝构造函数和=的重载函数。</font>\n\n## 15.各个容器的比较\n\n|              | vector   | deque    | list     | set    | multiset | map         | multimap    |\n| ------------ | -------- | -------- | -------- | ------ | -------- | ----------- | ----------- |\n| 内存结构     | 单端数组 | 双端数组 | 双向链表 | 二叉树 | 二叉树   | 二叉树      | 二叉树      |\n| 随机存取     | 是       | 是       | 否       | 否     | 否       | 对key而言是 | 否          |\n| 元素检索     | 慢       | 慢       | 非常慢   | 快     | 快       | 对key而言快 | 对key而言快 |\n| 快速安插移除 | 尾端     | 头尾两端 | 任何位置 | -      | -        | -           | -           |\n\n# 三、算法\n\n## 1.算法\n\n​\t函数库对数据类型的选择对其可重用性起着至关重要的作用。举例来说，一个求方根的函数，在使用浮点数作为其参数类型的情况下的可重用性肯定比使用整型作为它的参数类性要高。而C++通过模板的机制允许推迟对某些类型的选择，直到真正想使用模板或者说对模板进行特化的时候，STL就利用了这一点提供了相当多的有用算法。它是在一个有效的框架中完成这些算法的--可以将所有的类型划分为少数的几类，然后就可以在模版的参数中使用一种类型替换掉同一种类中的其他类型。\n\n  STL提供了大约100个实现算法的模版函数，比如算法for_ each 将为指定序列中的每一个元素调用指定的函数，stable_ _sort 以你所指定的规则对序列进行稳定性排序等等，这样一-来,只要熟悉了STL之后，许多代码可以被大大的化简，只需要通过调用一-两个算法模板，就可以完成所需要的功能并大大地提升效率。\n\n  算法部分主要由头文件`<algorithm>`, `<numeric>`和`<functional>`组成。`<algorithm>`是所 有STL头文件中最大的一个(尽管它很好理解)，它是由一大堆模版函数组成的，可以认为每个函数在很大程度上都是独立的，其中常用到的功能范围涉及到比较、交换、查找、遍历操作、复制、修改、移除、反转、排序、合并等等。`<numeric>`体积很小，只包括几个在序列上面进行简单数学运算的模板函数，包括加法和乘法在序列上的一些操作。`<functional>`中则定义了一些模板类，用以声明函数对象。\n\n## 2.算法的分类\n\n### 非可变序列算法\n\n计数算法：count,count_if等 \n\n搜索算法：search,find,find_if,find_list_of等\n\n比较算法：equal,mismatch,lexicographical_compare等\n\n### 可变排序算法\n\n删除算法：remove,remove_if,remove_copy等\n\n修改算法：for_each,transform等\n\n排序算法：sort,stable_sort,partial_sort等\n\n## 3.仿函数\n\n\n\n## 4.一些常用的算法模板\n\n### find算法\n\n**原型:**`iterator find(iterator begin,iterator end,T t)`\n\n在容器的begin迭代器所指向的位置开始到end所指向的位置结束，查找元素t，如果找到了，则返回指向t的迭代器。\n\n# 四、迭代器\n\n## 1.迭代器\n\n​\t迭代器从作用上来说是最基本的部分，可是理解起来比前两者都要费力一些。软件设计有一个基本原则，所有的问题都可以通过引进一个间接层来简化，这种简化在 STL中就是用迭代器来完成的。概括来说，迭代器在STL中用来将算法和容器联系起来，起着一种黏和剂的作用。几乎STL提供的所有算法都是通过送代器存取元素序列进行工作的，每一个容器都定义了其本身所专有的选代器，用以存取容器中的元素。\n\n​\t迭代器部分主要由头文件`<utility>`,`<iterator>`和`<memory>`组成。`<utility>`是-一个很小的头文件，它包括了贯穿使用在STL中的几个模板的声明，`<iterator>`中提供 了迭代器使用的许多方法，而对于`<memory>`的描述则十分的困难，它以不同寻常的方式为容器中的元素分配存储空间，同时也为某些算法执行期间产生的临时对象提供机制,`<memory>`中的主要部分是模板类`alocator`,它负责产生所有容器中的默认分配器。\n\n## 2.迭代器的基本原理\n\n- 迭代器是一个“可遍历STL容器内全部或部分元素”的对象\n\n- 迭代器指出容器中的一个特定位置\n\n- 迭代器就如同一个指针\n\n- 迭代器提供对一个容器中的对象的访问方法，并且可以定义了容器中对象的范围\n\n## 3.迭代器的分类\n\n**输入迭代器**:也有叫法称之为“只读迭代器”，它从容器中读取元素，只能一次读入一个元素向前移动，只支持一遍算法，同一个输入迭代器不能两遍遍历一个序列。\n\n**输出迭代器**:也有叫法称之为“只写迭代器”，它往容器中写入元素，只能一次写入一个元素向前移动，只支持一遍算法，同一个输出迭代器不能两遍遍历一个序列。\n\n**正向迭代器**:组合输入送代器和输出迭代器的功能,还可以多次解析一个迭代器指定的位置，可以对一个值进行多次读/写。\n\n**双向达代器**:组合正向迭代器的功能，还可以通过-操作符向后移动位置。\n\n**随机访问送代器**:组合双向送代器的功能，还可以向前向后跳过任意个位置，可以直接访问容器中任何位置的元素。\n\n# ","slug":"【C++】C++STL标准模板库","published":1,"updated":"2021-02-01T13:26:28.526Z","_id":"ckk9hocbh003edwr73uj5h7zl","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"一、STL的基本概念\"><a href=\"#一、STL的基本概念\" class=\"headerlink\" title=\"一、STL的基本概念\"></a>一、STL的基本概念</h1><h2 id=\"1-什么是STL\"><a href=\"#1-什么是STL\" class=\"headerlink\" title=\"1.什么是STL\"></a>1.什么是STL</h2><p> STL (Standard Template Librany）标准准模板庠是惠普实验室开发的一系列软件的统称。现在主要出现在C++中，但在被引入C++之前该技木就已存在了很长一段吋间了。</p>\n<p>STL的从广义上讲分为三类: algorithm (算法)、container (容器)和iterator (迭代器)，容器和算法通过迭代器可以进行无缝链接。几乎所有的代码都釆用了模板类和模板函数的方式,这相比于传统的由函数和类组成的库来说提供了更好的代码重用机会。在C++标准中，STL 被组织为下面的13个尖文件:<code>&lt;algorithm&gt;</code>、<code>&lt;deque&gt;</code>、<code>&lt;functional&gt;</code>、<code>&lt;iterator&gt;</code>、<code>&lt;vector&gt;</code>、<code>&lt;list&gt;</code>、 <code>&lt;map&gt;</code>、<code>&lt;memory&gt;</code>、<code>&lt;numerio&gt;</code>、<code>&lt;queue&gt;</code>、<code>&lt;set&gt;</code>、    <code>&lt;stack&gt;</code> 和<code>&lt;utility&gt;</code>。</p>\n<p><img src=\"/2019/10/06/%E3%80%90C++%E3%80%91C++STL%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93/Snipaste_2019-10-06_10-41-56.png\"></p>\n<p>我们详细的说六大组件：</p>\n<ul>\n<li>容器(Container)</li>\n<li>算法(Algorithm)</li>\n<li>迭代器(Iterator)</li>\n<li>仿函数(Function object)</li>\n<li>适配器(Adaptor)</li>\n<li>空间配置器(allocator)</li>\n</ul>\n<h2 id=\"2-STL的好处\"><a href=\"#2-STL的好处\" class=\"headerlink\" title=\"2.STL的好处\"></a>2.STL的好处</h2><ul>\n<li><p>STL是C++的一部分，因此不用额外安装什么，它被内建在你的编译器之内。</p>\n</li>\n<li><p>STL的一个重要特点是数据结构和算法的分离。尽管这是个简单的概念，但是这种分离确实使得STL变得非常通用。<br>例如，在STL 的vector容器中，可以放入元素、 基础数据类型变量、元素的地址;<br>STL的sort()函数可以用来操作vector,list等容器。</p>\n</li>\n<li><p>程序员可以不用思考STL具体的实现过程，只要能够熟综使用STL就OK了。这样他们就可以把精力放在程序开发的别的方面。</p>\n</li>\n<li><p>STL 具有高可重用性，高性能，高移植性，跨平台的优点。</p>\n<p>  高可重用性: STL 中几乎所有的代码都采用了模板类和模版函数的方式实现，这相比于传统的由函数和类组成的库来说提供了更好的代码重用机会。关于模板的知识，已经给大家介绍了。</p>\n<p>高性能:如map可以高效地从十万条记录里面查找出指定的记录，因为map是采用红黑树的变体实现的。</p>\n<p>高移植性:如在项目A上用STL编写的模块，可以直接移植到项目B上。</p>\n<p>跨平台:如用windows的Visual Studio编写的代码可以在Mac OS的XCode上直接运行。</p>\n</li>\n<li><p>了解到STL的这些好处，我们知道STL无疑是最值得C++程序员骄傲的一部分。每一个C++程序员都应该好好学习STL.只有能够熟练使用STL的程序员，才是好的C++程序员。</p>\n</li>\n</ul>\n<h1 id=\"二、容器\"><a href=\"#二、容器\" class=\"headerlink\" title=\"二、容器\"></a>二、容器</h1><h2 id=\"1-容器\"><a href=\"#1-容器\" class=\"headerlink\" title=\"1.容器\"></a>1.容器</h2><p>  在实际的开发过程中，数据结构本身的重要性不会逊于操作于数据结构的算法的重要性，当程序中存在着对时间要求很高的部分时，数据结构的选择就显得更加重要。</p>\n<p>  经典的数据结构数量有限，但是我们常常重复着一些为了实现向量、链表等结构而编写的代码，这些代码都十分相似，只是为了适应不同数据的变化而在细节上有所出入。STL容器就为我们提供了这样的方便，它允许我们重复利用己有的实现构造自己的特定类型下的数据结构，通过设置-些模板，STL 容器对最常用的数据结构提供了支持，这些模板的参数允许我们指定容器中元素的数据类型，可以将我们许多重复而乏味的工作简化。</p>\n<p>​    容器部分主要由头文件<code>&lt;vector&gt;</code>, <code>&lt;list&gt;</code>, <code>&lt;deque&gt;</code>, <code>&lt;set&gt;</code>, <code>&lt;map&gt;</code>, <code>&lt;stack&gt;</code>和<code>&lt;queue&gt;</code>组成。对于常用的一些容器和容器适配器(可以看作由其它容器实现的容器)，可以通过下表总结一:下它们和相应头文件的对应关系。</p>\n<p><img src=\"/2019/10/06/%E3%80%90C++%E3%80%91C++STL%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93/Snipaste_2019-10-06_10-41-56.png\"></p>\n<h2 id=\"2-容器的分类\"><a href=\"#2-容器的分类\" class=\"headerlink\" title=\"2.容器的分类\"></a>2.容器的分类</h2><h3 id=\"序列式容器-Sequence-containers\"><a href=\"#序列式容器-Sequence-containers\" class=\"headerlink\" title=\"序列式容器(Sequence containers)\"></a>序列式容器(Sequence containers)</h3><p>每个元素都有固定位置–取决于插入时机和地点，和元素值无关。如：vector、deque、 Iist。</p>\n<h3 id=\"关联式容器-Associated-containers\"><a href=\"#关联式容器-Associated-containers\" class=\"headerlink\" title=\"关联式容器(Associated containers)\"></a>关联式容器(Associated containers)</h3><p>元素位置取决于特定的排序准则，和插入顺序无关。如：sset、multiset、 map、multimapu。</p>\n<p><img src=\"/2019/10/06/%E3%80%90C++%E3%80%91C++STL%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93/Snipaste_2019-10-06_14-36-13.png\"></p>\n<h2 id=\"3-string类\"><a href=\"#3-string类\" class=\"headerlink\" title=\"3.string类\"></a>3.string类</h2><h3 id=\"string类的本质\"><a href=\"#string类的本质\" class=\"headerlink\" title=\"string类的本质\"></a>string类的本质</h3><p><code>string</code>类本质上其实就是<code>char*</code>的容器，是<code>cahr*</code>的封装。</p>\n<h3 id=\"string类的遍历\"><a href=\"#string类的遍历\" class=\"headerlink\" title=\"string类的遍历\"></a>string类的遍历</h3><p><strong>使用[]遍历：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-built_in\">string</span> str = <span class=\"hljs-string\">&quot;string_str&quot;</span>;<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; str.length(); i++)<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; str[i];<br></code></pre></td></tr></table></figure>\n<p><strong>使用迭代器遍历：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-built_in\">string</span> str = <span class=\"hljs-string\">&quot;string_str&quot;</span>;<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">string</span>::iteratori=str.begin();i&lt;str.end();i++)<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt;*i;<br></code></pre></td></tr></table></figure>\n<p><font color=\"red\"> 注意这里的<code>i</code>是一个指向string::iterator类型的指针。</font></p>\n<p><strong>使用at()遍历：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-built_in\">string</span> str = <span class=\"hljs-string\">&quot;string_str&quot;</span>;<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; str.length(); i++)<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; str.at(i);<br></code></pre></td></tr></table></figure>\n<p><code>at()</code>与<code>[]</code>不同的是，当访问发生越界等错误时，<code>at()</code>会自动抛出异常，而<code>[]</code>不会抛出异常而中断程序。</p>\n<h3 id=\"string解封成char\"><a href=\"#string解封成char\" class=\"headerlink\" title=\"string解封成char*\"></a>string解封成char*</h3><p>C++为string类提供了一个专门的函数<font color=\"red\"> <strong>str.c_str()</strong></font>，str是string类型的对象，但是需要注意的是<code>str.c_str()</code>返回的是一个<font color=\"red\"> *<em>const char**</em></font>，不能再被赋值给其他的变量，但是我们可以直接将<code>str.c_str()</code>当作<code>char*</code>来使用，如：<code>str.c_str()[1]</code>，即通过<code>char*</code>指针访问str中的第二个元素。</p>\n<h3 id=\"string类中一些常用函数\"><a href=\"#string类中一些常用函数\" class=\"headerlink\" title=\"string类中一些常用函数\"></a>string类中一些常用函数</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>函数名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>复制</td>\n<td>str.copy(char *buf,int cout)</td>\n<td>从字符串str中拷贝cout个字符到char数组buf中</td>\n</tr>\n<tr>\n<td>连接</td>\n<td>str.append(string strs)</td>\n<td>将字符串strs连接到str之后，支持string和char*</td>\n</tr>\n<tr>\n<td>查找</td>\n<td>int str.find(char *strs,int index)</td>\n<td>从字符串str中的第index索引开始查找strs子串或字符，返回查找到的第一个匹配值的索引，返回的索引也可以使用迭代器来接收</td>\n</tr>\n<tr>\n<td>替换</td>\n<td>str.replace(int index,int length,char *strs)</td>\n<td>在字符串str中，从index索引开始用strs字符串替换length个长度的子串</td>\n</tr>\n<tr>\n<td>删除</td>\n<td>str.erase(int index,int length)</td>\n<td>删除字符出str从index位置开始的length长度的字符</td>\n</tr>\n<tr>\n<td>插入</td>\n<td>str.insert(int index,char *strs)</td>\n<td>从str字符串的index位置开始插入字串strs</td>\n</tr>\n</tbody></table>\n<h3 id=\"string类中常用算法函数\"><a href=\"#string类中常用算法函数\" class=\"headerlink\" title=\"string类中常用算法函数\"></a>string类中常用算法函数</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-built_in\">string</span> str = <span class=\"hljs-string\">&quot;string_str_io_stdsfx.h_iostream&quot;</span>;<br>transform(str.begin(), str.end(), str.begin(), <span class=\"hljs-built_in\">toupper</span>);<br><span class=\"hljs-built_in\">cout</span> &lt;&lt; str &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br></code></pre></td></tr></table></figure>\n<p>transform算法包含在<code>#include &lt;algorithm&gt;</code>头文件中</p>\n<p><strong>transform算法的使用：</strong></p>\n<p><strong>原型：</strong>transform(first,last,result,op);</p>\n<p>first是容器的首迭代器，last为容器的末迭代器，result为存放结果的容器，op为要进行操作的一元函数对象或sturct、class。</p>\n<p><strong>代码解释：</strong>str.begin()返回一个指向str首部位置的迭代器，str.end()返回一个指向str尾部位置的迭代器，因为我们把输出结果继续存放在str中，且迭代器始于容器相联系的，所以存放结果的容器也是str.begin()，而我们对str做的操作是将小写字母装换为大写，C++提供了标准的转换函数,所以操作函数为toupper。</p>\n<p><strong>transform算法的另一个重载形式：</strong></p>\n<p><strong>原型：</strong>transform(first1,last1,first2,result,binary_op);</p>\n<p>first1是第一个容器的首迭代 器，last1为第一个容器的末迭代器，first2为第二个容器的首迭代器，result为存放结果的容器，binary_op为要进行操作的二元函数 对象或sturct、class。</p>\n<p>需要注意的是，两个容器first1和first2中的元素数量必须相等，否则会抛异常。</p>\n<h2 id=\"4-vector容器\"><a href=\"#4-vector容器\" class=\"headerlink\" title=\"4.vector容器\"></a>4.vector容器</h2><ul>\n<li>vector是将元素置于一个<font color=\"red\"> <strong>动态数组</strong></font>中加以管理的容器</li>\n<li>vector支持随机存取元素，支持索引存取（[],at()）和迭代器存取</li>\n<li>vector在尾部添加和移除元素速度快，在中部和头部速度慢</li>\n<li>使用vector容易需要包含<code>#include&lt;vector&gt;</code>头文件</li>\n</ul>\n<h3 id=\"vector常用方法\"><a href=\"#vector常用方法\" class=\"headerlink\" title=\"vector常用方法\"></a>vector常用方法</h3><table>\n  <tr>\n    <th> </th>\n    <th>函数</th>\n    <th>作用</th>\n  </tr>\n  <tr>\n    <td rowspan=\"4\">读取与赋值</td>\n    <td>front(void)</td>\n    <td>获取容器首元素，既可以作左值也可以作右值</td>\n  </tr>\n  <tr>\n    <td>back(void)</td>\n    <td>获取容器尾元素，既可以作左值也可以作右值</td>\n  </tr>\n  <tr>\n    <td>push_back(T t)</td>\n    <td>在容器的尾部添加元素</td>\n  </tr>\n  <tr>\n    <td>pop_back(T t)</td>\n    <td>删除容器最后一个元素</td> \n  </tr>\n  <tr>\n    <td rowspan=\"4\">只读</td>\n    <td>begin(void)</td>\n    <td>获取容器首部迭代器</td> \n  </tr>\n  <tr>\n    <td>end(void)</td>\n    <td>获取容器尾部迭代器</td> \n  </tr>\n  <tr>\n    <td>rbegin(void)</td>\n    <td>获取逆序首部迭代器，实际指向容器的尾部，只能使用vector&#60int&#62::reverse_iterator逆序迭代器接收</td> \n  </tr>\n  <tr>\n    <td>rend(void)</td>\n    <td>获取逆序尾部部迭代器，实际指向容器的首部，只能使用vector&#60int&#62::reverse_iterator逆序迭代器接收</td> \n  </tr>\n  <tr>\n    <td rowspan=\"2\">删除</td>\n    <td>erase(iterator pos)</td>\n    <td>删除迭代器pos指向位置的元素</td> \n  </tr>\n  <tr>\n    <td>erase(iterator begin,iterator end)</td>\n    <td>从迭代器begin指向位置开始到end指向位置结束，区间删除元素</td> \n  </tr>\n  <tr>\n    <td>插入</td>\n    <td>insert(iterator pos,T t)</td>\n    <td>在pos迭代器指向的位置插入元素t，insert中的迭代器pos只能是begin()或end()否则会报错，似乎不止其他的迭代器</td> \n  </tr>\n    <td>判空</td>\n    <td>empty(void)</td>\n    <td>容器判空</td> \n  \n</table>\n\n<h2 id=\"5-deque容器\"><a href=\"#5-deque容器\" class=\"headerlink\" title=\"5.deque容器\"></a>5.deque容器</h2><ul>\n<li>deque容器是一个双端数组，在双端数组的两端均可以插入和删除元素</li>\n<li>使用deque容器需要包头文件<code>#include&lt;deque&gt;</code></li>\n</ul>\n<p>deque容器可以说是vector容器的升级版，deque的用法基本和vector一致，但是deque不仅提供push_back()，pop_back()还提供<font color=\"red\"> <strong>push_front()</strong></font> 和<font color=\"red\"> <strong>pop_front()</strong></font>。</p>\n<h2 id=\"6-stack容器\"><a href=\"#6-stack容器\" class=\"headerlink\" title=\"6.stack容器\"></a>6.stack容器</h2><ul>\n<li>stack容器是一个栈模型</li>\n<li>使用stack容器需要包含头文件<code>#include&lt;stack&gt;</code></li>\n</ul>\n<h3 id=\"stack常用方法\"><a href=\"#stack常用方法\" class=\"headerlink\" title=\"stack常用方法\"></a>stack常用方法</h3><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>push(T t)</td>\n<td>元素入栈顶</td>\n</tr>\n<tr>\n<td>pop()</td>\n<td>栈顶元素出栈</td>\n</tr>\n<tr>\n<td>top()</td>\n<td>获取栈顶元素</td>\n</tr>\n</tbody></table>\n<h2 id=\"7-queue容器\"><a href=\"#7-queue容器\" class=\"headerlink\" title=\"7.queue容器\"></a>7.queue容器</h2><ul>\n<li>queue容器是一个队列模型</li>\n<li>使用queue容器需要包含头文件<code>#include&lt;queue&gt;</code></li>\n</ul>\n<h3 id=\"queue常用方法\"><a href=\"#queue常用方法\" class=\"headerlink\" title=\"queue常用方法\"></a>queue常用方法</h3><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>push(T t)</td>\n<td>元素入队尾</td>\n</tr>\n<tr>\n<td>pop()</td>\n<td>队首元素出队</td>\n</tr>\n<tr>\n<td>front()</td>\n<td>获取队首元素，既可以作左值也可以作右值</td>\n</tr>\n<tr>\n<td>back()</td>\n<td>获取队尾元素，既可以作左值也可以作右值</td>\n</tr>\n</tbody></table>\n<h2 id=\"8-list容器\"><a href=\"#8-list容器\" class=\"headerlink\" title=\"8.list容器\"></a>8.list容器</h2><ul>\n<li>list容器是一个双向链表模型，可以高效的进行元素的插入和删除操作</li>\n<li>list容器不支持随机访问，即不支持[],at()和iterator + n(如：begin()+1)等形式的访问</li>\n<li>使用list容器需要包含头文件<code>#include&lt;list&gt;</code></li>\n</ul>\n<p>list容器除了不支持随机访问外，用法和deque容器的用法基本一致，除此之外list容器还提供一个<font color=\"red\"> <strong>remove(T t)</strong></font>函数来根据元素内容删除元素</p>\n<p>使用list容器时有一点需要注意<font color=\"red\"> <strong>list容器在使用erase删除元素时，遵循左闭右开的原则</strong></font>，如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-built_in\">list</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; li;<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)<br>\tli.push_back(i);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">list</span>&lt;<span class=\"hljs-keyword\">int</span>&gt;::iterator it = li.begin(); it != li.end(); it++)<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; *it;<br><span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">list</span>&lt;<span class=\"hljs-keyword\">int</span>&gt;::iterator it1 = li.begin();<span class=\"hljs-comment\">//it1指向元素0</span><br><span class=\"hljs-built_in\">list</span>&lt;<span class=\"hljs-keyword\">int</span>&gt;::iterator it2 = li.begin();<br>it2++; it2++; it2++;<span class=\"hljs-comment\">//此时it2指向元素3</span><br>li.erase(it1, it2);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">list</span>&lt;<span class=\"hljs-keyword\">int</span>&gt;::iterator it = li.begin(); it != li.end(); it++)<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; *it;<br><span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">01234<br>34<br></code></pre></td></tr></table></figure>\n<p>可以看到erase在删除0-3的元素时删除了0，1，2而没有删除3，即左闭右开。</p>\n<h2 id=\"9-priority-queue容器\"><a href=\"#9-priority-queue容器\" class=\"headerlink\" title=\"9.priority_queue容器\"></a>9.priority_queue容器</h2><ul>\n<li><p><code>priority_queue</code>容器是一个具有优先级的队列，又叫优先级队列适配器，分为最大优先级队列和最小优先级队列两种</p>\n</li>\n<li><p>priority_queue容器是一种特殊的queue容器，所以也需要包含头文件<code>#include&lt;queue&gt;</code></p>\n</li>\n</ul>\n<p>默认的定义<code>priority_queue&lt;T&gt; pr</code>的优先级队列是最大优先级队列，显示定义最大优先级队列：<code>priority_queue&lt;int,vector&lt;int&gt;,less&lt;int&gt;&gt; pr</code>，<code>less</code>是一个谓词后面再学习，显示定义最小优先级队列：<code>priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt; pr</code>，其中使用<code>greater</code>需要包含头文件<code>#include&lt;functional&gt;</code>。</p>\n<p><code>priority_queue</code>容器的用法基本和<code>queue</code>一致，除此之外，<code>priority_queue</code>容器提供一个<code>top()</code>函数来获取队首元素，而<code>queue</code>容器没有这个方法。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-built_in\">priority_queue</span>&lt;<span class=\"hljs-keyword\">int</span>,<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt;,greater&lt;<span class=\"hljs-keyword\">int</span>&gt;&gt; pr;<br>pr.push(<span class=\"hljs-number\">12</span>);<br>pr.push(<span class=\"hljs-number\">4</span>);<br>pr.push(<span class=\"hljs-number\">10</span>);<br>pr.push(<span class=\"hljs-number\">20</span>);<br><span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;最小元素：&quot;</span> &lt;&lt;pr.top() &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-keyword\">while</span> (pr.size() &gt; <span class=\"hljs-number\">0</span>)<br>&#123;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; pr.top() &lt;&lt; <span class=\"hljs-string\">&quot;,&quot;</span>;<br>\tpr.pop();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">最小元素：<span class=\"hljs-number\">4</span><br><span class=\"hljs-number\">4,10,12,20</span>,<br></code></pre></td></tr></table></figure>\n<h2 id=\"10-set容器\"><a href=\"#10-set容器\" class=\"headerlink\" title=\"10.set容器\"></a>10.set容器</h2><ul>\n<li><code>set</code>是一个<font color=\"red\"><strong>集合</strong></font>容器，其中所包含的元素是<font color=\"red\"><strong>唯一</strong></font>的，<font color=\"red\"><strong>集合中的元素按一定的顺序排序</strong></font>，元素的插入过程是按排序规则插入，所以不能指定位置插入</li>\n<li><code>set</code>采用红黑树变体的数据结构实现，红黑树属于平衡二叉树，在插入和删除操作上比<code>vector</code>容器速度更快</li>\n<li><code>set</code>容器不支持[]和at()来存取元素</li>\n<li><font color=\"red\"><strong>set不支持直接修改容器中的元素</strong></font>，因为元素是自动排序的，如果希望修改一个元素值，就必须删除这个元素再插入新元素</li>\n<li>要使用<code>set</code>容器需要包含头文件<code>#include&lt;set&gt;</code></li>\n</ul>\n<h3 id=\"set容器的基本特性\"><a href=\"#set容器的基本特性\" class=\"headerlink\" title=\"set容器的基本特性\"></a>set容器的基本特性</h3><p>默认情况下，直接定义的set容器采用最小优先排序，和priority_queue容器恰好相反，<code>set&lt;T&gt; se</code>就是隐式的<code>set&lt;T,less&lt;T&gt;&gt; se</code>，定义最大优先排序的set容器需要显示定义：<code>set&lt;T,greater&lt;T&gt;&gt; se</code>。</p>\n<p>我们来看一个例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-built_in\">set</span>&lt;<span class=\"hljs-built_in\">string</span>,greater&lt;<span class=\"hljs-built_in\">string</span>&gt;&gt; se;<span class=\"hljs-comment\">//采用最大优先排序</span><br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)<span class=\"hljs-comment\">//生成随机字符串元素</span><br>&#123;<br>\t<span class=\"hljs-keyword\">int</span> tmp = rand();<br>\t<span class=\"hljs-built_in\">string</span> str = <span class=\"hljs-string\">&quot;&quot;</span>;<br>\t<span class=\"hljs-keyword\">while</span> (str.length()&lt;=<span class=\"hljs-number\">3</span>)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">if</span>(tmp &gt;= <span class=\"hljs-number\">97</span> &amp;&amp; tmp &lt;= <span class=\"hljs-number\">122</span>)<br>\t\t\tstr += tmp;<br>\t\ttmp = rand();<br>\t&#125;<br>\tse.insert(str);<br>&#125;<br>se.insert(<span class=\"hljs-string\">&quot;strs&quot;</span>);<span class=\"hljs-comment\">//插入相同的字符串元素</span><br>se.insert(<span class=\"hljs-string\">&quot;strs&quot;</span>);<br>se.insert(<span class=\"hljs-string\">&quot;strs&quot;</span>);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">set</span>&lt;<span class=\"hljs-built_in\">string</span>, greater&lt;<span class=\"hljs-built_in\">string</span>&gt;&gt;::iterator it = se.begin(); it != se.end(); it++)<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">wqye</span><br><span class=\"hljs-symbol\">vfep</span><br><span class=\"hljs-symbol\">strs</span><br><span class=\"hljs-symbol\">omsk</span><br><span class=\"hljs-symbol\">kfnm</span><br><span class=\"hljs-symbol\">cdsb</span><br></code></pre></td></tr></table></figure>\n<p>可以看到，容器里的字符串确实按照字符串的比较规则按从大到小的顺序排列着，并且无论我们插入多少个相同的元素，在容器内只会存储一个相同的元素值。</p>\n<p>值得注意的是：</p>\n<p><code>set</code>容器只提供了<code>insert(T t)</code>函数来插入元素。</p>\n<h3 id=\"自定义元素的排序\"><a href=\"#自定义元素的排序\" class=\"headerlink\" title=\"自定义元素的排序\"></a>自定义元素的排序</h3><p>自定义类作元素可能会出现类中有多个字段，而我们需要其中的某一个字段来作为关键字在<code>set</code>容器中排序，要实现这样的行为，我们就需要用到<font color=\"red\"><strong>仿函数</strong></font>了。</p>\n<h4 id=\"什么是仿函数？\"><a href=\"#什么是仿函数？\" class=\"headerlink\" title=\"什么是仿函数？\"></a>什么是仿函数？</h4><p>仿函数实质上就是一个做了<code>()</code>重载的结构体，因为重载了<code>()</code>使用起来类似函数，所以称之为仿函数。</p>\n<p>我们来看一个例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-built_in\">string</span> name;<br>\t<span class=\"hljs-keyword\">int</span> age;<br>\t<span class=\"hljs-keyword\">bool</span> isStudent;<br>\tStudent(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">string</span> name, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> age, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">bool</span> isStudent)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;age = age;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;name = name;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;isStudent = isStudent;<br>\t&#125;<br>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">AgeSort</span>//仿函数</span><br><span class=\"hljs-class\">&#123;</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">operator</span><span class=\"hljs-params\">()</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Student &amp;lift, <span class=\"hljs-keyword\">const</span> Student &amp;right)</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\t<span class=\"hljs-keyword\">return</span> (lift.age &lt; right.age);<br>\t&#125;<br>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">set</span>&lt;Student, AgeSort&gt; se;<br>\t<span class=\"hljs-function\">Student <span class=\"hljs-title\">s1</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;Alian&quot;</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-literal\">true</span>)</span></span>;<br>\t<span class=\"hljs-function\">Student <span class=\"hljs-title\">s2</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;Blank&quot;</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-literal\">true</span>)</span></span>;<br>\t<span class=\"hljs-function\">Student <span class=\"hljs-title\">s3</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;Cary&quot;</span>, <span class=\"hljs-number\">43</span>, <span class=\"hljs-literal\">false</span>)</span></span>;<br>\t<span class=\"hljs-function\">Student <span class=\"hljs-title\">s4</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;Davel&quot;</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-literal\">true</span>)</span></span>;<br>\tse.insert(s1); se.insert(s2);<br>\tse.insert(s3); se.insert(s4);<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">set</span>&lt;Student, AgeSort&gt;::iterator it = se.begin(); it != se.end(); it++)<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; it-&gt;name &lt;&lt; <span class=\"hljs-string\">&quot;\\t&quot;</span> &lt;&lt; it-&gt;age &lt;&lt; <span class=\"hljs-string\">&quot;\\t&quot;</span> &lt;&lt; it-&gt;isStudent &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">Blank</span>   <span class=\"hljs-number\">20</span>      <span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">Alian</span>   <span class=\"hljs-number\">23</span>      <span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">Cary</span>    <span class=\"hljs-number\">43</span>      <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n<p>其中<code>AgeSort</code>就是仿函数，它的比较关键字是<code>Student.age</code>，所以<code>set</code>容器对象se会以age作为排序关键字，其实我们之前使用的<code>less&lt;&gt;</code>和<code>greater&lt;&gt;</code>也是反函数，只不过是C++预定义好的仿函数。</p>\n<p>细心的朋友可能会发现，我们插入的s4对象居然不再容器里！！！这是因为set容器中的元素具有唯一性，而set容器是通过关键字来识别元素的，所当碰到关键字相同的元素时，set只会存储一个元素。</p>\n<p>那么这种情况该怎么解决呢？答案是set容器没有办法解决这种情况，如果有出现这种情况，就不能使用set容器而改用multiset容器。</p>\n<p>在后面的算法模块我们详细介绍仿函数。</p>\n<h3 id=\"set常用函数\"><a href=\"#set常用函数\" class=\"headerlink\" title=\"set常用函数\"></a>set常用函数</h3><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>find(T t)</td>\n<td>查找元素t，返回指向t元素的迭代器，查找失败返回指向set.end()的迭代器</td>\n</tr>\n<tr>\n<td>count(T t)</td>\n<td>返回容器中元素t的个数，值要么是0，要么是1</td>\n</tr>\n<tr>\n<td>lower_bound(T t)</td>\n<td>返回一个指向&gt;=t元素的迭代器，如果t存在则指向t，如果t不存在则指向t后面的一个元素</td>\n</tr>\n<tr>\n<td>upper_bound(T t)</td>\n<td>返回一个指向&gt;t元素的迭代器，即t元素后面的一个元素</td>\n</tr>\n<tr>\n<td>equal_range(T t)</td>\n<td>返回一个包含两个set类型的迭代器的对组pair&lt;set<T>::iterator,set<T>::iterator&gt;第一个迭代器指向t元素，第二个迭代器指向t后面的一个元素，如果t不存在，则两个迭代器都指向t后面的一个元素</T></T></td>\n</tr>\n</tbody></table>\n<h3 id=\"小知识\"><a href=\"#小知识\" class=\"headerlink\" title=\" 小知识\"></a><font color=\"blue\"> 小知识</font></h3><p><font color=\"blue\"> 事实上容器中的<code>insert</code>函数是有返回值的，<code>insert</code>的返回值是一个对组(pair)类型的泛型<code>pair&lt;set&lt;T&gt;::iterator, bool&gt;</code>的对象，<code>pair</code>是一个只有两个字段的模板，我们可以直接定义<code>pair&lt;set&lt;T&gt;::iterator, bool&gt;</code>类型对象来接收<code>insert</code>函数的返回值，如：</font></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-built_in\">pair</span>&lt;<span class=\"hljs-built_in\">set</span>&lt;Student,AgeSort&gt;::iterator, <span class=\"hljs-keyword\">bool</span>&gt; pait=se.insert(s1);<br></code></pre></td></tr></table></figure>\n<p><font color=\"blue\"> 我们可以通过<code>pair.first</code>和<code>pair.second</code>来访问对组中的两个元素，通过<code>pair.first</code>来访问对组中的第一个元素<code>set&lt;Student,AgeSort&gt;::iterator</code>类型的迭代器，通过<code>pair.first-&gt;first</code>，和<code>pair.first-&gt;second</code>可以访问迭代器所指向的容器元素，我们通过<code>pair.second</code>来访问对组中的第二个元素，bool型的元素记录的是insert函数插入是否成功，如果插入成功则记录true，否则记录false。</font></p>\n<h2 id=\"11-multiset容器\"><a href=\"#11-multiset容器\" class=\"headerlink\" title=\"11.multiset容器\"></a>11.multiset容器</h2><ul>\n<li><code>multiset</code>容器可以说是set容器的升级版，multiset容器支持多个相同键值的元素的存储，所以要使用<code>multiset</code>需要包含头文件<code>#include&lt;set&gt;</code></li>\n</ul>\n<p>multiset的用法和set一致。</p>\n<h2 id=\"12-map容器\"><a href=\"#12-map容器\" class=\"headerlink\" title=\"12.map容器\"></a>12.map容器</h2><ul>\n<li><code>map</code>是标准的关联式容器，一个<code>map</code>元素是一个键值对(key,value),<code>map</code>提供基于键值的快速检索能力</li>\n<li><code>map</code>中<font color=\"red\"><code> key</code>值是唯一的</font></li>\n<li><code>map</code>容器中的元素也是按一定顺序排列的，元素插入过程是按排序规则插入的，所以不能指定位置插入</li>\n<li><code>map</code>容器的具体实现也是采用红黑二叉树变体的平衡二叉树的数据结构，在插入和删除的操作上比<code>vector</code>更快</li>\n<li>与<code>set</code>不同的是<code>map</code>支持直接存取<code>key</code>值对应的<code>value</code>，也支持[]操作符</li>\n<li>要使用<code>map</code>容器就需要包含头文件<code>#include&lt;map&gt;</code></li>\n</ul>\n<h3 id=\"map的元素插入\"><a href=\"#map的元素插入\" class=\"headerlink\" title=\"map的元素插入\"></a>map的元素插入</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">map</span>&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">string</span>&gt; ma;<br>\t<span class=\"hljs-comment\">//方法一</span><br>\tma.insert(<span class=\"hljs-built_in\">pair</span>&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">string</span>&gt;(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;pair&quot;</span>));<br>\tma.insert(<span class=\"hljs-built_in\">pair</span>&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">string</span>&gt;(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;pair_02&quot;</span>));<br>\t<span class=\"hljs-comment\">//方法二</span><br>\tma.insert(<span class=\"hljs-built_in\">make_pair</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&quot;make_pair&quot;</span>));<br>\tma.insert(<span class=\"hljs-built_in\">make_pair</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&quot;make_pair_02&quot;</span>));<br>\t<span class=\"hljs-comment\">//方法三</span><br>\tma.insert(<span class=\"hljs-built_in\">map</span>&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">string</span>&gt;::value_type(<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&quot;value_type&quot;</span>));<br>\tma.insert(<span class=\"hljs-built_in\">map</span>&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">string</span>&gt;::value_type(<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&quot;value_type_02&quot;</span>));<br>\t<span class=\"hljs-comment\">//方法四</span><br>\tma[<span class=\"hljs-number\">4</span>] = <span class=\"hljs-string\">&quot;map&quot;</span>;<br>\tma[<span class=\"hljs-number\">4</span>] = <span class=\"hljs-string\">&quot;map_02&quot;</span>;<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">map</span>&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">string</span>&gt;::iterator it = ma.begin(); it != ma.end(); it++)<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"hljs-string\">&quot;\\t&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs basic\"><span class=\"hljs-symbol\">1 </span>      pair<br><span class=\"hljs-symbol\">2 </span>      make_pair<br><span class=\"hljs-symbol\">3 </span>      value_type<br><span class=\"hljs-symbol\">4 </span>      map_02<br></code></pre></td></tr></table></figure>\n<p>上面四种方法都可以向map容器里添加元素，但是四者中也有一些微小的区别，前面三种方法在插入相同键值时，只会保存第一存储的结果，之后插入相同键值的元素时都会插入失败，而第四种方法则是后面赋值的元素覆盖前面赋值的元素。</p>\n<p>map似乎没办法来指定是从大到小排序或是从小到大排序</p>\n<p>map除了元素的形式不同，在其他方面map的用法基本和set一致</p>\n<h2 id=\"13-multimap容器\"><a href=\"#13-multimap容器\" class=\"headerlink\" title=\"13.multimap容器\"></a>13.multimap容器</h2><p><code>multimap</code>容器和<code>multiset</code>容器一样，是<code>map</code>容器的升级版，支持一个键对应多个值，所以<code>multimap</code>的一个重要应用场景就是数据分组。</p>\n<h2 id=\"14-容器在使用过程必须要注意的地方\"><a href=\"#14-容器在使用过程必须要注意的地方\" class=\"headerlink\" title=\"14.容器在使用过程必须要注意的地方\"></a>14.容器在使用过程必须要注意的地方</h2><p><font color=\"red\"> 因为在将元素添加到容器里时，C++执行的是容器的默认的拷贝构造函数，将元素拷贝到容器里，这个过程是一个浅拷贝，既然是浅拷贝就会面临浅拷贝的两次内存释放的问题，尤其是类元素，所以在添加一些具有指针字段的元素到容器里时，一定在类里定义一个深拷贝的拷贝构造函数和=的重载函数。</font></p>\n<h2 id=\"15-各个容器的比较\"><a href=\"#15-各个容器的比较\" class=\"headerlink\" title=\"15.各个容器的比较\"></a>15.各个容器的比较</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>vector</th>\n<th>deque</th>\n<th>list</th>\n<th>set</th>\n<th>multiset</th>\n<th>map</th>\n<th>multimap</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>内存结构</td>\n<td>单端数组</td>\n<td>双端数组</td>\n<td>双向链表</td>\n<td>二叉树</td>\n<td>二叉树</td>\n<td>二叉树</td>\n<td>二叉树</td>\n</tr>\n<tr>\n<td>随机存取</td>\n<td>是</td>\n<td>是</td>\n<td>否</td>\n<td>否</td>\n<td>否</td>\n<td>对key而言是</td>\n<td>否</td>\n</tr>\n<tr>\n<td>元素检索</td>\n<td>慢</td>\n<td>慢</td>\n<td>非常慢</td>\n<td>快</td>\n<td>快</td>\n<td>对key而言快</td>\n<td>对key而言快</td>\n</tr>\n<tr>\n<td>快速安插移除</td>\n<td>尾端</td>\n<td>头尾两端</td>\n<td>任何位置</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<h1 id=\"三、算法\"><a href=\"#三、算法\" class=\"headerlink\" title=\"三、算法\"></a>三、算法</h1><h2 id=\"1-算法\"><a href=\"#1-算法\" class=\"headerlink\" title=\"1.算法\"></a>1.算法</h2><p>​    函数库对数据类型的选择对其可重用性起着至关重要的作用。举例来说，一个求方根的函数，在使用浮点数作为其参数类型的情况下的可重用性肯定比使用整型作为它的参数类性要高。而C++通过模板的机制允许推迟对某些类型的选择，直到真正想使用模板或者说对模板进行特化的时候，STL就利用了这一点提供了相当多的有用算法。它是在一个有效的框架中完成这些算法的–可以将所有的类型划分为少数的几类，然后就可以在模版的参数中使用一种类型替换掉同一种类中的其他类型。</p>\n<p>  STL提供了大约100个实现算法的模版函数，比如算法for_ each 将为指定序列中的每一个元素调用指定的函数，stable_ _sort 以你所指定的规则对序列进行稳定性排序等等，这样一-来,只要熟悉了STL之后，许多代码可以被大大的化简，只需要通过调用一-两个算法模板，就可以完成所需要的功能并大大地提升效率。</p>\n<p>  算法部分主要由头文件<code>&lt;algorithm&gt;</code>, <code>&lt;numeric&gt;</code>和<code>&lt;functional&gt;</code>组成。<code>&lt;algorithm&gt;</code>是所 有STL头文件中最大的一个(尽管它很好理解)，它是由一大堆模版函数组成的，可以认为每个函数在很大程度上都是独立的，其中常用到的功能范围涉及到比较、交换、查找、遍历操作、复制、修改、移除、反转、排序、合并等等。<code>&lt;numeric&gt;</code>体积很小，只包括几个在序列上面进行简单数学运算的模板函数，包括加法和乘法在序列上的一些操作。<code>&lt;functional&gt;</code>中则定义了一些模板类，用以声明函数对象。</p>\n<h2 id=\"2-算法的分类\"><a href=\"#2-算法的分类\" class=\"headerlink\" title=\"2.算法的分类\"></a>2.算法的分类</h2><h3 id=\"非可变序列算法\"><a href=\"#非可变序列算法\" class=\"headerlink\" title=\"非可变序列算法\"></a>非可变序列算法</h3><p>计数算法：count,count_if等 </p>\n<p>搜索算法：search,find,find_if,find_list_of等</p>\n<p>比较算法：equal,mismatch,lexicographical_compare等</p>\n<h3 id=\"可变排序算法\"><a href=\"#可变排序算法\" class=\"headerlink\" title=\"可变排序算法\"></a>可变排序算法</h3><p>删除算法：remove,remove_if,remove_copy等</p>\n<p>修改算法：for_each,transform等</p>\n<p>排序算法：sort,stable_sort,partial_sort等</p>\n<h2 id=\"3-仿函数\"><a href=\"#3-仿函数\" class=\"headerlink\" title=\"3.仿函数\"></a>3.仿函数</h2><h2 id=\"4-一些常用的算法模板\"><a href=\"#4-一些常用的算法模板\" class=\"headerlink\" title=\"4.一些常用的算法模板\"></a>4.一些常用的算法模板</h2><h3 id=\"find算法\"><a href=\"#find算法\" class=\"headerlink\" title=\"find算法\"></a>find算法</h3><p><strong>原型:</strong><code>iterator find(iterator begin,iterator end,T t)</code></p>\n<p>在容器的begin迭代器所指向的位置开始到end所指向的位置结束，查找元素t，如果找到了，则返回指向t的迭代器。</p>\n<h1 id=\"四、迭代器\"><a href=\"#四、迭代器\" class=\"headerlink\" title=\"四、迭代器\"></a>四、迭代器</h1><h2 id=\"1-迭代器\"><a href=\"#1-迭代器\" class=\"headerlink\" title=\"1.迭代器\"></a>1.迭代器</h2><p>​    迭代器从作用上来说是最基本的部分，可是理解起来比前两者都要费力一些。软件设计有一个基本原则，所有的问题都可以通过引进一个间接层来简化，这种简化在 STL中就是用迭代器来完成的。概括来说，迭代器在STL中用来将算法和容器联系起来，起着一种黏和剂的作用。几乎STL提供的所有算法都是通过送代器存取元素序列进行工作的，每一个容器都定义了其本身所专有的选代器，用以存取容器中的元素。</p>\n<p>​    迭代器部分主要由头文件<code>&lt;utility&gt;</code>,<code>&lt;iterator&gt;</code>和<code>&lt;memory&gt;</code>组成。<code>&lt;utility&gt;</code>是-一个很小的头文件，它包括了贯穿使用在STL中的几个模板的声明，<code>&lt;iterator&gt;</code>中提供 了迭代器使用的许多方法，而对于<code>&lt;memory&gt;</code>的描述则十分的困难，它以不同寻常的方式为容器中的元素分配存储空间，同时也为某些算法执行期间产生的临时对象提供机制,<code>&lt;memory&gt;</code>中的主要部分是模板类<code>alocator</code>,它负责产生所有容器中的默认分配器。</p>\n<h2 id=\"2-迭代器的基本原理\"><a href=\"#2-迭代器的基本原理\" class=\"headerlink\" title=\"2.迭代器的基本原理\"></a>2.迭代器的基本原理</h2><ul>\n<li><p>迭代器是一个“可遍历STL容器内全部或部分元素”的对象</p>\n</li>\n<li><p>迭代器指出容器中的一个特定位置</p>\n</li>\n<li><p>迭代器就如同一个指针</p>\n</li>\n<li><p>迭代器提供对一个容器中的对象的访问方法，并且可以定义了容器中对象的范围</p>\n</li>\n</ul>\n<h2 id=\"3-迭代器的分类\"><a href=\"#3-迭代器的分类\" class=\"headerlink\" title=\"3.迭代器的分类\"></a>3.迭代器的分类</h2><p><strong>输入迭代器</strong>:也有叫法称之为“只读迭代器”，它从容器中读取元素，只能一次读入一个元素向前移动，只支持一遍算法，同一个输入迭代器不能两遍遍历一个序列。</p>\n<p><strong>输出迭代器</strong>:也有叫法称之为“只写迭代器”，它往容器中写入元素，只能一次写入一个元素向前移动，只支持一遍算法，同一个输出迭代器不能两遍遍历一个序列。</p>\n<p><strong>正向迭代器</strong>:组合输入送代器和输出迭代器的功能,还可以多次解析一个迭代器指定的位置，可以对一个值进行多次读/写。</p>\n<p><strong>双向达代器</strong>:组合正向迭代器的功能，还可以通过-操作符向后移动位置。</p>\n<p><strong>随机访问送代器</strong>:组合双向送代器的功能，还可以向前向后跳过任意个位置，可以直接访问容器中任何位置的元素。</p>\n<h1 id><a href=\"#\" class=\"headerlink\" title></a></h1>","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"一、STL的基本概念\"><a href=\"#一、STL的基本概念\" class=\"headerlink\" title=\"一、STL的基本概念\"></a>一、STL的基本概念</h1><h2 id=\"1-什么是STL\"><a href=\"#1-什么是STL\" class=\"headerlink\" title=\"1.什么是STL\"></a>1.什么是STL</h2><p> STL (Standard Template Librany）标准准模板庠是惠普实验室开发的一系列软件的统称。现在主要出现在C++中，但在被引入C++之前该技木就已存在了很长一段吋间了。</p>\n<p>STL的从广义上讲分为三类: algorithm (算法)、container (容器)和iterator (迭代器)，容器和算法通过迭代器可以进行无缝链接。几乎所有的代码都釆用了模板类和模板函数的方式,这相比于传统的由函数和类组成的库来说提供了更好的代码重用机会。在C++标准中，STL 被组织为下面的13个尖文件:<code>&lt;algorithm&gt;</code>、<code>&lt;deque&gt;</code>、<code>&lt;functional&gt;</code>、<code>&lt;iterator&gt;</code>、<code>&lt;vector&gt;</code>、<code>&lt;list&gt;</code>、 <code>&lt;map&gt;</code>、<code>&lt;memory&gt;</code>、<code>&lt;numerio&gt;</code>、<code>&lt;queue&gt;</code>、<code>&lt;set&gt;</code>、    <code>&lt;stack&gt;</code> 和<code>&lt;utility&gt;</code>。</p>\n<p><img src=\"/2019/10/06/%E3%80%90C++%E3%80%91C++STL%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93/Snipaste_2019-10-06_10-41-56.png\"></p>\n<p>我们详细的说六大组件：</p>\n<ul>\n<li>容器(Container)</li>\n<li>算法(Algorithm)</li>\n<li>迭代器(Iterator)</li>\n<li>仿函数(Function object)</li>\n<li>适配器(Adaptor)</li>\n<li>空间配置器(allocator)</li>\n</ul>\n<h2 id=\"2-STL的好处\"><a href=\"#2-STL的好处\" class=\"headerlink\" title=\"2.STL的好处\"></a>2.STL的好处</h2><ul>\n<li><p>STL是C++的一部分，因此不用额外安装什么，它被内建在你的编译器之内。</p>\n</li>\n<li><p>STL的一个重要特点是数据结构和算法的分离。尽管这是个简单的概念，但是这种分离确实使得STL变得非常通用。<br>例如，在STL 的vector容器中，可以放入元素、 基础数据类型变量、元素的地址;<br>STL的sort()函数可以用来操作vector,list等容器。</p>\n</li>\n<li><p>程序员可以不用思考STL具体的实现过程，只要能够熟综使用STL就OK了。这样他们就可以把精力放在程序开发的别的方面。</p>\n</li>\n<li><p>STL 具有高可重用性，高性能，高移植性，跨平台的优点。</p>\n<p>  高可重用性: STL 中几乎所有的代码都采用了模板类和模版函数的方式实现，这相比于传统的由函数和类组成的库来说提供了更好的代码重用机会。关于模板的知识，已经给大家介绍了。</p>\n<p>高性能:如map可以高效地从十万条记录里面查找出指定的记录，因为map是采用红黑树的变体实现的。</p>\n<p>高移植性:如在项目A上用STL编写的模块，可以直接移植到项目B上。</p>\n<p>跨平台:如用windows的Visual Studio编写的代码可以在Mac OS的XCode上直接运行。</p>\n</li>\n<li><p>了解到STL的这些好处，我们知道STL无疑是最值得C++程序员骄傲的一部分。每一个C++程序员都应该好好学习STL.只有能够熟练使用STL的程序员，才是好的C++程序员。</p>\n</li>\n</ul>\n<h1 id=\"二、容器\"><a href=\"#二、容器\" class=\"headerlink\" title=\"二、容器\"></a>二、容器</h1><h2 id=\"1-容器\"><a href=\"#1-容器\" class=\"headerlink\" title=\"1.容器\"></a>1.容器</h2><p>  在实际的开发过程中，数据结构本身的重要性不会逊于操作于数据结构的算法的重要性，当程序中存在着对时间要求很高的部分时，数据结构的选择就显得更加重要。</p>\n<p>  经典的数据结构数量有限，但是我们常常重复着一些为了实现向量、链表等结构而编写的代码，这些代码都十分相似，只是为了适应不同数据的变化而在细节上有所出入。STL容器就为我们提供了这样的方便，它允许我们重复利用己有的实现构造自己的特定类型下的数据结构，通过设置-些模板，STL 容器对最常用的数据结构提供了支持，这些模板的参数允许我们指定容器中元素的数据类型，可以将我们许多重复而乏味的工作简化。</p>\n<p>​    容器部分主要由头文件<code>&lt;vector&gt;</code>, <code>&lt;list&gt;</code>, <code>&lt;deque&gt;</code>, <code>&lt;set&gt;</code>, <code>&lt;map&gt;</code>, <code>&lt;stack&gt;</code>和<code>&lt;queue&gt;</code>组成。对于常用的一些容器和容器适配器(可以看作由其它容器实现的容器)，可以通过下表总结一:下它们和相应头文件的对应关系。</p>\n<p><img src=\"/2019/10/06/%E3%80%90C++%E3%80%91C++STL%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93/Snipaste_2019-10-06_10-41-56.png\"></p>\n<h2 id=\"2-容器的分类\"><a href=\"#2-容器的分类\" class=\"headerlink\" title=\"2.容器的分类\"></a>2.容器的分类</h2><h3 id=\"序列式容器-Sequence-containers\"><a href=\"#序列式容器-Sequence-containers\" class=\"headerlink\" title=\"序列式容器(Sequence containers)\"></a>序列式容器(Sequence containers)</h3><p>每个元素都有固定位置–取决于插入时机和地点，和元素值无关。如：vector、deque、 Iist。</p>\n<h3 id=\"关联式容器-Associated-containers\"><a href=\"#关联式容器-Associated-containers\" class=\"headerlink\" title=\"关联式容器(Associated containers)\"></a>关联式容器(Associated containers)</h3><p>元素位置取决于特定的排序准则，和插入顺序无关。如：sset、multiset、 map、multimapu。</p>\n<p><img src=\"/2019/10/06/%E3%80%90C++%E3%80%91C++STL%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93/Snipaste_2019-10-06_14-36-13.png\"></p>\n<h2 id=\"3-string类\"><a href=\"#3-string类\" class=\"headerlink\" title=\"3.string类\"></a>3.string类</h2><h3 id=\"string类的本质\"><a href=\"#string类的本质\" class=\"headerlink\" title=\"string类的本质\"></a>string类的本质</h3><p><code>string</code>类本质上其实就是<code>char*</code>的容器，是<code>cahr*</code>的封装。</p>\n<h3 id=\"string类的遍历\"><a href=\"#string类的遍历\" class=\"headerlink\" title=\"string类的遍历\"></a>string类的遍历</h3><p><strong>使用[]遍历：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-built_in\">string</span> str = <span class=\"hljs-string\">&quot;string_str&quot;</span>;<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; str.length(); i++)<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; str[i];<br></code></pre></td></tr></table></figure>\n<p><strong>使用迭代器遍历：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-built_in\">string</span> str = <span class=\"hljs-string\">&quot;string_str&quot;</span>;<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">string</span>::iteratori=str.begin();i&lt;str.end();i++)<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt;*i;<br></code></pre></td></tr></table></figure>\n<p><font color=\"red\"> 注意这里的<code>i</code>是一个指向string::iterator类型的指针。</font></p>\n<p><strong>使用at()遍历：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-built_in\">string</span> str = <span class=\"hljs-string\">&quot;string_str&quot;</span>;<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; str.length(); i++)<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; str.at(i);<br></code></pre></td></tr></table></figure>\n<p><code>at()</code>与<code>[]</code>不同的是，当访问发生越界等错误时，<code>at()</code>会自动抛出异常，而<code>[]</code>不会抛出异常而中断程序。</p>\n<h3 id=\"string解封成char\"><a href=\"#string解封成char\" class=\"headerlink\" title=\"string解封成char*\"></a>string解封成char*</h3><p>C++为string类提供了一个专门的函数<font color=\"red\"> <strong>str.c_str()</strong></font>，str是string类型的对象，但是需要注意的是<code>str.c_str()</code>返回的是一个<font color=\"red\"> *<em>const char**</em></font>，不能再被赋值给其他的变量，但是我们可以直接将<code>str.c_str()</code>当作<code>char*</code>来使用，如：<code>str.c_str()[1]</code>，即通过<code>char*</code>指针访问str中的第二个元素。</p>\n<h3 id=\"string类中一些常用函数\"><a href=\"#string类中一些常用函数\" class=\"headerlink\" title=\"string类中一些常用函数\"></a>string类中一些常用函数</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>函数名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>复制</td>\n<td>str.copy(char *buf,int cout)</td>\n<td>从字符串str中拷贝cout个字符到char数组buf中</td>\n</tr>\n<tr>\n<td>连接</td>\n<td>str.append(string strs)</td>\n<td>将字符串strs连接到str之后，支持string和char*</td>\n</tr>\n<tr>\n<td>查找</td>\n<td>int str.find(char *strs,int index)</td>\n<td>从字符串str中的第index索引开始查找strs子串或字符，返回查找到的第一个匹配值的索引，返回的索引也可以使用迭代器来接收</td>\n</tr>\n<tr>\n<td>替换</td>\n<td>str.replace(int index,int length,char *strs)</td>\n<td>在字符串str中，从index索引开始用strs字符串替换length个长度的子串</td>\n</tr>\n<tr>\n<td>删除</td>\n<td>str.erase(int index,int length)</td>\n<td>删除字符出str从index位置开始的length长度的字符</td>\n</tr>\n<tr>\n<td>插入</td>\n<td>str.insert(int index,char *strs)</td>\n<td>从str字符串的index位置开始插入字串strs</td>\n</tr>\n</tbody></table>\n<h3 id=\"string类中常用算法函数\"><a href=\"#string类中常用算法函数\" class=\"headerlink\" title=\"string类中常用算法函数\"></a>string类中常用算法函数</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-built_in\">string</span> str = <span class=\"hljs-string\">&quot;string_str_io_stdsfx.h_iostream&quot;</span>;<br>transform(str.begin(), str.end(), str.begin(), <span class=\"hljs-built_in\">toupper</span>);<br><span class=\"hljs-built_in\">cout</span> &lt;&lt; str &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br></code></pre></td></tr></table></figure>\n<p>transform算法包含在<code>#include &lt;algorithm&gt;</code>头文件中</p>\n<p><strong>transform算法的使用：</strong></p>\n<p><strong>原型：</strong>transform(first,last,result,op);</p>\n<p>first是容器的首迭代器，last为容器的末迭代器，result为存放结果的容器，op为要进行操作的一元函数对象或sturct、class。</p>\n<p><strong>代码解释：</strong>str.begin()返回一个指向str首部位置的迭代器，str.end()返回一个指向str尾部位置的迭代器，因为我们把输出结果继续存放在str中，且迭代器始于容器相联系的，所以存放结果的容器也是str.begin()，而我们对str做的操作是将小写字母装换为大写，C++提供了标准的转换函数,所以操作函数为toupper。</p>\n<p><strong>transform算法的另一个重载形式：</strong></p>\n<p><strong>原型：</strong>transform(first1,last1,first2,result,binary_op);</p>\n<p>first1是第一个容器的首迭代 器，last1为第一个容器的末迭代器，first2为第二个容器的首迭代器，result为存放结果的容器，binary_op为要进行操作的二元函数 对象或sturct、class。</p>\n<p>需要注意的是，两个容器first1和first2中的元素数量必须相等，否则会抛异常。</p>\n<h2 id=\"4-vector容器\"><a href=\"#4-vector容器\" class=\"headerlink\" title=\"4.vector容器\"></a>4.vector容器</h2><ul>\n<li>vector是将元素置于一个<font color=\"red\"> <strong>动态数组</strong></font>中加以管理的容器</li>\n<li>vector支持随机存取元素，支持索引存取（[],at()）和迭代器存取</li>\n<li>vector在尾部添加和移除元素速度快，在中部和头部速度慢</li>\n<li>使用vector容易需要包含<code>#include&lt;vector&gt;</code>头文件</li>\n</ul>\n<h3 id=\"vector常用方法\"><a href=\"#vector常用方法\" class=\"headerlink\" title=\"vector常用方法\"></a>vector常用方法</h3><table>\n  <tr>\n    <th> </th>\n    <th>函数</th>\n    <th>作用</th>\n  </tr>\n  <tr>\n    <td rowspan=\"4\">读取与赋值</td>\n    <td>front(void)</td>\n    <td>获取容器首元素，既可以作左值也可以作右值</td>\n  </tr>\n  <tr>\n    <td>back(void)</td>\n    <td>获取容器尾元素，既可以作左值也可以作右值</td>\n  </tr>\n  <tr>\n    <td>push_back(T t)</td>\n    <td>在容器的尾部添加元素</td>\n  </tr>\n  <tr>\n    <td>pop_back(T t)</td>\n    <td>删除容器最后一个元素</td> \n  </tr>\n  <tr>\n    <td rowspan=\"4\">只读</td>\n    <td>begin(void)</td>\n    <td>获取容器首部迭代器</td> \n  </tr>\n  <tr>\n    <td>end(void)</td>\n    <td>获取容器尾部迭代器</td> \n  </tr>\n  <tr>\n    <td>rbegin(void)</td>\n    <td>获取逆序首部迭代器，实际指向容器的尾部，只能使用vector&#60int&#62::reverse_iterator逆序迭代器接收</td> \n  </tr>\n  <tr>\n    <td>rend(void)</td>\n    <td>获取逆序尾部部迭代器，实际指向容器的首部，只能使用vector&#60int&#62::reverse_iterator逆序迭代器接收</td> \n  </tr>\n  <tr>\n    <td rowspan=\"2\">删除</td>\n    <td>erase(iterator pos)</td>\n    <td>删除迭代器pos指向位置的元素</td> \n  </tr>\n  <tr>\n    <td>erase(iterator begin,iterator end)</td>\n    <td>从迭代器begin指向位置开始到end指向位置结束，区间删除元素</td> \n  </tr>\n  <tr>\n    <td>插入</td>\n    <td>insert(iterator pos,T t)</td>\n    <td>在pos迭代器指向的位置插入元素t，insert中的迭代器pos只能是begin()或end()否则会报错，似乎不止其他的迭代器</td> \n  </tr>\n    <td>判空</td>\n    <td>empty(void)</td>\n    <td>容器判空</td> \n  \n</table>\n\n<h2 id=\"5-deque容器\"><a href=\"#5-deque容器\" class=\"headerlink\" title=\"5.deque容器\"></a>5.deque容器</h2><ul>\n<li>deque容器是一个双端数组，在双端数组的两端均可以插入和删除元素</li>\n<li>使用deque容器需要包头文件<code>#include&lt;deque&gt;</code></li>\n</ul>\n<p>deque容器可以说是vector容器的升级版，deque的用法基本和vector一致，但是deque不仅提供push_back()，pop_back()还提供<font color=\"red\"> <strong>push_front()</strong></font> 和<font color=\"red\"> <strong>pop_front()</strong></font>。</p>\n<h2 id=\"6-stack容器\"><a href=\"#6-stack容器\" class=\"headerlink\" title=\"6.stack容器\"></a>6.stack容器</h2><ul>\n<li>stack容器是一个栈模型</li>\n<li>使用stack容器需要包含头文件<code>#include&lt;stack&gt;</code></li>\n</ul>\n<h3 id=\"stack常用方法\"><a href=\"#stack常用方法\" class=\"headerlink\" title=\"stack常用方法\"></a>stack常用方法</h3><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>push(T t)</td>\n<td>元素入栈顶</td>\n</tr>\n<tr>\n<td>pop()</td>\n<td>栈顶元素出栈</td>\n</tr>\n<tr>\n<td>top()</td>\n<td>获取栈顶元素</td>\n</tr>\n</tbody></table>\n<h2 id=\"7-queue容器\"><a href=\"#7-queue容器\" class=\"headerlink\" title=\"7.queue容器\"></a>7.queue容器</h2><ul>\n<li>queue容器是一个队列模型</li>\n<li>使用queue容器需要包含头文件<code>#include&lt;queue&gt;</code></li>\n</ul>\n<h3 id=\"queue常用方法\"><a href=\"#queue常用方法\" class=\"headerlink\" title=\"queue常用方法\"></a>queue常用方法</h3><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>push(T t)</td>\n<td>元素入队尾</td>\n</tr>\n<tr>\n<td>pop()</td>\n<td>队首元素出队</td>\n</tr>\n<tr>\n<td>front()</td>\n<td>获取队首元素，既可以作左值也可以作右值</td>\n</tr>\n<tr>\n<td>back()</td>\n<td>获取队尾元素，既可以作左值也可以作右值</td>\n</tr>\n</tbody></table>\n<h2 id=\"8-list容器\"><a href=\"#8-list容器\" class=\"headerlink\" title=\"8.list容器\"></a>8.list容器</h2><ul>\n<li>list容器是一个双向链表模型，可以高效的进行元素的插入和删除操作</li>\n<li>list容器不支持随机访问，即不支持[],at()和iterator + n(如：begin()+1)等形式的访问</li>\n<li>使用list容器需要包含头文件<code>#include&lt;list&gt;</code></li>\n</ul>\n<p>list容器除了不支持随机访问外，用法和deque容器的用法基本一致，除此之外list容器还提供一个<font color=\"red\"> <strong>remove(T t)</strong></font>函数来根据元素内容删除元素</p>\n<p>使用list容器时有一点需要注意<font color=\"red\"> <strong>list容器在使用erase删除元素时，遵循左闭右开的原则</strong></font>，如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-built_in\">list</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; li;<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)<br>\tli.push_back(i);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">list</span>&lt;<span class=\"hljs-keyword\">int</span>&gt;::iterator it = li.begin(); it != li.end(); it++)<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; *it;<br><span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">list</span>&lt;<span class=\"hljs-keyword\">int</span>&gt;::iterator it1 = li.begin();<span class=\"hljs-comment\">//it1指向元素0</span><br><span class=\"hljs-built_in\">list</span>&lt;<span class=\"hljs-keyword\">int</span>&gt;::iterator it2 = li.begin();<br>it2++; it2++; it2++;<span class=\"hljs-comment\">//此时it2指向元素3</span><br>li.erase(it1, it2);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">list</span>&lt;<span class=\"hljs-keyword\">int</span>&gt;::iterator it = li.begin(); it != li.end(); it++)<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; *it;<br><span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">01234<br>34<br></code></pre></td></tr></table></figure>\n<p>可以看到erase在删除0-3的元素时删除了0，1，2而没有删除3，即左闭右开。</p>\n<h2 id=\"9-priority-queue容器\"><a href=\"#9-priority-queue容器\" class=\"headerlink\" title=\"9.priority_queue容器\"></a>9.priority_queue容器</h2><ul>\n<li><p><code>priority_queue</code>容器是一个具有优先级的队列，又叫优先级队列适配器，分为最大优先级队列和最小优先级队列两种</p>\n</li>\n<li><p>priority_queue容器是一种特殊的queue容器，所以也需要包含头文件<code>#include&lt;queue&gt;</code></p>\n</li>\n</ul>\n<p>默认的定义<code>priority_queue&lt;T&gt; pr</code>的优先级队列是最大优先级队列，显示定义最大优先级队列：<code>priority_queue&lt;int,vector&lt;int&gt;,less&lt;int&gt;&gt; pr</code>，<code>less</code>是一个谓词后面再学习，显示定义最小优先级队列：<code>priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt; pr</code>，其中使用<code>greater</code>需要包含头文件<code>#include&lt;functional&gt;</code>。</p>\n<p><code>priority_queue</code>容器的用法基本和<code>queue</code>一致，除此之外，<code>priority_queue</code>容器提供一个<code>top()</code>函数来获取队首元素，而<code>queue</code>容器没有这个方法。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-built_in\">priority_queue</span>&lt;<span class=\"hljs-keyword\">int</span>,<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt;,greater&lt;<span class=\"hljs-keyword\">int</span>&gt;&gt; pr;<br>pr.push(<span class=\"hljs-number\">12</span>);<br>pr.push(<span class=\"hljs-number\">4</span>);<br>pr.push(<span class=\"hljs-number\">10</span>);<br>pr.push(<span class=\"hljs-number\">20</span>);<br><span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;最小元素：&quot;</span> &lt;&lt;pr.top() &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-keyword\">while</span> (pr.size() &gt; <span class=\"hljs-number\">0</span>)<br>&#123;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; pr.top() &lt;&lt; <span class=\"hljs-string\">&quot;,&quot;</span>;<br>\tpr.pop();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">最小元素：<span class=\"hljs-number\">4</span><br><span class=\"hljs-number\">4,10,12,20</span>,<br></code></pre></td></tr></table></figure>\n<h2 id=\"10-set容器\"><a href=\"#10-set容器\" class=\"headerlink\" title=\"10.set容器\"></a>10.set容器</h2><ul>\n<li><code>set</code>是一个<font color=\"red\"><strong>集合</strong></font>容器，其中所包含的元素是<font color=\"red\"><strong>唯一</strong></font>的，<font color=\"red\"><strong>集合中的元素按一定的顺序排序</strong></font>，元素的插入过程是按排序规则插入，所以不能指定位置插入</li>\n<li><code>set</code>采用红黑树变体的数据结构实现，红黑树属于平衡二叉树，在插入和删除操作上比<code>vector</code>容器速度更快</li>\n<li><code>set</code>容器不支持[]和at()来存取元素</li>\n<li><font color=\"red\"><strong>set不支持直接修改容器中的元素</strong></font>，因为元素是自动排序的，如果希望修改一个元素值，就必须删除这个元素再插入新元素</li>\n<li>要使用<code>set</code>容器需要包含头文件<code>#include&lt;set&gt;</code></li>\n</ul>\n<h3 id=\"set容器的基本特性\"><a href=\"#set容器的基本特性\" class=\"headerlink\" title=\"set容器的基本特性\"></a>set容器的基本特性</h3><p>默认情况下，直接定义的set容器采用最小优先排序，和priority_queue容器恰好相反，<code>set&lt;T&gt; se</code>就是隐式的<code>set&lt;T,less&lt;T&gt;&gt; se</code>，定义最大优先排序的set容器需要显示定义：<code>set&lt;T,greater&lt;T&gt;&gt; se</code>。</p>\n<p>我们来看一个例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-built_in\">set</span>&lt;<span class=\"hljs-built_in\">string</span>,greater&lt;<span class=\"hljs-built_in\">string</span>&gt;&gt; se;<span class=\"hljs-comment\">//采用最大优先排序</span><br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)<span class=\"hljs-comment\">//生成随机字符串元素</span><br>&#123;<br>\t<span class=\"hljs-keyword\">int</span> tmp = rand();<br>\t<span class=\"hljs-built_in\">string</span> str = <span class=\"hljs-string\">&quot;&quot;</span>;<br>\t<span class=\"hljs-keyword\">while</span> (str.length()&lt;=<span class=\"hljs-number\">3</span>)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">if</span>(tmp &gt;= <span class=\"hljs-number\">97</span> &amp;&amp; tmp &lt;= <span class=\"hljs-number\">122</span>)<br>\t\t\tstr += tmp;<br>\t\ttmp = rand();<br>\t&#125;<br>\tse.insert(str);<br>&#125;<br>se.insert(<span class=\"hljs-string\">&quot;strs&quot;</span>);<span class=\"hljs-comment\">//插入相同的字符串元素</span><br>se.insert(<span class=\"hljs-string\">&quot;strs&quot;</span>);<br>se.insert(<span class=\"hljs-string\">&quot;strs&quot;</span>);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">set</span>&lt;<span class=\"hljs-built_in\">string</span>, greater&lt;<span class=\"hljs-built_in\">string</span>&gt;&gt;::iterator it = se.begin(); it != se.end(); it++)<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">wqye</span><br><span class=\"hljs-symbol\">vfep</span><br><span class=\"hljs-symbol\">strs</span><br><span class=\"hljs-symbol\">omsk</span><br><span class=\"hljs-symbol\">kfnm</span><br><span class=\"hljs-symbol\">cdsb</span><br></code></pre></td></tr></table></figure>\n<p>可以看到，容器里的字符串确实按照字符串的比较规则按从大到小的顺序排列着，并且无论我们插入多少个相同的元素，在容器内只会存储一个相同的元素值。</p>\n<p>值得注意的是：</p>\n<p><code>set</code>容器只提供了<code>insert(T t)</code>函数来插入元素。</p>\n<h3 id=\"自定义元素的排序\"><a href=\"#自定义元素的排序\" class=\"headerlink\" title=\"自定义元素的排序\"></a>自定义元素的排序</h3><p>自定义类作元素可能会出现类中有多个字段，而我们需要其中的某一个字段来作为关键字在<code>set</code>容器中排序，要实现这样的行为，我们就需要用到<font color=\"red\"><strong>仿函数</strong></font>了。</p>\n<h4 id=\"什么是仿函数？\"><a href=\"#什么是仿函数？\" class=\"headerlink\" title=\"什么是仿函数？\"></a>什么是仿函数？</h4><p>仿函数实质上就是一个做了<code>()</code>重载的结构体，因为重载了<code>()</code>使用起来类似函数，所以称之为仿函数。</p>\n<p>我们来看一个例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-built_in\">string</span> name;<br>\t<span class=\"hljs-keyword\">int</span> age;<br>\t<span class=\"hljs-keyword\">bool</span> isStudent;<br>\tStudent(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">string</span> name, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> age, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">bool</span> isStudent)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;age = age;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;name = name;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;isStudent = isStudent;<br>\t&#125;<br>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">AgeSort</span>//仿函数</span><br><span class=\"hljs-class\">&#123;</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">operator</span><span class=\"hljs-params\">()</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Student &amp;lift, <span class=\"hljs-keyword\">const</span> Student &amp;right)</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\t<span class=\"hljs-keyword\">return</span> (lift.age &lt; right.age);<br>\t&#125;<br>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">set</span>&lt;Student, AgeSort&gt; se;<br>\t<span class=\"hljs-function\">Student <span class=\"hljs-title\">s1</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;Alian&quot;</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-literal\">true</span>)</span></span>;<br>\t<span class=\"hljs-function\">Student <span class=\"hljs-title\">s2</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;Blank&quot;</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-literal\">true</span>)</span></span>;<br>\t<span class=\"hljs-function\">Student <span class=\"hljs-title\">s3</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;Cary&quot;</span>, <span class=\"hljs-number\">43</span>, <span class=\"hljs-literal\">false</span>)</span></span>;<br>\t<span class=\"hljs-function\">Student <span class=\"hljs-title\">s4</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;Davel&quot;</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-literal\">true</span>)</span></span>;<br>\tse.insert(s1); se.insert(s2);<br>\tse.insert(s3); se.insert(s4);<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">set</span>&lt;Student, AgeSort&gt;::iterator it = se.begin(); it != se.end(); it++)<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; it-&gt;name &lt;&lt; <span class=\"hljs-string\">&quot;\\t&quot;</span> &lt;&lt; it-&gt;age &lt;&lt; <span class=\"hljs-string\">&quot;\\t&quot;</span> &lt;&lt; it-&gt;isStudent &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">Blank</span>   <span class=\"hljs-number\">20</span>      <span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">Alian</span>   <span class=\"hljs-number\">23</span>      <span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">Cary</span>    <span class=\"hljs-number\">43</span>      <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n<p>其中<code>AgeSort</code>就是仿函数，它的比较关键字是<code>Student.age</code>，所以<code>set</code>容器对象se会以age作为排序关键字，其实我们之前使用的<code>less&lt;&gt;</code>和<code>greater&lt;&gt;</code>也是反函数，只不过是C++预定义好的仿函数。</p>\n<p>细心的朋友可能会发现，我们插入的s4对象居然不再容器里！！！这是因为set容器中的元素具有唯一性，而set容器是通过关键字来识别元素的，所当碰到关键字相同的元素时，set只会存储一个元素。</p>\n<p>那么这种情况该怎么解决呢？答案是set容器没有办法解决这种情况，如果有出现这种情况，就不能使用set容器而改用multiset容器。</p>\n<p>在后面的算法模块我们详细介绍仿函数。</p>\n<h3 id=\"set常用函数\"><a href=\"#set常用函数\" class=\"headerlink\" title=\"set常用函数\"></a>set常用函数</h3><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>find(T t)</td>\n<td>查找元素t，返回指向t元素的迭代器，查找失败返回指向set.end()的迭代器</td>\n</tr>\n<tr>\n<td>count(T t)</td>\n<td>返回容器中元素t的个数，值要么是0，要么是1</td>\n</tr>\n<tr>\n<td>lower_bound(T t)</td>\n<td>返回一个指向&gt;=t元素的迭代器，如果t存在则指向t，如果t不存在则指向t后面的一个元素</td>\n</tr>\n<tr>\n<td>upper_bound(T t)</td>\n<td>返回一个指向&gt;t元素的迭代器，即t元素后面的一个元素</td>\n</tr>\n<tr>\n<td>equal_range(T t)</td>\n<td>返回一个包含两个set类型的迭代器的对组pair&lt;set<T>::iterator,set<T>::iterator&gt;第一个迭代器指向t元素，第二个迭代器指向t后面的一个元素，如果t不存在，则两个迭代器都指向t后面的一个元素</T></T></td>\n</tr>\n</tbody></table>\n<h3 id=\"小知识\"><a href=\"#小知识\" class=\"headerlink\" title=\" 小知识\"></a><font color=\"blue\"> 小知识</font></h3><p><font color=\"blue\"> 事实上容器中的<code>insert</code>函数是有返回值的，<code>insert</code>的返回值是一个对组(pair)类型的泛型<code>pair&lt;set&lt;T&gt;::iterator, bool&gt;</code>的对象，<code>pair</code>是一个只有两个字段的模板，我们可以直接定义<code>pair&lt;set&lt;T&gt;::iterator, bool&gt;</code>类型对象来接收<code>insert</code>函数的返回值，如：</font></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-built_in\">pair</span>&lt;<span class=\"hljs-built_in\">set</span>&lt;Student,AgeSort&gt;::iterator, <span class=\"hljs-keyword\">bool</span>&gt; pait=se.insert(s1);<br></code></pre></td></tr></table></figure>\n<p><font color=\"blue\"> 我们可以通过<code>pair.first</code>和<code>pair.second</code>来访问对组中的两个元素，通过<code>pair.first</code>来访问对组中的第一个元素<code>set&lt;Student,AgeSort&gt;::iterator</code>类型的迭代器，通过<code>pair.first-&gt;first</code>，和<code>pair.first-&gt;second</code>可以访问迭代器所指向的容器元素，我们通过<code>pair.second</code>来访问对组中的第二个元素，bool型的元素记录的是insert函数插入是否成功，如果插入成功则记录true，否则记录false。</font></p>\n<h2 id=\"11-multiset容器\"><a href=\"#11-multiset容器\" class=\"headerlink\" title=\"11.multiset容器\"></a>11.multiset容器</h2><ul>\n<li><code>multiset</code>容器可以说是set容器的升级版，multiset容器支持多个相同键值的元素的存储，所以要使用<code>multiset</code>需要包含头文件<code>#include&lt;set&gt;</code></li>\n</ul>\n<p>multiset的用法和set一致。</p>\n<h2 id=\"12-map容器\"><a href=\"#12-map容器\" class=\"headerlink\" title=\"12.map容器\"></a>12.map容器</h2><ul>\n<li><code>map</code>是标准的关联式容器，一个<code>map</code>元素是一个键值对(key,value),<code>map</code>提供基于键值的快速检索能力</li>\n<li><code>map</code>中<font color=\"red\"><code> key</code>值是唯一的</font></li>\n<li><code>map</code>容器中的元素也是按一定顺序排列的，元素插入过程是按排序规则插入的，所以不能指定位置插入</li>\n<li><code>map</code>容器的具体实现也是采用红黑二叉树变体的平衡二叉树的数据结构，在插入和删除的操作上比<code>vector</code>更快</li>\n<li>与<code>set</code>不同的是<code>map</code>支持直接存取<code>key</code>值对应的<code>value</code>，也支持[]操作符</li>\n<li>要使用<code>map</code>容器就需要包含头文件<code>#include&lt;map&gt;</code></li>\n</ul>\n<h3 id=\"map的元素插入\"><a href=\"#map的元素插入\" class=\"headerlink\" title=\"map的元素插入\"></a>map的元素插入</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">map</span>&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">string</span>&gt; ma;<br>\t<span class=\"hljs-comment\">//方法一</span><br>\tma.insert(<span class=\"hljs-built_in\">pair</span>&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">string</span>&gt;(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;pair&quot;</span>));<br>\tma.insert(<span class=\"hljs-built_in\">pair</span>&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">string</span>&gt;(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;pair_02&quot;</span>));<br>\t<span class=\"hljs-comment\">//方法二</span><br>\tma.insert(<span class=\"hljs-built_in\">make_pair</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&quot;make_pair&quot;</span>));<br>\tma.insert(<span class=\"hljs-built_in\">make_pair</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&quot;make_pair_02&quot;</span>));<br>\t<span class=\"hljs-comment\">//方法三</span><br>\tma.insert(<span class=\"hljs-built_in\">map</span>&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">string</span>&gt;::value_type(<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&quot;value_type&quot;</span>));<br>\tma.insert(<span class=\"hljs-built_in\">map</span>&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">string</span>&gt;::value_type(<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&quot;value_type_02&quot;</span>));<br>\t<span class=\"hljs-comment\">//方法四</span><br>\tma[<span class=\"hljs-number\">4</span>] = <span class=\"hljs-string\">&quot;map&quot;</span>;<br>\tma[<span class=\"hljs-number\">4</span>] = <span class=\"hljs-string\">&quot;map_02&quot;</span>;<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">map</span>&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">string</span>&gt;::iterator it = ma.begin(); it != ma.end(); it++)<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"hljs-string\">&quot;\\t&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs basic\"><span class=\"hljs-symbol\">1 </span>      pair<br><span class=\"hljs-symbol\">2 </span>      make_pair<br><span class=\"hljs-symbol\">3 </span>      value_type<br><span class=\"hljs-symbol\">4 </span>      map_02<br></code></pre></td></tr></table></figure>\n<p>上面四种方法都可以向map容器里添加元素，但是四者中也有一些微小的区别，前面三种方法在插入相同键值时，只会保存第一存储的结果，之后插入相同键值的元素时都会插入失败，而第四种方法则是后面赋值的元素覆盖前面赋值的元素。</p>\n<p>map似乎没办法来指定是从大到小排序或是从小到大排序</p>\n<p>map除了元素的形式不同，在其他方面map的用法基本和set一致</p>\n<h2 id=\"13-multimap容器\"><a href=\"#13-multimap容器\" class=\"headerlink\" title=\"13.multimap容器\"></a>13.multimap容器</h2><p><code>multimap</code>容器和<code>multiset</code>容器一样，是<code>map</code>容器的升级版，支持一个键对应多个值，所以<code>multimap</code>的一个重要应用场景就是数据分组。</p>\n<h2 id=\"14-容器在使用过程必须要注意的地方\"><a href=\"#14-容器在使用过程必须要注意的地方\" class=\"headerlink\" title=\"14.容器在使用过程必须要注意的地方\"></a>14.容器在使用过程必须要注意的地方</h2><p><font color=\"red\"> 因为在将元素添加到容器里时，C++执行的是容器的默认的拷贝构造函数，将元素拷贝到容器里，这个过程是一个浅拷贝，既然是浅拷贝就会面临浅拷贝的两次内存释放的问题，尤其是类元素，所以在添加一些具有指针字段的元素到容器里时，一定在类里定义一个深拷贝的拷贝构造函数和=的重载函数。</font></p>\n<h2 id=\"15-各个容器的比较\"><a href=\"#15-各个容器的比较\" class=\"headerlink\" title=\"15.各个容器的比较\"></a>15.各个容器的比较</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>vector</th>\n<th>deque</th>\n<th>list</th>\n<th>set</th>\n<th>multiset</th>\n<th>map</th>\n<th>multimap</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>内存结构</td>\n<td>单端数组</td>\n<td>双端数组</td>\n<td>双向链表</td>\n<td>二叉树</td>\n<td>二叉树</td>\n<td>二叉树</td>\n<td>二叉树</td>\n</tr>\n<tr>\n<td>随机存取</td>\n<td>是</td>\n<td>是</td>\n<td>否</td>\n<td>否</td>\n<td>否</td>\n<td>对key而言是</td>\n<td>否</td>\n</tr>\n<tr>\n<td>元素检索</td>\n<td>慢</td>\n<td>慢</td>\n<td>非常慢</td>\n<td>快</td>\n<td>快</td>\n<td>对key而言快</td>\n<td>对key而言快</td>\n</tr>\n<tr>\n<td>快速安插移除</td>\n<td>尾端</td>\n<td>头尾两端</td>\n<td>任何位置</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<h1 id=\"三、算法\"><a href=\"#三、算法\" class=\"headerlink\" title=\"三、算法\"></a>三、算法</h1><h2 id=\"1-算法\"><a href=\"#1-算法\" class=\"headerlink\" title=\"1.算法\"></a>1.算法</h2><p>​    函数库对数据类型的选择对其可重用性起着至关重要的作用。举例来说，一个求方根的函数，在使用浮点数作为其参数类型的情况下的可重用性肯定比使用整型作为它的参数类性要高。而C++通过模板的机制允许推迟对某些类型的选择，直到真正想使用模板或者说对模板进行特化的时候，STL就利用了这一点提供了相当多的有用算法。它是在一个有效的框架中完成这些算法的–可以将所有的类型划分为少数的几类，然后就可以在模版的参数中使用一种类型替换掉同一种类中的其他类型。</p>\n<p>  STL提供了大约100个实现算法的模版函数，比如算法for_ each 将为指定序列中的每一个元素调用指定的函数，stable_ _sort 以你所指定的规则对序列进行稳定性排序等等，这样一-来,只要熟悉了STL之后，许多代码可以被大大的化简，只需要通过调用一-两个算法模板，就可以完成所需要的功能并大大地提升效率。</p>\n<p>  算法部分主要由头文件<code>&lt;algorithm&gt;</code>, <code>&lt;numeric&gt;</code>和<code>&lt;functional&gt;</code>组成。<code>&lt;algorithm&gt;</code>是所 有STL头文件中最大的一个(尽管它很好理解)，它是由一大堆模版函数组成的，可以认为每个函数在很大程度上都是独立的，其中常用到的功能范围涉及到比较、交换、查找、遍历操作、复制、修改、移除、反转、排序、合并等等。<code>&lt;numeric&gt;</code>体积很小，只包括几个在序列上面进行简单数学运算的模板函数，包括加法和乘法在序列上的一些操作。<code>&lt;functional&gt;</code>中则定义了一些模板类，用以声明函数对象。</p>\n<h2 id=\"2-算法的分类\"><a href=\"#2-算法的分类\" class=\"headerlink\" title=\"2.算法的分类\"></a>2.算法的分类</h2><h3 id=\"非可变序列算法\"><a href=\"#非可变序列算法\" class=\"headerlink\" title=\"非可变序列算法\"></a>非可变序列算法</h3><p>计数算法：count,count_if等 </p>\n<p>搜索算法：search,find,find_if,find_list_of等</p>\n<p>比较算法：equal,mismatch,lexicographical_compare等</p>\n<h3 id=\"可变排序算法\"><a href=\"#可变排序算法\" class=\"headerlink\" title=\"可变排序算法\"></a>可变排序算法</h3><p>删除算法：remove,remove_if,remove_copy等</p>\n<p>修改算法：for_each,transform等</p>\n<p>排序算法：sort,stable_sort,partial_sort等</p>\n<h2 id=\"3-仿函数\"><a href=\"#3-仿函数\" class=\"headerlink\" title=\"3.仿函数\"></a>3.仿函数</h2><h2 id=\"4-一些常用的算法模板\"><a href=\"#4-一些常用的算法模板\" class=\"headerlink\" title=\"4.一些常用的算法模板\"></a>4.一些常用的算法模板</h2><h3 id=\"find算法\"><a href=\"#find算法\" class=\"headerlink\" title=\"find算法\"></a>find算法</h3><p><strong>原型:</strong><code>iterator find(iterator begin,iterator end,T t)</code></p>\n<p>在容器的begin迭代器所指向的位置开始到end所指向的位置结束，查找元素t，如果找到了，则返回指向t的迭代器。</p>\n<h1 id=\"四、迭代器\"><a href=\"#四、迭代器\" class=\"headerlink\" title=\"四、迭代器\"></a>四、迭代器</h1><h2 id=\"1-迭代器\"><a href=\"#1-迭代器\" class=\"headerlink\" title=\"1.迭代器\"></a>1.迭代器</h2><p>​    迭代器从作用上来说是最基本的部分，可是理解起来比前两者都要费力一些。软件设计有一个基本原则，所有的问题都可以通过引进一个间接层来简化，这种简化在 STL中就是用迭代器来完成的。概括来说，迭代器在STL中用来将算法和容器联系起来，起着一种黏和剂的作用。几乎STL提供的所有算法都是通过送代器存取元素序列进行工作的，每一个容器都定义了其本身所专有的选代器，用以存取容器中的元素。</p>\n<p>​    迭代器部分主要由头文件<code>&lt;utility&gt;</code>,<code>&lt;iterator&gt;</code>和<code>&lt;memory&gt;</code>组成。<code>&lt;utility&gt;</code>是-一个很小的头文件，它包括了贯穿使用在STL中的几个模板的声明，<code>&lt;iterator&gt;</code>中提供 了迭代器使用的许多方法，而对于<code>&lt;memory&gt;</code>的描述则十分的困难，它以不同寻常的方式为容器中的元素分配存储空间，同时也为某些算法执行期间产生的临时对象提供机制,<code>&lt;memory&gt;</code>中的主要部分是模板类<code>alocator</code>,它负责产生所有容器中的默认分配器。</p>\n<h2 id=\"2-迭代器的基本原理\"><a href=\"#2-迭代器的基本原理\" class=\"headerlink\" title=\"2.迭代器的基本原理\"></a>2.迭代器的基本原理</h2><ul>\n<li><p>迭代器是一个“可遍历STL容器内全部或部分元素”的对象</p>\n</li>\n<li><p>迭代器指出容器中的一个特定位置</p>\n</li>\n<li><p>迭代器就如同一个指针</p>\n</li>\n<li><p>迭代器提供对一个容器中的对象的访问方法，并且可以定义了容器中对象的范围</p>\n</li>\n</ul>\n<h2 id=\"3-迭代器的分类\"><a href=\"#3-迭代器的分类\" class=\"headerlink\" title=\"3.迭代器的分类\"></a>3.迭代器的分类</h2><p><strong>输入迭代器</strong>:也有叫法称之为“只读迭代器”，它从容器中读取元素，只能一次读入一个元素向前移动，只支持一遍算法，同一个输入迭代器不能两遍遍历一个序列。</p>\n<p><strong>输出迭代器</strong>:也有叫法称之为“只写迭代器”，它往容器中写入元素，只能一次写入一个元素向前移动，只支持一遍算法，同一个输出迭代器不能两遍遍历一个序列。</p>\n<p><strong>正向迭代器</strong>:组合输入送代器和输出迭代器的功能,还可以多次解析一个迭代器指定的位置，可以对一个值进行多次读/写。</p>\n<p><strong>双向达代器</strong>:组合正向迭代器的功能，还可以通过-操作符向后移动位置。</p>\n<p><strong>随机访问送代器</strong>:组合双向送代器的功能，还可以向前向后跳过任意个位置，可以直接访问容器中任何位置的元素。</p>\n<h1 id><a href=\"#\" class=\"headerlink\" title></a></h1>"},{"title":"【C++】C++进阶","date":"2019-08-23T14:27:29.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n﻿1.C++介绍：\n\tC语言作为结构化和模块化语言适合规模较小的程序，对于大规模的复杂程序，能够高度抽象和建模的C++则更加适合，C++是C语言的加强版，以C语言为基础，并且完全兼容C语言的特性。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190623193001260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n2.C++对C语言的增强语法\n\t2.1.命名空间\n\t2.2.引用\n\t2.3.函数与运算符的重载\n\t2.4.面向对象的特性\n\t2.5.泛型编程\n\t2.6.异常处理\n\t2.7.标准模板库\n下面笔者就者7个特性进行详细说明：\n3.命名空间\n\t命名空间是C++提供的一种解决不同文件互相调用时符号名字冲突的方法，一个命名空间就是一个作用域，在不同的命名空间下允许相同的名字符号代表不同的实体。\n\t3.1命名空间的定义\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190623200228628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\t\t注意：命名空间的声明要在类和函数的外面定义，并且没有分号结束。\n\t\t3.2.命名空间成员的引用\n\t\t\t命名空间名::成员名\n\t如：\n\t1.cpp\n#include<iostream>\nusing namesapce std;\n/*\n命名空间的声明方式，我们需要用到命名空间中的什么方法就在{}内加入什么方法的声明，当然直接使用“using namespace A”来声明A命名空间也是可以的，但是这种命名方法会将A命名空间下的所有方法都作声明，包括我们可能没有使用的方法，当工程很大时，这种做法会导致代码臃肿。\n*/\nnamespace A {\n\tint add(int a,int b);\n}\nint add(int a,int b);\nint mian(){\n\tint a = 1,b = 1;\n/*\n在很多多人编程的时候，如果各程序员之间不一直进行密切的交流，极容易出现变量名或方法名类名等相同的情况，这样\t在；多文档联合编译时，编译器会无法区分同名符号而报错，而命名空间就很好的解决了这种问题，我们为各个文档都定义一个唯一的命名空间，这样即使是相同符号也可以通过命名空间唯一标识了，命名空间的出现极大的改善了多人编程的困处\n*/\n\tcout << add(a,b)<<\"  \"<<A::add(a,b)<< endl;\n\treturn 0;\n\t}\nint add(int a,int b){\n\treturn(a + b);\n}\n\t2.cpp\n#include<iostream>\nnamespace A {\n\tint add(int a,int b){\n\t\treturn(a + b)；\n\t}\n}\n3.3.命名空间的别名\n\t命名空间是可以另起别命的，别命是已定义的命名空间的可代替的名字，一个命名空间可以有很多个别名，所有的别命和命名空间原名可以互换使用\n\t别命的定义：namespace 别命 = 命名空间原名;\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/2019062320111766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\t3.4.命名空间的成员类型\n\t\t命名空间的成员类型可以是变量、常量、函数、结构体、联合体、枚举、类、嵌套的命名空间\n\t3.5.全局命名空间\n\t\t在全局作用域中定义的命名空间，大多数命名空间都属于全局命名空间。即自定义的命名空间是全局命名空间的扩张和细分。全局命名空间是隐式声明的，它存在于每一个程序中。\n\t\t由于全局命名空间是隐含的，它没有名字，所以使用“::成员名字”引用全局命名空间。\n\t3.6.匿名命名空间\n\t\t匿名命名空间与全局命名空间类似，也没有名字，但是匿名命名空间定义在局部作用域，不能用于多文件编译。\n\t\t匿名命名空间可以直接使用变量名引用成员。\n\t4.引用\n\t\t4.1.什么是引用？\n\t\t\t引用即别命，是某一个变量或对象的别命，绑定一个引用到一个变量或对象，即引用初始化，之后对引用的操作完全等价于对与其绑定的变量或对象的操作。\n\t4.2.引用的定义\n\t\t类型 &引用名 = 目标变量名;\n\t\t需要注意的是：\n\t\t\t- &不是求地址运算符，而是起标志作用\n\t\t\t- 引用的类型必须和其所绑定的变量类型相同\n\t\t\t- 声明应用的同时必须对其初始化，否则系统会报错\n\t\t\t- 引用相当于变量或对象的别命，因此不可将已绑定的引用再绑定其他变量或对象，也不可将一个引用绑定另一个引用。\n\t4.3.引用与指针的区别\n\t\t+占用存储空间上：\n\t\t\t\t\t-引用占用一个地址空间，本地计算机的一个地址空间是多少位，引用就占多少位的地址空间。\n\t\t\t\t\t-而指针除了占用一个地址空间外，还占用一个数据空间用于存储其指向的变量或对象的地址。\n\t\t+在操作上：\n\t\t\t\t\t-引用声明的同时必须对其初始化，且初始化后引用不可更改，引用不能为空。如：int &a ;是错误的用法，正确的用法应该是：int &a = b;\n\t\t\t\t\t-指针的声明可以在任何时候初始化，且指针在后续操作中可以变更其指向的变量或对象，指针可以为空。\n\t\t+存储内容上\n\t\t\t\t\t-“sizeof引用”得到的是引用所指向的变量或对象的大小\n\t\t\t\t\t-“sizeof指针”得到的是指针本身的大小\n\t\t+层级上\n\t\t\t\t\t-引用只能有一级，引用不可以再指向引用\n\t\t\t\t\t-指针理论上对级数没有限制\n\t\t+可以将引用理解为不可更改的指针，即：类型* const 指针变量\n\t4.4.对数组的引用\n\t\t类型 （&引用名）[数组下标] = 数组名;\n\t\t如：对int a[3]数组的引用为int (&quote)[3] = a;即将引用名替换成数组名。\n\t\t这里要注意，“()”是不能省略的，因为如果省略()，则会改变优先级，变成int &(quote[3]) = a;而出现语法错误。\n\t4.5.对指针的引用\n\t\t类型* &引用名 = 指针名;\n\t\t如：int* &quote = p;\n\t4.6.引用的作用\n\t\t引用既可以作为别命使用，还可以作为函数的参数、函数的返回值使用。\n\t\t需要注意的是，引用作为函数的返回值时不能返回局部变量的引用。\n\t至此，我可能提出这样的疑问：引用能做的事指针也能做，引用不能做的事指针还能做，那么C++么什么要引入“引用”这个概念呢？\n\t这是因为，指针的操作太过于强大，正因如此对指针的使用存在一定的风险，所谓“收益与风险并存”，在很多高版本的编译器中已经不能再操作指针了，如VS2015，而C++之所以还保留着指针，是因为指针的魅力无比诱人，尽管有风险却不愿意就此抛弃。\n\t引用的另一个用处我们举一个例子来说明\n\t如：\n\tint add_1(int b){\n\t\tb++;\n\t}\n\tint add_2(int &c){\n\t\tc++;\n\t}\n\tvoid mian(){\n\t\tint a = 1;\n\t\tint &a = a;\n\t\tcout<<add_1(a)<<endl;\n\t\tcout<<add_2(&a)<<endl;\n\t}\n\t我们的输出结果是：1 2，为什么呢?因为普通的参数传递，传递的是参数的拷贝，如add_1我们对b++，实际进行运算的是形参b，而实参a却没有发生运算，所以cout<<add_1(a)输出1，而如果传递引用的话，我们在函数add_2中对引用的操作实质上就是对a进行运算，因为&a就是a。\n\t4.7.常引用\n\t\tconst 类型 &引用名 = 目标变量名\n\t\t常引用可以引用常量也可以引用变量，常引用不允许通过引用对其绑定的变量或对象进行修改。\n\t\t![在这里插入图片描述](https://img-blog.csdnimg.cn/2019062512243728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)5.函数重载\n\t5.1.C++重载的实现\n\t从本质上来说，C++之所以能实现函数的重载是因为C++编译器对函数名的处理方法进行了优化，我们来对比一下C语言编译器和C++编译器对函数名的编译\n\t+C语言编译器\n\t\t对函数 int add(int a);编译后的名字为：add\n\t+C++编译器\n\t\t对函数int add(int a);编译后的名字为：addi，对int add(int a,float b);编译后的名字为：addij，C++编译器使用函数名和参数类型的共同组合成编译后函数的唯一标识，即可实现函数的重载。\n\t5.2.重载的定义\n\t\t重载就是在相同的声明域中函数名相同而参数列表不同，通过函数的参数表唯一标识的函数。\n\t5.3.函数的默认参数\n\t\tC++可以使用默认参数，即在函数声明时为参数提供一个默认值，当函数调用时没有指定这个参数的值时，编译器会自动使用默认值替换。\n\t\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190625221621705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\t\t需要注意的是，默认参数只能放在声明或定义处，能放在声明处就放在声明处。如果某个参数是默认参数，那么其后的参数也必须都是默认参数，如：int add(int a = 1,int b,int c);编译器将报错，而int add(int a,int b = 1,int c = 2);则不会报错，因为参数在传递的时候是从左到右的，首先使用无默认参数的参数列表，当遇到没有传入实参的形参时开始使用默认参数的参数列表。使用默认参数的情况仅限于用在没有没有重载冲突的函数上，如：重载add函数，int add(){...} int add(int a = 1,int b = 2){...},此时调用add();将调用不带参数的add()函数。\n\t\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190625222013457.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)5.4.内联函数\n\t5.4.1.为什么需要内联函数？\n\t\t在程序执行的过程中，当碰到函数调用时，系统要将程序当前状态保存到栈中，同时跳转到函数代码处执行函数体，此过程需要占用时间和空间，是的程序执行效率低下。当然我们声明一个内联函数只是建议编译器将此函数作为内联函数，但是编译器有自己的判断算法，在编译时编译器会自行判断我们声明的内联函数是否值得变为内联函数，以保证主程序体不会过于臃肿，所以我们声明的内联函数不一定会成为内联函数。\n\t5.4.2.内联函数的定义\n\t\tinline 返回值类型 函数名(参数列表){函数体;} \n\t5.4.3.内联函数是一种用空间换时间的措施，通常只有较短的函数才定义为内联函数。\n6.new和delete运算符\n\t6.1.new运算符的功能是在堆区分配内存，通过new运算符获得的内存空间都处于堆上。delete运算符的功能正好与new相反，delete运算符的功能是释放new运算符的在堆区创建的内存，new运算符与delete运算符最好是配套出现，即使用new运算符创建了内存就一定要用delete运算符在不需要的时候此内存的时候将其释放，为什么呢？因为堆区的内存是不会随着程序结束而释放的，堆区的内存只要在操作系统关闭时才会释放，所以如果不手动释放new运算符在堆区创建的内存，则会造成大量无用数据占据着堆区内存，当堆区内存被占满时这会出现系统无堆区内存可用而出现系统死机。\n\t6.2.new/delete运算符的使用\n\t\tnew <数据类型> (参数)\n\t\tdelete <对象指针>/delete <对象数组指针>\n\t\t![在这里插入图片描述](https://img-blog.csdnimg.cn/201907121654256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\t6.3.那么C++的new/delete与C语言的malloc/free有什么区别呢？\n\t\t-它们都是动态管理内存的入口\n\t\t-malloc/free是C/C++标准库函数，而new/delete是C++操作符\n\t\t-malloc/free只是动态分分配/释放内存空间，而new/delete除了分配内存空间还会调用构造/析构函数进行初始化/清理（清理成员）\n\t\t-malloc/free需要手动计算类型大小且返回值为void，而new/delete可以自行计算类型大小返回对应类型的指针\n\t\t-new/delete在底层是调用了malloc/free的。可以认为是C++对malloc/free的封装\n\t\t-malloc/free申请空间后需要判空，new/delete则不需要\n\t\t-new直接跟类型，malloc跟字节数。\n\t\tnew/delete和malloc/free的区别是C++企业招聘时特别喜欢考的一项\n7.程序的内存空间\n\t7.1.指针的内存操作\n\t\t-指针不仅可以可以指向变量还可以指向函数\n\t\t-有new运算符在堆区创建的内存空间由位于栈区的指针确定入口\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190712165857369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n说到这，我们有必要了解一下计算机程序的内存结构，供程序运行的内存空间分为：堆区、栈区、.data段、.bss段、.ro段、.txt段，我使用一张图来说明\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190712170749180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n8.面向对象编程的特点\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019071310135053.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n9.C++中的类\n\t9.1.类的定义\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019071310150942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\t9.2.访问权限\n\t\tC++为类的成员添加了三种访问权限\n\t\t-public--公有成员：权限最高，在public修饰下的成员是类的外部接口，可以被类的成员函数和对象直接访问。\n\t\t-protected--保护成员：权限居中，可以被类的成员函数和其派生类的成员函数直接访问，但不能被类的对象和派生类的对象直接访问。\n\t\t-private--私有成员：权限最低，只能通过类的成员函数访问。\n\t9.3.类的成员\n\t\t-成员变量：类的成员变量用以描述一个对象的属性信息，与一般的变量声明相同，但类的成员变量只能在类的声明体中定义，类的成员变量一般在类的构造函数中初始化，但这不是必须的。\n\t\t-成员函数：用来描述一个对象的行为动作，与一般的函数声明相同，但只能放在类的声明体中声明，成员函数可以在类内实现也可以在类外实现，但在类内实现则形成内联的成员函数，会使类变得冗杂，所以成员函数的实现最好在类外实现，类成员函数可以重载和带默认参数。\n\t9.5.类的成员函数与成员变量的声明与实现\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190713104139644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\t9.6.struct和class的区别\n\t\t-C++对struct关键字扩展了其功能，和class的功能几乎等价\n\t\t-struct的成员默认访问权限是public，而class是private\n\t9.7.this指针\n\t\t-this指针是一个特殊的指针，指向对象的自身的首地址\n\t\t-每一个对象的成员函数都有一个this指针，指向调用的对象，如果要引用整个对象则通过*this引用\n\t\t-this指针仅能在类的内部使用，即只能在类的声明体或成员函数中使用\n\t9.8.static关键字\n\t\t9.8.1.static修饰的成员变量--静态成员变量\n\t\t\t\t\t-static修饰的变量存储在静态变量区\n\t\t\t\t\t-在类中static关键字修饰的变量被此类的所有对象共享，即所有对象共享这一个变量\n\t\t\t\t\t-static修饰的变量必须在类外初始化，不可以在定义的时候直接初始化\n\t\t\t\t\t-static修饰的公有成员变量可以直接通过类名来访问，没有staic修饰的成员变量只能通过对象才能访问\n\t\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190713105202141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\t\t9.8.2.static修饰的成员函数--静态成员函数\n\t\t\t\t\t-static修饰的成员函数也可以直接通过类名访问\n\t\t\t\t\t-静态成员函数只能访问静态成员变量\n\t\t9.8.3.类的静态与非静态部分\n\t\t\t\t\t-静态部分只属于类，与类一起存放在内存的静态区，被所有对象共享\n\t\t\t\t\t-非静态部分属于对象，每个对象都有自己的非静态部分，互不影响\n\t\t\t\t\t-静态部分只能直接访问静态部分，非静态部分可以访问所有部分\n\t\t\t\t\t那么为什么静态部分只能直接访问静态部分，而非静态部分却可以访问所有部分呢？\n\t\t\t\t\t那是因为，非静态成员变量/函数是属于对象的，只能通过对象来访问，而静态部分是属于类的，使用静态部分时没有确定对象的存在，所以不能确定静态部分应该访问哪个对象的非静态部分，而静态部分是属于类的，所有对象共享，所以通过对象使用非静态部分时，可以访问静态部分。\n\t思导图：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190623192350471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190712170853343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\n","source":"_posts/【C++】C++进阶.md","raw":"---\ntitle: 【C++】C++进阶\ndate: 2019-08-23 22:27:29\ntags: C++\ncategories: 学习笔记\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n﻿1.C++介绍：\n\tC语言作为结构化和模块化语言适合规模较小的程序，对于大规模的复杂程序，能够高度抽象和建模的C++则更加适合，C++是C语言的加强版，以C语言为基础，并且完全兼容C语言的特性。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190623193001260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n2.C++对C语言的增强语法\n\t2.1.命名空间\n\t2.2.引用\n\t2.3.函数与运算符的重载\n\t2.4.面向对象的特性\n\t2.5.泛型编程\n\t2.6.异常处理\n\t2.7.标准模板库\n下面笔者就者7个特性进行详细说明：\n3.命名空间\n\t命名空间是C++提供的一种解决不同文件互相调用时符号名字冲突的方法，一个命名空间就是一个作用域，在不同的命名空间下允许相同的名字符号代表不同的实体。\n\t3.1命名空间的定义\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190623200228628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\t\t注意：命名空间的声明要在类和函数的外面定义，并且没有分号结束。\n\t\t3.2.命名空间成员的引用\n\t\t\t命名空间名::成员名\n\t如：\n\t1.cpp\n#include<iostream>\nusing namesapce std;\n/*\n命名空间的声明方式，我们需要用到命名空间中的什么方法就在{}内加入什么方法的声明，当然直接使用“using namespace A”来声明A命名空间也是可以的，但是这种命名方法会将A命名空间下的所有方法都作声明，包括我们可能没有使用的方法，当工程很大时，这种做法会导致代码臃肿。\n*/\nnamespace A {\n\tint add(int a,int b);\n}\nint add(int a,int b);\nint mian(){\n\tint a = 1,b = 1;\n/*\n在很多多人编程的时候，如果各程序员之间不一直进行密切的交流，极容易出现变量名或方法名类名等相同的情况，这样\t在；多文档联合编译时，编译器会无法区分同名符号而报错，而命名空间就很好的解决了这种问题，我们为各个文档都定义一个唯一的命名空间，这样即使是相同符号也可以通过命名空间唯一标识了，命名空间的出现极大的改善了多人编程的困处\n*/\n\tcout << add(a,b)<<\"  \"<<A::add(a,b)<< endl;\n\treturn 0;\n\t}\nint add(int a,int b){\n\treturn(a + b);\n}\n\t2.cpp\n#include<iostream>\nnamespace A {\n\tint add(int a,int b){\n\t\treturn(a + b)；\n\t}\n}\n3.3.命名空间的别名\n\t命名空间是可以另起别命的，别命是已定义的命名空间的可代替的名字，一个命名空间可以有很多个别名，所有的别命和命名空间原名可以互换使用\n\t别命的定义：namespace 别命 = 命名空间原名;\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/2019062320111766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\t3.4.命名空间的成员类型\n\t\t命名空间的成员类型可以是变量、常量、函数、结构体、联合体、枚举、类、嵌套的命名空间\n\t3.5.全局命名空间\n\t\t在全局作用域中定义的命名空间，大多数命名空间都属于全局命名空间。即自定义的命名空间是全局命名空间的扩张和细分。全局命名空间是隐式声明的，它存在于每一个程序中。\n\t\t由于全局命名空间是隐含的，它没有名字，所以使用“::成员名字”引用全局命名空间。\n\t3.6.匿名命名空间\n\t\t匿名命名空间与全局命名空间类似，也没有名字，但是匿名命名空间定义在局部作用域，不能用于多文件编译。\n\t\t匿名命名空间可以直接使用变量名引用成员。\n\t4.引用\n\t\t4.1.什么是引用？\n\t\t\t引用即别命，是某一个变量或对象的别命，绑定一个引用到一个变量或对象，即引用初始化，之后对引用的操作完全等价于对与其绑定的变量或对象的操作。\n\t4.2.引用的定义\n\t\t类型 &引用名 = 目标变量名;\n\t\t需要注意的是：\n\t\t\t- &不是求地址运算符，而是起标志作用\n\t\t\t- 引用的类型必须和其所绑定的变量类型相同\n\t\t\t- 声明应用的同时必须对其初始化，否则系统会报错\n\t\t\t- 引用相当于变量或对象的别命，因此不可将已绑定的引用再绑定其他变量或对象，也不可将一个引用绑定另一个引用。\n\t4.3.引用与指针的区别\n\t\t+占用存储空间上：\n\t\t\t\t\t-引用占用一个地址空间，本地计算机的一个地址空间是多少位，引用就占多少位的地址空间。\n\t\t\t\t\t-而指针除了占用一个地址空间外，还占用一个数据空间用于存储其指向的变量或对象的地址。\n\t\t+在操作上：\n\t\t\t\t\t-引用声明的同时必须对其初始化，且初始化后引用不可更改，引用不能为空。如：int &a ;是错误的用法，正确的用法应该是：int &a = b;\n\t\t\t\t\t-指针的声明可以在任何时候初始化，且指针在后续操作中可以变更其指向的变量或对象，指针可以为空。\n\t\t+存储内容上\n\t\t\t\t\t-“sizeof引用”得到的是引用所指向的变量或对象的大小\n\t\t\t\t\t-“sizeof指针”得到的是指针本身的大小\n\t\t+层级上\n\t\t\t\t\t-引用只能有一级，引用不可以再指向引用\n\t\t\t\t\t-指针理论上对级数没有限制\n\t\t+可以将引用理解为不可更改的指针，即：类型* const 指针变量\n\t4.4.对数组的引用\n\t\t类型 （&引用名）[数组下标] = 数组名;\n\t\t如：对int a[3]数组的引用为int (&quote)[3] = a;即将引用名替换成数组名。\n\t\t这里要注意，“()”是不能省略的，因为如果省略()，则会改变优先级，变成int &(quote[3]) = a;而出现语法错误。\n\t4.5.对指针的引用\n\t\t类型* &引用名 = 指针名;\n\t\t如：int* &quote = p;\n\t4.6.引用的作用\n\t\t引用既可以作为别命使用，还可以作为函数的参数、函数的返回值使用。\n\t\t需要注意的是，引用作为函数的返回值时不能返回局部变量的引用。\n\t至此，我可能提出这样的疑问：引用能做的事指针也能做，引用不能做的事指针还能做，那么C++么什么要引入“引用”这个概念呢？\n\t这是因为，指针的操作太过于强大，正因如此对指针的使用存在一定的风险，所谓“收益与风险并存”，在很多高版本的编译器中已经不能再操作指针了，如VS2015，而C++之所以还保留着指针，是因为指针的魅力无比诱人，尽管有风险却不愿意就此抛弃。\n\t引用的另一个用处我们举一个例子来说明\n\t如：\n\tint add_1(int b){\n\t\tb++;\n\t}\n\tint add_2(int &c){\n\t\tc++;\n\t}\n\tvoid mian(){\n\t\tint a = 1;\n\t\tint &a = a;\n\t\tcout<<add_1(a)<<endl;\n\t\tcout<<add_2(&a)<<endl;\n\t}\n\t我们的输出结果是：1 2，为什么呢?因为普通的参数传递，传递的是参数的拷贝，如add_1我们对b++，实际进行运算的是形参b，而实参a却没有发生运算，所以cout<<add_1(a)输出1，而如果传递引用的话，我们在函数add_2中对引用的操作实质上就是对a进行运算，因为&a就是a。\n\t4.7.常引用\n\t\tconst 类型 &引用名 = 目标变量名\n\t\t常引用可以引用常量也可以引用变量，常引用不允许通过引用对其绑定的变量或对象进行修改。\n\t\t![在这里插入图片描述](https://img-blog.csdnimg.cn/2019062512243728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)5.函数重载\n\t5.1.C++重载的实现\n\t从本质上来说，C++之所以能实现函数的重载是因为C++编译器对函数名的处理方法进行了优化，我们来对比一下C语言编译器和C++编译器对函数名的编译\n\t+C语言编译器\n\t\t对函数 int add(int a);编译后的名字为：add\n\t+C++编译器\n\t\t对函数int add(int a);编译后的名字为：addi，对int add(int a,float b);编译后的名字为：addij，C++编译器使用函数名和参数类型的共同组合成编译后函数的唯一标识，即可实现函数的重载。\n\t5.2.重载的定义\n\t\t重载就是在相同的声明域中函数名相同而参数列表不同，通过函数的参数表唯一标识的函数。\n\t5.3.函数的默认参数\n\t\tC++可以使用默认参数，即在函数声明时为参数提供一个默认值，当函数调用时没有指定这个参数的值时，编译器会自动使用默认值替换。\n\t\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190625221621705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\t\t需要注意的是，默认参数只能放在声明或定义处，能放在声明处就放在声明处。如果某个参数是默认参数，那么其后的参数也必须都是默认参数，如：int add(int a = 1,int b,int c);编译器将报错，而int add(int a,int b = 1,int c = 2);则不会报错，因为参数在传递的时候是从左到右的，首先使用无默认参数的参数列表，当遇到没有传入实参的形参时开始使用默认参数的参数列表。使用默认参数的情况仅限于用在没有没有重载冲突的函数上，如：重载add函数，int add(){...} int add(int a = 1,int b = 2){...},此时调用add();将调用不带参数的add()函数。\n\t\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190625222013457.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)5.4.内联函数\n\t5.4.1.为什么需要内联函数？\n\t\t在程序执行的过程中，当碰到函数调用时，系统要将程序当前状态保存到栈中，同时跳转到函数代码处执行函数体，此过程需要占用时间和空间，是的程序执行效率低下。当然我们声明一个内联函数只是建议编译器将此函数作为内联函数，但是编译器有自己的判断算法，在编译时编译器会自行判断我们声明的内联函数是否值得变为内联函数，以保证主程序体不会过于臃肿，所以我们声明的内联函数不一定会成为内联函数。\n\t5.4.2.内联函数的定义\n\t\tinline 返回值类型 函数名(参数列表){函数体;} \n\t5.4.3.内联函数是一种用空间换时间的措施，通常只有较短的函数才定义为内联函数。\n6.new和delete运算符\n\t6.1.new运算符的功能是在堆区分配内存，通过new运算符获得的内存空间都处于堆上。delete运算符的功能正好与new相反，delete运算符的功能是释放new运算符的在堆区创建的内存，new运算符与delete运算符最好是配套出现，即使用new运算符创建了内存就一定要用delete运算符在不需要的时候此内存的时候将其释放，为什么呢？因为堆区的内存是不会随着程序结束而释放的，堆区的内存只要在操作系统关闭时才会释放，所以如果不手动释放new运算符在堆区创建的内存，则会造成大量无用数据占据着堆区内存，当堆区内存被占满时这会出现系统无堆区内存可用而出现系统死机。\n\t6.2.new/delete运算符的使用\n\t\tnew <数据类型> (参数)\n\t\tdelete <对象指针>/delete <对象数组指针>\n\t\t![在这里插入图片描述](https://img-blog.csdnimg.cn/201907121654256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\t6.3.那么C++的new/delete与C语言的malloc/free有什么区别呢？\n\t\t-它们都是动态管理内存的入口\n\t\t-malloc/free是C/C++标准库函数，而new/delete是C++操作符\n\t\t-malloc/free只是动态分分配/释放内存空间，而new/delete除了分配内存空间还会调用构造/析构函数进行初始化/清理（清理成员）\n\t\t-malloc/free需要手动计算类型大小且返回值为void，而new/delete可以自行计算类型大小返回对应类型的指针\n\t\t-new/delete在底层是调用了malloc/free的。可以认为是C++对malloc/free的封装\n\t\t-malloc/free申请空间后需要判空，new/delete则不需要\n\t\t-new直接跟类型，malloc跟字节数。\n\t\tnew/delete和malloc/free的区别是C++企业招聘时特别喜欢考的一项\n7.程序的内存空间\n\t7.1.指针的内存操作\n\t\t-指针不仅可以可以指向变量还可以指向函数\n\t\t-有new运算符在堆区创建的内存空间由位于栈区的指针确定入口\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190712165857369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n说到这，我们有必要了解一下计算机程序的内存结构，供程序运行的内存空间分为：堆区、栈区、.data段、.bss段、.ro段、.txt段，我使用一张图来说明\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190712170749180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n8.面向对象编程的特点\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019071310135053.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n9.C++中的类\n\t9.1.类的定义\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019071310150942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\t9.2.访问权限\n\t\tC++为类的成员添加了三种访问权限\n\t\t-public--公有成员：权限最高，在public修饰下的成员是类的外部接口，可以被类的成员函数和对象直接访问。\n\t\t-protected--保护成员：权限居中，可以被类的成员函数和其派生类的成员函数直接访问，但不能被类的对象和派生类的对象直接访问。\n\t\t-private--私有成员：权限最低，只能通过类的成员函数访问。\n\t9.3.类的成员\n\t\t-成员变量：类的成员变量用以描述一个对象的属性信息，与一般的变量声明相同，但类的成员变量只能在类的声明体中定义，类的成员变量一般在类的构造函数中初始化，但这不是必须的。\n\t\t-成员函数：用来描述一个对象的行为动作，与一般的函数声明相同，但只能放在类的声明体中声明，成员函数可以在类内实现也可以在类外实现，但在类内实现则形成内联的成员函数，会使类变得冗杂，所以成员函数的实现最好在类外实现，类成员函数可以重载和带默认参数。\n\t9.5.类的成员函数与成员变量的声明与实现\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190713104139644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\t9.6.struct和class的区别\n\t\t-C++对struct关键字扩展了其功能，和class的功能几乎等价\n\t\t-struct的成员默认访问权限是public，而class是private\n\t9.7.this指针\n\t\t-this指针是一个特殊的指针，指向对象的自身的首地址\n\t\t-每一个对象的成员函数都有一个this指针，指向调用的对象，如果要引用整个对象则通过*this引用\n\t\t-this指针仅能在类的内部使用，即只能在类的声明体或成员函数中使用\n\t9.8.static关键字\n\t\t9.8.1.static修饰的成员变量--静态成员变量\n\t\t\t\t\t-static修饰的变量存储在静态变量区\n\t\t\t\t\t-在类中static关键字修饰的变量被此类的所有对象共享，即所有对象共享这一个变量\n\t\t\t\t\t-static修饰的变量必须在类外初始化，不可以在定义的时候直接初始化\n\t\t\t\t\t-static修饰的公有成员变量可以直接通过类名来访问，没有staic修饰的成员变量只能通过对象才能访问\n\t\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190713105202141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\t\t9.8.2.static修饰的成员函数--静态成员函数\n\t\t\t\t\t-static修饰的成员函数也可以直接通过类名访问\n\t\t\t\t\t-静态成员函数只能访问静态成员变量\n\t\t9.8.3.类的静态与非静态部分\n\t\t\t\t\t-静态部分只属于类，与类一起存放在内存的静态区，被所有对象共享\n\t\t\t\t\t-非静态部分属于对象，每个对象都有自己的非静态部分，互不影响\n\t\t\t\t\t-静态部分只能直接访问静态部分，非静态部分可以访问所有部分\n\t\t\t\t\t那么为什么静态部分只能直接访问静态部分，而非静态部分却可以访问所有部分呢？\n\t\t\t\t\t那是因为，非静态成员变量/函数是属于对象的，只能通过对象来访问，而静态部分是属于类的，使用静态部分时没有确定对象的存在，所以不能确定静态部分应该访问哪个对象的非静态部分，而静态部分是属于类的，所有对象共享，所以通过对象使用非静态部分时，可以访问静态部分。\n\t思导图：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190623192350471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190712170853343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70)\n\n","slug":"【C++】C++进阶","published":1,"updated":"2021-02-01T13:30:37.962Z","_id":"ckk9hocbi003idwr74vw2g9xb","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>﻿1.C++介绍：<br>    C语言作为结构化和模块化语言适合规模较小的程序，对于大规模的复杂程序，能够高度抽象和建模的C++则更加适合，C++是C语言的加强版，以C语言为基础，并且完全兼容C语言的特性。<br><img src=\"https://img-blog.csdnimg.cn/20190623193001260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>2.C++对C语言的增强语法<br>    2.1.命名空间<br>    2.2.引用<br>    2.3.函数与运算符的重载<br>    2.4.面向对象的特性<br>    2.5.泛型编程<br>    2.6.异常处理<br>    2.7.标准模板库<br>下面笔者就者7个特性进行详细说明：<br>3.命名空间<br>    命名空间是C++提供的一种解决不同文件互相调用时符号名字冲突的方法，一个命名空间就是一个作用域，在不同的命名空间下允许相同的名字符号代表不同的实体。<br>    3.1命名空间的定义<br><img src=\"https://img-blog.csdnimg.cn/20190623200228628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>        注意：命名空间的声明要在类和函数的外面定义，并且没有分号结束。<br>        3.2.命名空间成员的引用<br>            命名空间名::成员名<br>    如：<br>    1.cpp<br>#include<iostream><br>using namesapce std;<br>/*<br>命名空间的声明方式，我们需要用到命名空间中的什么方法就在{}内加入什么方法的声明，当然直接使用“using namespace A”来声明A命名空间也是可以的，但是这种命名方法会将A命名空间下的所有方法都作声明，包括我们可能没有使用的方法，当工程很大时，这种做法会导致代码臃肿。<br><em>/<br>namespace A {<br>    int add(int a,int b);<br>}<br>int add(int a,int b);<br>int mian(){<br>    int a = 1,b = 1;<br>/</em><br>在很多多人编程的时候，如果各程序员之间不一直进行密切的交流，极容易出现变量名或方法名类名等相同的情况，这样    在；多文档联合编译时，编译器会无法区分同名符号而报错，而命名空间就很好的解决了这种问题，我们为各个文档都定义一个唯一的命名空间，这样即使是相同符号也可以通过命名空间唯一标识了，命名空间的出现极大的改善了多人编程的困处<br><em>/<br>    cout &lt;&lt; add(a,b)&lt;&lt;”  “&lt;&lt;A::add(a,b)&lt;&lt; endl;<br>    return 0;<br>    }<br>int add(int a,int b){<br>    return(a + b);<br>}<br>    2.cpp<br>#include<iostream><br>namespace A {<br>    int add(int a,int b){<br>        return(a + b)；<br>    }<br>}<br>3.3.命名空间的别名<br>    命名空间是可以另起别命的，别命是已定义的命名空间的可代替的名字，一个命名空间可以有很多个别名，所有的别命和命名空间原名可以互换使用<br>    别命的定义：namespace 别命 = 命名空间原名;<br>    <img src=\"https://img-blog.csdnimg.cn/2019062320111766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>    3.4.命名空间的成员类型<br>        命名空间的成员类型可以是变量、常量、函数、结构体、联合体、枚举、类、嵌套的命名空间<br>    3.5.全局命名空间<br>        在全局作用域中定义的命名空间，大多数命名空间都属于全局命名空间。即自定义的命名空间是全局命名空间的扩张和细分。全局命名空间是隐式声明的，它存在于每一个程序中。<br>        由于全局命名空间是隐含的，它没有名字，所以使用“::成员名字”引用全局命名空间。<br>    3.6.匿名命名空间<br>        匿名命名空间与全局命名空间类似，也没有名字，但是匿名命名空间定义在局部作用域，不能用于多文件编译。<br>        匿名命名空间可以直接使用变量名引用成员。<br>    4.引用<br>        4.1.什么是引用？<br>            引用即别命，是某一个变量或对象的别命，绑定一个引用到一个变量或对象，即引用初始化，之后对引用的操作完全等价于对与其绑定的变量或对象的操作。<br>    4.2.引用的定义<br>        类型 &amp;引用名 = 目标变量名;<br>        需要注意的是：<br>            - &amp;不是求地址运算符，而是起标志作用<br>            - 引用的类型必须和其所绑定的变量类型相同<br>            - 声明应用的同时必须对其初始化，否则系统会报错<br>            - 引用相当于变量或对象的别命，因此不可将已绑定的引用再绑定其他变量或对象，也不可将一个引用绑定另一个引用。<br>    4.3.引用与指针的区别<br>        +占用存储空间上：<br>                    -引用占用一个地址空间，本地计算机的一个地址空间是多少位，引用就占多少位的地址空间。<br>                    -而指针除了占用一个地址空间外，还占用一个数据空间用于存储其指向的变量或对象的地址。<br>        +在操作上：<br>                    -引用声明的同时必须对其初始化，且初始化后引用不可更改，引用不能为空。如：int &amp;a ;是错误的用法，正确的用法应该是：int &amp;a = b;<br>                    -指针的声明可以在任何时候初始化，且指针在后续操作中可以变更其指向的变量或对象，指针可以为空。<br>        +存储内容上<br>                    -“sizeof引用”得到的是引用所指向的变量或对象的大小<br>                    -“sizeof指针”得到的是指针本身的大小<br>        +层级上<br>                    -引用只能有一级，引用不可以再指向引用<br>                    -指针理论上对级数没有限制<br>        +可以将引用理解为不可更改的指针，即：类型</iostream></em> const 指针变量<br>    4.4.对数组的引用<br>        类型 （&amp;引用名）[数组下标] = 数组名;<br>        如：对int a[3]数组的引用为int (&amp;quote)[3] = a;即将引用名替换成数组名。<br>        这里要注意，“()”是不能省略的，因为如果省略()，则会改变优先级，变成int &amp;(quote[3]) = a;而出现语法错误。<br>    4.5.对指针的引用<br>        类型* &amp;引用名 = 指针名;<br>        如：int* &amp;quote = p;<br>    4.6.引用的作用<br>        引用既可以作为别命使用，还可以作为函数的参数、函数的返回值使用。<br>        需要注意的是，引用作为函数的返回值时不能返回局部变量的引用。<br>    至此，我可能提出这样的疑问：引用能做的事指针也能做，引用不能做的事指针还能做，那么C++么什么要引入“引用”这个概念呢？<br>    这是因为，指针的操作太过于强大，正因如此对指针的使用存在一定的风险，所谓“收益与风险并存”，在很多高版本的编译器中已经不能再操作指针了，如VS2015，而C++之所以还保留着指针，是因为指针的魅力无比诱人，尽管有风险却不愿意就此抛弃。<br>    引用的另一个用处我们举一个例子来说明<br>    如：<br>    int add_1(int b){<br>        b++;<br>    }<br>    int add_2(int &amp;c){<br>        c++;<br>    }<br>    void mian(){<br>        int a = 1;<br>        int &amp;a = a;<br>        cout&lt;&lt;add_1(a)&lt;&lt;endl;<br>        cout&lt;&lt;add_2(&amp;a)&lt;&lt;endl;<br>    }<br>    我们的输出结果是：1 2，为什么呢?因为普通的参数传递，传递的是参数的拷贝，如add_1我们对b++，实际进行运算的是形参b，而实参a却没有发生运算，所以cout&lt;&lt;add_1(a)输出1，而如果传递引用的话，我们在函数add_2中对引用的操作实质上就是对a进行运算，因为&amp;a就是a。<br>    4.7.常引用<br>        const 类型 &amp;引用名 = 目标变量名<br>        常引用可以引用常量也可以引用变量，常引用不允许通过引用对其绑定的变量或对象进行修改。<br>        <img src=\"https://img-blog.csdnimg.cn/2019062512243728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">5.函数重载<br>    5.1.C++重载的实现<br>    从本质上来说，C++之所以能实现函数的重载是因为C++编译器对函数名的处理方法进行了优化，我们来对比一下C语言编译器和C++编译器对函数名的编译<br>    +C语言编译器<br>        对函数 int add(int a);编译后的名字为：add<br>    +C++编译器<br>        对函数int add(int a);编译后的名字为：addi，对int add(int a,float b);编译后的名字为：addij，C++编译器使用函数名和参数类型的共同组合成编译后函数的唯一标识，即可实现函数的重载。<br>    5.2.重载的定义<br>        重载就是在相同的声明域中函数名相同而参数列表不同，通过函数的参数表唯一标识的函数。<br>    5.3.函数的默认参数<br>        C++可以使用默认参数，即在函数声明时为参数提供一个默认值，当函数调用时没有指定这个参数的值时，编译器会自动使用默认值替换。<br>        <img src=\"https://img-blog.csdnimg.cn/20190625221621705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>        需要注意的是，默认参数只能放在声明或定义处，能放在声明处就放在声明处。如果某个参数是默认参数，那么其后的参数也必须都是默认参数，如：int add(int a = 1,int b,int c);编译器将报错，而int add(int a,int b = 1,int c = 2);则不会报错，因为参数在传递的时候是从左到右的，首先使用无默认参数的参数列表，当遇到没有传入实参的形参时开始使用默认参数的参数列表。使用默认参数的情况仅限于用在没有没有重载冲突的函数上，如：重载add函数，int add(){…} int add(int a = 1,int b = 2){…},此时调用add();将调用不带参数的add()函数。<br>        <img src=\"https://img-blog.csdnimg.cn/20190625222013457.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">5.4.内联函数<br>    5.4.1.为什么需要内联函数？<br>        在程序执行的过程中，当碰到函数调用时，系统要将程序当前状态保存到栈中，同时跳转到函数代码处执行函数体，此过程需要占用时间和空间，是的程序执行效率低下。当然我们声明一个内联函数只是建议编译器将此函数作为内联函数，但是编译器有自己的判断算法，在编译时编译器会自行判断我们声明的内联函数是否值得变为内联函数，以保证主程序体不会过于臃肿，所以我们声明的内联函数不一定会成为内联函数。<br>    5.4.2.内联函数的定义<br>        inline 返回值类型 函数名(参数列表){函数体;}<br>    5.4.3.内联函数是一种用空间换时间的措施，通常只有较短的函数才定义为内联函数。<br>6.new和delete运算符<br>    6.1.new运算符的功能是在堆区分配内存，通过new运算符获得的内存空间都处于堆上。delete运算符的功能正好与new相反，delete运算符的功能是释放new运算符的在堆区创建的内存，new运算符与delete运算符最好是配套出现，即使用new运算符创建了内存就一定要用delete运算符在不需要的时候此内存的时候将其释放，为什么呢？因为堆区的内存是不会随着程序结束而释放的，堆区的内存只要在操作系统关闭时才会释放，所以如果不手动释放new运算符在堆区创建的内存，则会造成大量无用数据占据着堆区内存，当堆区内存被占满时这会出现系统无堆区内存可用而出现系统死机。<br>    6.2.new/delete运算符的使用<br>        new &lt;数据类型&gt; (参数)<br>        delete &lt;对象指针&gt;/delete &lt;对象数组指针&gt;<br>        <img src=\"https://img-blog.csdnimg.cn/201907121654256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>    6.3.那么C++的new/delete与C语言的malloc/free有什么区别呢？<br>        -它们都是动态管理内存的入口<br>        -malloc/free是C/C++标准库函数，而new/delete是C++操作符<br>        -malloc/free只是动态分分配/释放内存空间，而new/delete除了分配内存空间还会调用构造/析构函数进行初始化/清理（清理成员）<br>        -malloc/free需要手动计算类型大小且返回值为void，而new/delete可以自行计算类型大小返回对应类型的指针<br>        -new/delete在底层是调用了malloc/free的。可以认为是C++对malloc/free的封装<br>        -malloc/free申请空间后需要判空，new/delete则不需要<br>        -new直接跟类型，malloc跟字节数。<br>        new/delete和malloc/free的区别是C++企业招聘时特别喜欢考的一项<br>7.程序的内存空间<br>    7.1.指针的内存操作<br>        -指针不仅可以可以指向变量还可以指向函数<br>        -有new运算符在堆区创建的内存空间由位于栈区的指针确定入口<br>    <img src=\"https://img-blog.csdnimg.cn/20190712165857369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>说到这，我们有必要了解一下计算机程序的内存结构，供程序运行的内存空间分为：堆区、栈区、.data段、.bss段、.ro段、.txt段，我使用一张图来说明<br><img src=\"https://img-blog.csdnimg.cn/20190712170749180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>8.面向对象编程的特点<br><img src=\"https://img-blog.csdnimg.cn/2019071310135053.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>9.C++中的类<br>    9.1.类的定义<br><img src=\"https://img-blog.csdnimg.cn/2019071310150942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>    9.2.访问权限<br>        C++为类的成员添加了三种访问权限<br>        -public–公有成员：权限最高，在public修饰下的成员是类的外部接口，可以被类的成员函数和对象直接访问。<br>        -protected–保护成员：权限居中，可以被类的成员函数和其派生类的成员函数直接访问，但不能被类的对象和派生类的对象直接访问。<br>        -private–私有成员：权限最低，只能通过类的成员函数访问。<br>    9.3.类的成员<br>        -成员变量：类的成员变量用以描述一个对象的属性信息，与一般的变量声明相同，但类的成员变量只能在类的声明体中定义，类的成员变量一般在类的构造函数中初始化，但这不是必须的。<br>        -成员函数：用来描述一个对象的行为动作，与一般的函数声明相同，但只能放在类的声明体中声明，成员函数可以在类内实现也可以在类外实现，但在类内实现则形成内联的成员函数，会使类变得冗杂，所以成员函数的实现最好在类外实现，类成员函数可以重载和带默认参数。<br>    9.5.类的成员函数与成员变量的声明与实现<br>    <img src=\"https://img-blog.csdnimg.cn/20190713104139644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>    9.6.struct和class的区别<br>        -C++对struct关键字扩展了其功能，和class的功能几乎等价<br>        -struct的成员默认访问权限是public，而class是private<br>    9.7.this指针<br>        -this指针是一个特殊的指针，指向对象的自身的首地址<br>        -每一个对象的成员函数都有一个this指针，指向调用的对象，如果要引用整个对象则通过*this引用<br>        -this指针仅能在类的内部使用，即只能在类的声明体或成员函数中使用<br>    9.8.static关键字<br>        9.8.1.static修饰的成员变量–静态成员变量<br>                    -static修饰的变量存储在静态变量区<br>                    -在类中static关键字修饰的变量被此类的所有对象共享，即所有对象共享这一个变量<br>                    -static修饰的变量必须在类外初始化，不可以在定义的时候直接初始化<br>                    -static修饰的公有成员变量可以直接通过类名来访问，没有staic修饰的成员变量只能通过对象才能访问<br>        <img src=\"https://img-blog.csdnimg.cn/20190713105202141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>        9.8.2.static修饰的成员函数–静态成员函数<br>                    -static修饰的成员函数也可以直接通过类名访问<br>                    -静态成员函数只能访问静态成员变量<br>        9.8.3.类的静态与非静态部分<br>                    -静态部分只属于类，与类一起存放在内存的静态区，被所有对象共享<br>                    -非静态部分属于对象，每个对象都有自己的非静态部分，互不影响<br>                    -静态部分只能直接访问静态部分，非静态部分可以访问所有部分<br>                    那么为什么静态部分只能直接访问静态部分，而非静态部分却可以访问所有部分呢？<br>                    那是因为，非静态成员变量/函数是属于对象的，只能通过对象来访问，而静态部分是属于类的，使用静态部分时没有确定对象的存在，所以不能确定静态部分应该访问哪个对象的非静态部分，而静态部分是属于类的，所有对象共享，所以通过对象使用非静态部分时，可以访问静态部分。<br>    思导图：<br><img src=\"https://img-blog.csdnimg.cn/20190623192350471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190712170853343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></iostream></p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>﻿1.C++介绍：<br>    C语言作为结构化和模块化语言适合规模较小的程序，对于大规模的复杂程序，能够高度抽象和建模的C++则更加适合，C++是C语言的加强版，以C语言为基础，并且完全兼容C语言的特性。<br><img src=\"https://img-blog.csdnimg.cn/20190623193001260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>2.C++对C语言的增强语法<br>    2.1.命名空间<br>    2.2.引用<br>    2.3.函数与运算符的重载<br>    2.4.面向对象的特性<br>    2.5.泛型编程<br>    2.6.异常处理<br>    2.7.标准模板库<br>下面笔者就者7个特性进行详细说明：<br>3.命名空间<br>    命名空间是C++提供的一种解决不同文件互相调用时符号名字冲突的方法，一个命名空间就是一个作用域，在不同的命名空间下允许相同的名字符号代表不同的实体。<br>    3.1命名空间的定义<br><img src=\"https://img-blog.csdnimg.cn/20190623200228628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>        注意：命名空间的声明要在类和函数的外面定义，并且没有分号结束。<br>        3.2.命名空间成员的引用<br>            命名空间名::成员名<br>    如：<br>    1.cpp<br>#include<iostream><br>using namesapce std;<br>/*<br>命名空间的声明方式，我们需要用到命名空间中的什么方法就在{}内加入什么方法的声明，当然直接使用“using namespace A”来声明A命名空间也是可以的，但是这种命名方法会将A命名空间下的所有方法都作声明，包括我们可能没有使用的方法，当工程很大时，这种做法会导致代码臃肿。<br><em>/<br>namespace A {<br>    int add(int a,int b);<br>}<br>int add(int a,int b);<br>int mian(){<br>    int a = 1,b = 1;<br>/</em><br>在很多多人编程的时候，如果各程序员之间不一直进行密切的交流，极容易出现变量名或方法名类名等相同的情况，这样    在；多文档联合编译时，编译器会无法区分同名符号而报错，而命名空间就很好的解决了这种问题，我们为各个文档都定义一个唯一的命名空间，这样即使是相同符号也可以通过命名空间唯一标识了，命名空间的出现极大的改善了多人编程的困处<br><em>/<br>    cout &lt;&lt; add(a,b)&lt;&lt;”  “&lt;&lt;A::add(a,b)&lt;&lt; endl;<br>    return 0;<br>    }<br>int add(int a,int b){<br>    return(a + b);<br>}<br>    2.cpp<br>#include<iostream><br>namespace A {<br>    int add(int a,int b){<br>        return(a + b)；<br>    }<br>}<br>3.3.命名空间的别名<br>    命名空间是可以另起别命的，别命是已定义的命名空间的可代替的名字，一个命名空间可以有很多个别名，所有的别命和命名空间原名可以互换使用<br>    别命的定义：namespace 别命 = 命名空间原名;<br>    <img src=\"https://img-blog.csdnimg.cn/2019062320111766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>    3.4.命名空间的成员类型<br>        命名空间的成员类型可以是变量、常量、函数、结构体、联合体、枚举、类、嵌套的命名空间<br>    3.5.全局命名空间<br>        在全局作用域中定义的命名空间，大多数命名空间都属于全局命名空间。即自定义的命名空间是全局命名空间的扩张和细分。全局命名空间是隐式声明的，它存在于每一个程序中。<br>        由于全局命名空间是隐含的，它没有名字，所以使用“::成员名字”引用全局命名空间。<br>    3.6.匿名命名空间<br>        匿名命名空间与全局命名空间类似，也没有名字，但是匿名命名空间定义在局部作用域，不能用于多文件编译。<br>        匿名命名空间可以直接使用变量名引用成员。<br>    4.引用<br>        4.1.什么是引用？<br>            引用即别命，是某一个变量或对象的别命，绑定一个引用到一个变量或对象，即引用初始化，之后对引用的操作完全等价于对与其绑定的变量或对象的操作。<br>    4.2.引用的定义<br>        类型 &amp;引用名 = 目标变量名;<br>        需要注意的是：<br>            - &amp;不是求地址运算符，而是起标志作用<br>            - 引用的类型必须和其所绑定的变量类型相同<br>            - 声明应用的同时必须对其初始化，否则系统会报错<br>            - 引用相当于变量或对象的别命，因此不可将已绑定的引用再绑定其他变量或对象，也不可将一个引用绑定另一个引用。<br>    4.3.引用与指针的区别<br>        +占用存储空间上：<br>                    -引用占用一个地址空间，本地计算机的一个地址空间是多少位，引用就占多少位的地址空间。<br>                    -而指针除了占用一个地址空间外，还占用一个数据空间用于存储其指向的变量或对象的地址。<br>        +在操作上：<br>                    -引用声明的同时必须对其初始化，且初始化后引用不可更改，引用不能为空。如：int &amp;a ;是错误的用法，正确的用法应该是：int &amp;a = b;<br>                    -指针的声明可以在任何时候初始化，且指针在后续操作中可以变更其指向的变量或对象，指针可以为空。<br>        +存储内容上<br>                    -“sizeof引用”得到的是引用所指向的变量或对象的大小<br>                    -“sizeof指针”得到的是指针本身的大小<br>        +层级上<br>                    -引用只能有一级，引用不可以再指向引用<br>                    -指针理论上对级数没有限制<br>        +可以将引用理解为不可更改的指针，即：类型</iostream></em> const 指针变量<br>    4.4.对数组的引用<br>        类型 （&amp;引用名）[数组下标] = 数组名;<br>        如：对int a[3]数组的引用为int (&amp;quote)[3] = a;即将引用名替换成数组名。<br>        这里要注意，“()”是不能省略的，因为如果省略()，则会改变优先级，变成int &amp;(quote[3]) = a;而出现语法错误。<br>    4.5.对指针的引用<br>        类型* &amp;引用名 = 指针名;<br>        如：int* &amp;quote = p;<br>    4.6.引用的作用<br>        引用既可以作为别命使用，还可以作为函数的参数、函数的返回值使用。<br>        需要注意的是，引用作为函数的返回值时不能返回局部变量的引用。<br>    至此，我可能提出这样的疑问：引用能做的事指针也能做，引用不能做的事指针还能做，那么C++么什么要引入“引用”这个概念呢？<br>    这是因为，指针的操作太过于强大，正因如此对指针的使用存在一定的风险，所谓“收益与风险并存”，在很多高版本的编译器中已经不能再操作指针了，如VS2015，而C++之所以还保留着指针，是因为指针的魅力无比诱人，尽管有风险却不愿意就此抛弃。<br>    引用的另一个用处我们举一个例子来说明<br>    如：<br>    int add_1(int b){<br>        b++;<br>    }<br>    int add_2(int &amp;c){<br>        c++;<br>    }<br>    void mian(){<br>        int a = 1;<br>        int &amp;a = a;<br>        cout&lt;&lt;add_1(a)&lt;&lt;endl;<br>        cout&lt;&lt;add_2(&amp;a)&lt;&lt;endl;<br>    }<br>    我们的输出结果是：1 2，为什么呢?因为普通的参数传递，传递的是参数的拷贝，如add_1我们对b++，实际进行运算的是形参b，而实参a却没有发生运算，所以cout&lt;&lt;add_1(a)输出1，而如果传递引用的话，我们在函数add_2中对引用的操作实质上就是对a进行运算，因为&amp;a就是a。<br>    4.7.常引用<br>        const 类型 &amp;引用名 = 目标变量名<br>        常引用可以引用常量也可以引用变量，常引用不允许通过引用对其绑定的变量或对象进行修改。<br>        <img src=\"https://img-blog.csdnimg.cn/2019062512243728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">5.函数重载<br>    5.1.C++重载的实现<br>    从本质上来说，C++之所以能实现函数的重载是因为C++编译器对函数名的处理方法进行了优化，我们来对比一下C语言编译器和C++编译器对函数名的编译<br>    +C语言编译器<br>        对函数 int add(int a);编译后的名字为：add<br>    +C++编译器<br>        对函数int add(int a);编译后的名字为：addi，对int add(int a,float b);编译后的名字为：addij，C++编译器使用函数名和参数类型的共同组合成编译后函数的唯一标识，即可实现函数的重载。<br>    5.2.重载的定义<br>        重载就是在相同的声明域中函数名相同而参数列表不同，通过函数的参数表唯一标识的函数。<br>    5.3.函数的默认参数<br>        C++可以使用默认参数，即在函数声明时为参数提供一个默认值，当函数调用时没有指定这个参数的值时，编译器会自动使用默认值替换。<br>        <img src=\"https://img-blog.csdnimg.cn/20190625221621705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>        需要注意的是，默认参数只能放在声明或定义处，能放在声明处就放在声明处。如果某个参数是默认参数，那么其后的参数也必须都是默认参数，如：int add(int a = 1,int b,int c);编译器将报错，而int add(int a,int b = 1,int c = 2);则不会报错，因为参数在传递的时候是从左到右的，首先使用无默认参数的参数列表，当遇到没有传入实参的形参时开始使用默认参数的参数列表。使用默认参数的情况仅限于用在没有没有重载冲突的函数上，如：重载add函数，int add(){…} int add(int a = 1,int b = 2){…},此时调用add();将调用不带参数的add()函数。<br>        <img src=\"https://img-blog.csdnimg.cn/20190625222013457.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">5.4.内联函数<br>    5.4.1.为什么需要内联函数？<br>        在程序执行的过程中，当碰到函数调用时，系统要将程序当前状态保存到栈中，同时跳转到函数代码处执行函数体，此过程需要占用时间和空间，是的程序执行效率低下。当然我们声明一个内联函数只是建议编译器将此函数作为内联函数，但是编译器有自己的判断算法，在编译时编译器会自行判断我们声明的内联函数是否值得变为内联函数，以保证主程序体不会过于臃肿，所以我们声明的内联函数不一定会成为内联函数。<br>    5.4.2.内联函数的定义<br>        inline 返回值类型 函数名(参数列表){函数体;}<br>    5.4.3.内联函数是一种用空间换时间的措施，通常只有较短的函数才定义为内联函数。<br>6.new和delete运算符<br>    6.1.new运算符的功能是在堆区分配内存，通过new运算符获得的内存空间都处于堆上。delete运算符的功能正好与new相反，delete运算符的功能是释放new运算符的在堆区创建的内存，new运算符与delete运算符最好是配套出现，即使用new运算符创建了内存就一定要用delete运算符在不需要的时候此内存的时候将其释放，为什么呢？因为堆区的内存是不会随着程序结束而释放的，堆区的内存只要在操作系统关闭时才会释放，所以如果不手动释放new运算符在堆区创建的内存，则会造成大量无用数据占据着堆区内存，当堆区内存被占满时这会出现系统无堆区内存可用而出现系统死机。<br>    6.2.new/delete运算符的使用<br>        new &lt;数据类型&gt; (参数)<br>        delete &lt;对象指针&gt;/delete &lt;对象数组指针&gt;<br>        <img src=\"https://img-blog.csdnimg.cn/201907121654256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>    6.3.那么C++的new/delete与C语言的malloc/free有什么区别呢？<br>        -它们都是动态管理内存的入口<br>        -malloc/free是C/C++标准库函数，而new/delete是C++操作符<br>        -malloc/free只是动态分分配/释放内存空间，而new/delete除了分配内存空间还会调用构造/析构函数进行初始化/清理（清理成员）<br>        -malloc/free需要手动计算类型大小且返回值为void，而new/delete可以自行计算类型大小返回对应类型的指针<br>        -new/delete在底层是调用了malloc/free的。可以认为是C++对malloc/free的封装<br>        -malloc/free申请空间后需要判空，new/delete则不需要<br>        -new直接跟类型，malloc跟字节数。<br>        new/delete和malloc/free的区别是C++企业招聘时特别喜欢考的一项<br>7.程序的内存空间<br>    7.1.指针的内存操作<br>        -指针不仅可以可以指向变量还可以指向函数<br>        -有new运算符在堆区创建的内存空间由位于栈区的指针确定入口<br>    <img src=\"https://img-blog.csdnimg.cn/20190712165857369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>说到这，我们有必要了解一下计算机程序的内存结构，供程序运行的内存空间分为：堆区、栈区、.data段、.bss段、.ro段、.txt段，我使用一张图来说明<br><img src=\"https://img-blog.csdnimg.cn/20190712170749180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>8.面向对象编程的特点<br><img src=\"https://img-blog.csdnimg.cn/2019071310135053.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>9.C++中的类<br>    9.1.类的定义<br><img src=\"https://img-blog.csdnimg.cn/2019071310150942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>    9.2.访问权限<br>        C++为类的成员添加了三种访问权限<br>        -public–公有成员：权限最高，在public修饰下的成员是类的外部接口，可以被类的成员函数和对象直接访问。<br>        -protected–保护成员：权限居中，可以被类的成员函数和其派生类的成员函数直接访问，但不能被类的对象和派生类的对象直接访问。<br>        -private–私有成员：权限最低，只能通过类的成员函数访问。<br>    9.3.类的成员<br>        -成员变量：类的成员变量用以描述一个对象的属性信息，与一般的变量声明相同，但类的成员变量只能在类的声明体中定义，类的成员变量一般在类的构造函数中初始化，但这不是必须的。<br>        -成员函数：用来描述一个对象的行为动作，与一般的函数声明相同，但只能放在类的声明体中声明，成员函数可以在类内实现也可以在类外实现，但在类内实现则形成内联的成员函数，会使类变得冗杂，所以成员函数的实现最好在类外实现，类成员函数可以重载和带默认参数。<br>    9.5.类的成员函数与成员变量的声明与实现<br>    <img src=\"https://img-blog.csdnimg.cn/20190713104139644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>    9.6.struct和class的区别<br>        -C++对struct关键字扩展了其功能，和class的功能几乎等价<br>        -struct的成员默认访问权限是public，而class是private<br>    9.7.this指针<br>        -this指针是一个特殊的指针，指向对象的自身的首地址<br>        -每一个对象的成员函数都有一个this指针，指向调用的对象，如果要引用整个对象则通过*this引用<br>        -this指针仅能在类的内部使用，即只能在类的声明体或成员函数中使用<br>    9.8.static关键字<br>        9.8.1.static修饰的成员变量–静态成员变量<br>                    -static修饰的变量存储在静态变量区<br>                    -在类中static关键字修饰的变量被此类的所有对象共享，即所有对象共享这一个变量<br>                    -static修饰的变量必须在类外初始化，不可以在定义的时候直接初始化<br>                    -static修饰的公有成员变量可以直接通过类名来访问，没有staic修饰的成员变量只能通过对象才能访问<br>        <img src=\"https://img-blog.csdnimg.cn/20190713105202141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>        9.8.2.static修饰的成员函数–静态成员函数<br>                    -static修饰的成员函数也可以直接通过类名访问<br>                    -静态成员函数只能访问静态成员变量<br>        9.8.3.类的静态与非静态部分<br>                    -静态部分只属于类，与类一起存放在内存的静态区，被所有对象共享<br>                    -非静态部分属于对象，每个对象都有自己的非静态部分，互不影响<br>                    -静态部分只能直接访问静态部分，非静态部分可以访问所有部分<br>                    那么为什么静态部分只能直接访问静态部分，而非静态部分却可以访问所有部分呢？<br>                    那是因为，非静态成员变量/函数是属于对象的，只能通过对象来访问，而静态部分是属于类的，使用静态部分时没有确定对象的存在，所以不能确定静态部分应该访问哪个对象的非静态部分，而静态部分是属于类的，所有对象共享，所以通过对象使用非静态部分时，可以访问静态部分。<br>    思导图：<br><img src=\"https://img-blog.csdnimg.cn/20190623192350471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20190712170853343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTA4Mjkx,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></iostream></p>\n"},{"title":"【UE4】UE4蓝图基础","date":"2019-10-28T13:17:08.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 一、蓝图可视化脚本与蓝图系统\n\n## 1.蓝图脚本\n\n蓝图可视化脚本简称“蓝图”或“蓝图脚本”，是一种需要编译的面向对象的可视化编程语言，蓝图完全集成在UE4中，蓝图通过节点与连线工作。\n\n### 蓝图脚本的节点\n\n- 触发事件，在蓝图脚本中以红色的节点出现\n- 函数，在看图脚本中以蓝色的节点出现\n- 变量，在蓝图脚本中中以黄色节点出现\n\n## 2.蓝图系统\n\n蓝图系统又称“蓝图”或“蓝图类”，蓝图类可以看成是一个包含游戏内容的容器，其中可以包含组件、脚本或可以仅仅包含数据。\n\n蓝图类有点类似Unity3d中的预设(prefb)，蓝图类可以类似预设一般保存对象状态，可以随时拖入场景中使用，只是在其他功能上不如预设，如预设在U3D中的打包中可以发挥出优秀的效果，但是蓝图类只能作为容器使用。\n\n<font color = red> 蓝图类包含蓝图脚本，每一个蓝图类都包含一个默认的蓝图脚本。</font>\n\n### 蓝图类的分类\n\n- **关卡蓝图**：关卡蓝图在每个Level中只能存在一个，负责整个关卡的运行逻辑，关卡的初始化，帧更新都在关卡蓝图里进行；\n- **普通蓝图**：普通蓝图就是UE4的预设，在普通蓝图中我们可以对其中的对象进行一些的配置，如设置网格，贴图，粒子特效，添加相机，添加物理材质和挂载蓝图脚本等等；\n- **游戏模式蓝图**：UE4中游戏模式也是以蓝图的形式存在的，游戏模式蓝图控制一系列游戏的规则；\n- **材质蓝图**：在UE4中贴图材质也是蓝图的形式存在的，在材质蓝图中我们可以如同建模软件一般对材质进行一系列更高级的材质配置，如下图的一个简单示例：\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-24_09-41-27.png)\n\n## 4.创建蓝图\n\n创建蓝图的方法很多，这里介绍比较常用的方法\n\n- 可以直接在Content Browser(内容浏览器)中右键创建一个空的蓝图类，空蓝图除了包含一个根组件外不再包含其他东西，当我们在空蓝图中创建了对象后可以通过拖拽的方式将对象拖动到根组件位置处，用游戏对象替换根组件作为根组件，这样创建空蓝图时的白色小球就会消失；\n- 在World Outliner(世界大纲)中选中游戏对象，可以通过工具栏中的Blueprints工具中的下面两个选项创建一个包含所选内容的蓝图类；\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-24_09-51-55.png)\n\n- 通过Blueprints工具的New Empty Blueprint Class也可以直接创建空蓝图类；\n- 然而关卡蓝图似乎只能通过Blueprints工具的Open Blueprint Class打开。\n\n# 二、变量与对象引用\n\n## 1.在蓝图中创建变量\n\n在蓝图中创建变量的方式有两种，其一：直接点击My BluePrint/Variables/+Variable，默认创建bool行的变量，可以点击变量前的色块更换变量类型。\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-25_17-18-23.png)\n\n其二：在蓝图脚本区域右键->输入Get New Var，可以直接在蓝图脚本中以节点的形式创建变量，在右侧细节面板中设置变量的值。\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-25_17-23-27.png)\n\n所有创建好的变量都会在My Blueprint面板Variables栏中显示。\n\n<font color=red> 在创建好的变量的Details/Variable/Variable Type选项中可以设置变量为普通变量、数组、Set容器和Map容器。</font>\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-27_11-01-39.png)\n\n## 2.在蓝图中使用变量\n\n可以直接在蓝图脚本区域右键->输入Get/Set [变量名]即可获取变量的获取/设置组件，也可以直接从左侧的My Blueprint面板Variables栏中拖拽变量到蓝图脚本区域选择Get/Set。\n\n## 3.生成时公开与私有变量\n\n蓝图中的公有与私有与程序中的公有私有有一些不同，蓝图中只分为生成时公开和私有两种访问权限。\n\n### 生成时公开(Expose on Spawn)\n\n勾选生成时公开后，在蓝图类使用Spawn Actor from Class组件生成蓝图类实例时，勾选生成时公开的变量将可以接受外部值输入。\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-28_16-45-41.png)\n\n如上图可以看到勾选生成时公开的变量会以输入接口的形式出现在Spawn Actor from Class节点里。这里需要注意的是，勾选Expose on Spawn，还需要勾选Instance Editable，否则会报警告。\n\n### 私有变量(Private)\n\n设置成私有变量的变量只能在蓝图类里访问，蓝图类的外部实例也无法访问这个变量，如上图，变量L没有设置成私有，所以可以通过Spawn Actor from Class组件生成的实例访问这个变量，而设置成私有的K变量搜索不到Set K节点。\n\n\n\n## 3.在蓝图中使用组件引用\n\n很多时候我们需要调节自身Actor上的组件的某些参数，那么我们就需要获得这个组件的引用以便获取组件上的参数进行调节，那么我们如何获得组件的引用呢？\n\n其实方法也很简单，在My Blueprint/Variabales下有一个子栏“Components”其中存放着当前Actor上的所有的组件的引用，使用方法就是直接将需要的组件引用拖拽到蓝图脚本区域即可。获得了组件引用我们就可以通过引用使用不同的方法获取组件上的不同的参数了。\n\n## 4.动态获取世界大纲中的Actor\n\n在蓝图脚本中有四个方法获取外部Actor：\n\n- Get All Actor of Class：通过类型来获取外部Actor\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-31-16.png)\n\n- Get All Actor with Tag：通过标签来获取外部Actor\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-31-23.png)\n\n- Get All Actor with Interface：通过外部接口在获取外部Actor\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-31-36.png)\n\n- Get Actors：通过层来获取Actor\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-31-47.png)\n\n\n\n# 三、蓝图的数据类型\n\n## 1.5个基本数据类型\n\nUE4蓝图中基本数据类型只有5个，需要注意的是蓝图中没有char、double、short、long等数据类型，在C++与蓝图的配合使用时需要注意这些类型的变量。\n\n### Boolean\n\n### Byte\n\n8位，一字节，0-255。\n\n### Integer\n\n32位整型，四字节。\n\n### Integer64\n\n64位整型，八字节，能存储更大的数。\n\n### Float\n\n32位单精度浮点型，其中1符号位、8指数位、23数值位，UE4中默认保留小数点后6位。UE4中只有Float类型没有Double类型。\n\n## 2.3种字符串\n\n### String\n\n蓝图中String类型就是蓝图C++中的FString类型，普通字符串，可以对其中的字符进行增删查改。\n\n### Name\n\nName是一种固定字符串类型，变量初始化以后不能在对其中的内容进行修改，且Name类型的字符串不区分大小写，多用于作为全局变量来唯一标识对象。Name类型的字符串在运行过程中存储于内存的字符串表中，使用效率高。\n\n### Text\n\nText是String的长度加强版，通常用于存储一段文字并可以进行国际化处理。\n\n## 3.Vector(维度向量)\n\n### Vector\n\n默认创建的Vector是Vector 3D，即三维量，包含x、y、z三个值，可以表示任何任何三维量，如：三维坐标和RGB等。\n\n### Vector 2D 和Vector 4\n\nVector 2D就是二维量，Vector 4就是四维量，常用于表示四元素。\n\n### Two Vectors\n\nTwo Vectors就是一个关于Vector的pair(对组)，pair在C++的STL种较为常用，是一个只包含两个元素的容器。\n\n## 4.Rotator(三维旋转量)\n\n包含：\n\nx：roll，翻滚角，以x为轴，进行yz平面的旋转；\n\ny：pitch，俯仰角，以y为轴，进行xz平面的旋转；\n\nz：yaw，航向角，以z为轴，进行xy平面的旋转。\n\n## 5.Transform\n\nTransfrom类型是一个3*3的矩阵，包含Location、Rotation和Scale三个三维向量。\n\n# 四、条件语句\n\n## 1.Branch(if条件判断)\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-39-15.png)\n\n传入一个bool值，进行分流，通常和比较组件配合使用，如：“==”、“>”等。\n\n## 2.Switch\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-25_19-14-34.png)\n\n- Selection：case判断的变量；\n- Default：默认执行分支；\n- Add pin：添加执行分支。\n\n# 五、循环语句\n\n## 1.For Loop(for循环)\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-39-35.png)\n\n- First Index/Last Index：提供循环的次数；\n- Loop Body：循环体执行分支；\n- Index：返回当前循环索引；\n- Conpleted：循环完毕后执行分支。\n\n## 2.For Loop whit Break(可跳出的for循环)\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-39-52.png)\n\n使用方法和For Loop类似。\n\n## 3.For Each Loop(数组遍历)\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-40-45.png)\n\n专门有用遍历数组的循环。\n\n- Array：需要遍历的数组；\n- Loop Body：循环体分支；\n- Array Element：遍历的数组元素；\n- Array Index：当前索引；\n- Completed：遍历结束执行分支。\n\n## 4.For Each Loop with Break(可跳出的数组遍历)\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-40-54.png)\n\n用法和Foreach Loop一样，只是多了一个跳出执行分支。\n\n## 5.Reverse for Each Loop(反向数组遍历)\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-40-59.png)\n\n## 6.While Loop(while循环)\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-27_11-04-21.png)\n\n# 六、数组\n\n## 1.创建数组\n\n创建数组要比创建变量多一个步骤，首先我们需要创建一个变量，然后再将这个变量的Details/Varialble Type选项的右侧色块选择九宫格，即可将对应变量转换成对应类型的数组。\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-02-54.png)\n\n## 2.为数组赋值\n\n### Add(Array)\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-21-48.png)\n\n传入一个数组和一个元素即可通过Add(Array)组件为组数赋值\n\n如：\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-24-33.png)\n\n循环完毕后数组Array内便存储有0-10的是个int型元素。\n\n## 3.获取元素\n\n### Get(a copy)\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-07-50.png)\n\n获取指定索引的元素的拷贝。\n\n### Get(a ref)\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-07-44.png)\n\n获取指定索引的元素的引用。\n\n## 4.插入元素\n\n### Add(Aray)\n\n直接在数组的末尾插入元素的方法也是使用Add(Array)组件，Add(Array)组件的的插入过程就是直接在数组的末尾插入元素。\n\n### Insert\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-37-55.png)\n\n指定位置插入使用Insert组件，输入参数从上至下依次为目标数组、要插入的元素、目标插入的索引位置。\n\n当要使用Insert组件在数组末尾插入，而又不知道数组大小时，可以使用Last Index组件直接获取输入数组的尾索引，当然直接使用只会在最后一个索引位置插入，而使最后一位元素向后移动一位，而达不到在数组尾部插入的效果，所以需要加一食用。\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-46-46.png)\n\n### Set Array Elem\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-25-34.png)\n\n设置输入数组指定索引的元素的值，Size to Fit选项可以设置如果指定索引不存在时数组自动扩充size大小。\n\n## 5.查找元素\n\n### Contains Item\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-50-31.png)\n\nContains Item组件可以查找指定数组中是否包含某一元素，但是Contains Item只返回bool的判断结果，不会返回目标的索引值。\n\n### Find Item\n\n![](B:/Git/Temp/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-59-54.png)\n\nFind Item则是从输入数组中查找指定元素并返回第一次查找到该元素的索引值。\n\n## 6.删除元素\n\n### Remove Index\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-12-59.png)\n\n通过索引删除元素\n\n### Remove Item\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-21-30.png)\n\n从输入数组中移除指定元素，Remove Item会删除数组中所有指定的元素，如果删除成功则返回true，失败则返回false。\n\n## 7.筛选元素\n\n### Filter Array\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-53-49.png)\n\n过滤数组可以按类型来筛选数组元素，用于父类型数组存储子类型元素时进行类型筛选，如：Actor数组筛选MyClass类型元素，Filter Array返回一个筛选后的新数组。\n\n## 8.清空数组\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-42-24.png)\n\n使用Clear组件可以将数组内的元素全部清空。\n\n## 9.获取数组长度\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-29-34.png)\n\n## 10.设置数组长度\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-30-00.png)\n\n# 七、结构体\n\n## 1.结构体创建\n\n蓝图中结构体的创建是没办法在蓝图脚本视图中创建的，UE4蓝图中结构体是与蓝图脚本同级的蓝图类，创建蓝图结构体的方法：在Content Browser中右键->Create Advanced Assect/Blueprint栏->Structure，即可创建一个结构体，创建出来的结构体默认拥有一个bool值得成员变量。\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_17-38-54.png)\n\n## 2.定义成员变量\n\n蓝图中得结构体只能创建成员变量，不能创建成员函数，成员变量可以直接设置默认值。\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_19-59-29.png)\n\n## 3.结构的使用\n\n将结构体创建好以后便可以直接在蓝图脚本中搜索到并使用了。\n\n# 八、枚举\n\n## 1.枚举的创建\n\n枚举的创建和使用和结构体区别不大，创建方式一如结构体一般,Content Browser中右键->Create Advanced Assect/Blueprint栏->Enumeration，创建好后UE4也会在一个新的视图中对枚举进行编辑，枚举的编辑操作也相当简单，只有向枚举中添加与删除元素的操作，这些元素都可以添加注解提示，枚举也可以添加整个枚举的注解提示。\n\n## 2.枚举的使用\n\n枚举的使用就如同变量的使用一般，没有什么可说的。\n\n# 九、接口\n\n## 1.接口的定义\n\n接口的定义和和蓝图函数库，蓝图宏库一样，但是接口的不像函数库和宏库一般可以再一个蓝图类中定义多个函数和宏，接口就是一个蓝图类，并且接口的编辑界面及其简约，可编辑视图只有一个My Blueprint和一个Detials,在My Blueprint/Functions栏可以新建接口函数，在对应的接口函数的Details/Graph可以设置一些接口函数的描述和Const属性，在Details/Inputs和Outputs栏可以设置接口函数的输入与输出参数。\n\n## 2.接口的继承\n\n接口是一个抽象蓝图，接口的实现必须通过继承接口的蓝图来实现，在蓝图中接口继承通过Toolbar/Class Settings/Interfaces栏即可添加接口到当前蓝图类是指继承此接口。\n\n## 3.接口的实现\n\n### 无返回值的接口实现\n\n在一个蓝图继承了一个无返回值得接口后，这个接口将以事件的形式出现在这个蓝图类的All Actions for this Blueprint里\n\n如：\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-27_10-32-38.png)\n\n蓝图以这个事件作为接口函数的入口，以此节点开始便可以开始实现各个蓝图类各自继承的接口函数的逻辑了。\n\n### 有返回值得接口实现\n\n有返回值的接口不会以事件的形式出现在Add Event里，而是会直接出现在My Blueprint/Interface栏里，我们双击即可打开接口函数的编辑视图，在视图中实现接口即可。\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-28_17-00-10.png)\n\n## 4.接口函数的调用\n\n蓝图通过`[接口名](Mesasge)`组件来调用接口中的函数，如下图中的Interface1(Message)和Interface2(Message)。\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-27_10-35-51.png)\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-27_10-38-13.png)\n\n接口的使用需要指定使用的接口是哪个蓝图类中实现的接口和接口需要传入的参数。在蓝图类的My Blueprint/Variables栏是可以搜索到我们自己创建的蓝图类的，通过过去蓝图类的引用便可以指定接口函数的实现者了。当然我们也可以使用Get All Actors with Interface组件来获取实现了指定接口的所有蓝图类，然后再对这些蓝图类中实现的函数进行调用。\n\n# 十、蓝图函数库\n\n<font color=red> 蓝图函数库是一个可以被所有蓝图类调用的函数集合，蓝图函数库里的方法全部都被定义为静态方法</font>，用于定义一些不与特定游戏对象绑定的功能性函数的实现。\n\n## 1.创建蓝图函数库\n\n创建蓝图函数库的方式和创建结构体类似，在Content Browser中右键->Create Advanced Assect/Blueprint栏->Bluprint Function LiberLibrary。\n\n## 2.实现蓝图函数库里的函数\n\n和结构体一样，创建好的蓝图函数库UE4会创建一个新的界面用于编辑库里函数；\n\n- 在My Blueprint/Functions栏可以申明函数\n- 在My Blueprint/Local Variables栏可以生命局部变量，在其Details中可以设置局部变量默认值；\n- 在对应函数的Details/Input和Output栏可以分别设置函数的输入输出参数\n- 在脚本编辑区可以实现函数逻辑。\n\n## 3.使用蓝图函数库里的函数\n\n要使用蓝图函数库里的函数，可直接在脚本编辑区右键输入函数名即可在Class栏中看到蓝图函数库里的函数了。\n\n# 十一、蓝图宏库\n\n宏在UE4中几乎无处不在，蓝图宏库是开发者使用蓝图自定义的一系列的宏的容器，蓝图宏库和蓝图函数库一样可以定义多个宏；\n\n- 蓝图宏库与蓝图函数库不同的是，蓝图宏库中的宏是在预编译过程中完成处理的，即蓝图宏库不需要编译；\n- 自定义的宏，可以有任意数量的输入输出引脚，即一个宏可以没有输出引脚，这样的宏可以只进行数据处理，一个宏也可以有多个输入输出引脚，这样的宏可以根据不同的逻辑选择不同的执行流，而蓝图函数库中的函数必须有且只有一个输入和一个输出引脚；\n- 与函数不同，宏中不可以再定义成员变量，即宏只负责处理逻辑，不提供暂存能力。\n\n## 1.创建蓝图宏库\n\n宏库的创建与函数库的创建是一样的，在Content Browser中右键->Create Advanced Assect/Blueprint栏->Bluprint Macro LiberLibrary。\n\n## 2.蓝图宏声明\n\n- 在My Blueprint/Macro中可以声明一个宏；\n- 在指定宏的Details/Inputs和Outputs中可以定义输入与输出引脚和参数。\n\n## 3.蓝图宏的使用\n\n和蓝图函数的使用方法一致。\n\n## 4.自定义流程控制\n\n除了蓝图提供给我们的条件语句和循环语句等流程控制语句外，我还可以使用宏编写自己的流程控制，因为宏可以有多个输入和输出引脚，使用方法就是使用宏的形式定义自己的流程控制逻辑，通过不同的输入给予不同输出，即可达到自定义流程控制的目的。\n\n# 十二、事件\n\n除了UE4蓝图中给我们提供大量的预定义事件，我也可以自定义事件。\n\n## 1.事件的定义\n\n事件的定义也很简单，在All Actions for this Buleprint中选择Add Custom Event，便可以创建一个自定义事件的入口，之后通过这个入口实现事件的内部逻辑，一个事件便定义完成。\n\n## 2.事件的调用\n\n事件调用必须通过实现这个事件的蓝图类才可以对其中的事件进行调用。如：\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-27_11-28-43.png)\n\nEvent Blueprint为实现自定义事件的蓝图类；\n\nPrint Str为自定义事件。\n\n## 3.事件调度器\n\n事件调度器的创建与使用请阅读目录：十七、蓝图类的通信/3.使用事件调度器进行通信\n\n# 十三、蓝图模块\n\n蓝图中可以将一个复杂了逻辑处理合并成一个节点模块，从而简化整体的执行流复杂度，使蓝图的执行流变得简单明了。我们可以将需要合并的执行流多选选中然后右键，即可在Organization栏中通过Collapse Nodes选项来合并执行流。\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-27_11-31-04.png)\n\n除了将执行流合并成节点外，蓝图还提供将多个执行流合并成一个函数或一个宏的功能。合并好的模块也可以在Organizition/Expand Node进行模块分离。\n\n# 十四、角色控制\n\n## 1.为角色添加跟随相机\n\n相对U3D来说，UE4的相机跟随要简单得多，UE4中直接将相机设置成了蓝图类的组件，当蓝图类时Player时，即可实现相机对Player的跟随了。\n\n相机跟随需要通过一个物理组件`Spring Arm`来链接相机和Player，将相机附着在Spring Arm下，即可在Spring Arm的作用下实现相机跟随。\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-24_10-45-29.png)\n\n## 2.为角色添加控制器\n\n在UE4的游戏制作过程中，我们不难发现当我们运行游戏时，在世界大纲中多出了很多东西，如下图：\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-24_10-53-34.png)\n\n其实，UE4为我们提供很多已经预制好的必须品，如上图的PlayerController(角色控制器)、PlayerCameraMenager(角色相机管理器)等。也就是说不可以直接使用UE4预制给我们的角色控制器来控制我们的Player，而不需要自己再去为Player蓝图配置角色控制器了，我们只需将Player的细节面板上的Auto Possess Player设置成Player0即可，Player0即表示本地角色。\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-24_10-53-06.png)\n\n需要注意的是，对于角色控制更优的方式是使用`Player Start`组件去持有Player蓝图类，再通过Player Controller来控制Player Start达到控制角色的目的。\n\n## 3.自定义游戏模式\n\n在我们创建一个UE4工程后，UE4会启用UE4默认的游戏模式`GameModeBase`，GameModeBase就控制着Player Controller、PlayerCameraMenager、PlayerState等运行时UE4动态生成的一些游戏物体，我们可以通过启用我们自定义的游戏模式来设置这些游戏物体按自己的定义的规则来生成运行。\n\n游戏模式也是一个蓝图类，创建游戏模式就是创建蓝图类，只是这个蓝图类需要继承自GameModeBase类，继承自GameModeBase类的蓝图就是一个游戏模式蓝图。不过在我们第一此=次打开游戏模式蓝图时，UE4会将游戏模式蓝图识别成一个普通蓝图，而进入普通蓝图的编辑模式，可能是bug吧，此时我们只需将蓝图关闭，再打开一次，UE4便可以识别出游戏模式蓝图了。\n\n游戏模式蓝图中可以定义自己的游戏模式规则，比如我们可以通过修改Spectator Class选项为自定义的游戏物体，这样在游戏运行时，UE4将不再生成DefaulPawn，而是会生成我们指定的游戏物体。\n\n![](【UE4】UE4蓝图基础\\Snipaste_2019-10-24_11-09-34.png)\n\n配置好游戏模式后我们还需要让当前项目使用我们自定义的游戏模式，通过Seettings ->Project Settings->Project/Maps&Modes->Dfault GameModes，选择我们自己的配置的游戏模式即可让当前项目启用我们自己定义的游戏模式了\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-24_11-12-38.png)\n\n## 4.操控角色控制器\n\n我们要操控角色控制器就需要配置键盘按键映射，配置好的键盘映射会以函数的形式加入蓝图脚本组件集中。\n\n我们在Seettings ->Project Settings->Engine/Input->Bindings/Axis Mappings设置键盘映射并可以配置映射的值，\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-24_14-55-47.png)\n\n配置好键盘映射以后便可以在蓝图脚本中使用这些函数主键来控制我们Player了，控制角色运动的方法很多，我这里以旋转力矩的方式来控制小球运动，具体的控制方法如下：\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-24_15-11-12.png)\n\n加入两个键盘映射函数组件(InputAxis MoveF/B,InputAxis MoveL/R)、两个添加角度力矩的组件(Add Torque in Radians,Add Torque in Radians)，但是添加角度力矩组件是需要一个控制目标的，我们需要从左侧的My Blueprint面板的Components中将需要控制的物体Player拖入脚本蓝图中，分别连接到添加角度力矩组件的Target上。\n\n这里还需要注意的一点是，在我们为Player添加相机时，相机使用的是相对于Player的局部坐标，使用局部坐标的相机会跟随Player旋转，而使用世界坐标的相机将会固定某一个角度跟随Player移动。切换方法为：下拉Spring Arm的细节面板/Transform/Rotation的三角箭头选择切换。\n\n并且相机默认情况下是启用了物理碰撞的，但大多数情况下我们是不需要让相机出现物理碰撞的，所以我们也应当取消相机的物理碰撞。操作方法为：取消Spring Arm的细节面板/Camera Collision/Do Collision Test选项。\n\n当然要想比较真实的模拟出物理效果，光这样是不行的，因为默认情况下Player是没有启动物理模拟的，我们需要启用Player的细节面板/Physics/Simulate Physics选项，并且将调节Player的细节面板/Linear Damping(线性摩檫)和Player的细节面板/Angular Damping(旋转摩檫)到适当的值，应为UE4默认是没有旋转摩檫的并且，默认线性摩檫为0.01。\n\n## <font color=Green> 小知识</font>\n\n- <font color=green> 大多数时候我们都需要勾选作用力函数组件的Acel Change选项，如：上面的Add Torque in Radians，勾选了Acel Change选项作用力组件会在作用目标物体时忽略物体的质量因素，因为存在质量影响的话，我们可能需要给一个极大的力才能推动目标物体；</font>\n- <font color=green> 有时可能默认大小的作用力对目标物体的移动作用达不到我们理想的效果，此时可以先将作用力加倍后在传递给作用力组件，蓝图脚本组件集中提供多种多样的乘积组件，我们上面使用的是float*float组件</font>；\n\n# 十五、触发器\n\n在游戏设计中触发器的使用是非常平凡的，而在蓝图中触发器的实现也并不复杂，我们来看一下具体操作：\n\n## 1.创建触发器\n\n- 蓝图模式中游戏的一切都是蓝图，触发器也不例外，所以要做一个触发器，首先我们的创建一个蓝图的壳子，并继承自Actor类\n- 触发器还需要一个极为重要的东西就是碰撞体，当然这里的碰撞体不是具有物理碰撞的网格碰撞体，而是蓝图的物理组件集中的Box Collison，一个没有物理碰撞效果专门用于触发器的盒碰撞体，我们给蓝图类添加这个组件，一个触发器便完成了\n\n## 2.使用触发器\n\n当触发器放置于场景中，有物体进入触发器碰撞盒时，触发器便会出自动发触发Event ActorBeginOverlap时间组件，之后我们便可以进行一系列逻辑操作了。\n\n# 十六、蓝图类的通信\n\n## 1.使用引用进行通信\n\n两个蓝图类要想通过引用进行通信，那么其中一个蓝图类就必须拥有另一个蓝图类的引用，如何获取一个蓝图类的引用呢？\n\n在My Blueprint/Variables栏中添加一个所需要引用的蓝图类类型的变量，勾选它的Details/Variable/Instance Editable选项，就可以在这个蓝图类的实例的Details/Default栏中看到引用变量(如果不勾选是没有default栏的)，如此便可以方便的获取另一个蓝图类的实例的引用了。\n\n通过引用两个蓝图类之间便可以进行单向的信息传递了。即拥有引用的蓝图类可以获取所引用蓝图的传递过来的信息，反向则不行。\n\n## 2.使用接口进行通信\n\n使用接口进行通信的好处是可以很便利的通过同一事件让各种不同的蓝图做出不同的反应，如：当受到子弹攻击时，墙会反弹子弹，人会受伤，通过接口通信来实现这个效果就是，创建一个受到子弹攻击的接口OnTakeAttack，然后分别让墙和人都继承这个接口并实现不同的效果，如此当受到子弹攻击时，我们便可以通过Get All Actor with Interface来调用实现这些接口的Actor来做出各自的反应。\n\n接口的实现与使用请阅读目录：九、接口。\n\n\n\n## 3.使用事件调度器通信\n\n事件调度器的通信过程是一个调度者与一个或多个被调度者之间的通信过程，类似观察者模式的通信过程。\n\n### 创建事件调度器\n\n使用事件调度器来进行蓝图通信，首先我们需要拥有一个事件调度器；\n\n事件调度器只能被拥有者调用，所以我们需要在调度者蓝图上创建事件调度器，在My Blueprint/Event Dispatchers栏可以新建一个蓝图调度器，此时这个蓝图便拥有了一个事件调度器，我们可以通过拖拽事件调度器到脚本编辑视图或直接在All Actions for this Blueprint中搜索，可以对事件调度器进行事件绑定(Bind)、事件解绑(Unbind)、解绑全部事件(Unbind all)，直接为事件调度器绑定新事件(Assign)和调用事件调度器(Call)。当一个事件调度器被调用后，与这个事件调度器绑定的事件都会被调用，一次来达到信息传递的目的。\n\n### 绑定事件\n\n调度者要事件调度器调用被调度者的事件，那么被调度者就需要向调度者的事件调度器上绑定事件，通过Bind Event to [事件调度器名]组件来绑定事件到事件调度器上。\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-28_15-51-30.png)\n\nTarget：输入事件调度器的拥有者对象\n\nEvent：需要绑定的事件\n\n如此一个基于事件调度器的通信机制便完成了。\n","source":"_posts/【UE4】UE4蓝图基础.md","raw":"---\ntitle: 【UE4】UE4蓝图基础\ndate: 2019-10-28 21:17:08\ntags: UE4\ncategories: 学习笔记\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 一、蓝图可视化脚本与蓝图系统\n\n## 1.蓝图脚本\n\n蓝图可视化脚本简称“蓝图”或“蓝图脚本”，是一种需要编译的面向对象的可视化编程语言，蓝图完全集成在UE4中，蓝图通过节点与连线工作。\n\n### 蓝图脚本的节点\n\n- 触发事件，在蓝图脚本中以红色的节点出现\n- 函数，在看图脚本中以蓝色的节点出现\n- 变量，在蓝图脚本中中以黄色节点出现\n\n## 2.蓝图系统\n\n蓝图系统又称“蓝图”或“蓝图类”，蓝图类可以看成是一个包含游戏内容的容器，其中可以包含组件、脚本或可以仅仅包含数据。\n\n蓝图类有点类似Unity3d中的预设(prefb)，蓝图类可以类似预设一般保存对象状态，可以随时拖入场景中使用，只是在其他功能上不如预设，如预设在U3D中的打包中可以发挥出优秀的效果，但是蓝图类只能作为容器使用。\n\n<font color = red> 蓝图类包含蓝图脚本，每一个蓝图类都包含一个默认的蓝图脚本。</font>\n\n### 蓝图类的分类\n\n- **关卡蓝图**：关卡蓝图在每个Level中只能存在一个，负责整个关卡的运行逻辑，关卡的初始化，帧更新都在关卡蓝图里进行；\n- **普通蓝图**：普通蓝图就是UE4的预设，在普通蓝图中我们可以对其中的对象进行一些的配置，如设置网格，贴图，粒子特效，添加相机，添加物理材质和挂载蓝图脚本等等；\n- **游戏模式蓝图**：UE4中游戏模式也是以蓝图的形式存在的，游戏模式蓝图控制一系列游戏的规则；\n- **材质蓝图**：在UE4中贴图材质也是蓝图的形式存在的，在材质蓝图中我们可以如同建模软件一般对材质进行一系列更高级的材质配置，如下图的一个简单示例：\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-24_09-41-27.png)\n\n## 4.创建蓝图\n\n创建蓝图的方法很多，这里介绍比较常用的方法\n\n- 可以直接在Content Browser(内容浏览器)中右键创建一个空的蓝图类，空蓝图除了包含一个根组件外不再包含其他东西，当我们在空蓝图中创建了对象后可以通过拖拽的方式将对象拖动到根组件位置处，用游戏对象替换根组件作为根组件，这样创建空蓝图时的白色小球就会消失；\n- 在World Outliner(世界大纲)中选中游戏对象，可以通过工具栏中的Blueprints工具中的下面两个选项创建一个包含所选内容的蓝图类；\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-24_09-51-55.png)\n\n- 通过Blueprints工具的New Empty Blueprint Class也可以直接创建空蓝图类；\n- 然而关卡蓝图似乎只能通过Blueprints工具的Open Blueprint Class打开。\n\n# 二、变量与对象引用\n\n## 1.在蓝图中创建变量\n\n在蓝图中创建变量的方式有两种，其一：直接点击My BluePrint/Variables/+Variable，默认创建bool行的变量，可以点击变量前的色块更换变量类型。\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-25_17-18-23.png)\n\n其二：在蓝图脚本区域右键->输入Get New Var，可以直接在蓝图脚本中以节点的形式创建变量，在右侧细节面板中设置变量的值。\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-25_17-23-27.png)\n\n所有创建好的变量都会在My Blueprint面板Variables栏中显示。\n\n<font color=red> 在创建好的变量的Details/Variable/Variable Type选项中可以设置变量为普通变量、数组、Set容器和Map容器。</font>\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-27_11-01-39.png)\n\n## 2.在蓝图中使用变量\n\n可以直接在蓝图脚本区域右键->输入Get/Set [变量名]即可获取变量的获取/设置组件，也可以直接从左侧的My Blueprint面板Variables栏中拖拽变量到蓝图脚本区域选择Get/Set。\n\n## 3.生成时公开与私有变量\n\n蓝图中的公有与私有与程序中的公有私有有一些不同，蓝图中只分为生成时公开和私有两种访问权限。\n\n### 生成时公开(Expose on Spawn)\n\n勾选生成时公开后，在蓝图类使用Spawn Actor from Class组件生成蓝图类实例时，勾选生成时公开的变量将可以接受外部值输入。\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-28_16-45-41.png)\n\n如上图可以看到勾选生成时公开的变量会以输入接口的形式出现在Spawn Actor from Class节点里。这里需要注意的是，勾选Expose on Spawn，还需要勾选Instance Editable，否则会报警告。\n\n### 私有变量(Private)\n\n设置成私有变量的变量只能在蓝图类里访问，蓝图类的外部实例也无法访问这个变量，如上图，变量L没有设置成私有，所以可以通过Spawn Actor from Class组件生成的实例访问这个变量，而设置成私有的K变量搜索不到Set K节点。\n\n\n\n## 3.在蓝图中使用组件引用\n\n很多时候我们需要调节自身Actor上的组件的某些参数，那么我们就需要获得这个组件的引用以便获取组件上的参数进行调节，那么我们如何获得组件的引用呢？\n\n其实方法也很简单，在My Blueprint/Variabales下有一个子栏“Components”其中存放着当前Actor上的所有的组件的引用，使用方法就是直接将需要的组件引用拖拽到蓝图脚本区域即可。获得了组件引用我们就可以通过引用使用不同的方法获取组件上的不同的参数了。\n\n## 4.动态获取世界大纲中的Actor\n\n在蓝图脚本中有四个方法获取外部Actor：\n\n- Get All Actor of Class：通过类型来获取外部Actor\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-31-16.png)\n\n- Get All Actor with Tag：通过标签来获取外部Actor\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-31-23.png)\n\n- Get All Actor with Interface：通过外部接口在获取外部Actor\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-31-36.png)\n\n- Get Actors：通过层来获取Actor\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-31-47.png)\n\n\n\n# 三、蓝图的数据类型\n\n## 1.5个基本数据类型\n\nUE4蓝图中基本数据类型只有5个，需要注意的是蓝图中没有char、double、short、long等数据类型，在C++与蓝图的配合使用时需要注意这些类型的变量。\n\n### Boolean\n\n### Byte\n\n8位，一字节，0-255。\n\n### Integer\n\n32位整型，四字节。\n\n### Integer64\n\n64位整型，八字节，能存储更大的数。\n\n### Float\n\n32位单精度浮点型，其中1符号位、8指数位、23数值位，UE4中默认保留小数点后6位。UE4中只有Float类型没有Double类型。\n\n## 2.3种字符串\n\n### String\n\n蓝图中String类型就是蓝图C++中的FString类型，普通字符串，可以对其中的字符进行增删查改。\n\n### Name\n\nName是一种固定字符串类型，变量初始化以后不能在对其中的内容进行修改，且Name类型的字符串不区分大小写，多用于作为全局变量来唯一标识对象。Name类型的字符串在运行过程中存储于内存的字符串表中，使用效率高。\n\n### Text\n\nText是String的长度加强版，通常用于存储一段文字并可以进行国际化处理。\n\n## 3.Vector(维度向量)\n\n### Vector\n\n默认创建的Vector是Vector 3D，即三维量，包含x、y、z三个值，可以表示任何任何三维量，如：三维坐标和RGB等。\n\n### Vector 2D 和Vector 4\n\nVector 2D就是二维量，Vector 4就是四维量，常用于表示四元素。\n\n### Two Vectors\n\nTwo Vectors就是一个关于Vector的pair(对组)，pair在C++的STL种较为常用，是一个只包含两个元素的容器。\n\n## 4.Rotator(三维旋转量)\n\n包含：\n\nx：roll，翻滚角，以x为轴，进行yz平面的旋转；\n\ny：pitch，俯仰角，以y为轴，进行xz平面的旋转；\n\nz：yaw，航向角，以z为轴，进行xy平面的旋转。\n\n## 5.Transform\n\nTransfrom类型是一个3*3的矩阵，包含Location、Rotation和Scale三个三维向量。\n\n# 四、条件语句\n\n## 1.Branch(if条件判断)\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-39-15.png)\n\n传入一个bool值，进行分流，通常和比较组件配合使用，如：“==”、“>”等。\n\n## 2.Switch\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-25_19-14-34.png)\n\n- Selection：case判断的变量；\n- Default：默认执行分支；\n- Add pin：添加执行分支。\n\n# 五、循环语句\n\n## 1.For Loop(for循环)\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-39-35.png)\n\n- First Index/Last Index：提供循环的次数；\n- Loop Body：循环体执行分支；\n- Index：返回当前循环索引；\n- Conpleted：循环完毕后执行分支。\n\n## 2.For Loop whit Break(可跳出的for循环)\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-39-52.png)\n\n使用方法和For Loop类似。\n\n## 3.For Each Loop(数组遍历)\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-40-45.png)\n\n专门有用遍历数组的循环。\n\n- Array：需要遍历的数组；\n- Loop Body：循环体分支；\n- Array Element：遍历的数组元素；\n- Array Index：当前索引；\n- Completed：遍历结束执行分支。\n\n## 4.For Each Loop with Break(可跳出的数组遍历)\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-40-54.png)\n\n用法和Foreach Loop一样，只是多了一个跳出执行分支。\n\n## 5.Reverse for Each Loop(反向数组遍历)\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-40-59.png)\n\n## 6.While Loop(while循环)\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-27_11-04-21.png)\n\n# 六、数组\n\n## 1.创建数组\n\n创建数组要比创建变量多一个步骤，首先我们需要创建一个变量，然后再将这个变量的Details/Varialble Type选项的右侧色块选择九宫格，即可将对应变量转换成对应类型的数组。\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-02-54.png)\n\n## 2.为数组赋值\n\n### Add(Array)\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-21-48.png)\n\n传入一个数组和一个元素即可通过Add(Array)组件为组数赋值\n\n如：\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-24-33.png)\n\n循环完毕后数组Array内便存储有0-10的是个int型元素。\n\n## 3.获取元素\n\n### Get(a copy)\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-07-50.png)\n\n获取指定索引的元素的拷贝。\n\n### Get(a ref)\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-07-44.png)\n\n获取指定索引的元素的引用。\n\n## 4.插入元素\n\n### Add(Aray)\n\n直接在数组的末尾插入元素的方法也是使用Add(Array)组件，Add(Array)组件的的插入过程就是直接在数组的末尾插入元素。\n\n### Insert\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-37-55.png)\n\n指定位置插入使用Insert组件，输入参数从上至下依次为目标数组、要插入的元素、目标插入的索引位置。\n\n当要使用Insert组件在数组末尾插入，而又不知道数组大小时，可以使用Last Index组件直接获取输入数组的尾索引，当然直接使用只会在最后一个索引位置插入，而使最后一位元素向后移动一位，而达不到在数组尾部插入的效果，所以需要加一食用。\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-46-46.png)\n\n### Set Array Elem\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-25-34.png)\n\n设置输入数组指定索引的元素的值，Size to Fit选项可以设置如果指定索引不存在时数组自动扩充size大小。\n\n## 5.查找元素\n\n### Contains Item\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-50-31.png)\n\nContains Item组件可以查找指定数组中是否包含某一元素，但是Contains Item只返回bool的判断结果，不会返回目标的索引值。\n\n### Find Item\n\n![](B:/Git/Temp/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-59-54.png)\n\nFind Item则是从输入数组中查找指定元素并返回第一次查找到该元素的索引值。\n\n## 6.删除元素\n\n### Remove Index\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-12-59.png)\n\n通过索引删除元素\n\n### Remove Item\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-21-30.png)\n\n从输入数组中移除指定元素，Remove Item会删除数组中所有指定的元素，如果删除成功则返回true，失败则返回false。\n\n## 7.筛选元素\n\n### Filter Array\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-53-49.png)\n\n过滤数组可以按类型来筛选数组元素，用于父类型数组存储子类型元素时进行类型筛选，如：Actor数组筛选MyClass类型元素，Filter Array返回一个筛选后的新数组。\n\n## 8.清空数组\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-42-24.png)\n\n使用Clear组件可以将数组内的元素全部清空。\n\n## 9.获取数组长度\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-29-34.png)\n\n## 10.设置数组长度\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-30-00.png)\n\n# 七、结构体\n\n## 1.结构体创建\n\n蓝图中结构体的创建是没办法在蓝图脚本视图中创建的，UE4蓝图中结构体是与蓝图脚本同级的蓝图类，创建蓝图结构体的方法：在Content Browser中右键->Create Advanced Assect/Blueprint栏->Structure，即可创建一个结构体，创建出来的结构体默认拥有一个bool值得成员变量。\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_17-38-54.png)\n\n## 2.定义成员变量\n\n蓝图中得结构体只能创建成员变量，不能创建成员函数，成员变量可以直接设置默认值。\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-26_19-59-29.png)\n\n## 3.结构的使用\n\n将结构体创建好以后便可以直接在蓝图脚本中搜索到并使用了。\n\n# 八、枚举\n\n## 1.枚举的创建\n\n枚举的创建和使用和结构体区别不大，创建方式一如结构体一般,Content Browser中右键->Create Advanced Assect/Blueprint栏->Enumeration，创建好后UE4也会在一个新的视图中对枚举进行编辑，枚举的编辑操作也相当简单，只有向枚举中添加与删除元素的操作，这些元素都可以添加注解提示，枚举也可以添加整个枚举的注解提示。\n\n## 2.枚举的使用\n\n枚举的使用就如同变量的使用一般，没有什么可说的。\n\n# 九、接口\n\n## 1.接口的定义\n\n接口的定义和和蓝图函数库，蓝图宏库一样，但是接口的不像函数库和宏库一般可以再一个蓝图类中定义多个函数和宏，接口就是一个蓝图类，并且接口的编辑界面及其简约，可编辑视图只有一个My Blueprint和一个Detials,在My Blueprint/Functions栏可以新建接口函数，在对应的接口函数的Details/Graph可以设置一些接口函数的描述和Const属性，在Details/Inputs和Outputs栏可以设置接口函数的输入与输出参数。\n\n## 2.接口的继承\n\n接口是一个抽象蓝图，接口的实现必须通过继承接口的蓝图来实现，在蓝图中接口继承通过Toolbar/Class Settings/Interfaces栏即可添加接口到当前蓝图类是指继承此接口。\n\n## 3.接口的实现\n\n### 无返回值的接口实现\n\n在一个蓝图继承了一个无返回值得接口后，这个接口将以事件的形式出现在这个蓝图类的All Actions for this Blueprint里\n\n如：\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-27_10-32-38.png)\n\n蓝图以这个事件作为接口函数的入口，以此节点开始便可以开始实现各个蓝图类各自继承的接口函数的逻辑了。\n\n### 有返回值得接口实现\n\n有返回值的接口不会以事件的形式出现在Add Event里，而是会直接出现在My Blueprint/Interface栏里，我们双击即可打开接口函数的编辑视图，在视图中实现接口即可。\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-28_17-00-10.png)\n\n## 4.接口函数的调用\n\n蓝图通过`[接口名](Mesasge)`组件来调用接口中的函数，如下图中的Interface1(Message)和Interface2(Message)。\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-27_10-35-51.png)\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-27_10-38-13.png)\n\n接口的使用需要指定使用的接口是哪个蓝图类中实现的接口和接口需要传入的参数。在蓝图类的My Blueprint/Variables栏是可以搜索到我们自己创建的蓝图类的，通过过去蓝图类的引用便可以指定接口函数的实现者了。当然我们也可以使用Get All Actors with Interface组件来获取实现了指定接口的所有蓝图类，然后再对这些蓝图类中实现的函数进行调用。\n\n# 十、蓝图函数库\n\n<font color=red> 蓝图函数库是一个可以被所有蓝图类调用的函数集合，蓝图函数库里的方法全部都被定义为静态方法</font>，用于定义一些不与特定游戏对象绑定的功能性函数的实现。\n\n## 1.创建蓝图函数库\n\n创建蓝图函数库的方式和创建结构体类似，在Content Browser中右键->Create Advanced Assect/Blueprint栏->Bluprint Function LiberLibrary。\n\n## 2.实现蓝图函数库里的函数\n\n和结构体一样，创建好的蓝图函数库UE4会创建一个新的界面用于编辑库里函数；\n\n- 在My Blueprint/Functions栏可以申明函数\n- 在My Blueprint/Local Variables栏可以生命局部变量，在其Details中可以设置局部变量默认值；\n- 在对应函数的Details/Input和Output栏可以分别设置函数的输入输出参数\n- 在脚本编辑区可以实现函数逻辑。\n\n## 3.使用蓝图函数库里的函数\n\n要使用蓝图函数库里的函数，可直接在脚本编辑区右键输入函数名即可在Class栏中看到蓝图函数库里的函数了。\n\n# 十一、蓝图宏库\n\n宏在UE4中几乎无处不在，蓝图宏库是开发者使用蓝图自定义的一系列的宏的容器，蓝图宏库和蓝图函数库一样可以定义多个宏；\n\n- 蓝图宏库与蓝图函数库不同的是，蓝图宏库中的宏是在预编译过程中完成处理的，即蓝图宏库不需要编译；\n- 自定义的宏，可以有任意数量的输入输出引脚，即一个宏可以没有输出引脚，这样的宏可以只进行数据处理，一个宏也可以有多个输入输出引脚，这样的宏可以根据不同的逻辑选择不同的执行流，而蓝图函数库中的函数必须有且只有一个输入和一个输出引脚；\n- 与函数不同，宏中不可以再定义成员变量，即宏只负责处理逻辑，不提供暂存能力。\n\n## 1.创建蓝图宏库\n\n宏库的创建与函数库的创建是一样的，在Content Browser中右键->Create Advanced Assect/Blueprint栏->Bluprint Macro LiberLibrary。\n\n## 2.蓝图宏声明\n\n- 在My Blueprint/Macro中可以声明一个宏；\n- 在指定宏的Details/Inputs和Outputs中可以定义输入与输出引脚和参数。\n\n## 3.蓝图宏的使用\n\n和蓝图函数的使用方法一致。\n\n## 4.自定义流程控制\n\n除了蓝图提供给我们的条件语句和循环语句等流程控制语句外，我还可以使用宏编写自己的流程控制，因为宏可以有多个输入和输出引脚，使用方法就是使用宏的形式定义自己的流程控制逻辑，通过不同的输入给予不同输出，即可达到自定义流程控制的目的。\n\n# 十二、事件\n\n除了UE4蓝图中给我们提供大量的预定义事件，我也可以自定义事件。\n\n## 1.事件的定义\n\n事件的定义也很简单，在All Actions for this Buleprint中选择Add Custom Event，便可以创建一个自定义事件的入口，之后通过这个入口实现事件的内部逻辑，一个事件便定义完成。\n\n## 2.事件的调用\n\n事件调用必须通过实现这个事件的蓝图类才可以对其中的事件进行调用。如：\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-27_11-28-43.png)\n\nEvent Blueprint为实现自定义事件的蓝图类；\n\nPrint Str为自定义事件。\n\n## 3.事件调度器\n\n事件调度器的创建与使用请阅读目录：十七、蓝图类的通信/3.使用事件调度器进行通信\n\n# 十三、蓝图模块\n\n蓝图中可以将一个复杂了逻辑处理合并成一个节点模块，从而简化整体的执行流复杂度，使蓝图的执行流变得简单明了。我们可以将需要合并的执行流多选选中然后右键，即可在Organization栏中通过Collapse Nodes选项来合并执行流。\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-27_11-31-04.png)\n\n除了将执行流合并成节点外，蓝图还提供将多个执行流合并成一个函数或一个宏的功能。合并好的模块也可以在Organizition/Expand Node进行模块分离。\n\n# 十四、角色控制\n\n## 1.为角色添加跟随相机\n\n相对U3D来说，UE4的相机跟随要简单得多，UE4中直接将相机设置成了蓝图类的组件，当蓝图类时Player时，即可实现相机对Player的跟随了。\n\n相机跟随需要通过一个物理组件`Spring Arm`来链接相机和Player，将相机附着在Spring Arm下，即可在Spring Arm的作用下实现相机跟随。\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-24_10-45-29.png)\n\n## 2.为角色添加控制器\n\n在UE4的游戏制作过程中，我们不难发现当我们运行游戏时，在世界大纲中多出了很多东西，如下图：\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-24_10-53-34.png)\n\n其实，UE4为我们提供很多已经预制好的必须品，如上图的PlayerController(角色控制器)、PlayerCameraMenager(角色相机管理器)等。也就是说不可以直接使用UE4预制给我们的角色控制器来控制我们的Player，而不需要自己再去为Player蓝图配置角色控制器了，我们只需将Player的细节面板上的Auto Possess Player设置成Player0即可，Player0即表示本地角色。\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-24_10-53-06.png)\n\n需要注意的是，对于角色控制更优的方式是使用`Player Start`组件去持有Player蓝图类，再通过Player Controller来控制Player Start达到控制角色的目的。\n\n## 3.自定义游戏模式\n\n在我们创建一个UE4工程后，UE4会启用UE4默认的游戏模式`GameModeBase`，GameModeBase就控制着Player Controller、PlayerCameraMenager、PlayerState等运行时UE4动态生成的一些游戏物体，我们可以通过启用我们自定义的游戏模式来设置这些游戏物体按自己的定义的规则来生成运行。\n\n游戏模式也是一个蓝图类，创建游戏模式就是创建蓝图类，只是这个蓝图类需要继承自GameModeBase类，继承自GameModeBase类的蓝图就是一个游戏模式蓝图。不过在我们第一此=次打开游戏模式蓝图时，UE4会将游戏模式蓝图识别成一个普通蓝图，而进入普通蓝图的编辑模式，可能是bug吧，此时我们只需将蓝图关闭，再打开一次，UE4便可以识别出游戏模式蓝图了。\n\n游戏模式蓝图中可以定义自己的游戏模式规则，比如我们可以通过修改Spectator Class选项为自定义的游戏物体，这样在游戏运行时，UE4将不再生成DefaulPawn，而是会生成我们指定的游戏物体。\n\n![](【UE4】UE4蓝图基础\\Snipaste_2019-10-24_11-09-34.png)\n\n配置好游戏模式后我们还需要让当前项目使用我们自定义的游戏模式，通过Seettings ->Project Settings->Project/Maps&Modes->Dfault GameModes，选择我们自己的配置的游戏模式即可让当前项目启用我们自己定义的游戏模式了\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-24_11-12-38.png)\n\n## 4.操控角色控制器\n\n我们要操控角色控制器就需要配置键盘按键映射，配置好的键盘映射会以函数的形式加入蓝图脚本组件集中。\n\n我们在Seettings ->Project Settings->Engine/Input->Bindings/Axis Mappings设置键盘映射并可以配置映射的值，\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-24_14-55-47.png)\n\n配置好键盘映射以后便可以在蓝图脚本中使用这些函数主键来控制我们Player了，控制角色运动的方法很多，我这里以旋转力矩的方式来控制小球运动，具体的控制方法如下：\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-24_15-11-12.png)\n\n加入两个键盘映射函数组件(InputAxis MoveF/B,InputAxis MoveL/R)、两个添加角度力矩的组件(Add Torque in Radians,Add Torque in Radians)，但是添加角度力矩组件是需要一个控制目标的，我们需要从左侧的My Blueprint面板的Components中将需要控制的物体Player拖入脚本蓝图中，分别连接到添加角度力矩组件的Target上。\n\n这里还需要注意的一点是，在我们为Player添加相机时，相机使用的是相对于Player的局部坐标，使用局部坐标的相机会跟随Player旋转，而使用世界坐标的相机将会固定某一个角度跟随Player移动。切换方法为：下拉Spring Arm的细节面板/Transform/Rotation的三角箭头选择切换。\n\n并且相机默认情况下是启用了物理碰撞的，但大多数情况下我们是不需要让相机出现物理碰撞的，所以我们也应当取消相机的物理碰撞。操作方法为：取消Spring Arm的细节面板/Camera Collision/Do Collision Test选项。\n\n当然要想比较真实的模拟出物理效果，光这样是不行的，因为默认情况下Player是没有启动物理模拟的，我们需要启用Player的细节面板/Physics/Simulate Physics选项，并且将调节Player的细节面板/Linear Damping(线性摩檫)和Player的细节面板/Angular Damping(旋转摩檫)到适当的值，应为UE4默认是没有旋转摩檫的并且，默认线性摩檫为0.01。\n\n## <font color=Green> 小知识</font>\n\n- <font color=green> 大多数时候我们都需要勾选作用力函数组件的Acel Change选项，如：上面的Add Torque in Radians，勾选了Acel Change选项作用力组件会在作用目标物体时忽略物体的质量因素，因为存在质量影响的话，我们可能需要给一个极大的力才能推动目标物体；</font>\n- <font color=green> 有时可能默认大小的作用力对目标物体的移动作用达不到我们理想的效果，此时可以先将作用力加倍后在传递给作用力组件，蓝图脚本组件集中提供多种多样的乘积组件，我们上面使用的是float*float组件</font>；\n\n# 十五、触发器\n\n在游戏设计中触发器的使用是非常平凡的，而在蓝图中触发器的实现也并不复杂，我们来看一下具体操作：\n\n## 1.创建触发器\n\n- 蓝图模式中游戏的一切都是蓝图，触发器也不例外，所以要做一个触发器，首先我们的创建一个蓝图的壳子，并继承自Actor类\n- 触发器还需要一个极为重要的东西就是碰撞体，当然这里的碰撞体不是具有物理碰撞的网格碰撞体，而是蓝图的物理组件集中的Box Collison，一个没有物理碰撞效果专门用于触发器的盒碰撞体，我们给蓝图类添加这个组件，一个触发器便完成了\n\n## 2.使用触发器\n\n当触发器放置于场景中，有物体进入触发器碰撞盒时，触发器便会出自动发触发Event ActorBeginOverlap时间组件，之后我们便可以进行一系列逻辑操作了。\n\n# 十六、蓝图类的通信\n\n## 1.使用引用进行通信\n\n两个蓝图类要想通过引用进行通信，那么其中一个蓝图类就必须拥有另一个蓝图类的引用，如何获取一个蓝图类的引用呢？\n\n在My Blueprint/Variables栏中添加一个所需要引用的蓝图类类型的变量，勾选它的Details/Variable/Instance Editable选项，就可以在这个蓝图类的实例的Details/Default栏中看到引用变量(如果不勾选是没有default栏的)，如此便可以方便的获取另一个蓝图类的实例的引用了。\n\n通过引用两个蓝图类之间便可以进行单向的信息传递了。即拥有引用的蓝图类可以获取所引用蓝图的传递过来的信息，反向则不行。\n\n## 2.使用接口进行通信\n\n使用接口进行通信的好处是可以很便利的通过同一事件让各种不同的蓝图做出不同的反应，如：当受到子弹攻击时，墙会反弹子弹，人会受伤，通过接口通信来实现这个效果就是，创建一个受到子弹攻击的接口OnTakeAttack，然后分别让墙和人都继承这个接口并实现不同的效果，如此当受到子弹攻击时，我们便可以通过Get All Actor with Interface来调用实现这些接口的Actor来做出各自的反应。\n\n接口的实现与使用请阅读目录：九、接口。\n\n\n\n## 3.使用事件调度器通信\n\n事件调度器的通信过程是一个调度者与一个或多个被调度者之间的通信过程，类似观察者模式的通信过程。\n\n### 创建事件调度器\n\n使用事件调度器来进行蓝图通信，首先我们需要拥有一个事件调度器；\n\n事件调度器只能被拥有者调用，所以我们需要在调度者蓝图上创建事件调度器，在My Blueprint/Event Dispatchers栏可以新建一个蓝图调度器，此时这个蓝图便拥有了一个事件调度器，我们可以通过拖拽事件调度器到脚本编辑视图或直接在All Actions for this Blueprint中搜索，可以对事件调度器进行事件绑定(Bind)、事件解绑(Unbind)、解绑全部事件(Unbind all)，直接为事件调度器绑定新事件(Assign)和调用事件调度器(Call)。当一个事件调度器被调用后，与这个事件调度器绑定的事件都会被调用，一次来达到信息传递的目的。\n\n### 绑定事件\n\n调度者要事件调度器调用被调度者的事件，那么被调度者就需要向调度者的事件调度器上绑定事件，通过Bind Event to [事件调度器名]组件来绑定事件到事件调度器上。\n\n![](【UE4】UE4蓝图基础/Snipaste_2019-10-28_15-51-30.png)\n\nTarget：输入事件调度器的拥有者对象\n\nEvent：需要绑定的事件\n\n如此一个基于事件调度器的通信机制便完成了。\n","slug":"【UE4】UE4蓝图基础","published":1,"updated":"2021-02-01T13:22:23.104Z","_id":"ckk9hocbj003ldwr7e8jt77cw","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"一、蓝图可视化脚本与蓝图系统\"><a href=\"#一、蓝图可视化脚本与蓝图系统\" class=\"headerlink\" title=\"一、蓝图可视化脚本与蓝图系统\"></a>一、蓝图可视化脚本与蓝图系统</h1><h2 id=\"1-蓝图脚本\"><a href=\"#1-蓝图脚本\" class=\"headerlink\" title=\"1.蓝图脚本\"></a>1.蓝图脚本</h2><p>蓝图可视化脚本简称“蓝图”或“蓝图脚本”，是一种需要编译的面向对象的可视化编程语言，蓝图完全集成在UE4中，蓝图通过节点与连线工作。</p>\n<h3 id=\"蓝图脚本的节点\"><a href=\"#蓝图脚本的节点\" class=\"headerlink\" title=\"蓝图脚本的节点\"></a>蓝图脚本的节点</h3><ul>\n<li>触发事件，在蓝图脚本中以红色的节点出现</li>\n<li>函数，在看图脚本中以蓝色的节点出现</li>\n<li>变量，在蓝图脚本中中以黄色节点出现</li>\n</ul>\n<h2 id=\"2-蓝图系统\"><a href=\"#2-蓝图系统\" class=\"headerlink\" title=\"2.蓝图系统\"></a>2.蓝图系统</h2><p>蓝图系统又称“蓝图”或“蓝图类”，蓝图类可以看成是一个包含游戏内容的容器，其中可以包含组件、脚本或可以仅仅包含数据。</p>\n<p>蓝图类有点类似Unity3d中的预设(prefb)，蓝图类可以类似预设一般保存对象状态，可以随时拖入场景中使用，只是在其他功能上不如预设，如预设在U3D中的打包中可以发挥出优秀的效果，但是蓝图类只能作为容器使用。</p>\n<p><font color=\"red\"> 蓝图类包含蓝图脚本，每一个蓝图类都包含一个默认的蓝图脚本。</font></p>\n<h3 id=\"蓝图类的分类\"><a href=\"#蓝图类的分类\" class=\"headerlink\" title=\"蓝图类的分类\"></a>蓝图类的分类</h3><ul>\n<li><strong>关卡蓝图</strong>：关卡蓝图在每个Level中只能存在一个，负责整个关卡的运行逻辑，关卡的初始化，帧更新都在关卡蓝图里进行；</li>\n<li><strong>普通蓝图</strong>：普通蓝图就是UE4的预设，在普通蓝图中我们可以对其中的对象进行一些的配置，如设置网格，贴图，粒子特效，添加相机，添加物理材质和挂载蓝图脚本等等；</li>\n<li><strong>游戏模式蓝图</strong>：UE4中游戏模式也是以蓝图的形式存在的，游戏模式蓝图控制一系列游戏的规则；</li>\n<li><strong>材质蓝图</strong>：在UE4中贴图材质也是蓝图的形式存在的，在材质蓝图中我们可以如同建模软件一般对材质进行一系列更高级的材质配置，如下图的一个简单示例：</li>\n</ul>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-24_09-41-27.png\"></p>\n<h2 id=\"4-创建蓝图\"><a href=\"#4-创建蓝图\" class=\"headerlink\" title=\"4.创建蓝图\"></a>4.创建蓝图</h2><p>创建蓝图的方法很多，这里介绍比较常用的方法</p>\n<ul>\n<li>可以直接在Content Browser(内容浏览器)中右键创建一个空的蓝图类，空蓝图除了包含一个根组件外不再包含其他东西，当我们在空蓝图中创建了对象后可以通过拖拽的方式将对象拖动到根组件位置处，用游戏对象替换根组件作为根组件，这样创建空蓝图时的白色小球就会消失；</li>\n<li>在World Outliner(世界大纲)中选中游戏对象，可以通过工具栏中的Blueprints工具中的下面两个选项创建一个包含所选内容的蓝图类；</li>\n</ul>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-24_09-51-55.png\"></p>\n<ul>\n<li>通过Blueprints工具的New Empty Blueprint Class也可以直接创建空蓝图类；</li>\n<li>然而关卡蓝图似乎只能通过Blueprints工具的Open Blueprint Class打开。</li>\n</ul>\n<h1 id=\"二、变量与对象引用\"><a href=\"#二、变量与对象引用\" class=\"headerlink\" title=\"二、变量与对象引用\"></a>二、变量与对象引用</h1><h2 id=\"1-在蓝图中创建变量\"><a href=\"#1-在蓝图中创建变量\" class=\"headerlink\" title=\"1.在蓝图中创建变量\"></a>1.在蓝图中创建变量</h2><p>在蓝图中创建变量的方式有两种，其一：直接点击My BluePrint/Variables/+Variable，默认创建bool行的变量，可以点击变量前的色块更换变量类型。</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-25_17-18-23.png\"></p>\n<p>其二：在蓝图脚本区域右键-&gt;输入Get New Var，可以直接在蓝图脚本中以节点的形式创建变量，在右侧细节面板中设置变量的值。</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-25_17-23-27.png\"></p>\n<p>所有创建好的变量都会在My Blueprint面板Variables栏中显示。</p>\n<p><font color=\"red\"> 在创建好的变量的Details/Variable/Variable Type选项中可以设置变量为普通变量、数组、Set容器和Map容器。</font></p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-27_11-01-39.png\"></p>\n<h2 id=\"2-在蓝图中使用变量\"><a href=\"#2-在蓝图中使用变量\" class=\"headerlink\" title=\"2.在蓝图中使用变量\"></a>2.在蓝图中使用变量</h2><p>可以直接在蓝图脚本区域右键-&gt;输入Get/Set [变量名]即可获取变量的获取/设置组件，也可以直接从左侧的My Blueprint面板Variables栏中拖拽变量到蓝图脚本区域选择Get/Set。</p>\n<h2 id=\"3-生成时公开与私有变量\"><a href=\"#3-生成时公开与私有变量\" class=\"headerlink\" title=\"3.生成时公开与私有变量\"></a>3.生成时公开与私有变量</h2><p>蓝图中的公有与私有与程序中的公有私有有一些不同，蓝图中只分为生成时公开和私有两种访问权限。</p>\n<h3 id=\"生成时公开-Expose-on-Spawn\"><a href=\"#生成时公开-Expose-on-Spawn\" class=\"headerlink\" title=\"生成时公开(Expose on Spawn)\"></a>生成时公开(Expose on Spawn)</h3><p>勾选生成时公开后，在蓝图类使用Spawn Actor from Class组件生成蓝图类实例时，勾选生成时公开的变量将可以接受外部值输入。<br><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-28_16-45-41.png\"></p>\n<p>如上图可以看到勾选生成时公开的变量会以输入接口的形式出现在Spawn Actor from Class节点里。这里需要注意的是，勾选Expose on Spawn，还需要勾选Instance Editable，否则会报警告。</p>\n<h3 id=\"私有变量-Private\"><a href=\"#私有变量-Private\" class=\"headerlink\" title=\"私有变量(Private)\"></a>私有变量(Private)</h3><p>设置成私有变量的变量只能在蓝图类里访问，蓝图类的外部实例也无法访问这个变量，如上图，变量L没有设置成私有，所以可以通过Spawn Actor from Class组件生成的实例访问这个变量，而设置成私有的K变量搜索不到Set K节点。</p>\n<h2 id=\"3-在蓝图中使用组件引用\"><a href=\"#3-在蓝图中使用组件引用\" class=\"headerlink\" title=\"3.在蓝图中使用组件引用\"></a>3.在蓝图中使用组件引用</h2><p>很多时候我们需要调节自身Actor上的组件的某些参数，那么我们就需要获得这个组件的引用以便获取组件上的参数进行调节，那么我们如何获得组件的引用呢？</p>\n<p>其实方法也很简单，在My Blueprint/Variabales下有一个子栏“Components”其中存放着当前Actor上的所有的组件的引用，使用方法就是直接将需要的组件引用拖拽到蓝图脚本区域即可。获得了组件引用我们就可以通过引用使用不同的方法获取组件上的不同的参数了。</p>\n<h2 id=\"4-动态获取世界大纲中的Actor\"><a href=\"#4-动态获取世界大纲中的Actor\" class=\"headerlink\" title=\"4.动态获取世界大纲中的Actor\"></a>4.动态获取世界大纲中的Actor</h2><p>在蓝图脚本中有四个方法获取外部Actor：</p>\n<ul>\n<li>Get All Actor of Class：通过类型来获取外部Actor</li>\n</ul>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-25_18-31-16.png\"></p>\n<ul>\n<li>Get All Actor with Tag：通过标签来获取外部Actor</li>\n</ul>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-25_18-31-23.png\"></p>\n<ul>\n<li>Get All Actor with Interface：通过外部接口在获取外部Actor</li>\n</ul>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-25_18-31-36.png\"></p>\n<ul>\n<li>Get Actors：通过层来获取Actor</li>\n</ul>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-25_18-31-47.png\"></p>\n<h1 id=\"三、蓝图的数据类型\"><a href=\"#三、蓝图的数据类型\" class=\"headerlink\" title=\"三、蓝图的数据类型\"></a>三、蓝图的数据类型</h1><h2 id=\"1-5个基本数据类型\"><a href=\"#1-5个基本数据类型\" class=\"headerlink\" title=\"1.5个基本数据类型\"></a>1.5个基本数据类型</h2><p>UE4蓝图中基本数据类型只有5个，需要注意的是蓝图中没有char、double、short、long等数据类型，在C++与蓝图的配合使用时需要注意这些类型的变量。</p>\n<h3 id=\"Boolean\"><a href=\"#Boolean\" class=\"headerlink\" title=\"Boolean\"></a>Boolean</h3><h3 id=\"Byte\"><a href=\"#Byte\" class=\"headerlink\" title=\"Byte\"></a>Byte</h3><p>8位，一字节，0-255。</p>\n<h3 id=\"Integer\"><a href=\"#Integer\" class=\"headerlink\" title=\"Integer\"></a>Integer</h3><p>32位整型，四字节。</p>\n<h3 id=\"Integer64\"><a href=\"#Integer64\" class=\"headerlink\" title=\"Integer64\"></a>Integer64</h3><p>64位整型，八字节，能存储更大的数。</p>\n<h3 id=\"Float\"><a href=\"#Float\" class=\"headerlink\" title=\"Float\"></a>Float</h3><p>32位单精度浮点型，其中1符号位、8指数位、23数值位，UE4中默认保留小数点后6位。UE4中只有Float类型没有Double类型。</p>\n<h2 id=\"2-3种字符串\"><a href=\"#2-3种字符串\" class=\"headerlink\" title=\"2.3种字符串\"></a>2.3种字符串</h2><h3 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h3><p>蓝图中String类型就是蓝图C++中的FString类型，普通字符串，可以对其中的字符进行增删查改。</p>\n<h3 id=\"Name\"><a href=\"#Name\" class=\"headerlink\" title=\"Name\"></a>Name</h3><p>Name是一种固定字符串类型，变量初始化以后不能在对其中的内容进行修改，且Name类型的字符串不区分大小写，多用于作为全局变量来唯一标识对象。Name类型的字符串在运行过程中存储于内存的字符串表中，使用效率高。</p>\n<h3 id=\"Text\"><a href=\"#Text\" class=\"headerlink\" title=\"Text\"></a>Text</h3><p>Text是String的长度加强版，通常用于存储一段文字并可以进行国际化处理。</p>\n<h2 id=\"3-Vector-维度向量\"><a href=\"#3-Vector-维度向量\" class=\"headerlink\" title=\"3.Vector(维度向量)\"></a>3.Vector(维度向量)</h2><h3 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h3><p>默认创建的Vector是Vector 3D，即三维量，包含x、y、z三个值，可以表示任何任何三维量，如：三维坐标和RGB等。</p>\n<h3 id=\"Vector-2D-和Vector-4\"><a href=\"#Vector-2D-和Vector-4\" class=\"headerlink\" title=\"Vector 2D 和Vector 4\"></a>Vector 2D 和Vector 4</h3><p>Vector 2D就是二维量，Vector 4就是四维量，常用于表示四元素。</p>\n<h3 id=\"Two-Vectors\"><a href=\"#Two-Vectors\" class=\"headerlink\" title=\"Two Vectors\"></a>Two Vectors</h3><p>Two Vectors就是一个关于Vector的pair(对组)，pair在C++的STL种较为常用，是一个只包含两个元素的容器。</p>\n<h2 id=\"4-Rotator-三维旋转量\"><a href=\"#4-Rotator-三维旋转量\" class=\"headerlink\" title=\"4.Rotator(三维旋转量)\"></a>4.Rotator(三维旋转量)</h2><p>包含：</p>\n<p>x：roll，翻滚角，以x为轴，进行yz平面的旋转；</p>\n<p>y：pitch，俯仰角，以y为轴，进行xz平面的旋转；</p>\n<p>z：yaw，航向角，以z为轴，进行xy平面的旋转。</p>\n<h2 id=\"5-Transform\"><a href=\"#5-Transform\" class=\"headerlink\" title=\"5.Transform\"></a>5.Transform</h2><p>Transfrom类型是一个3*3的矩阵，包含Location、Rotation和Scale三个三维向量。</p>\n<h1 id=\"四、条件语句\"><a href=\"#四、条件语句\" class=\"headerlink\" title=\"四、条件语句\"></a>四、条件语句</h1><h2 id=\"1-Branch-if条件判断\"><a href=\"#1-Branch-if条件判断\" class=\"headerlink\" title=\"1.Branch(if条件判断)\"></a>1.Branch(if条件判断)</h2><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-25_18-39-15.png\"></p>\n<p>传入一个bool值，进行分流，通常和比较组件配合使用，如：“==”、“&gt;”等。</p>\n<h2 id=\"2-Switch\"><a href=\"#2-Switch\" class=\"headerlink\" title=\"2.Switch\"></a>2.Switch</h2><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-25_19-14-34.png\"></p>\n<ul>\n<li>Selection：case判断的变量；</li>\n<li>Default：默认执行分支；</li>\n<li>Add pin：添加执行分支。</li>\n</ul>\n<h1 id=\"五、循环语句\"><a href=\"#五、循环语句\" class=\"headerlink\" title=\"五、循环语句\"></a>五、循环语句</h1><h2 id=\"1-For-Loop-for循环\"><a href=\"#1-For-Loop-for循环\" class=\"headerlink\" title=\"1.For Loop(for循环)\"></a>1.For Loop(for循环)</h2><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-25_18-39-35.png\"></p>\n<ul>\n<li>First Index/Last Index：提供循环的次数；</li>\n<li>Loop Body：循环体执行分支；</li>\n<li>Index：返回当前循环索引；</li>\n<li>Conpleted：循环完毕后执行分支。</li>\n</ul>\n<h2 id=\"2-For-Loop-whit-Break-可跳出的for循环\"><a href=\"#2-For-Loop-whit-Break-可跳出的for循环\" class=\"headerlink\" title=\"2.For Loop whit Break(可跳出的for循环)\"></a>2.For Loop whit Break(可跳出的for循环)</h2><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-25_18-39-52.png\"></p>\n<p>使用方法和For Loop类似。</p>\n<h2 id=\"3-For-Each-Loop-数组遍历\"><a href=\"#3-For-Each-Loop-数组遍历\" class=\"headerlink\" title=\"3.For Each Loop(数组遍历)\"></a>3.For Each Loop(数组遍历)</h2><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-25_18-40-45.png\"></p>\n<p>专门有用遍历数组的循环。</p>\n<ul>\n<li>Array：需要遍历的数组；</li>\n<li>Loop Body：循环体分支；</li>\n<li>Array Element：遍历的数组元素；</li>\n<li>Array Index：当前索引；</li>\n<li>Completed：遍历结束执行分支。</li>\n</ul>\n<h2 id=\"4-For-Each-Loop-with-Break-可跳出的数组遍历\"><a href=\"#4-For-Each-Loop-with-Break-可跳出的数组遍历\" class=\"headerlink\" title=\"4.For Each Loop with Break(可跳出的数组遍历)\"></a>4.For Each Loop with Break(可跳出的数组遍历)</h2><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-25_18-40-54.png\"></p>\n<p>用法和Foreach Loop一样，只是多了一个跳出执行分支。</p>\n<h2 id=\"5-Reverse-for-Each-Loop-反向数组遍历\"><a href=\"#5-Reverse-for-Each-Loop-反向数组遍历\" class=\"headerlink\" title=\"5.Reverse for Each Loop(反向数组遍历)\"></a>5.Reverse for Each Loop(反向数组遍历)</h2><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-25_18-40-59.png\"></p>\n<h2 id=\"6-While-Loop-while循环\"><a href=\"#6-While-Loop-while循环\" class=\"headerlink\" title=\"6.While Loop(while循环)\"></a>6.While Loop(while循环)</h2><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-27_11-04-21.png\"></p>\n<h1 id=\"六、数组\"><a href=\"#六、数组\" class=\"headerlink\" title=\"六、数组\"></a>六、数组</h1><h2 id=\"1-创建数组\"><a href=\"#1-创建数组\" class=\"headerlink\" title=\"1.创建数组\"></a>1.创建数组</h2><p>创建数组要比创建变量多一个步骤，首先我们需要创建一个变量，然后再将这个变量的Details/Varialble Type选项的右侧色块选择九宫格，即可将对应变量转换成对应类型的数组。</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_11-02-54.png\"></p>\n<h2 id=\"2-为数组赋值\"><a href=\"#2-为数组赋值\" class=\"headerlink\" title=\"2.为数组赋值\"></a>2.为数组赋值</h2><h3 id=\"Add-Array\"><a href=\"#Add-Array\" class=\"headerlink\" title=\"Add(Array)\"></a>Add(Array)</h3><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_11-21-48.png\"></p>\n<p>传入一个数组和一个元素即可通过Add(Array)组件为组数赋值</p>\n<p>如：</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_11-24-33.png\"></p>\n<p>循环完毕后数组Array内便存储有0-10的是个int型元素。</p>\n<h2 id=\"3-获取元素\"><a href=\"#3-获取元素\" class=\"headerlink\" title=\"3.获取元素\"></a>3.获取元素</h2><h3 id=\"Get-a-copy\"><a href=\"#Get-a-copy\" class=\"headerlink\" title=\"Get(a copy)\"></a>Get(a copy)</h3><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_12-07-50.png\"></p>\n<p>获取指定索引的元素的拷贝。</p>\n<h3 id=\"Get-a-ref\"><a href=\"#Get-a-ref\" class=\"headerlink\" title=\"Get(a ref)\"></a>Get(a ref)</h3><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_12-07-44.png\"></p>\n<p>获取指定索引的元素的引用。</p>\n<h2 id=\"4-插入元素\"><a href=\"#4-插入元素\" class=\"headerlink\" title=\"4.插入元素\"></a>4.插入元素</h2><h3 id=\"Add-Aray\"><a href=\"#Add-Aray\" class=\"headerlink\" title=\"Add(Aray)\"></a>Add(Aray)</h3><p>直接在数组的末尾插入元素的方法也是使用Add(Array)组件，Add(Array)组件的的插入过程就是直接在数组的末尾插入元素。</p>\n<h3 id=\"Insert\"><a href=\"#Insert\" class=\"headerlink\" title=\"Insert\"></a>Insert</h3><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_11-37-55.png\"></p>\n<p>指定位置插入使用Insert组件，输入参数从上至下依次为目标数组、要插入的元素、目标插入的索引位置。</p>\n<p>当要使用Insert组件在数组末尾插入，而又不知道数组大小时，可以使用Last Index组件直接获取输入数组的尾索引，当然直接使用只会在最后一个索引位置插入，而使最后一位元素向后移动一位，而达不到在数组尾部插入的效果，所以需要加一食用。</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_11-46-46.png\"></p>\n<h3 id=\"Set-Array-Elem\"><a href=\"#Set-Array-Elem\" class=\"headerlink\" title=\"Set Array Elem\"></a>Set Array Elem</h3><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_12-25-34.png\"></p>\n<p>设置输入数组指定索引的元素的值，Size to Fit选项可以设置如果指定索引不存在时数组自动扩充size大小。</p>\n<h2 id=\"5-查找元素\"><a href=\"#5-查找元素\" class=\"headerlink\" title=\"5.查找元素\"></a>5.查找元素</h2><h3 id=\"Contains-Item\"><a href=\"#Contains-Item\" class=\"headerlink\" title=\"Contains Item\"></a>Contains Item</h3><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_11-50-31.png\"></p>\n<p>Contains Item组件可以查找指定数组中是否包含某一元素，但是Contains Item只返回bool的判断结果，不会返回目标的索引值。</p>\n<h3 id=\"Find-Item\"><a href=\"#Find-Item\" class=\"headerlink\" title=\"Find Item\"></a>Find Item</h3><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Git/Temp/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-59-54.png\"></p>\n<p>Find Item则是从输入数组中查找指定元素并返回第一次查找到该元素的索引值。</p>\n<h2 id=\"6-删除元素\"><a href=\"#6-删除元素\" class=\"headerlink\" title=\"6.删除元素\"></a>6.删除元素</h2><h3 id=\"Remove-Index\"><a href=\"#Remove-Index\" class=\"headerlink\" title=\"Remove Index\"></a>Remove Index</h3><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_12-12-59.png\"></p>\n<p>通过索引删除元素</p>\n<h3 id=\"Remove-Item\"><a href=\"#Remove-Item\" class=\"headerlink\" title=\"Remove Item\"></a>Remove Item</h3><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_12-21-30.png\"></p>\n<p>从输入数组中移除指定元素，Remove Item会删除数组中所有指定的元素，如果删除成功则返回true，失败则返回false。</p>\n<h2 id=\"7-筛选元素\"><a href=\"#7-筛选元素\" class=\"headerlink\" title=\"7.筛选元素\"></a>7.筛选元素</h2><h3 id=\"Filter-Array\"><a href=\"#Filter-Array\" class=\"headerlink\" title=\"Filter Array\"></a>Filter Array</h3><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_11-53-49.png\"></p>\n<p>过滤数组可以按类型来筛选数组元素，用于父类型数组存储子类型元素时进行类型筛选，如：Actor数组筛选MyClass类型元素，Filter Array返回一个筛选后的新数组。</p>\n<h2 id=\"8-清空数组\"><a href=\"#8-清空数组\" class=\"headerlink\" title=\"8.清空数组\"></a>8.清空数组</h2><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_11-42-24.png\"></p>\n<p>使用Clear组件可以将数组内的元素全部清空。</p>\n<h2 id=\"9-获取数组长度\"><a href=\"#9-获取数组长度\" class=\"headerlink\" title=\"9.获取数组长度\"></a>9.获取数组长度</h2><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_12-29-34.png\"></p>\n<h2 id=\"10-设置数组长度\"><a href=\"#10-设置数组长度\" class=\"headerlink\" title=\"10.设置数组长度\"></a>10.设置数组长度</h2><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_12-30-00.png\"></p>\n<h1 id=\"七、结构体\"><a href=\"#七、结构体\" class=\"headerlink\" title=\"七、结构体\"></a>七、结构体</h1><h2 id=\"1-结构体创建\"><a href=\"#1-结构体创建\" class=\"headerlink\" title=\"1.结构体创建\"></a>1.结构体创建</h2><p>蓝图中结构体的创建是没办法在蓝图脚本视图中创建的，UE4蓝图中结构体是与蓝图脚本同级的蓝图类，创建蓝图结构体的方法：在Content Browser中右键-&gt;Create Advanced Assect/Blueprint栏-&gt;Structure，即可创建一个结构体，创建出来的结构体默认拥有一个bool值得成员变量。</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_17-38-54.png\"></p>\n<h2 id=\"2-定义成员变量\"><a href=\"#2-定义成员变量\" class=\"headerlink\" title=\"2.定义成员变量\"></a>2.定义成员变量</h2><p>蓝图中得结构体只能创建成员变量，不能创建成员函数，成员变量可以直接设置默认值。</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_19-59-29.png\"></p>\n<h2 id=\"3-结构的使用\"><a href=\"#3-结构的使用\" class=\"headerlink\" title=\"3.结构的使用\"></a>3.结构的使用</h2><p>将结构体创建好以后便可以直接在蓝图脚本中搜索到并使用了。</p>\n<h1 id=\"八、枚举\"><a href=\"#八、枚举\" class=\"headerlink\" title=\"八、枚举\"></a>八、枚举</h1><h2 id=\"1-枚举的创建\"><a href=\"#1-枚举的创建\" class=\"headerlink\" title=\"1.枚举的创建\"></a>1.枚举的创建</h2><p>枚举的创建和使用和结构体区别不大，创建方式一如结构体一般,Content Browser中右键-&gt;Create Advanced Assect/Blueprint栏-&gt;Enumeration，创建好后UE4也会在一个新的视图中对枚举进行编辑，枚举的编辑操作也相当简单，只有向枚举中添加与删除元素的操作，这些元素都可以添加注解提示，枚举也可以添加整个枚举的注解提示。</p>\n<h2 id=\"2-枚举的使用\"><a href=\"#2-枚举的使用\" class=\"headerlink\" title=\"2.枚举的使用\"></a>2.枚举的使用</h2><p>枚举的使用就如同变量的使用一般，没有什么可说的。</p>\n<h1 id=\"九、接口\"><a href=\"#九、接口\" class=\"headerlink\" title=\"九、接口\"></a>九、接口</h1><h2 id=\"1-接口的定义\"><a href=\"#1-接口的定义\" class=\"headerlink\" title=\"1.接口的定义\"></a>1.接口的定义</h2><p>接口的定义和和蓝图函数库，蓝图宏库一样，但是接口的不像函数库和宏库一般可以再一个蓝图类中定义多个函数和宏，接口就是一个蓝图类，并且接口的编辑界面及其简约，可编辑视图只有一个My Blueprint和一个Detials,在My Blueprint/Functions栏可以新建接口函数，在对应的接口函数的Details/Graph可以设置一些接口函数的描述和Const属性，在Details/Inputs和Outputs栏可以设置接口函数的输入与输出参数。</p>\n<h2 id=\"2-接口的继承\"><a href=\"#2-接口的继承\" class=\"headerlink\" title=\"2.接口的继承\"></a>2.接口的继承</h2><p>接口是一个抽象蓝图，接口的实现必须通过继承接口的蓝图来实现，在蓝图中接口继承通过Toolbar/Class Settings/Interfaces栏即可添加接口到当前蓝图类是指继承此接口。</p>\n<h2 id=\"3-接口的实现\"><a href=\"#3-接口的实现\" class=\"headerlink\" title=\"3.接口的实现\"></a>3.接口的实现</h2><h3 id=\"无返回值的接口实现\"><a href=\"#无返回值的接口实现\" class=\"headerlink\" title=\"无返回值的接口实现\"></a>无返回值的接口实现</h3><p>在一个蓝图继承了一个无返回值得接口后，这个接口将以事件的形式出现在这个蓝图类的All Actions for this Blueprint里</p>\n<p>如：</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-27_10-32-38.png\"></p>\n<p>蓝图以这个事件作为接口函数的入口，以此节点开始便可以开始实现各个蓝图类各自继承的接口函数的逻辑了。</p>\n<h3 id=\"有返回值得接口实现\"><a href=\"#有返回值得接口实现\" class=\"headerlink\" title=\"有返回值得接口实现\"></a>有返回值得接口实现</h3><p>有返回值的接口不会以事件的形式出现在Add Event里，而是会直接出现在My Blueprint/Interface栏里，我们双击即可打开接口函数的编辑视图，在视图中实现接口即可。</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-28_17-00-10.png\"></p>\n<h2 id=\"4-接口函数的调用\"><a href=\"#4-接口函数的调用\" class=\"headerlink\" title=\"4.接口函数的调用\"></a>4.接口函数的调用</h2><p>蓝图通过<code>[接口名](Mesasge)</code>组件来调用接口中的函数，如下图中的Interface1(Message)和Interface2(Message)。</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-27_10-35-51.png\"></p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-27_10-38-13.png\"></p>\n<p>接口的使用需要指定使用的接口是哪个蓝图类中实现的接口和接口需要传入的参数。在蓝图类的My Blueprint/Variables栏是可以搜索到我们自己创建的蓝图类的，通过过去蓝图类的引用便可以指定接口函数的实现者了。当然我们也可以使用Get All Actors with Interface组件来获取实现了指定接口的所有蓝图类，然后再对这些蓝图类中实现的函数进行调用。</p>\n<h1 id=\"十、蓝图函数库\"><a href=\"#十、蓝图函数库\" class=\"headerlink\" title=\"十、蓝图函数库\"></a>十、蓝图函数库</h1><p><font color=\"red\"> 蓝图函数库是一个可以被所有蓝图类调用的函数集合，蓝图函数库里的方法全部都被定义为静态方法</font>，用于定义一些不与特定游戏对象绑定的功能性函数的实现。</p>\n<h2 id=\"1-创建蓝图函数库\"><a href=\"#1-创建蓝图函数库\" class=\"headerlink\" title=\"1.创建蓝图函数库\"></a>1.创建蓝图函数库</h2><p>创建蓝图函数库的方式和创建结构体类似，在Content Browser中右键-&gt;Create Advanced Assect/Blueprint栏-&gt;Bluprint Function LiberLibrary。</p>\n<h2 id=\"2-实现蓝图函数库里的函数\"><a href=\"#2-实现蓝图函数库里的函数\" class=\"headerlink\" title=\"2.实现蓝图函数库里的函数\"></a>2.实现蓝图函数库里的函数</h2><p>和结构体一样，创建好的蓝图函数库UE4会创建一个新的界面用于编辑库里函数；</p>\n<ul>\n<li>在My Blueprint/Functions栏可以申明函数</li>\n<li>在My Blueprint/Local Variables栏可以生命局部变量，在其Details中可以设置局部变量默认值；</li>\n<li>在对应函数的Details/Input和Output栏可以分别设置函数的输入输出参数</li>\n<li>在脚本编辑区可以实现函数逻辑。</li>\n</ul>\n<h2 id=\"3-使用蓝图函数库里的函数\"><a href=\"#3-使用蓝图函数库里的函数\" class=\"headerlink\" title=\"3.使用蓝图函数库里的函数\"></a>3.使用蓝图函数库里的函数</h2><p>要使用蓝图函数库里的函数，可直接在脚本编辑区右键输入函数名即可在Class栏中看到蓝图函数库里的函数了。</p>\n<h1 id=\"十一、蓝图宏库\"><a href=\"#十一、蓝图宏库\" class=\"headerlink\" title=\"十一、蓝图宏库\"></a>十一、蓝图宏库</h1><p>宏在UE4中几乎无处不在，蓝图宏库是开发者使用蓝图自定义的一系列的宏的容器，蓝图宏库和蓝图函数库一样可以定义多个宏；</p>\n<ul>\n<li>蓝图宏库与蓝图函数库不同的是，蓝图宏库中的宏是在预编译过程中完成处理的，即蓝图宏库不需要编译；</li>\n<li>自定义的宏，可以有任意数量的输入输出引脚，即一个宏可以没有输出引脚，这样的宏可以只进行数据处理，一个宏也可以有多个输入输出引脚，这样的宏可以根据不同的逻辑选择不同的执行流，而蓝图函数库中的函数必须有且只有一个输入和一个输出引脚；</li>\n<li>与函数不同，宏中不可以再定义成员变量，即宏只负责处理逻辑，不提供暂存能力。</li>\n</ul>\n<h2 id=\"1-创建蓝图宏库\"><a href=\"#1-创建蓝图宏库\" class=\"headerlink\" title=\"1.创建蓝图宏库\"></a>1.创建蓝图宏库</h2><p>宏库的创建与函数库的创建是一样的，在Content Browser中右键-&gt;Create Advanced Assect/Blueprint栏-&gt;Bluprint Macro LiberLibrary。</p>\n<h2 id=\"2-蓝图宏声明\"><a href=\"#2-蓝图宏声明\" class=\"headerlink\" title=\"2.蓝图宏声明\"></a>2.蓝图宏声明</h2><ul>\n<li>在My Blueprint/Macro中可以声明一个宏；</li>\n<li>在指定宏的Details/Inputs和Outputs中可以定义输入与输出引脚和参数。</li>\n</ul>\n<h2 id=\"3-蓝图宏的使用\"><a href=\"#3-蓝图宏的使用\" class=\"headerlink\" title=\"3.蓝图宏的使用\"></a>3.蓝图宏的使用</h2><p>和蓝图函数的使用方法一致。</p>\n<h2 id=\"4-自定义流程控制\"><a href=\"#4-自定义流程控制\" class=\"headerlink\" title=\"4.自定义流程控制\"></a>4.自定义流程控制</h2><p>除了蓝图提供给我们的条件语句和循环语句等流程控制语句外，我还可以使用宏编写自己的流程控制，因为宏可以有多个输入和输出引脚，使用方法就是使用宏的形式定义自己的流程控制逻辑，通过不同的输入给予不同输出，即可达到自定义流程控制的目的。</p>\n<h1 id=\"十二、事件\"><a href=\"#十二、事件\" class=\"headerlink\" title=\"十二、事件\"></a>十二、事件</h1><p>除了UE4蓝图中给我们提供大量的预定义事件，我也可以自定义事件。</p>\n<h2 id=\"1-事件的定义\"><a href=\"#1-事件的定义\" class=\"headerlink\" title=\"1.事件的定义\"></a>1.事件的定义</h2><p>事件的定义也很简单，在All Actions for this Buleprint中选择Add Custom Event，便可以创建一个自定义事件的入口，之后通过这个入口实现事件的内部逻辑，一个事件便定义完成。</p>\n<h2 id=\"2-事件的调用\"><a href=\"#2-事件的调用\" class=\"headerlink\" title=\"2.事件的调用\"></a>2.事件的调用</h2><p>事件调用必须通过实现这个事件的蓝图类才可以对其中的事件进行调用。如：</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-27_11-28-43.png\"></p>\n<p>Event Blueprint为实现自定义事件的蓝图类；</p>\n<p>Print Str为自定义事件。</p>\n<h2 id=\"3-事件调度器\"><a href=\"#3-事件调度器\" class=\"headerlink\" title=\"3.事件调度器\"></a>3.事件调度器</h2><p>事件调度器的创建与使用请阅读目录：十七、蓝图类的通信/3.使用事件调度器进行通信</p>\n<h1 id=\"十三、蓝图模块\"><a href=\"#十三、蓝图模块\" class=\"headerlink\" title=\"十三、蓝图模块\"></a>十三、蓝图模块</h1><p>蓝图中可以将一个复杂了逻辑处理合并成一个节点模块，从而简化整体的执行流复杂度，使蓝图的执行流变得简单明了。我们可以将需要合并的执行流多选选中然后右键，即可在Organization栏中通过Collapse Nodes选项来合并执行流。</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-27_11-31-04.png\"></p>\n<p>除了将执行流合并成节点外，蓝图还提供将多个执行流合并成一个函数或一个宏的功能。合并好的模块也可以在Organizition/Expand Node进行模块分离。</p>\n<h1 id=\"十四、角色控制\"><a href=\"#十四、角色控制\" class=\"headerlink\" title=\"十四、角色控制\"></a>十四、角色控制</h1><h2 id=\"1-为角色添加跟随相机\"><a href=\"#1-为角色添加跟随相机\" class=\"headerlink\" title=\"1.为角色添加跟随相机\"></a>1.为角色添加跟随相机</h2><p>相对U3D来说，UE4的相机跟随要简单得多，UE4中直接将相机设置成了蓝图类的组件，当蓝图类时Player时，即可实现相机对Player的跟随了。</p>\n<p>相机跟随需要通过一个物理组件<code>Spring Arm</code>来链接相机和Player，将相机附着在Spring Arm下，即可在Spring Arm的作用下实现相机跟随。</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-24_10-45-29.png\"></p>\n<h2 id=\"2-为角色添加控制器\"><a href=\"#2-为角色添加控制器\" class=\"headerlink\" title=\"2.为角色添加控制器\"></a>2.为角色添加控制器</h2><p>在UE4的游戏制作过程中，我们不难发现当我们运行游戏时，在世界大纲中多出了很多东西，如下图：</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-24_10-53-34.png\"></p>\n<p>其实，UE4为我们提供很多已经预制好的必须品，如上图的PlayerController(角色控制器)、PlayerCameraMenager(角色相机管理器)等。也就是说不可以直接使用UE4预制给我们的角色控制器来控制我们的Player，而不需要自己再去为Player蓝图配置角色控制器了，我们只需将Player的细节面板上的Auto Possess Player设置成Player0即可，Player0即表示本地角色。</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-24_10-53-06.png\"></p>\n<p>需要注意的是，对于角色控制更优的方式是使用<code>Player Start</code>组件去持有Player蓝图类，再通过Player Controller来控制Player Start达到控制角色的目的。</p>\n<h2 id=\"3-自定义游戏模式\"><a href=\"#3-自定义游戏模式\" class=\"headerlink\" title=\"3.自定义游戏模式\"></a>3.自定义游戏模式</h2><p>在我们创建一个UE4工程后，UE4会启用UE4默认的游戏模式<code>GameModeBase</code>，GameModeBase就控制着Player Controller、PlayerCameraMenager、PlayerState等运行时UE4动态生成的一些游戏物体，我们可以通过启用我们自定义的游戏模式来设置这些游戏物体按自己的定义的规则来生成运行。</p>\n<p>游戏模式也是一个蓝图类，创建游戏模式就是创建蓝图类，只是这个蓝图类需要继承自GameModeBase类，继承自GameModeBase类的蓝图就是一个游戏模式蓝图。不过在我们第一此=次打开游戏模式蓝图时，UE4会将游戏模式蓝图识别成一个普通蓝图，而进入普通蓝图的编辑模式，可能是bug吧，此时我们只需将蓝图关闭，再打开一次，UE4便可以识别出游戏模式蓝图了。</p>\n<p>游戏模式蓝图中可以定义自己的游戏模式规则，比如我们可以通过修改Spectator Class选项为自定义的游戏物体，这样在游戏运行时，UE4将不再生成DefaulPawn，而是会生成我们指定的游戏物体。</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80%5CSnipaste_2019-10-24_11-09-34.png\"></p>\n<p>配置好游戏模式后我们还需要让当前项目使用我们自定义的游戏模式，通过Seettings -&gt;Project Settings-&gt;Project/Maps&amp;Modes-&gt;Dfault GameModes，选择我们自己的配置的游戏模式即可让当前项目启用我们自己定义的游戏模式了</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-24_11-12-38.png\"></p>\n<h2 id=\"4-操控角色控制器\"><a href=\"#4-操控角色控制器\" class=\"headerlink\" title=\"4.操控角色控制器\"></a>4.操控角色控制器</h2><p>我们要操控角色控制器就需要配置键盘按键映射，配置好的键盘映射会以函数的形式加入蓝图脚本组件集中。</p>\n<p>我们在Seettings -&gt;Project Settings-&gt;Engine/Input-&gt;Bindings/Axis Mappings设置键盘映射并可以配置映射的值，</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-24_14-55-47.png\"></p>\n<p>配置好键盘映射以后便可以在蓝图脚本中使用这些函数主键来控制我们Player了，控制角色运动的方法很多，我这里以旋转力矩的方式来控制小球运动，具体的控制方法如下：</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-24_15-11-12.png\"></p>\n<p>加入两个键盘映射函数组件(InputAxis MoveF/B,InputAxis MoveL/R)、两个添加角度力矩的组件(Add Torque in Radians,Add Torque in Radians)，但是添加角度力矩组件是需要一个控制目标的，我们需要从左侧的My Blueprint面板的Components中将需要控制的物体Player拖入脚本蓝图中，分别连接到添加角度力矩组件的Target上。</p>\n<p>这里还需要注意的一点是，在我们为Player添加相机时，相机使用的是相对于Player的局部坐标，使用局部坐标的相机会跟随Player旋转，而使用世界坐标的相机将会固定某一个角度跟随Player移动。切换方法为：下拉Spring Arm的细节面板/Transform/Rotation的三角箭头选择切换。</p>\n<p>并且相机默认情况下是启用了物理碰撞的，但大多数情况下我们是不需要让相机出现物理碰撞的，所以我们也应当取消相机的物理碰撞。操作方法为：取消Spring Arm的细节面板/Camera Collision/Do Collision Test选项。</p>\n<p>当然要想比较真实的模拟出物理效果，光这样是不行的，因为默认情况下Player是没有启动物理模拟的，我们需要启用Player的细节面板/Physics/Simulate Physics选项，并且将调节Player的细节面板/Linear Damping(线性摩檫)和Player的细节面板/Angular Damping(旋转摩檫)到适当的值，应为UE4默认是没有旋转摩檫的并且，默认线性摩檫为0.01。</p>\n<h2 id=\"小知识\"><a href=\"#小知识\" class=\"headerlink\" title=\" 小知识\"></a><font color=\"Green\"> 小知识</font></h2><ul>\n<li><font color=\"green\"> 大多数时候我们都需要勾选作用力函数组件的Acel Change选项，如：上面的Add Torque in Radians，勾选了Acel Change选项作用力组件会在作用目标物体时忽略物体的质量因素，因为存在质量影响的话，我们可能需要给一个极大的力才能推动目标物体；</font></li>\n<li><font color=\"green\"> 有时可能默认大小的作用力对目标物体的移动作用达不到我们理想的效果，此时可以先将作用力加倍后在传递给作用力组件，蓝图脚本组件集中提供多种多样的乘积组件，我们上面使用的是float*float组件</font>；</li>\n</ul>\n<h1 id=\"十五、触发器\"><a href=\"#十五、触发器\" class=\"headerlink\" title=\"十五、触发器\"></a>十五、触发器</h1><p>在游戏设计中触发器的使用是非常平凡的，而在蓝图中触发器的实现也并不复杂，我们来看一下具体操作：</p>\n<h2 id=\"1-创建触发器\"><a href=\"#1-创建触发器\" class=\"headerlink\" title=\"1.创建触发器\"></a>1.创建触发器</h2><ul>\n<li>蓝图模式中游戏的一切都是蓝图，触发器也不例外，所以要做一个触发器，首先我们的创建一个蓝图的壳子，并继承自Actor类</li>\n<li>触发器还需要一个极为重要的东西就是碰撞体，当然这里的碰撞体不是具有物理碰撞的网格碰撞体，而是蓝图的物理组件集中的Box Collison，一个没有物理碰撞效果专门用于触发器的盒碰撞体，我们给蓝图类添加这个组件，一个触发器便完成了</li>\n</ul>\n<h2 id=\"2-使用触发器\"><a href=\"#2-使用触发器\" class=\"headerlink\" title=\"2.使用触发器\"></a>2.使用触发器</h2><p>当触发器放置于场景中，有物体进入触发器碰撞盒时，触发器便会出自动发触发Event ActorBeginOverlap时间组件，之后我们便可以进行一系列逻辑操作了。</p>\n<h1 id=\"十六、蓝图类的通信\"><a href=\"#十六、蓝图类的通信\" class=\"headerlink\" title=\"十六、蓝图类的通信\"></a>十六、蓝图类的通信</h1><h2 id=\"1-使用引用进行通信\"><a href=\"#1-使用引用进行通信\" class=\"headerlink\" title=\"1.使用引用进行通信\"></a>1.使用引用进行通信</h2><p>两个蓝图类要想通过引用进行通信，那么其中一个蓝图类就必须拥有另一个蓝图类的引用，如何获取一个蓝图类的引用呢？</p>\n<p>在My Blueprint/Variables栏中添加一个所需要引用的蓝图类类型的变量，勾选它的Details/Variable/Instance Editable选项，就可以在这个蓝图类的实例的Details/Default栏中看到引用变量(如果不勾选是没有default栏的)，如此便可以方便的获取另一个蓝图类的实例的引用了。</p>\n<p>通过引用两个蓝图类之间便可以进行单向的信息传递了。即拥有引用的蓝图类可以获取所引用蓝图的传递过来的信息，反向则不行。</p>\n<h2 id=\"2-使用接口进行通信\"><a href=\"#2-使用接口进行通信\" class=\"headerlink\" title=\"2.使用接口进行通信\"></a>2.使用接口进行通信</h2><p>使用接口进行通信的好处是可以很便利的通过同一事件让各种不同的蓝图做出不同的反应，如：当受到子弹攻击时，墙会反弹子弹，人会受伤，通过接口通信来实现这个效果就是，创建一个受到子弹攻击的接口OnTakeAttack，然后分别让墙和人都继承这个接口并实现不同的效果，如此当受到子弹攻击时，我们便可以通过Get All Actor with Interface来调用实现这些接口的Actor来做出各自的反应。</p>\n<p>接口的实现与使用请阅读目录：九、接口。</p>\n<h2 id=\"3-使用事件调度器通信\"><a href=\"#3-使用事件调度器通信\" class=\"headerlink\" title=\"3.使用事件调度器通信\"></a>3.使用事件调度器通信</h2><p>事件调度器的通信过程是一个调度者与一个或多个被调度者之间的通信过程，类似观察者模式的通信过程。</p>\n<h3 id=\"创建事件调度器\"><a href=\"#创建事件调度器\" class=\"headerlink\" title=\"创建事件调度器\"></a>创建事件调度器</h3><p>使用事件调度器来进行蓝图通信，首先我们需要拥有一个事件调度器；</p>\n<p>事件调度器只能被拥有者调用，所以我们需要在调度者蓝图上创建事件调度器，在My Blueprint/Event Dispatchers栏可以新建一个蓝图调度器，此时这个蓝图便拥有了一个事件调度器，我们可以通过拖拽事件调度器到脚本编辑视图或直接在All Actions for this Blueprint中搜索，可以对事件调度器进行事件绑定(Bind)、事件解绑(Unbind)、解绑全部事件(Unbind all)，直接为事件调度器绑定新事件(Assign)和调用事件调度器(Call)。当一个事件调度器被调用后，与这个事件调度器绑定的事件都会被调用，一次来达到信息传递的目的。</p>\n<h3 id=\"绑定事件\"><a href=\"#绑定事件\" class=\"headerlink\" title=\"绑定事件\"></a>绑定事件</h3><p>调度者要事件调度器调用被调度者的事件，那么被调度者就需要向调度者的事件调度器上绑定事件，通过Bind Event to [事件调度器名]组件来绑定事件到事件调度器上。</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-28_15-51-30.png\"></p>\n<p>Target：输入事件调度器的拥有者对象</p>\n<p>Event：需要绑定的事件</p>\n<p>如此一个基于事件调度器的通信机制便完成了。</p>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"一、蓝图可视化脚本与蓝图系统\"><a href=\"#一、蓝图可视化脚本与蓝图系统\" class=\"headerlink\" title=\"一、蓝图可视化脚本与蓝图系统\"></a>一、蓝图可视化脚本与蓝图系统</h1><h2 id=\"1-蓝图脚本\"><a href=\"#1-蓝图脚本\" class=\"headerlink\" title=\"1.蓝图脚本\"></a>1.蓝图脚本</h2><p>蓝图可视化脚本简称“蓝图”或“蓝图脚本”，是一种需要编译的面向对象的可视化编程语言，蓝图完全集成在UE4中，蓝图通过节点与连线工作。</p>\n<h3 id=\"蓝图脚本的节点\"><a href=\"#蓝图脚本的节点\" class=\"headerlink\" title=\"蓝图脚本的节点\"></a>蓝图脚本的节点</h3><ul>\n<li>触发事件，在蓝图脚本中以红色的节点出现</li>\n<li>函数，在看图脚本中以蓝色的节点出现</li>\n<li>变量，在蓝图脚本中中以黄色节点出现</li>\n</ul>\n<h2 id=\"2-蓝图系统\"><a href=\"#2-蓝图系统\" class=\"headerlink\" title=\"2.蓝图系统\"></a>2.蓝图系统</h2><p>蓝图系统又称“蓝图”或“蓝图类”，蓝图类可以看成是一个包含游戏内容的容器，其中可以包含组件、脚本或可以仅仅包含数据。</p>\n<p>蓝图类有点类似Unity3d中的预设(prefb)，蓝图类可以类似预设一般保存对象状态，可以随时拖入场景中使用，只是在其他功能上不如预设，如预设在U3D中的打包中可以发挥出优秀的效果，但是蓝图类只能作为容器使用。</p>\n<p><font color=\"red\"> 蓝图类包含蓝图脚本，每一个蓝图类都包含一个默认的蓝图脚本。</font></p>\n<h3 id=\"蓝图类的分类\"><a href=\"#蓝图类的分类\" class=\"headerlink\" title=\"蓝图类的分类\"></a>蓝图类的分类</h3><ul>\n<li><strong>关卡蓝图</strong>：关卡蓝图在每个Level中只能存在一个，负责整个关卡的运行逻辑，关卡的初始化，帧更新都在关卡蓝图里进行；</li>\n<li><strong>普通蓝图</strong>：普通蓝图就是UE4的预设，在普通蓝图中我们可以对其中的对象进行一些的配置，如设置网格，贴图，粒子特效，添加相机，添加物理材质和挂载蓝图脚本等等；</li>\n<li><strong>游戏模式蓝图</strong>：UE4中游戏模式也是以蓝图的形式存在的，游戏模式蓝图控制一系列游戏的规则；</li>\n<li><strong>材质蓝图</strong>：在UE4中贴图材质也是蓝图的形式存在的，在材质蓝图中我们可以如同建模软件一般对材质进行一系列更高级的材质配置，如下图的一个简单示例：</li>\n</ul>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-24_09-41-27.png\"></p>\n<h2 id=\"4-创建蓝图\"><a href=\"#4-创建蓝图\" class=\"headerlink\" title=\"4.创建蓝图\"></a>4.创建蓝图</h2><p>创建蓝图的方法很多，这里介绍比较常用的方法</p>\n<ul>\n<li>可以直接在Content Browser(内容浏览器)中右键创建一个空的蓝图类，空蓝图除了包含一个根组件外不再包含其他东西，当我们在空蓝图中创建了对象后可以通过拖拽的方式将对象拖动到根组件位置处，用游戏对象替换根组件作为根组件，这样创建空蓝图时的白色小球就会消失；</li>\n<li>在World Outliner(世界大纲)中选中游戏对象，可以通过工具栏中的Blueprints工具中的下面两个选项创建一个包含所选内容的蓝图类；</li>\n</ul>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-24_09-51-55.png\"></p>\n<ul>\n<li>通过Blueprints工具的New Empty Blueprint Class也可以直接创建空蓝图类；</li>\n<li>然而关卡蓝图似乎只能通过Blueprints工具的Open Blueprint Class打开。</li>\n</ul>\n<h1 id=\"二、变量与对象引用\"><a href=\"#二、变量与对象引用\" class=\"headerlink\" title=\"二、变量与对象引用\"></a>二、变量与对象引用</h1><h2 id=\"1-在蓝图中创建变量\"><a href=\"#1-在蓝图中创建变量\" class=\"headerlink\" title=\"1.在蓝图中创建变量\"></a>1.在蓝图中创建变量</h2><p>在蓝图中创建变量的方式有两种，其一：直接点击My BluePrint/Variables/+Variable，默认创建bool行的变量，可以点击变量前的色块更换变量类型。</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-25_17-18-23.png\"></p>\n<p>其二：在蓝图脚本区域右键-&gt;输入Get New Var，可以直接在蓝图脚本中以节点的形式创建变量，在右侧细节面板中设置变量的值。</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-25_17-23-27.png\"></p>\n<p>所有创建好的变量都会在My Blueprint面板Variables栏中显示。</p>\n<p><font color=\"red\"> 在创建好的变量的Details/Variable/Variable Type选项中可以设置变量为普通变量、数组、Set容器和Map容器。</font></p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-27_11-01-39.png\"></p>\n<h2 id=\"2-在蓝图中使用变量\"><a href=\"#2-在蓝图中使用变量\" class=\"headerlink\" title=\"2.在蓝图中使用变量\"></a>2.在蓝图中使用变量</h2><p>可以直接在蓝图脚本区域右键-&gt;输入Get/Set [变量名]即可获取变量的获取/设置组件，也可以直接从左侧的My Blueprint面板Variables栏中拖拽变量到蓝图脚本区域选择Get/Set。</p>\n<h2 id=\"3-生成时公开与私有变量\"><a href=\"#3-生成时公开与私有变量\" class=\"headerlink\" title=\"3.生成时公开与私有变量\"></a>3.生成时公开与私有变量</h2><p>蓝图中的公有与私有与程序中的公有私有有一些不同，蓝图中只分为生成时公开和私有两种访问权限。</p>\n<h3 id=\"生成时公开-Expose-on-Spawn\"><a href=\"#生成时公开-Expose-on-Spawn\" class=\"headerlink\" title=\"生成时公开(Expose on Spawn)\"></a>生成时公开(Expose on Spawn)</h3><p>勾选生成时公开后，在蓝图类使用Spawn Actor from Class组件生成蓝图类实例时，勾选生成时公开的变量将可以接受外部值输入。<br><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-28_16-45-41.png\"></p>\n<p>如上图可以看到勾选生成时公开的变量会以输入接口的形式出现在Spawn Actor from Class节点里。这里需要注意的是，勾选Expose on Spawn，还需要勾选Instance Editable，否则会报警告。</p>\n<h3 id=\"私有变量-Private\"><a href=\"#私有变量-Private\" class=\"headerlink\" title=\"私有变量(Private)\"></a>私有变量(Private)</h3><p>设置成私有变量的变量只能在蓝图类里访问，蓝图类的外部实例也无法访问这个变量，如上图，变量L没有设置成私有，所以可以通过Spawn Actor from Class组件生成的实例访问这个变量，而设置成私有的K变量搜索不到Set K节点。</p>\n<h2 id=\"3-在蓝图中使用组件引用\"><a href=\"#3-在蓝图中使用组件引用\" class=\"headerlink\" title=\"3.在蓝图中使用组件引用\"></a>3.在蓝图中使用组件引用</h2><p>很多时候我们需要调节自身Actor上的组件的某些参数，那么我们就需要获得这个组件的引用以便获取组件上的参数进行调节，那么我们如何获得组件的引用呢？</p>\n<p>其实方法也很简单，在My Blueprint/Variabales下有一个子栏“Components”其中存放着当前Actor上的所有的组件的引用，使用方法就是直接将需要的组件引用拖拽到蓝图脚本区域即可。获得了组件引用我们就可以通过引用使用不同的方法获取组件上的不同的参数了。</p>\n<h2 id=\"4-动态获取世界大纲中的Actor\"><a href=\"#4-动态获取世界大纲中的Actor\" class=\"headerlink\" title=\"4.动态获取世界大纲中的Actor\"></a>4.动态获取世界大纲中的Actor</h2><p>在蓝图脚本中有四个方法获取外部Actor：</p>\n<ul>\n<li>Get All Actor of Class：通过类型来获取外部Actor</li>\n</ul>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-25_18-31-16.png\"></p>\n<ul>\n<li>Get All Actor with Tag：通过标签来获取外部Actor</li>\n</ul>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-25_18-31-23.png\"></p>\n<ul>\n<li>Get All Actor with Interface：通过外部接口在获取外部Actor</li>\n</ul>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-25_18-31-36.png\"></p>\n<ul>\n<li>Get Actors：通过层来获取Actor</li>\n</ul>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-25_18-31-47.png\"></p>\n<h1 id=\"三、蓝图的数据类型\"><a href=\"#三、蓝图的数据类型\" class=\"headerlink\" title=\"三、蓝图的数据类型\"></a>三、蓝图的数据类型</h1><h2 id=\"1-5个基本数据类型\"><a href=\"#1-5个基本数据类型\" class=\"headerlink\" title=\"1.5个基本数据类型\"></a>1.5个基本数据类型</h2><p>UE4蓝图中基本数据类型只有5个，需要注意的是蓝图中没有char、double、short、long等数据类型，在C++与蓝图的配合使用时需要注意这些类型的变量。</p>\n<h3 id=\"Boolean\"><a href=\"#Boolean\" class=\"headerlink\" title=\"Boolean\"></a>Boolean</h3><h3 id=\"Byte\"><a href=\"#Byte\" class=\"headerlink\" title=\"Byte\"></a>Byte</h3><p>8位，一字节，0-255。</p>\n<h3 id=\"Integer\"><a href=\"#Integer\" class=\"headerlink\" title=\"Integer\"></a>Integer</h3><p>32位整型，四字节。</p>\n<h3 id=\"Integer64\"><a href=\"#Integer64\" class=\"headerlink\" title=\"Integer64\"></a>Integer64</h3><p>64位整型，八字节，能存储更大的数。</p>\n<h3 id=\"Float\"><a href=\"#Float\" class=\"headerlink\" title=\"Float\"></a>Float</h3><p>32位单精度浮点型，其中1符号位、8指数位、23数值位，UE4中默认保留小数点后6位。UE4中只有Float类型没有Double类型。</p>\n<h2 id=\"2-3种字符串\"><a href=\"#2-3种字符串\" class=\"headerlink\" title=\"2.3种字符串\"></a>2.3种字符串</h2><h3 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h3><p>蓝图中String类型就是蓝图C++中的FString类型，普通字符串，可以对其中的字符进行增删查改。</p>\n<h3 id=\"Name\"><a href=\"#Name\" class=\"headerlink\" title=\"Name\"></a>Name</h3><p>Name是一种固定字符串类型，变量初始化以后不能在对其中的内容进行修改，且Name类型的字符串不区分大小写，多用于作为全局变量来唯一标识对象。Name类型的字符串在运行过程中存储于内存的字符串表中，使用效率高。</p>\n<h3 id=\"Text\"><a href=\"#Text\" class=\"headerlink\" title=\"Text\"></a>Text</h3><p>Text是String的长度加强版，通常用于存储一段文字并可以进行国际化处理。</p>\n<h2 id=\"3-Vector-维度向量\"><a href=\"#3-Vector-维度向量\" class=\"headerlink\" title=\"3.Vector(维度向量)\"></a>3.Vector(维度向量)</h2><h3 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h3><p>默认创建的Vector是Vector 3D，即三维量，包含x、y、z三个值，可以表示任何任何三维量，如：三维坐标和RGB等。</p>\n<h3 id=\"Vector-2D-和Vector-4\"><a href=\"#Vector-2D-和Vector-4\" class=\"headerlink\" title=\"Vector 2D 和Vector 4\"></a>Vector 2D 和Vector 4</h3><p>Vector 2D就是二维量，Vector 4就是四维量，常用于表示四元素。</p>\n<h3 id=\"Two-Vectors\"><a href=\"#Two-Vectors\" class=\"headerlink\" title=\"Two Vectors\"></a>Two Vectors</h3><p>Two Vectors就是一个关于Vector的pair(对组)，pair在C++的STL种较为常用，是一个只包含两个元素的容器。</p>\n<h2 id=\"4-Rotator-三维旋转量\"><a href=\"#4-Rotator-三维旋转量\" class=\"headerlink\" title=\"4.Rotator(三维旋转量)\"></a>4.Rotator(三维旋转量)</h2><p>包含：</p>\n<p>x：roll，翻滚角，以x为轴，进行yz平面的旋转；</p>\n<p>y：pitch，俯仰角，以y为轴，进行xz平面的旋转；</p>\n<p>z：yaw，航向角，以z为轴，进行xy平面的旋转。</p>\n<h2 id=\"5-Transform\"><a href=\"#5-Transform\" class=\"headerlink\" title=\"5.Transform\"></a>5.Transform</h2><p>Transfrom类型是一个3*3的矩阵，包含Location、Rotation和Scale三个三维向量。</p>\n<h1 id=\"四、条件语句\"><a href=\"#四、条件语句\" class=\"headerlink\" title=\"四、条件语句\"></a>四、条件语句</h1><h2 id=\"1-Branch-if条件判断\"><a href=\"#1-Branch-if条件判断\" class=\"headerlink\" title=\"1.Branch(if条件判断)\"></a>1.Branch(if条件判断)</h2><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-25_18-39-15.png\"></p>\n<p>传入一个bool值，进行分流，通常和比较组件配合使用，如：“==”、“&gt;”等。</p>\n<h2 id=\"2-Switch\"><a href=\"#2-Switch\" class=\"headerlink\" title=\"2.Switch\"></a>2.Switch</h2><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-25_19-14-34.png\"></p>\n<ul>\n<li>Selection：case判断的变量；</li>\n<li>Default：默认执行分支；</li>\n<li>Add pin：添加执行分支。</li>\n</ul>\n<h1 id=\"五、循环语句\"><a href=\"#五、循环语句\" class=\"headerlink\" title=\"五、循环语句\"></a>五、循环语句</h1><h2 id=\"1-For-Loop-for循环\"><a href=\"#1-For-Loop-for循环\" class=\"headerlink\" title=\"1.For Loop(for循环)\"></a>1.For Loop(for循环)</h2><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-25_18-39-35.png\"></p>\n<ul>\n<li>First Index/Last Index：提供循环的次数；</li>\n<li>Loop Body：循环体执行分支；</li>\n<li>Index：返回当前循环索引；</li>\n<li>Conpleted：循环完毕后执行分支。</li>\n</ul>\n<h2 id=\"2-For-Loop-whit-Break-可跳出的for循环\"><a href=\"#2-For-Loop-whit-Break-可跳出的for循环\" class=\"headerlink\" title=\"2.For Loop whit Break(可跳出的for循环)\"></a>2.For Loop whit Break(可跳出的for循环)</h2><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-25_18-39-52.png\"></p>\n<p>使用方法和For Loop类似。</p>\n<h2 id=\"3-For-Each-Loop-数组遍历\"><a href=\"#3-For-Each-Loop-数组遍历\" class=\"headerlink\" title=\"3.For Each Loop(数组遍历)\"></a>3.For Each Loop(数组遍历)</h2><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-25_18-40-45.png\"></p>\n<p>专门有用遍历数组的循环。</p>\n<ul>\n<li>Array：需要遍历的数组；</li>\n<li>Loop Body：循环体分支；</li>\n<li>Array Element：遍历的数组元素；</li>\n<li>Array Index：当前索引；</li>\n<li>Completed：遍历结束执行分支。</li>\n</ul>\n<h2 id=\"4-For-Each-Loop-with-Break-可跳出的数组遍历\"><a href=\"#4-For-Each-Loop-with-Break-可跳出的数组遍历\" class=\"headerlink\" title=\"4.For Each Loop with Break(可跳出的数组遍历)\"></a>4.For Each Loop with Break(可跳出的数组遍历)</h2><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-25_18-40-54.png\"></p>\n<p>用法和Foreach Loop一样，只是多了一个跳出执行分支。</p>\n<h2 id=\"5-Reverse-for-Each-Loop-反向数组遍历\"><a href=\"#5-Reverse-for-Each-Loop-反向数组遍历\" class=\"headerlink\" title=\"5.Reverse for Each Loop(反向数组遍历)\"></a>5.Reverse for Each Loop(反向数组遍历)</h2><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-25_18-40-59.png\"></p>\n<h2 id=\"6-While-Loop-while循环\"><a href=\"#6-While-Loop-while循环\" class=\"headerlink\" title=\"6.While Loop(while循环)\"></a>6.While Loop(while循环)</h2><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-27_11-04-21.png\"></p>\n<h1 id=\"六、数组\"><a href=\"#六、数组\" class=\"headerlink\" title=\"六、数组\"></a>六、数组</h1><h2 id=\"1-创建数组\"><a href=\"#1-创建数组\" class=\"headerlink\" title=\"1.创建数组\"></a>1.创建数组</h2><p>创建数组要比创建变量多一个步骤，首先我们需要创建一个变量，然后再将这个变量的Details/Varialble Type选项的右侧色块选择九宫格，即可将对应变量转换成对应类型的数组。</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_11-02-54.png\"></p>\n<h2 id=\"2-为数组赋值\"><a href=\"#2-为数组赋值\" class=\"headerlink\" title=\"2.为数组赋值\"></a>2.为数组赋值</h2><h3 id=\"Add-Array\"><a href=\"#Add-Array\" class=\"headerlink\" title=\"Add(Array)\"></a>Add(Array)</h3><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_11-21-48.png\"></p>\n<p>传入一个数组和一个元素即可通过Add(Array)组件为组数赋值</p>\n<p>如：</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_11-24-33.png\"></p>\n<p>循环完毕后数组Array内便存储有0-10的是个int型元素。</p>\n<h2 id=\"3-获取元素\"><a href=\"#3-获取元素\" class=\"headerlink\" title=\"3.获取元素\"></a>3.获取元素</h2><h3 id=\"Get-a-copy\"><a href=\"#Get-a-copy\" class=\"headerlink\" title=\"Get(a copy)\"></a>Get(a copy)</h3><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_12-07-50.png\"></p>\n<p>获取指定索引的元素的拷贝。</p>\n<h3 id=\"Get-a-ref\"><a href=\"#Get-a-ref\" class=\"headerlink\" title=\"Get(a ref)\"></a>Get(a ref)</h3><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_12-07-44.png\"></p>\n<p>获取指定索引的元素的引用。</p>\n<h2 id=\"4-插入元素\"><a href=\"#4-插入元素\" class=\"headerlink\" title=\"4.插入元素\"></a>4.插入元素</h2><h3 id=\"Add-Aray\"><a href=\"#Add-Aray\" class=\"headerlink\" title=\"Add(Aray)\"></a>Add(Aray)</h3><p>直接在数组的末尾插入元素的方法也是使用Add(Array)组件，Add(Array)组件的的插入过程就是直接在数组的末尾插入元素。</p>\n<h3 id=\"Insert\"><a href=\"#Insert\" class=\"headerlink\" title=\"Insert\"></a>Insert</h3><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_11-37-55.png\"></p>\n<p>指定位置插入使用Insert组件，输入参数从上至下依次为目标数组、要插入的元素、目标插入的索引位置。</p>\n<p>当要使用Insert组件在数组末尾插入，而又不知道数组大小时，可以使用Last Index组件直接获取输入数组的尾索引，当然直接使用只会在最后一个索引位置插入，而使最后一位元素向后移动一位，而达不到在数组尾部插入的效果，所以需要加一食用。</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_11-46-46.png\"></p>\n<h3 id=\"Set-Array-Elem\"><a href=\"#Set-Array-Elem\" class=\"headerlink\" title=\"Set Array Elem\"></a>Set Array Elem</h3><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_12-25-34.png\"></p>\n<p>设置输入数组指定索引的元素的值，Size to Fit选项可以设置如果指定索引不存在时数组自动扩充size大小。</p>\n<h2 id=\"5-查找元素\"><a href=\"#5-查找元素\" class=\"headerlink\" title=\"5.查找元素\"></a>5.查找元素</h2><h3 id=\"Contains-Item\"><a href=\"#Contains-Item\" class=\"headerlink\" title=\"Contains Item\"></a>Contains Item</h3><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_11-50-31.png\"></p>\n<p>Contains Item组件可以查找指定数组中是否包含某一元素，但是Contains Item只返回bool的判断结果，不会返回目标的索引值。</p>\n<h3 id=\"Find-Item\"><a href=\"#Find-Item\" class=\"headerlink\" title=\"Find Item\"></a>Find Item</h3><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Git/Temp/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-59-54.png\"></p>\n<p>Find Item则是从输入数组中查找指定元素并返回第一次查找到该元素的索引值。</p>\n<h2 id=\"6-删除元素\"><a href=\"#6-删除元素\" class=\"headerlink\" title=\"6.删除元素\"></a>6.删除元素</h2><h3 id=\"Remove-Index\"><a href=\"#Remove-Index\" class=\"headerlink\" title=\"Remove Index\"></a>Remove Index</h3><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_12-12-59.png\"></p>\n<p>通过索引删除元素</p>\n<h3 id=\"Remove-Item\"><a href=\"#Remove-Item\" class=\"headerlink\" title=\"Remove Item\"></a>Remove Item</h3><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_12-21-30.png\"></p>\n<p>从输入数组中移除指定元素，Remove Item会删除数组中所有指定的元素，如果删除成功则返回true，失败则返回false。</p>\n<h2 id=\"7-筛选元素\"><a href=\"#7-筛选元素\" class=\"headerlink\" title=\"7.筛选元素\"></a>7.筛选元素</h2><h3 id=\"Filter-Array\"><a href=\"#Filter-Array\" class=\"headerlink\" title=\"Filter Array\"></a>Filter Array</h3><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_11-53-49.png\"></p>\n<p>过滤数组可以按类型来筛选数组元素，用于父类型数组存储子类型元素时进行类型筛选，如：Actor数组筛选MyClass类型元素，Filter Array返回一个筛选后的新数组。</p>\n<h2 id=\"8-清空数组\"><a href=\"#8-清空数组\" class=\"headerlink\" title=\"8.清空数组\"></a>8.清空数组</h2><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_11-42-24.png\"></p>\n<p>使用Clear组件可以将数组内的元素全部清空。</p>\n<h2 id=\"9-获取数组长度\"><a href=\"#9-获取数组长度\" class=\"headerlink\" title=\"9.获取数组长度\"></a>9.获取数组长度</h2><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_12-29-34.png\"></p>\n<h2 id=\"10-设置数组长度\"><a href=\"#10-设置数组长度\" class=\"headerlink\" title=\"10.设置数组长度\"></a>10.设置数组长度</h2><p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_12-30-00.png\"></p>\n<h1 id=\"七、结构体\"><a href=\"#七、结构体\" class=\"headerlink\" title=\"七、结构体\"></a>七、结构体</h1><h2 id=\"1-结构体创建\"><a href=\"#1-结构体创建\" class=\"headerlink\" title=\"1.结构体创建\"></a>1.结构体创建</h2><p>蓝图中结构体的创建是没办法在蓝图脚本视图中创建的，UE4蓝图中结构体是与蓝图脚本同级的蓝图类，创建蓝图结构体的方法：在Content Browser中右键-&gt;Create Advanced Assect/Blueprint栏-&gt;Structure，即可创建一个结构体，创建出来的结构体默认拥有一个bool值得成员变量。</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_17-38-54.png\"></p>\n<h2 id=\"2-定义成员变量\"><a href=\"#2-定义成员变量\" class=\"headerlink\" title=\"2.定义成员变量\"></a>2.定义成员变量</h2><p>蓝图中得结构体只能创建成员变量，不能创建成员函数，成员变量可以直接设置默认值。</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-26_19-59-29.png\"></p>\n<h2 id=\"3-结构的使用\"><a href=\"#3-结构的使用\" class=\"headerlink\" title=\"3.结构的使用\"></a>3.结构的使用</h2><p>将结构体创建好以后便可以直接在蓝图脚本中搜索到并使用了。</p>\n<h1 id=\"八、枚举\"><a href=\"#八、枚举\" class=\"headerlink\" title=\"八、枚举\"></a>八、枚举</h1><h2 id=\"1-枚举的创建\"><a href=\"#1-枚举的创建\" class=\"headerlink\" title=\"1.枚举的创建\"></a>1.枚举的创建</h2><p>枚举的创建和使用和结构体区别不大，创建方式一如结构体一般,Content Browser中右键-&gt;Create Advanced Assect/Blueprint栏-&gt;Enumeration，创建好后UE4也会在一个新的视图中对枚举进行编辑，枚举的编辑操作也相当简单，只有向枚举中添加与删除元素的操作，这些元素都可以添加注解提示，枚举也可以添加整个枚举的注解提示。</p>\n<h2 id=\"2-枚举的使用\"><a href=\"#2-枚举的使用\" class=\"headerlink\" title=\"2.枚举的使用\"></a>2.枚举的使用</h2><p>枚举的使用就如同变量的使用一般，没有什么可说的。</p>\n<h1 id=\"九、接口\"><a href=\"#九、接口\" class=\"headerlink\" title=\"九、接口\"></a>九、接口</h1><h2 id=\"1-接口的定义\"><a href=\"#1-接口的定义\" class=\"headerlink\" title=\"1.接口的定义\"></a>1.接口的定义</h2><p>接口的定义和和蓝图函数库，蓝图宏库一样，但是接口的不像函数库和宏库一般可以再一个蓝图类中定义多个函数和宏，接口就是一个蓝图类，并且接口的编辑界面及其简约，可编辑视图只有一个My Blueprint和一个Detials,在My Blueprint/Functions栏可以新建接口函数，在对应的接口函数的Details/Graph可以设置一些接口函数的描述和Const属性，在Details/Inputs和Outputs栏可以设置接口函数的输入与输出参数。</p>\n<h2 id=\"2-接口的继承\"><a href=\"#2-接口的继承\" class=\"headerlink\" title=\"2.接口的继承\"></a>2.接口的继承</h2><p>接口是一个抽象蓝图，接口的实现必须通过继承接口的蓝图来实现，在蓝图中接口继承通过Toolbar/Class Settings/Interfaces栏即可添加接口到当前蓝图类是指继承此接口。</p>\n<h2 id=\"3-接口的实现\"><a href=\"#3-接口的实现\" class=\"headerlink\" title=\"3.接口的实现\"></a>3.接口的实现</h2><h3 id=\"无返回值的接口实现\"><a href=\"#无返回值的接口实现\" class=\"headerlink\" title=\"无返回值的接口实现\"></a>无返回值的接口实现</h3><p>在一个蓝图继承了一个无返回值得接口后，这个接口将以事件的形式出现在这个蓝图类的All Actions for this Blueprint里</p>\n<p>如：</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-27_10-32-38.png\"></p>\n<p>蓝图以这个事件作为接口函数的入口，以此节点开始便可以开始实现各个蓝图类各自继承的接口函数的逻辑了。</p>\n<h3 id=\"有返回值得接口实现\"><a href=\"#有返回值得接口实现\" class=\"headerlink\" title=\"有返回值得接口实现\"></a>有返回值得接口实现</h3><p>有返回值的接口不会以事件的形式出现在Add Event里，而是会直接出现在My Blueprint/Interface栏里，我们双击即可打开接口函数的编辑视图，在视图中实现接口即可。</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-28_17-00-10.png\"></p>\n<h2 id=\"4-接口函数的调用\"><a href=\"#4-接口函数的调用\" class=\"headerlink\" title=\"4.接口函数的调用\"></a>4.接口函数的调用</h2><p>蓝图通过<code>[接口名](Mesasge)</code>组件来调用接口中的函数，如下图中的Interface1(Message)和Interface2(Message)。</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-27_10-35-51.png\"></p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-27_10-38-13.png\"></p>\n<p>接口的使用需要指定使用的接口是哪个蓝图类中实现的接口和接口需要传入的参数。在蓝图类的My Blueprint/Variables栏是可以搜索到我们自己创建的蓝图类的，通过过去蓝图类的引用便可以指定接口函数的实现者了。当然我们也可以使用Get All Actors with Interface组件来获取实现了指定接口的所有蓝图类，然后再对这些蓝图类中实现的函数进行调用。</p>\n<h1 id=\"十、蓝图函数库\"><a href=\"#十、蓝图函数库\" class=\"headerlink\" title=\"十、蓝图函数库\"></a>十、蓝图函数库</h1><p><font color=\"red\"> 蓝图函数库是一个可以被所有蓝图类调用的函数集合，蓝图函数库里的方法全部都被定义为静态方法</font>，用于定义一些不与特定游戏对象绑定的功能性函数的实现。</p>\n<h2 id=\"1-创建蓝图函数库\"><a href=\"#1-创建蓝图函数库\" class=\"headerlink\" title=\"1.创建蓝图函数库\"></a>1.创建蓝图函数库</h2><p>创建蓝图函数库的方式和创建结构体类似，在Content Browser中右键-&gt;Create Advanced Assect/Blueprint栏-&gt;Bluprint Function LiberLibrary。</p>\n<h2 id=\"2-实现蓝图函数库里的函数\"><a href=\"#2-实现蓝图函数库里的函数\" class=\"headerlink\" title=\"2.实现蓝图函数库里的函数\"></a>2.实现蓝图函数库里的函数</h2><p>和结构体一样，创建好的蓝图函数库UE4会创建一个新的界面用于编辑库里函数；</p>\n<ul>\n<li>在My Blueprint/Functions栏可以申明函数</li>\n<li>在My Blueprint/Local Variables栏可以生命局部变量，在其Details中可以设置局部变量默认值；</li>\n<li>在对应函数的Details/Input和Output栏可以分别设置函数的输入输出参数</li>\n<li>在脚本编辑区可以实现函数逻辑。</li>\n</ul>\n<h2 id=\"3-使用蓝图函数库里的函数\"><a href=\"#3-使用蓝图函数库里的函数\" class=\"headerlink\" title=\"3.使用蓝图函数库里的函数\"></a>3.使用蓝图函数库里的函数</h2><p>要使用蓝图函数库里的函数，可直接在脚本编辑区右键输入函数名即可在Class栏中看到蓝图函数库里的函数了。</p>\n<h1 id=\"十一、蓝图宏库\"><a href=\"#十一、蓝图宏库\" class=\"headerlink\" title=\"十一、蓝图宏库\"></a>十一、蓝图宏库</h1><p>宏在UE4中几乎无处不在，蓝图宏库是开发者使用蓝图自定义的一系列的宏的容器，蓝图宏库和蓝图函数库一样可以定义多个宏；</p>\n<ul>\n<li>蓝图宏库与蓝图函数库不同的是，蓝图宏库中的宏是在预编译过程中完成处理的，即蓝图宏库不需要编译；</li>\n<li>自定义的宏，可以有任意数量的输入输出引脚，即一个宏可以没有输出引脚，这样的宏可以只进行数据处理，一个宏也可以有多个输入输出引脚，这样的宏可以根据不同的逻辑选择不同的执行流，而蓝图函数库中的函数必须有且只有一个输入和一个输出引脚；</li>\n<li>与函数不同，宏中不可以再定义成员变量，即宏只负责处理逻辑，不提供暂存能力。</li>\n</ul>\n<h2 id=\"1-创建蓝图宏库\"><a href=\"#1-创建蓝图宏库\" class=\"headerlink\" title=\"1.创建蓝图宏库\"></a>1.创建蓝图宏库</h2><p>宏库的创建与函数库的创建是一样的，在Content Browser中右键-&gt;Create Advanced Assect/Blueprint栏-&gt;Bluprint Macro LiberLibrary。</p>\n<h2 id=\"2-蓝图宏声明\"><a href=\"#2-蓝图宏声明\" class=\"headerlink\" title=\"2.蓝图宏声明\"></a>2.蓝图宏声明</h2><ul>\n<li>在My Blueprint/Macro中可以声明一个宏；</li>\n<li>在指定宏的Details/Inputs和Outputs中可以定义输入与输出引脚和参数。</li>\n</ul>\n<h2 id=\"3-蓝图宏的使用\"><a href=\"#3-蓝图宏的使用\" class=\"headerlink\" title=\"3.蓝图宏的使用\"></a>3.蓝图宏的使用</h2><p>和蓝图函数的使用方法一致。</p>\n<h2 id=\"4-自定义流程控制\"><a href=\"#4-自定义流程控制\" class=\"headerlink\" title=\"4.自定义流程控制\"></a>4.自定义流程控制</h2><p>除了蓝图提供给我们的条件语句和循环语句等流程控制语句外，我还可以使用宏编写自己的流程控制，因为宏可以有多个输入和输出引脚，使用方法就是使用宏的形式定义自己的流程控制逻辑，通过不同的输入给予不同输出，即可达到自定义流程控制的目的。</p>\n<h1 id=\"十二、事件\"><a href=\"#十二、事件\" class=\"headerlink\" title=\"十二、事件\"></a>十二、事件</h1><p>除了UE4蓝图中给我们提供大量的预定义事件，我也可以自定义事件。</p>\n<h2 id=\"1-事件的定义\"><a href=\"#1-事件的定义\" class=\"headerlink\" title=\"1.事件的定义\"></a>1.事件的定义</h2><p>事件的定义也很简单，在All Actions for this Buleprint中选择Add Custom Event，便可以创建一个自定义事件的入口，之后通过这个入口实现事件的内部逻辑，一个事件便定义完成。</p>\n<h2 id=\"2-事件的调用\"><a href=\"#2-事件的调用\" class=\"headerlink\" title=\"2.事件的调用\"></a>2.事件的调用</h2><p>事件调用必须通过实现这个事件的蓝图类才可以对其中的事件进行调用。如：</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-27_11-28-43.png\"></p>\n<p>Event Blueprint为实现自定义事件的蓝图类；</p>\n<p>Print Str为自定义事件。</p>\n<h2 id=\"3-事件调度器\"><a href=\"#3-事件调度器\" class=\"headerlink\" title=\"3.事件调度器\"></a>3.事件调度器</h2><p>事件调度器的创建与使用请阅读目录：十七、蓝图类的通信/3.使用事件调度器进行通信</p>\n<h1 id=\"十三、蓝图模块\"><a href=\"#十三、蓝图模块\" class=\"headerlink\" title=\"十三、蓝图模块\"></a>十三、蓝图模块</h1><p>蓝图中可以将一个复杂了逻辑处理合并成一个节点模块，从而简化整体的执行流复杂度，使蓝图的执行流变得简单明了。我们可以将需要合并的执行流多选选中然后右键，即可在Organization栏中通过Collapse Nodes选项来合并执行流。</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-27_11-31-04.png\"></p>\n<p>除了将执行流合并成节点外，蓝图还提供将多个执行流合并成一个函数或一个宏的功能。合并好的模块也可以在Organizition/Expand Node进行模块分离。</p>\n<h1 id=\"十四、角色控制\"><a href=\"#十四、角色控制\" class=\"headerlink\" title=\"十四、角色控制\"></a>十四、角色控制</h1><h2 id=\"1-为角色添加跟随相机\"><a href=\"#1-为角色添加跟随相机\" class=\"headerlink\" title=\"1.为角色添加跟随相机\"></a>1.为角色添加跟随相机</h2><p>相对U3D来说，UE4的相机跟随要简单得多，UE4中直接将相机设置成了蓝图类的组件，当蓝图类时Player时，即可实现相机对Player的跟随了。</p>\n<p>相机跟随需要通过一个物理组件<code>Spring Arm</code>来链接相机和Player，将相机附着在Spring Arm下，即可在Spring Arm的作用下实现相机跟随。</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-24_10-45-29.png\"></p>\n<h2 id=\"2-为角色添加控制器\"><a href=\"#2-为角色添加控制器\" class=\"headerlink\" title=\"2.为角色添加控制器\"></a>2.为角色添加控制器</h2><p>在UE4的游戏制作过程中，我们不难发现当我们运行游戏时，在世界大纲中多出了很多东西，如下图：</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-24_10-53-34.png\"></p>\n<p>其实，UE4为我们提供很多已经预制好的必须品，如上图的PlayerController(角色控制器)、PlayerCameraMenager(角色相机管理器)等。也就是说不可以直接使用UE4预制给我们的角色控制器来控制我们的Player，而不需要自己再去为Player蓝图配置角色控制器了，我们只需将Player的细节面板上的Auto Possess Player设置成Player0即可，Player0即表示本地角色。</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-24_10-53-06.png\"></p>\n<p>需要注意的是，对于角色控制更优的方式是使用<code>Player Start</code>组件去持有Player蓝图类，再通过Player Controller来控制Player Start达到控制角色的目的。</p>\n<h2 id=\"3-自定义游戏模式\"><a href=\"#3-自定义游戏模式\" class=\"headerlink\" title=\"3.自定义游戏模式\"></a>3.自定义游戏模式</h2><p>在我们创建一个UE4工程后，UE4会启用UE4默认的游戏模式<code>GameModeBase</code>，GameModeBase就控制着Player Controller、PlayerCameraMenager、PlayerState等运行时UE4动态生成的一些游戏物体，我们可以通过启用我们自定义的游戏模式来设置这些游戏物体按自己的定义的规则来生成运行。</p>\n<p>游戏模式也是一个蓝图类，创建游戏模式就是创建蓝图类，只是这个蓝图类需要继承自GameModeBase类，继承自GameModeBase类的蓝图就是一个游戏模式蓝图。不过在我们第一此=次打开游戏模式蓝图时，UE4会将游戏模式蓝图识别成一个普通蓝图，而进入普通蓝图的编辑模式，可能是bug吧，此时我们只需将蓝图关闭，再打开一次，UE4便可以识别出游戏模式蓝图了。</p>\n<p>游戏模式蓝图中可以定义自己的游戏模式规则，比如我们可以通过修改Spectator Class选项为自定义的游戏物体，这样在游戏运行时，UE4将不再生成DefaulPawn，而是会生成我们指定的游戏物体。</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80%5CSnipaste_2019-10-24_11-09-34.png\"></p>\n<p>配置好游戏模式后我们还需要让当前项目使用我们自定义的游戏模式，通过Seettings -&gt;Project Settings-&gt;Project/Maps&amp;Modes-&gt;Dfault GameModes，选择我们自己的配置的游戏模式即可让当前项目启用我们自己定义的游戏模式了</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-24_11-12-38.png\"></p>\n<h2 id=\"4-操控角色控制器\"><a href=\"#4-操控角色控制器\" class=\"headerlink\" title=\"4.操控角色控制器\"></a>4.操控角色控制器</h2><p>我们要操控角色控制器就需要配置键盘按键映射，配置好的键盘映射会以函数的形式加入蓝图脚本组件集中。</p>\n<p>我们在Seettings -&gt;Project Settings-&gt;Engine/Input-&gt;Bindings/Axis Mappings设置键盘映射并可以配置映射的值，</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-24_14-55-47.png\"></p>\n<p>配置好键盘映射以后便可以在蓝图脚本中使用这些函数主键来控制我们Player了，控制角色运动的方法很多，我这里以旋转力矩的方式来控制小球运动，具体的控制方法如下：</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-24_15-11-12.png\"></p>\n<p>加入两个键盘映射函数组件(InputAxis MoveF/B,InputAxis MoveL/R)、两个添加角度力矩的组件(Add Torque in Radians,Add Torque in Radians)，但是添加角度力矩组件是需要一个控制目标的，我们需要从左侧的My Blueprint面板的Components中将需要控制的物体Player拖入脚本蓝图中，分别连接到添加角度力矩组件的Target上。</p>\n<p>这里还需要注意的一点是，在我们为Player添加相机时，相机使用的是相对于Player的局部坐标，使用局部坐标的相机会跟随Player旋转，而使用世界坐标的相机将会固定某一个角度跟随Player移动。切换方法为：下拉Spring Arm的细节面板/Transform/Rotation的三角箭头选择切换。</p>\n<p>并且相机默认情况下是启用了物理碰撞的，但大多数情况下我们是不需要让相机出现物理碰撞的，所以我们也应当取消相机的物理碰撞。操作方法为：取消Spring Arm的细节面板/Camera Collision/Do Collision Test选项。</p>\n<p>当然要想比较真实的模拟出物理效果，光这样是不行的，因为默认情况下Player是没有启动物理模拟的，我们需要启用Player的细节面板/Physics/Simulate Physics选项，并且将调节Player的细节面板/Linear Damping(线性摩檫)和Player的细节面板/Angular Damping(旋转摩檫)到适当的值，应为UE4默认是没有旋转摩檫的并且，默认线性摩檫为0.01。</p>\n<h2 id=\"小知识\"><a href=\"#小知识\" class=\"headerlink\" title=\" 小知识\"></a><font color=\"Green\"> 小知识</font></h2><ul>\n<li><font color=\"green\"> 大多数时候我们都需要勾选作用力函数组件的Acel Change选项，如：上面的Add Torque in Radians，勾选了Acel Change选项作用力组件会在作用目标物体时忽略物体的质量因素，因为存在质量影响的话，我们可能需要给一个极大的力才能推动目标物体；</font></li>\n<li><font color=\"green\"> 有时可能默认大小的作用力对目标物体的移动作用达不到我们理想的效果，此时可以先将作用力加倍后在传递给作用力组件，蓝图脚本组件集中提供多种多样的乘积组件，我们上面使用的是float*float组件</font>；</li>\n</ul>\n<h1 id=\"十五、触发器\"><a href=\"#十五、触发器\" class=\"headerlink\" title=\"十五、触发器\"></a>十五、触发器</h1><p>在游戏设计中触发器的使用是非常平凡的，而在蓝图中触发器的实现也并不复杂，我们来看一下具体操作：</p>\n<h2 id=\"1-创建触发器\"><a href=\"#1-创建触发器\" class=\"headerlink\" title=\"1.创建触发器\"></a>1.创建触发器</h2><ul>\n<li>蓝图模式中游戏的一切都是蓝图，触发器也不例外，所以要做一个触发器，首先我们的创建一个蓝图的壳子，并继承自Actor类</li>\n<li>触发器还需要一个极为重要的东西就是碰撞体，当然这里的碰撞体不是具有物理碰撞的网格碰撞体，而是蓝图的物理组件集中的Box Collison，一个没有物理碰撞效果专门用于触发器的盒碰撞体，我们给蓝图类添加这个组件，一个触发器便完成了</li>\n</ul>\n<h2 id=\"2-使用触发器\"><a href=\"#2-使用触发器\" class=\"headerlink\" title=\"2.使用触发器\"></a>2.使用触发器</h2><p>当触发器放置于场景中，有物体进入触发器碰撞盒时，触发器便会出自动发触发Event ActorBeginOverlap时间组件，之后我们便可以进行一系列逻辑操作了。</p>\n<h1 id=\"十六、蓝图类的通信\"><a href=\"#十六、蓝图类的通信\" class=\"headerlink\" title=\"十六、蓝图类的通信\"></a>十六、蓝图类的通信</h1><h2 id=\"1-使用引用进行通信\"><a href=\"#1-使用引用进行通信\" class=\"headerlink\" title=\"1.使用引用进行通信\"></a>1.使用引用进行通信</h2><p>两个蓝图类要想通过引用进行通信，那么其中一个蓝图类就必须拥有另一个蓝图类的引用，如何获取一个蓝图类的引用呢？</p>\n<p>在My Blueprint/Variables栏中添加一个所需要引用的蓝图类类型的变量，勾选它的Details/Variable/Instance Editable选项，就可以在这个蓝图类的实例的Details/Default栏中看到引用变量(如果不勾选是没有default栏的)，如此便可以方便的获取另一个蓝图类的实例的引用了。</p>\n<p>通过引用两个蓝图类之间便可以进行单向的信息传递了。即拥有引用的蓝图类可以获取所引用蓝图的传递过来的信息，反向则不行。</p>\n<h2 id=\"2-使用接口进行通信\"><a href=\"#2-使用接口进行通信\" class=\"headerlink\" title=\"2.使用接口进行通信\"></a>2.使用接口进行通信</h2><p>使用接口进行通信的好处是可以很便利的通过同一事件让各种不同的蓝图做出不同的反应，如：当受到子弹攻击时，墙会反弹子弹，人会受伤，通过接口通信来实现这个效果就是，创建一个受到子弹攻击的接口OnTakeAttack，然后分别让墙和人都继承这个接口并实现不同的效果，如此当受到子弹攻击时，我们便可以通过Get All Actor with Interface来调用实现这些接口的Actor来做出各自的反应。</p>\n<p>接口的实现与使用请阅读目录：九、接口。</p>\n<h2 id=\"3-使用事件调度器通信\"><a href=\"#3-使用事件调度器通信\" class=\"headerlink\" title=\"3.使用事件调度器通信\"></a>3.使用事件调度器通信</h2><p>事件调度器的通信过程是一个调度者与一个或多个被调度者之间的通信过程，类似观察者模式的通信过程。</p>\n<h3 id=\"创建事件调度器\"><a href=\"#创建事件调度器\" class=\"headerlink\" title=\"创建事件调度器\"></a>创建事件调度器</h3><p>使用事件调度器来进行蓝图通信，首先我们需要拥有一个事件调度器；</p>\n<p>事件调度器只能被拥有者调用，所以我们需要在调度者蓝图上创建事件调度器，在My Blueprint/Event Dispatchers栏可以新建一个蓝图调度器，此时这个蓝图便拥有了一个事件调度器，我们可以通过拖拽事件调度器到脚本编辑视图或直接在All Actions for this Blueprint中搜索，可以对事件调度器进行事件绑定(Bind)、事件解绑(Unbind)、解绑全部事件(Unbind all)，直接为事件调度器绑定新事件(Assign)和调用事件调度器(Call)。当一个事件调度器被调用后，与这个事件调度器绑定的事件都会被调用，一次来达到信息传递的目的。</p>\n<h3 id=\"绑定事件\"><a href=\"#绑定事件\" class=\"headerlink\" title=\"绑定事件\"></a>绑定事件</h3><p>调度者要事件调度器调用被调度者的事件，那么被调度者就需要向调度者的事件调度器上绑定事件，通过Bind Event to [事件调度器名]组件来绑定事件到事件调度器上。</p>\n<p><img src=\"/2019/10/28/%E3%80%90UE4%E3%80%91UE4%E8%93%9D%E5%9B%BE%E5%9F%BA%E7%A1%80/Snipaste_2019-10-28_15-51-30.png\"></p>\n<p>Target：输入事件调度器的拥有者对象</p>\n<p>Event：需要绑定的事件</p>\n<p>如此一个基于事件调度器的通信机制便完成了。</p>\n"},{"title":"【C++】高级","date":"2019-09-14T01:01:06.000Z","_content":"\n\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 一、类\n\n## 1.浅拷贝与深拷贝\n\n### 浅拷贝\n\n<font color=red> C++在进行浅拷贝时，只拷贝栈区的内存空间，不拷贝堆区的内存空间，即浅拷贝只拷贝非指针的成员变量和指针本身，而不拷贝指针所指向的堆区的内容。</font>\n\n我们代码1.1为例\n\n```c++\n//代码1.1\nclass Obj\n{\npublic:\n\tObj(char *tp)\n\t{\n\t\tlen = strlen(tp);\n\t\tp = (char*)malloc(len + 1);\n\t\tstrcpy_s(p, len+1, tp);\n\t}\n\t~Obj()\n\t{\n\t\tif (p != NULL)\n\t\t{\n\t\t\tfree(p);\n\t\t\tp = NULL;\n\t\t\tlen = 0;\n\t\t}\n\t}\n\tvoid Show()\n\t{\n\t\tcout << *p << *(p + 1) << *(p + 2) << endl;\n\t}\nprivate:\n\tchar *p;\n\tint len;\n};\n\nvoid text(Obj &obj)\n{\n\tObj obj2 = obj;\n}\n\nint main()\n{\n\tObj obj1(\"asd\");\n\ttext(obj1);\n\tobj1.Show();\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n我们作一个图示：\n\n![](B:\\Git\\Blog\\source\\_posts\\【C++】C++高级\\Snipaste_2019-10-01_16-21-15.png)\n\n​\t我们没有自定义Obj类的拷贝构造函数，所以当代码执行到`Obj obj2 = obj1;`时，编译器将调用默认的拷贝构造函数，然而，<font color=red> 编译器默认的拷贝构造函数是一个浅拷贝</font>，所以新创建的对象obj2没有自己的堆区空间，obj2.p指向的是obj1.p所指向的内存地址。\n\n​\t上面的代码编译是通不过的，<font color=red> 原因在于，对象析构时，同一个内存地址`0x0001`被对象obj1和obj2一起析构了两次</font>。当代码执行完`test(obj1)`时，对象obj2被析构，指针obj2.p所指向的内存地址`0x0001`被释放，所以当代码执行到`obj1.Show()`时，使用了已经被释放掉的内存`0x0001`地址，从而导致运行错误。\n\n​\t<font color=green> **这里我有一个疑问，既然浅拷贝在拷贝有指针的对象时，会出现两次析构而出错，所以浅拷贝只能拷贝没有指针成员的对象，那么浅拷贝和深拷贝似乎没有什么区别了，那么浅拷贝存在的意义是什么呢？**</font>\n\n### 深拷贝\n\nC++没有提供给开发者预定义的深拷贝方法，所以要想使用深拷贝，我们需要字写一个拷贝构造函数。\n\n深拷贝可以解决上面遇到的浅拷贝的问题，因为，<font color=red> 深拷贝会申请一新的内存空间用于存放拷贝过来的内容，即深拷贝拷贝对象的所有成员，包括指针所指向的内存空间也会一起被拷贝，被拷贝过来的指针会指向一个新的内存地址</font>。\n\n![](【C++】C++高级/Snipaste_2019-10-01_16-52-53.png)\n\n### 定义深拷贝构造函数\n\n```c++\n//代码1.2\nclass Obj\n{\npublic:\n\tObj(char *tp)\n\t{\n\t\tlen = strlen(tp);\n\t\tp = (char*)malloc(len + 1);\n\t\tstrcpy_s(p, len+1, tp);\n\t}\n    //------------------------------\n    //拷贝构造函数--深拷贝\n\tObj(const Obj &obj)\n\t{\n\t\tlen = obj.len;\n\t\tp = (char*)malloc(len + 1);\n\t\tstrcpy_s(p, len + 1, obj.p);\n\t}\n    //------------------------------\n\t~Obj()\n\t{\n\t\tif (p != NULL)\n\t\t{\n\t\t\tfree(p);\n\t\t\tp = NULL;\n\t\t\tlen = 0;\n\t\t}\n\t}\n\tvoid Show()\n\t{\n\t\tcout << *p << *(p + 1) << *(p + 2) << endl;\n\t}\nprivate:\n\tchar *p;\n\tint len;\n};\n```\n\n当一个类中定义了拷贝构造函数，则在对象拷贝时，编译器就不会在调用默认的拷贝构造函数转而调用自定义的拷贝构造函数，当我们把代码1.1中类的定义改为代码1.2中类的定义后，程序就可以正常执行了。\n\n<font color=red>使用深拷贝时，我们还需要注意下面的情况：</font>\n\n```c++\nObj obj1(\"asd\");\nObj obj3(\"fgh\");\nobj3 = obj1;\n```\n\n此时，在`obj3=obj1;`处依旧调用默认的拷贝构造函数，这里我们要弄清楚`obj3=obj1`和`Obj obj3 = obj1`之间的区别，`obj3=obj1`是将<font color=red>obj1赋值给obj3</font>，`=`赋值与拷贝构造函数没有什么关联，`=`在赋值时是C++编译器自己调用默认的拷贝构造函数---浅拷贝，和类中有无定义深拷贝无关；而`Obj obj3=obj1`则是<font color=red>使用obj1来构造obj3</font>，此时如果类中定义了深拷贝构造函数，就会使用深拷贝。要解决这个问题，就需要显示重载`=`运算符了。\n\n### <font color=blue>**小知识**</font>\n\n- <font color=blue>在定义拷贝构造函数时，必须使用引用传递，否则会出现无限拷贝的情况，因为，如果我们使用传值传递的话，在传递对象到拷贝构造函数时，又会调用拷贝构造函数将实参拷贝给形参，而这个过程又会将对象传递给拷贝构造函数，从而在此调用拷贝构造函数将实参拷贝给形参，如此无限循环</font>\n- <font color=blue>拷贝构造函数只能有一个参数，且必须是自身类的引用，否则编译器将识别被普通构造函数</font>\n\n## 2.初始化参数列表\n\n### 作用\n\n我们以下面的代码1.3来说明初始化参数列表\n\n```C++\nclass A\n{\npublic:\n\tA(int a)\n\t{\n\t\tthis->a = a;\n\t}\nprivate:\n\tint a;\n};\nclass B\n{\npublic :\n\tB(int i)\n\t{\n\t\tthis->i = i;\n\t}\n\tint i;\n\tA a;\n\n};\nint main()\n{\n\tB b(1);\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**运行结果：**\n\n```\n错误\tC2512\t“A”: 没有合适的默认构造函数可用\n```\n\n​\t这个问题就在于，在类B中组合了一个A类的成员，编译器在构造B类对象时，同时会构造一个A类对象作为B类的成员，然而，因为A类自定义了一个有参的构造函数，所以在构造A类时，编译器不会使用默认构造函数，而是使用自定义的有参构造函数，问题就出在这里，编译器在构造A类时，没有参数传递到A类的有参构造函数中。初始化参数列表就是用于解决这种问题的。\n\n​\t需要说明的是，如果A类中没有自定义有参的构造函数，则在B类构造对象时编译器自动调用A类的默认构造函数构造A类对象成员，就不会报错。\n\n​\t初始化参数列表可以让我们在构造B类对象时，根据参数列表来构造不同的A类成员。\n\n### 使用\n\n初始化参数列表的使用如下面的`B(int i):a1(1),a2(2,\"asd\")`：\n\n```c++\nclass A\n{\npublic:\n\tA(int a)\n\t{\n\t\tthis->a = a;\n\t\tcout << \"构造小A\" << endl;\n\t}\n\tA(int a, string str)\n\t{\n\t\tthis->a = a;\n\t\tthis->str = str;\n\t\tcout << \"构造大A\" << endl;\n\t}\n\t~A()\n\t{\n\t\tcout << \"析构A\" << endl;\n\t}\n\tint a;\n\tstring str;\n};\nclass B\n{\npublic :\n\tB(int i):a1(1),a2(2,\"asd\")\n\t{\n\t\tthis->i = i;\n\t\tcout << \"构造B\" << endl;\n\t}\n\t~B()\n\t{\n\t\tcout << \"析构B\" << endl;\n\t}\n\n\tint i;\n\tA a1;\n\tA a2;\n};\nvoid test()\n{\n\tB b(1);\n\tcout << b.a1.str << endl;\n\tcout << b.a2.str << endl;\n}\nint main()\n{\n\ttest();\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**输出结果：**\n\n```\n构造小A\n构造大A\n构造B\n\nasd\n析构B\n析构A\n析构A\n```\n\n​\t值得注意的是<font color=red> A类对象的构造顺序不是由初始化参数列表的顺序决定的，而是由对象的申明的前后顺序决定的</font>，如：`B(int i):a1(1),a2(2,\"asd\")`和`B(int i):a2(2,\"asd\"),a1(1)`的构造顺序是一样的，但是当我们将类B中组合的A类对象的申明顺序改为如下\n\n```c++\nclass B\n{\npublic :\n\tB(int i):a1(1),a2(2,\"asd\")\n\t{\n\t\tthis->i = i;\n\t\tcout << \"构造B\" << endl;\n\t}\n\t~B()\n\t{\n\t\tcout << \"析构B\" << endl;\n\t}\n\n\tint i;\n\tA a2;\n\tA a1;\n};\n```\n\n则构造顺序就变为“先构造a2再构造a1”了。\n\n<font color=red> 析构的顺序和构造的顺序相反。</font>\n\n### <font color=blue> 小知识</font>\n\n- <font color=blue> 当一个类中组合了其他的类对象作为成员时，拷贝构造函数也必须使用初始化参数列表，来构造对象成员然后拷贝</font>\n\n## 3.匿名对象的生命周期\n\n### 什么是匿名对象\n\n```C++\ncalss A\n{\npublic:\n\tint a;\n\tA(int a)\n\t{\n\t\tthis->a = a;\n\t}\n}\nvoid main()\n{\n    A(1);\n}\n```\n\n上面的语句`A(1)`创建的就是一个匿名临时的对象，<font color=red> 需要注意，如果一个类只有无参的构造函数，那么这个类将无法构建匿名对象</font>，匿名对象的生命周期就只在创建匿名对象的这条语句内，如果我们不使用一个对象来接收这个匿名对象，那么匿名对象会在语句结束时被销毁，当我们使用`A a = A(1);`不会出现匿名对象拷贝到类B对象b的情况，这种语句已经被C++优化成了类B的构造语句。说这么多其实匿名对象没什么卵用。\n\n## 4.new和delete\n\n1.new和delete的用法\n\n`new`可以为**基础类型**、**数组**、**类**分配内存空间，`new`分配的内存空间都分配在**堆**上。随意`new`出来的内存空间必须使用一个指针来指向，不能使用同类型的变量来接收，也禁止不接受。\n\n**new 基础类型**\n\n```c++\nint *p = new int;\ndelete p;\n```\n\n**new 数组**\n\n```c++\nint *p = new int[10];\ndelete[] p;\n```\n\n**new 类**\n\n```c++\n//C++\nA *p = new A();\ndelete p;\n//C\nA *pc = (A*)malloc(A);\nfree(pc);\n```\n\n### `new delete`和`malloc free`的区别\n\n- 在基础类型和基础类型数组方面`new delete`和`malloc free`几乎没有什么区别\n\n- `new`不仅会分配内存还会调用构造函数，而`malloc`只会分配内存\n\n- `delete`会调用析构函数来销毁对象，而`free`只是单纯的释放内存\n\n### <font color=blue> **小知识**</font>\n\n<font color=blue> `new delete`和`malloc free`是可以穿插使用的，即`new`可以和`free`搭配使用，`malloc`可以和`delete`搭配使用。</font>\n\n# 二、继承\n\n继承这边主要分析一下`虚继承`\n\n## 1.虚继承\n\n虚继承的出现主要是为解决如下的继承关系中的二义性问题\n\n![图1](【C++】C++高级/Snipaste_2019-10-02_15-50-39.png)\n\n当我们的类的继承过程中出现这种继承关系时，我们需要使类B和类C分别虚继承类A来解决二义性，具体操作如下：\n\n```c++\nclass A\n{\n   public:\n    \tint a;\n};\nclass B : virtual public A\n{\n\tpublic:\n\t\tint b;\n};\nclass C : virtual public A\n{\n\tpublic:\n\t\tint c;\n};\nclass D : public B,C\n{\n\tpublic:\n\t\tint d;\n};\nvoid main()\n{\n    D d;\n    d.a = 1;\n}\n```\n\n这里有一点要注意，虚继承的应用场景有限，虚继承只能解决这种情况：\n\n![](【C++】C++高级/Snipaste_2019-10-02_15-50-39.png)\n\n而不能解决这种情况：\n\n![](【C++】C++高级/Snipaste_2019-10-02_16-10-55.png)\n\n## 2.继承中的static关键字\n\n<font color=red> 类中的静态成员变量被类的所有对象共享，同时也被类的派生类的所有对象共享。</font>\n\n# 三、多态\n\n​\t在C++的几个特性中，封装、继承和抽象都相对好理解，而多态则不太好理解，这里就说说C++的多态。\n\n## 1.多态分两种：\n\n​\t静态多态：静态多态指的就是函数重载和运算符重载。\n\n```c++\nclass Animal\n{\npublic:\n\tstring name = \"动物\";\n\tvirtual void speak()\n\t{\n\t\tcout << name << \"在叫\" << endl;\n\t}\n};\n\nclass Dog : public Animal\n{\npublic:\n\tstring name = \"狗\";\n\tvoid speak()\n\t{\n\t\tcout << name << \"在叫\" <<endl;\n\t}\n};\n\nstring operator+(Animal animal,Dog dog)\n{\n\treturn animal.name + \"是\" + dog.name + \"的父类\";\n}\n\nvoid Run(Animal animal)\n{\n\tcout << animal.name <<\"在跑\" << endl;\n}\n\nvoid Run(Dog dog)\n{\n\tcout << dog.name << \"在跑\" << endl;\n}\n\nint main()\n{\n\tAnimal animal;\n\tDog dog;\n\tRun(animal);\n\tRun(dog);\n\tcout<<animal+dog<<endl;\n\tsystem(\"pause\");\n}\n```\n\n​\t动态多态：动态多态则是通过继承和虚函数实现标签相同的函数因为传入不同的对象来实现不同的功能。\n\n```c++\nclass Animal\n{\npublic:\n\tstring name = \"动物\";\n\tvirtual void speak()\n\t{\n\t\tcout << name << \"在叫\" << endl;\n\t}\n};\n\nclass Dog : public Animal\n{\npublic:\n\tstring name = \"狗\";\n\tvoid speak()\n\t{\n\t\tcout << name << \"在叫\" <<endl;\n\t}\n};\n\nvoid Speak(Animal *animal)\n{\n\tanimal->speak();\n}\n\nint main()\n{\n\tAnimal animal;\n\tDog dog;\n\tSpeak(&animal);\n\tSpeak(&dog);\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n​\t动态多态中只能用父类对象的指针或引用来指向子类或自身对象。\n\n## 2.多态的实现原理\n\n​\tC++多态的实现依赖于类的虚函数表，当一个类中定义了虚函数，那么这个类就拥有的了一个记录这个虚函数入口地址的虚函数表，子类继承父类时也会继承父类的虚函数表，当子类重写父类的虚函数时，则子类的虚函数入口地址将覆盖父类的地址，如此当子类对象调用此函数时则从子类的虚函数表中寻找入口地址，当父类的对象调用此函数时则从父类的虚函数表中寻找入口地址。\n\n```\n当类生命虚函数时，编译器会在类中生成一个虚函数表\n虚函数表是一个存储类成员函数指针的数据结构\n虚函数表有编译器自动生成和维护\n虚成员函数会被编译器放入虚函数表中\n存在虚函数时，每一个对象中都会拥有一个指向虚函数表的虚函数表指针(vptr)\n```\n\n简单来说，多态实现的条件有三：\n\n- 要有继承\n\n- 要有虚函数重写\n\n- 要有父类指针(或引用)指向子类对象\n\n## 3.纯虚函数和抽象类\n\n​\t纯虚函数的定义：\n\n```c++\nvirtual void speak() = 0\n```\n\n​\t定义了纯虚函数的类就被成为抽象类，C++引入纯虚函数和抽象类的概念就是为了更好的使用多态，抽象类不能实例化对象，这个特性就规范了继承这个抽象类的子类必须重写父类的虚函数，因为如果继承了抽象类的子类不重写父类的虚函数，那么子类也是一个抽象类，子类便也不能实例化对象，如此便规范了多态实现，防止当子类很多时，出现某个子类在编写时忘记重写父类的虚函数，而导致这个子类没有实现多态。\n\n## 4.虚析构函数和纯虚析构函数\n\n- 虚析构函数的定义：\n\n```c++\nvirtual ~Animal();\n```\n\n- 纯虚析构函数的定义：\n\n```c++\nvirtual ~Animal() = 0;\n//纯虚析构函数必须要有申明也要有实现\nAnimal：：~Animal()\n{\n    //代码实现\n}\n```\n\n​\t如果子类在堆区中定义了数据，那么我们使用父类指针或引用来使用多态时，父类指针或引用是无法寻找到子在堆区中的数据并释放的。C++引入虚析构函数和纯虚析构函数就是为了解决此类问题。\n\n​\t我们来看一个例子：\n\n```c++\nclass Animal\n{\npublic:\n\tAnimal()\n\t{\n\t\tcout << \"这是Animal的构造函数\" << endl;\n\t}\n\t~Animal()\n\t{\n\t\tcout << \"这是Animal的析构函数\" << endl;\n\t}\n};\n\nclass Dog : public Animal\n{\npublic:\n\tint *p;\n\tDog()\n\t{\n\t\tp = new int;\n\t\tcout << \"这是Dog的构造函数\" << endl;\n\t}\n\t~Dog()\n\t{\n\t\tcout << \"这是Dog的析构函数\" << endl;\n\t\tif (p != NULL)\n\t\t{\t\t\n\t\t\tcout << \"释放堆区的p\" << endl;\n\t\t\tdelete p;\n\t\t\tp = NULL;\n\t\t}\n\t}\n};\n\nint main()\n{\n\tAnimal *animal = new Dog();\n\tdelete animal;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n输出结果：\n\n```\n这是Animal的构造函数\n这是Dog的构造函数\n这是Animal的析构函数\n```\n\n可以看到，delete animal后并没有调用Dog的析构函数，释放子类Dog在堆区申请的空间。这样便出现了内存泄漏。\n\n此时虚析构函数和纯虚析构函数便可以起作用了，我们再看一个例子：\n\n```c++\nclass Animal\n{\npublic:\n\tAnimal()\n\t{\n\t\tcout << \"这是Animal的构造函数\" << endl;\n\t}\n\tvirtual ~Animal()//把父类的析构函数改为虚析构函数\n\t{\n\t\tcout << \"这是Animal的析构函数\" << endl;\n\t}\n};\n\nclass Dog : public Animal\n{\npublic:\n\tint *p;\n\tDog()\n\t{\n\t\tp = new int;\n\t\tcout << \"这是Dog的构造函数\" << endl;\n\t}\n\t~Dog()\n\t{\n\t\tcout << \"这是Dog的析构函数\" << endl;\n\t\tif (p != NULL)\n\t\t{\t\t\n\t\t\tcout << \"释放堆区的p\" << endl;\n\t\t\tdelete p;\n\t\t\tp = NULL;\n\t\t}\n\t}\n};\n\nint main()\n{\n\tAnimal *animal = new Dog();\n\tdelete animal;\n\tsystem(\"pause\");\n\treturn 0;\n}\n\n```\n\n​\t输出结果：\n\n```\n这是Animal的构造函数\n这是Dog的构造函数\n这是Dog的析构函数\n释放堆区的p\n这是Animal的析构函数\n```\n\n​\t如此便可以释放子类Dog在堆区申请的空间了，纯虚析构函数和虚析构函数的作用是一样，只是纯虚析构函数有一个和纯虚函数一样的特性，即定义看纯虚析构函数的类也属于抽象类，纯虚析构函数必须实现，如果不实现所有继承了拥有纯虚析构函数的抽象类的派生类都属于抽象类。需要注意的是，因为纯虚析构函数的特性，纯虚析构函数的实现就必须在类外实现了。\n\n## 5.重载、重写、重定义\n\n**重载**\n\n重载发生在一个类的内部，拥有相同函数名，相同返回值而参数列表不同的函数之间互为重载关系。如：\n\n```c++\nclass A\n{\n\tpublic:\n\t\tvoid fun(){}\n\t\tvoid fun(int a){}\n};\n```\n\n<font color=red> 只有相同函数名而参数列表的函数才是重载，函数名相同参数列表也相同而返回值不同的函数在C++中是不允许的。</font>\n\n**重写**\n\n重写发生在基类和派生类之间，基类中定义虚函数(纯虚函数)，派生类中定义和虚函数拥有**相同函数名，相同参数列表和相同返回值**的函数，这种情况下发生函数重写。如：\n\n```c++\nclass A\n{\n    public:\n    \tvirtual void fun(){}\n};\nclass B : public A\n{\n\tpublic:\n\t\tvoid fun(){}//重写A类的fun函数\n\t\tvoid fun(int a){}//重定义一个新函数\n\t\tint fun(){return 0;}//这种情况C++不允许\n};\n```\n\n**重定义**\n\n重定义也是发生在基类和派生类之间，派生类拥有与基类函数名相同，返回值相同，而参数列表不同的函数，此时发生重定义。如：\n\n```c++\nclass A\n{\n  public:\n    void fun(){}\n};\nclass B : public A\n{\n\tpublic:\n\t\tvoid fun(int a){}//发生重定义\n};\n```\n\n<font color = red> 派生类中可以重定义基类的任何函数，包括虚函数和纯虚函数。</font>\n\n## 6.父类指针和子类指针步长不一致问题\n\n问题出现的场景是这样的：\n\n```c++\nclass A\n{\npublic:\n\tint a;\n\tvirtual void print() {}\n};\nclass B : virtual public A\n{\npublic:\n\tint b;\n\tB(int b)\n\t{\n\t\tthis->b = b;\n\t}\n\tvoid print()\n\t{\n\t\tcout << b << endl;\n\t}\n};\nint main()\n{\n\tA *a = NULL;\n\tB *b = NULL;\n\tB array[2]{ B(1),B(2) };\n\ta = array;\n\tb = array;\n\ta->print();\n\tb->print();\n\ta++; b++;\n\ta->print();//这一步会出现异常\n\tb->print();\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n即父类指针a和子类指针b都指向一个子类对象数组，于是我们可以通过指针++的自增运算来逐步访问数组元素，问题就出在这，使用`sizeof()`计算两个类的大小分别得出，sizeof(A)=8;sizeof(B)=20;这就导致A类指针a每一次移步时只移动了8个字节，这个距离还远远没有达到下一个元素的首地址，所以访问会出错，这是因为指针每次移步移动的距离是指针类型的空间大小，如：A类大小为8，所以A类指针每移步一次走8个字节。\n\n可能会有疑问，为什么类B的大小是20？\n\n我们可以算一算，类B继承至类A所以类A中拥有的成员变量，类B也拥有，占8字节，这8字节分别是int变量4字节和虚函数表指针4字节；类B自身定义了一个int变量占4字节，由于类B重写了类A的虚函数，所以类B也拥有一个自己的虚函数表指针，占4字节；类B虚继承了类A，在这个过程中，C++编译器会给类B增加一个属性，占4字节，于是，**8+4+4+4+4=20**。\n\n------\n\n# 四、泛型编程\n\n## 1.函数模板\n\n### 函数模板的基本语法\n\n```c++\n//---------------函数模板\ntemplate <typename T>//告诉编译器我要开始泛型编程了，遇到T不要报错\nvoid Fun(T &a,T &b)\n{\n\tT t = a;\n\ta = b;\n\tb = t;\n}\n//----------------\nint main()\n{\n\tchar a = 97,b = 102;\n\tFun(a, b);//自动推导类型调用\n\tcout << a << \",\" << b << endl;\n\tstring x = \"xxx\", y = \"yyy\";\n\tFun<string>(x, y);//显示类型调用\n\tcout << x << \",\" << y << endl;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n### 当函数模板遇到函数重载\n\n当函数模板遇到函数重载准许下面4条原则\n\n- 函数模板可以像普通函数一样被重载\n- C++编译器优先考虑普通函数\n- 如果函数模板可以产生一个更好的匹配，那么选择函数模板\n- 可以通过模板的空实参列表的语法限定编译器只通过函数模板匹配\n\n我们来看一个例子，逐一分析\n\n```c++\ntemplate <typename T>\nvoid Fun(T a,T b)\n{\n\ta = a + b;\n\tcout << \"我是函数模板\" << endl;\n}\ntemplate <typename T1,typename T2>\nvoid Fun(T1 a,T2 b)\n{\n\tT1 x = a;\n\tT2 y = b;\n\tcout << \"我是函数模板重载\" << endl;\n}\nvoid Fun(int a, int b)\n{\n\tcout << \"我是普通函数\" << endl;\n}\nvoid Fun2(int a, int b)\n{\n\tcout << a << \",\" << b << endl;\n}\nint main()\n{\n\tFun(1, 2);\n\tFun(0.1, 0.2);\n\tFun('c', 1);\n\tFun<>(1, 2);\n\tFun2(0.1, 0.2);\n\tFun2('a', 3);\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**输出结果：**\n\n```\n我是普通函数\n我是函数模板\n我是函数模板重载\n我是函数模板\n0,0\n97,3\n```\n\n**分析：**\n\n- `Fun(1,2)`:有完全匹配的普通函数，所以调用`void Fun(int a, int b)`\n- `Fun(0.1,0.2)`:虽然普通函数`void Fun(int a, int b)`可以像`void Fun2(int a, int b)`一样进行隐式类型转换调用，倒是`Fun()`函数有更好的重载函数`void Fun(T1 a,T2 b)`模板匹配所以编译器优先调用`void Fun(T1 a,T2 b)`\n- `Fun('c',1)`:编译器能找到匹配的函数模板重载`void Fun(T1 a,T2 b)`所以优先调用函数模板\n- `Fun<>(1,2)`:使用了空参数列表，告诉编译器只匹配函数模板，即使代码段中有能完美匹配的普通函数，也只调用函数模板\n\n## 2.类模板\n\n### 定义\n\n```c++\ntemplate <typename T>//定义\nclass TemplateA\n{\npublic:\n\tTemplateA(T a)\n\t{\n\t\tthis->a = a;\n\t}\n\tvoid PrintA()\n\t{\n\t\tcout << \"a:\" << a << endl;\n\t}\nprivate:\n\tT a;\n};\n\nvoid Test(TemplateA<int> &a)//类模板作形参\n{\n\ta.PrintA();\n}\n\nint main()\n{\n\tTemplateA<int> a(1);//使用\n\tTemplateA<string> b(\"str\");\n\tTemplateA<bool> c(true);\n\tTest(a);\n\tb.PrintA();\n\tc.PrintA();\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**输出结果：**\n\n```\na:1\na:str\na:1\n```\n\n类模板的定义和函数模板的定义类似\n\n### 使用\n\n类模板的使用必须显示的确定模板的类型参数，如：`TemplateA<string> b(\"str\")`\n\n### 类模板作参数\n\n类模板作参数也必须显示的确定模板那的类型参数，如：\n\n`void Test(TemplateA<int> &a)`以便编译器为形参确定内存空间。\n\n### 类模板派生普通类\n\n类模板也可以被继承，但是在继承时需要显示确定模板的类型参数\n\n```c++\ntemplate <typename T>\nclass TemplateA\n{\npublic:\n\tTemplateA(T a)\n\t{\n\t\tthis->a = a;\n\t}\n\tvoid PrintA()\n\t{\n\t\tcout << \"a:\" << a << endl;\n\t}\nprivate:\n\tT a;\n};\nclass B : public TemplateA<int>//类模板派生普通类\n{\npublic:\n\tB(int a, int b) :TemplateA(a)\n\t{\n\t\tthis->b = b;\n\t}\n\tvoid PrintB()\n\t{\n\t\tcout << \"b:\" << b << endl;\n\t}\nprivate:\n\tint b;\n};\n\nint main()\n{\n\tB b(1, 2);\n\tb.PrintA();\n\tb.PrintB();\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n### 模板类派生模板类\n\n模板类不仅可以派生普通类，还可以派生模板类\n\n```c++\ntemplate <typename T>\nclass TemplateA\n{\npublic:\n\tTemplateA(T a)\n\t{\n\t\tthis->a = a;\n\t}\n\tvoid PrintA()\n\t{\n\t\tcout << \"a:\" << a << endl;\n\t}\nprivate:\n\tT a;\n};\ntemplate <typename T1,typename T2>\nclass TemplateB : public TemplateA<T2>//类模板派生类模板\n{\npublic:\n\tTemplateB(T2 a, T1 b) :TemplateA(a)\n\t{\n\t\tthis->b = b;\n\t}\n\tvoid PrintB()\n\t{\n\t\tcout << \"b:\" << b << endl;\n\t}\nprivate:\n\tT1 b;\n};\n\nint main()\n{\n\tTemplateB<string,char> b('A', \"TemplateB\");\n\tb.PrintA();\n\tb.PrintB();\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**输出结果：**\n\n```\na:A\nb:TemplateB\n```\n\n### 类模板的主要作用\n\n类模板的主要作用就是将数据结构的表示和算法不受包含的元素类型的影响，即类模板将元素类型和数据结构算法分离开来了，使数据结构和算法成为真正意义上的数据结构和算法，如：链表不再因为`int`类型而定义一个`int`类型的链表，因`string`类型而定义一个`string`类型的链表，而是定义一个链表可以通用于所有类型。\n\n# 五、异常处理\n\n## 1.异常的基本语法\n\n```C++\nvoid Try(int x, int y)\n{\n\tif (y == 0)\n\t{\n\t\tcout << \"除数不能等于0，抛出异常\"<<endl;\n\t\tthrow y;//这里必须指明抛出异常的数据类型，否则程序无法处理异常，只能使用这个类型的变量，x和y的效果是一样的，不能直接抛出int，即这样是不行的throw int\n\t}\n\tcout << \"x/y=\" << x / y << endl;\n}\n\nvoid Test1()\n{\n\tTry(1, 2);\n\tTry(3, 0);\n}\n\nvoid Test2()\n{\n\ttry\n\t{\n\t\tTest1();\n\t}\n\tcatch (char e)\n\t{\n\t\tcout << \"处理char异常\" << endl;\n\t}\n\tcatch(...)\n\t{\n\t\tcout << \"无法处理的异常继续往上抛\" << endl;\n\t\tthrow;\n\t}\n}\n\nint main()\n{\n\ttry\n\t{\n\t\tTest2();\n\t}\n\tcatch(int e)\n\t{\n\t\tcout << \"处理int异常\" << endl;\n\t}\n\tcatch (...)\n\t{\n\t\tcout << \"处理其他异常\" << endl;\n\t}\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**输出结果：**\n\n```\nx/y=0\n除数不能等于0，抛出异常\n无法处理的异常继续往上抛\n处理int异常\n```\n\n- 异常的抛出是可以跨函数的，如上面的代码，在`Try`函数里抛出的异常可以在`mian`函数中处理，中间跨过了`Test1`，`Test2`两个函数\n- 如果在一个函数内捕捉到异常但是却无法处理可以通过`throw`继续向上抛，直至main函数，如上面代码，`Test2`捕捉到异常但是没有处理继续向上抛给了main函数，如果main函数还是没有处理，则会直接中断程序\n- C++使用`cacth(...)`来捕捉其他没有捕捉到的异常，如上面代码，main函数中只捕捉了int类型的异常，如果出现其他类型的异常则有`cacth(...)`来捕捉\n- 异常处理是按照类型匹配来处理的，即`throw`的int类型的异常只有`cacth(int e)`能够接收得到，否则就只能使用`cacth(...)`来接收未知异常\n\n## 2.C++异常处理的特性\n\n​\tC++的异常处理具有跨函数性，这使得<font color=red> 异常引发</font>和<font color=red> 异常处理</font>分离开来，这样下层函数可以不用过多的在一异常处理，而把重点放在问题的逻辑处理上，异常处理可以由上层调用者专门来处理。\n\n## 3.异常接口申明\n\n**不抛出任何异常：**\n\n```C++\nvoid Try(int x, int y) throw()//异常接口申明\n{\n\tif (y == 0)\n\t{\n\t\tcout << \"除数不能等于0，抛出异常\"<<endl;\n\t\tthrow x;\n\t}\n\tcout << \"x/y=\" << x / y << endl;\n}\n```\n\n**只能抛出列表中类型的异常：**\n\n```C++\nvoid Try(int x, int y) throw(char,int*)\n{\n\tif (y == 0)\n\t{\n\t\tcout << \"除数不能等于0，抛出异常\"<<endl;\n\t\tthrow x;\n\t}\n\tcout << \"x/y=\" << x / y << endl;\n}\n```\n\n**可以抛出任何异常：**\n\n```C++\nvoid Try(int x, int y)\n{\n\tif (y == 0)\n\t{\n\t\tcout << \"除数不能等于0，抛出异常\"<<endl;\n\t\tthrow x;\n\t}\n\tcout << \"x/y=\" << x / y << endl;\n}\n```\n\n不过经过测试，三份代码无论是否写throw都是可以抛出并处理异常的，似乎这个语法没什么卵用，可能C++11摒弃了这种用法，但是考虑到兼容保留这个语法。\n\n## 4.异常接收的3种方式\n\n### 普通形参\n\n```c++\nclass A\n{\npublic:\n\tA() { cout << \"构造A\" << endl; }\n\tA(const A &a) { cout << \"拷贝A\" << endl; }\n\t~A() { cout << \"析构A\" << endl; }\n};\n\nvoid Try()\n{\n\tA a;\n\tthrow a;\n}\n\nint main()\n{\n\ttry\n\t{\n\t\tTry();\n\t}\n\tcatch(A e)//使用普通形参\n\t{\n\t\tcout << \"处理int异常\" << endl;\n\t}\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**输出结果：**\n\n```\n构造A\n拷贝A\n拷贝A\n析构A\n处理int异常\n析构A\n析构A\n```\n\n可以看到a被拷贝两次，第一次从`A a`拷贝到`throw a`，第二次从`throw a`拷贝到`catch(A e)`，可以看出如果使用普通形参来接收异常，异常变量会由异常抛出处拷贝到异常接收处。\n\n### 引用\n\n将上面代码的`catch(A e)`改为`catch(A &e)`\n\n**输出结果：**\n\n```\n构造A\n拷贝A\n析构A\n处理int异常\n析构A\n```\n\n可以看到只拷贝了一次，即从`A a`拷贝到`throw a`。\n\n### 指针\n\n上面代码应该修改为如下\n\n```C++\nclass A\n{\npublic:\n\tA() { cout << \"构造A\" << endl; }\n\tA(const A &a) { cout << \"拷贝A\" << endl; }\n\t~A() { cout << \"析构A\" << endl; }\n};\n\nvoid Try()\n{\n\tA *a = new A();//对象必须创建在堆区，函数结束对象就会被销毁，而无法通过指针传递到catch中\n\tthrow a;\n}\n\nint main()\n{\n\ttry\n\t{\n\t\tTry();\n\t}\n\tcatch(A *e)\n\t{\n\t\tcout << \"处理int异常\" << endl;\n\t\tdelete e;//需要手动释放堆区的内存\n\t}\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**输出结果：**\n\n```\n构造A\n处理int异常\n析构A\n```\n\n可以看到使用指针完全不需要拷贝，但是却需要消耗堆区的内存且容易造成内存泄露。\n\n### 总结\n\n总的来说，最优的方式还是使用引用。\n\n## 5.继承在异常处理中的应用\n\n在实际的项目中我们处理的异常并不是一些基础的数据类型，大多都是开发者的自定义类，这种情况在捕捉异常的时候就相当麻烦，尽管有些异常处理起来程序基本一致，但是却要将每一种异常一一捕捉并一一处理，下面的代码我们来模拟一下这种情况。\n\n```C++\nclass A//A类实现输入一个范围在0-10的奇数\n{\npublic:\n\tA(int a) \n\t{\n\t\tif (a % 2 != 0) {\n\t\t\tif (a < 0)throw LtZero();\n\t\t\tif (a > 10)throw GtTen();\n\t\t\telse num = a;\n\t\t}\n\t\telse throw Even();\n\t}\nprivate:\n\tint num;\n};\nclass LtZero//专门处理异常的异常类\n{};\nclass GtTen\n{};\nclass Even\n{};\n\nint main()\n{\n\ttry { A a(4); }\n\tcatch (LtZero &lz) { cout << \"输入的数小于0\" << endl; }\n\tcatch (GtTen &gt) { cout << \"输入的数大于10\" << endl; }\n\tcatch (Even &ev) { cout << \"输入的数是偶数\" << endl; }\n\tcatch (...) { cout << \"其他异常\" << endl; }\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n可以看到我们的异常处理模块相当繁杂，在实际开发项目中异常的数量远远不止上面模拟的三种，可能多达上百种或则更多，这是异常的处理将变得十分繁杂，那么如何处理呢？\n\n可能心细的读者会发现，我们在处理异常时使用了专门的异常处理类，而类是可以继承的，于是乎，继承在异常处理中的作用就体现出来了。\n\n我们再来看一份优化后的代码\n\n```c++\nclass A//A类实现输入一个范围在0-10的奇数\n{\npublic:\n\tA(int a) \n\t{\n\t\tif (a % 2 != 0) {\n\t\t\tif (a < 0)throw LtZero();\n\t\t\tif (a > 10)throw GtTen();\n\t\t\telse num = a;\n\t\t}\n\t\telse throw Even();\n\t}\n\n\tclass Even\n\t{\n\tpublic:\n\t\tvirtual void PrintErro()\n\t\t{\n\t\t\tcout<< \"输入的数是偶数\" << endl;\n\t\t}\n\t};\n\tclass LtZero:public Even\n\t{\n\tpublic:\n\t\tvoid PrintErro()\n\t\t{\n\t\t\tcout << \"输入的数小于0\" << endl;\n\t\t}\n\t};\n\tclass GtTen:public Even\n\t{\n\tpublic:\n\t\tvoid PrintErro()\n\t\t{\n\t\t\tcout << \"输入的数大于10\" << endl;\n\t\t}\n\t};\nprivate:\n\tint num;\n};\n\nint main()\n{\n\ttry { A a(4); }\n\tcatch (A::Even e) { e.PrintErro(); }\n\tcatch (...) { cout << \"其他异常\" << endl; }\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n可以看到我们的异常处理模块使用多态，繁杂程度被大幅缩水了，而我们的异常处理被集中在了异常处理类中，有时，如果我们的异常处理只对某一个类有效也是可以直接将异常处理类定义在抛出类里面的。\n\n## 6.标准异常库\n\nC++提供一些标准的异常库，头文件为：#include<stdexcep>\n\n# 六、标准IO流\n\n## 1.标准IO流流程\n\n![](【C++】C++高级/Snipaste_2019-10-06_10-03-47.png)\n\n## 2.标准输入流\n\n| 标准函数                             | 作用                                                         |\n| ------------------------------------ | ------------------------------------------------------------ |\n| cin                                  | cin>>操作支持任何基本类型的输入，但是遇到空格则结束读取      |\n| cin.get(char chr)                    | 从缓冲区中读取一个字符到chr中，因为C++定义的cin.get(char)中会返回一个函数自身的引用，所以此函数支持链式编程，即cin.get(a).get(b).get(c);b表示依次从缓冲区中读取三个字符到a，b，c中 |\n| cin.get(char* buf,int cout)          | 从缓冲区中读取cout个字符到buf数组中，因为函数似乎会在数组末尾添加点什么，所以实际读取的字符数量是cout-1个，此函数也支持链式编程 |\n| cin.get(char* buf,int cout,char chr) | 从缓冲区中读取cout个字符到buf数组中，如果碰到字符chr则结束读取 |\n| cin.getline(char buf,int cout)       | 从缓冲区中读取cout个字符到buf数组中                          |\n| cin.ignore(int num)                  | 忽略缓冲区当前读取指针开始的num个字符再读取                  |\n| cin.peek()                           | 判断缓冲区中是否有数据，如果有则返回第一个字符，如果没有则阻塞程序 |\n| cin.putback(char chr)                | 将读取出来的字符再返存回缓冲区，只能读取一个字符             |\n\n## 3.标准输出流\n\n| 标准函数                       | 作用                                                         |\n| ------------------------------ | ------------------------------------------------------------ |\n| cout                           | 输出缓冲区内容，支持任何基本类型数据的输出                   |\n| cout.flush(void)               | 刷新缓冲区，无视系统繁忙，强制输出缓冲区的字符，语法和cout一样“cout.flush()<<buf<<endl;” |\n| cout.put(char chr)             | 在标准输出设备输出指针的当前位置插入字符chr，语法和cout一致  |\n| cout.write(char *chr,int cout) | 输出*chr所指向空间中cout个数量的字符，即使越界也会继续输出，语法和cout一致 |\n| cout.width(int num)            | 输出num个字节宽度的字符，一般配合cout.fill(char chr)和其他cout函数一起使用 |\n| cout.fill(char chr)            | 配合cout.width(int num)和其他cout一起使用，在输出的num宽度的字符中将cout函数没有填充完的字符用chr填充 |\n| cout.setf(标记)                | 格式化cout输出，标记种类很多，具体的可以查阅资料，配合cout函数一起使用 |\n\n## 4.文件IO流\n\n​\t文件操作相对来说比较简单，总的来说就是5个步骤，即\n\n### 操作步骤\n\n- ​\t包含头文件<font color = red>#include<ftream></font>\n\n- ​\t创建流对象\n\n- ​\t打开文件\n\n- ​\t读写文件\n\n  ​\t<font color = red>需要注意的是C++中文件写的方式是使用符号“<<”，如：fout << \"文件内容\"<<endl;</font>\n\n  ​\t<font color = red>同理文件读也可以使用“>>”来读。</font>\n\n- ​\t关闭文件\n\n  **文件写**\n\n```c++\n#include <iostream>\n#include <string>\n#include <fstream>\n\nusing namespace std;\n\nvoid test()\n{\n\tofstream fout;\n\tfout.open(\"文件测试.txt\", ios::out);\n\tfout << \"姓名：张三\" << endl;\n\tfout << \"性别：男\" << endl;\n\tfout.close();\n}\n\nint main()\n{\n\ttest();\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n​\t**输出结果：**\t\n\n![](【C++】C++高级/Snipaste_2019-09-14_16-29-43.png)\n\n### 4种文件读的方式\n\n```c++\n#include <iostream>\n#include <string>\n#include <fstream>\n\nusing namespace std;\n\nvoid test()\n{\n\tifstream fin;\n\tfin.open(\"文件测试.txt\", ios::in);\n\tif (!fin.is_open())//文件读需要多添加一步判断文件是否打开成功的步骤\n\t{\n\t\tcout << \"文件打开失败\" << endl;\n\t}\n\tchar str[1024];\n\tstring strs;\n\tchar chr;\n\t//第一中方式\n\t//while (fin >> str)//操作符\">>\"每次只能读取一行数据，读到文件尾“EOF”时结束\n\t//{\n\t//\tcout << str << endl;\n\t//}\n\n\t//第二种方式\n\t//while (fin.getline(str, 50))//ifstream::getline(char *str,int num);这个函数只支持字符数组，参数num指的是需要读取的字节数\n\t//{\n\t//\tcout << str << endl;\n\t//}\n\n\t//第三种方式\n\t//while (getline(fin, strs))//与第二种方式不同的是，这个getline函数是全局的，且只支持输出到string类型的对象中\n\t//{\n\t//\tcout << strs << endl;\n\t//}\n\n\t//第四中方式\n\twhile ((chr = fin.get()) != EOF)//get()函数每次只能读取一个字符\n\t{\n\t\tcout << chr ;\n\t}\n\tfin.close();\n}\n\nint main()\n{\n\ttest();\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n### 文件的打开模式\n\n​\tC++提供6中文件的打开方式\n\n| 打开方式    | 解释                                               |\n| ----------- | -------------------------------------------------- |\n| ios::in     | 以读的形式打开                                     |\n| ios::out    | 以写的形式打开，会覆盖源文件                       |\n| ios::ate    | 以写的形式打开并初始文件位置：文件尾，会覆盖源文件 |\n| ios::app    | 以追加的方式打开文件                               |\n| ios::trunc  | 如果文件存在先删除再创建                           |\n| ios::binary | 以二进制的形式打开                                 |\n\n### 读写二进制文件\n\n```c++\n#include <iostream>\n#include <string>\n#include <fstream>\n\nusing namespace std;\n\nclass Person\n{\npublic:\n\tstring name = \"张三\";\n\tstring sex = \"男\";\n};\n\nvoid test()\n{\n\tofstream fout;\n\tfout.open(\"二进制文件测试.txt\", ios::out | ios::binary);\n\tPerson p;\n\tfout.write((char *)&p, sizeof(Person));//注意这里使用ofstream::write()来写\n\tfout.close;\n\n\tifstream fin;\n\tfin.open(\"二进制文件测试.txt\", ios::in | ios::binary);\n\tif (!fin.is_open())\n\t{\n\t\tcout << \"文件打开错误\" << endl;\n\t\treturn;\n\t}\n\tPerson pin;\n\tfin.read((char *)&pin, sizeof(Person));//注意这里使用ofstream::read()来读\n\tcout << \"姓名：\" << pin.name << endl;\n\tcout << \"性别：\" << pin.sex << endl;\n\tfin.close();\n}\n\nint main()\n{\n\ttest();\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n","source":"_posts/【C++】C++高级.md","raw":"---\ntitle: 【C++】高级\ndate: 2019-09-14 09:01:06\ntags: C++\ncategories: 学习笔记\n---\n\n\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 一、类\n\n## 1.浅拷贝与深拷贝\n\n### 浅拷贝\n\n<font color=red> C++在进行浅拷贝时，只拷贝栈区的内存空间，不拷贝堆区的内存空间，即浅拷贝只拷贝非指针的成员变量和指针本身，而不拷贝指针所指向的堆区的内容。</font>\n\n我们代码1.1为例\n\n```c++\n//代码1.1\nclass Obj\n{\npublic:\n\tObj(char *tp)\n\t{\n\t\tlen = strlen(tp);\n\t\tp = (char*)malloc(len + 1);\n\t\tstrcpy_s(p, len+1, tp);\n\t}\n\t~Obj()\n\t{\n\t\tif (p != NULL)\n\t\t{\n\t\t\tfree(p);\n\t\t\tp = NULL;\n\t\t\tlen = 0;\n\t\t}\n\t}\n\tvoid Show()\n\t{\n\t\tcout << *p << *(p + 1) << *(p + 2) << endl;\n\t}\nprivate:\n\tchar *p;\n\tint len;\n};\n\nvoid text(Obj &obj)\n{\n\tObj obj2 = obj;\n}\n\nint main()\n{\n\tObj obj1(\"asd\");\n\ttext(obj1);\n\tobj1.Show();\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n我们作一个图示：\n\n![](B:\\Git\\Blog\\source\\_posts\\【C++】C++高级\\Snipaste_2019-10-01_16-21-15.png)\n\n​\t我们没有自定义Obj类的拷贝构造函数，所以当代码执行到`Obj obj2 = obj1;`时，编译器将调用默认的拷贝构造函数，然而，<font color=red> 编译器默认的拷贝构造函数是一个浅拷贝</font>，所以新创建的对象obj2没有自己的堆区空间，obj2.p指向的是obj1.p所指向的内存地址。\n\n​\t上面的代码编译是通不过的，<font color=red> 原因在于，对象析构时，同一个内存地址`0x0001`被对象obj1和obj2一起析构了两次</font>。当代码执行完`test(obj1)`时，对象obj2被析构，指针obj2.p所指向的内存地址`0x0001`被释放，所以当代码执行到`obj1.Show()`时，使用了已经被释放掉的内存`0x0001`地址，从而导致运行错误。\n\n​\t<font color=green> **这里我有一个疑问，既然浅拷贝在拷贝有指针的对象时，会出现两次析构而出错，所以浅拷贝只能拷贝没有指针成员的对象，那么浅拷贝和深拷贝似乎没有什么区别了，那么浅拷贝存在的意义是什么呢？**</font>\n\n### 深拷贝\n\nC++没有提供给开发者预定义的深拷贝方法，所以要想使用深拷贝，我们需要字写一个拷贝构造函数。\n\n深拷贝可以解决上面遇到的浅拷贝的问题，因为，<font color=red> 深拷贝会申请一新的内存空间用于存放拷贝过来的内容，即深拷贝拷贝对象的所有成员，包括指针所指向的内存空间也会一起被拷贝，被拷贝过来的指针会指向一个新的内存地址</font>。\n\n![](【C++】C++高级/Snipaste_2019-10-01_16-52-53.png)\n\n### 定义深拷贝构造函数\n\n```c++\n//代码1.2\nclass Obj\n{\npublic:\n\tObj(char *tp)\n\t{\n\t\tlen = strlen(tp);\n\t\tp = (char*)malloc(len + 1);\n\t\tstrcpy_s(p, len+1, tp);\n\t}\n    //------------------------------\n    //拷贝构造函数--深拷贝\n\tObj(const Obj &obj)\n\t{\n\t\tlen = obj.len;\n\t\tp = (char*)malloc(len + 1);\n\t\tstrcpy_s(p, len + 1, obj.p);\n\t}\n    //------------------------------\n\t~Obj()\n\t{\n\t\tif (p != NULL)\n\t\t{\n\t\t\tfree(p);\n\t\t\tp = NULL;\n\t\t\tlen = 0;\n\t\t}\n\t}\n\tvoid Show()\n\t{\n\t\tcout << *p << *(p + 1) << *(p + 2) << endl;\n\t}\nprivate:\n\tchar *p;\n\tint len;\n};\n```\n\n当一个类中定义了拷贝构造函数，则在对象拷贝时，编译器就不会在调用默认的拷贝构造函数转而调用自定义的拷贝构造函数，当我们把代码1.1中类的定义改为代码1.2中类的定义后，程序就可以正常执行了。\n\n<font color=red>使用深拷贝时，我们还需要注意下面的情况：</font>\n\n```c++\nObj obj1(\"asd\");\nObj obj3(\"fgh\");\nobj3 = obj1;\n```\n\n此时，在`obj3=obj1;`处依旧调用默认的拷贝构造函数，这里我们要弄清楚`obj3=obj1`和`Obj obj3 = obj1`之间的区别，`obj3=obj1`是将<font color=red>obj1赋值给obj3</font>，`=`赋值与拷贝构造函数没有什么关联，`=`在赋值时是C++编译器自己调用默认的拷贝构造函数---浅拷贝，和类中有无定义深拷贝无关；而`Obj obj3=obj1`则是<font color=red>使用obj1来构造obj3</font>，此时如果类中定义了深拷贝构造函数，就会使用深拷贝。要解决这个问题，就需要显示重载`=`运算符了。\n\n### <font color=blue>**小知识**</font>\n\n- <font color=blue>在定义拷贝构造函数时，必须使用引用传递，否则会出现无限拷贝的情况，因为，如果我们使用传值传递的话，在传递对象到拷贝构造函数时，又会调用拷贝构造函数将实参拷贝给形参，而这个过程又会将对象传递给拷贝构造函数，从而在此调用拷贝构造函数将实参拷贝给形参，如此无限循环</font>\n- <font color=blue>拷贝构造函数只能有一个参数，且必须是自身类的引用，否则编译器将识别被普通构造函数</font>\n\n## 2.初始化参数列表\n\n### 作用\n\n我们以下面的代码1.3来说明初始化参数列表\n\n```C++\nclass A\n{\npublic:\n\tA(int a)\n\t{\n\t\tthis->a = a;\n\t}\nprivate:\n\tint a;\n};\nclass B\n{\npublic :\n\tB(int i)\n\t{\n\t\tthis->i = i;\n\t}\n\tint i;\n\tA a;\n\n};\nint main()\n{\n\tB b(1);\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**运行结果：**\n\n```\n错误\tC2512\t“A”: 没有合适的默认构造函数可用\n```\n\n​\t这个问题就在于，在类B中组合了一个A类的成员，编译器在构造B类对象时，同时会构造一个A类对象作为B类的成员，然而，因为A类自定义了一个有参的构造函数，所以在构造A类时，编译器不会使用默认构造函数，而是使用自定义的有参构造函数，问题就出在这里，编译器在构造A类时，没有参数传递到A类的有参构造函数中。初始化参数列表就是用于解决这种问题的。\n\n​\t需要说明的是，如果A类中没有自定义有参的构造函数，则在B类构造对象时编译器自动调用A类的默认构造函数构造A类对象成员，就不会报错。\n\n​\t初始化参数列表可以让我们在构造B类对象时，根据参数列表来构造不同的A类成员。\n\n### 使用\n\n初始化参数列表的使用如下面的`B(int i):a1(1),a2(2,\"asd\")`：\n\n```c++\nclass A\n{\npublic:\n\tA(int a)\n\t{\n\t\tthis->a = a;\n\t\tcout << \"构造小A\" << endl;\n\t}\n\tA(int a, string str)\n\t{\n\t\tthis->a = a;\n\t\tthis->str = str;\n\t\tcout << \"构造大A\" << endl;\n\t}\n\t~A()\n\t{\n\t\tcout << \"析构A\" << endl;\n\t}\n\tint a;\n\tstring str;\n};\nclass B\n{\npublic :\n\tB(int i):a1(1),a2(2,\"asd\")\n\t{\n\t\tthis->i = i;\n\t\tcout << \"构造B\" << endl;\n\t}\n\t~B()\n\t{\n\t\tcout << \"析构B\" << endl;\n\t}\n\n\tint i;\n\tA a1;\n\tA a2;\n};\nvoid test()\n{\n\tB b(1);\n\tcout << b.a1.str << endl;\n\tcout << b.a2.str << endl;\n}\nint main()\n{\n\ttest();\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**输出结果：**\n\n```\n构造小A\n构造大A\n构造B\n\nasd\n析构B\n析构A\n析构A\n```\n\n​\t值得注意的是<font color=red> A类对象的构造顺序不是由初始化参数列表的顺序决定的，而是由对象的申明的前后顺序决定的</font>，如：`B(int i):a1(1),a2(2,\"asd\")`和`B(int i):a2(2,\"asd\"),a1(1)`的构造顺序是一样的，但是当我们将类B中组合的A类对象的申明顺序改为如下\n\n```c++\nclass B\n{\npublic :\n\tB(int i):a1(1),a2(2,\"asd\")\n\t{\n\t\tthis->i = i;\n\t\tcout << \"构造B\" << endl;\n\t}\n\t~B()\n\t{\n\t\tcout << \"析构B\" << endl;\n\t}\n\n\tint i;\n\tA a2;\n\tA a1;\n};\n```\n\n则构造顺序就变为“先构造a2再构造a1”了。\n\n<font color=red> 析构的顺序和构造的顺序相反。</font>\n\n### <font color=blue> 小知识</font>\n\n- <font color=blue> 当一个类中组合了其他的类对象作为成员时，拷贝构造函数也必须使用初始化参数列表，来构造对象成员然后拷贝</font>\n\n## 3.匿名对象的生命周期\n\n### 什么是匿名对象\n\n```C++\ncalss A\n{\npublic:\n\tint a;\n\tA(int a)\n\t{\n\t\tthis->a = a;\n\t}\n}\nvoid main()\n{\n    A(1);\n}\n```\n\n上面的语句`A(1)`创建的就是一个匿名临时的对象，<font color=red> 需要注意，如果一个类只有无参的构造函数，那么这个类将无法构建匿名对象</font>，匿名对象的生命周期就只在创建匿名对象的这条语句内，如果我们不使用一个对象来接收这个匿名对象，那么匿名对象会在语句结束时被销毁，当我们使用`A a = A(1);`不会出现匿名对象拷贝到类B对象b的情况，这种语句已经被C++优化成了类B的构造语句。说这么多其实匿名对象没什么卵用。\n\n## 4.new和delete\n\n1.new和delete的用法\n\n`new`可以为**基础类型**、**数组**、**类**分配内存空间，`new`分配的内存空间都分配在**堆**上。随意`new`出来的内存空间必须使用一个指针来指向，不能使用同类型的变量来接收，也禁止不接受。\n\n**new 基础类型**\n\n```c++\nint *p = new int;\ndelete p;\n```\n\n**new 数组**\n\n```c++\nint *p = new int[10];\ndelete[] p;\n```\n\n**new 类**\n\n```c++\n//C++\nA *p = new A();\ndelete p;\n//C\nA *pc = (A*)malloc(A);\nfree(pc);\n```\n\n### `new delete`和`malloc free`的区别\n\n- 在基础类型和基础类型数组方面`new delete`和`malloc free`几乎没有什么区别\n\n- `new`不仅会分配内存还会调用构造函数，而`malloc`只会分配内存\n\n- `delete`会调用析构函数来销毁对象，而`free`只是单纯的释放内存\n\n### <font color=blue> **小知识**</font>\n\n<font color=blue> `new delete`和`malloc free`是可以穿插使用的，即`new`可以和`free`搭配使用，`malloc`可以和`delete`搭配使用。</font>\n\n# 二、继承\n\n继承这边主要分析一下`虚继承`\n\n## 1.虚继承\n\n虚继承的出现主要是为解决如下的继承关系中的二义性问题\n\n![图1](【C++】C++高级/Snipaste_2019-10-02_15-50-39.png)\n\n当我们的类的继承过程中出现这种继承关系时，我们需要使类B和类C分别虚继承类A来解决二义性，具体操作如下：\n\n```c++\nclass A\n{\n   public:\n    \tint a;\n};\nclass B : virtual public A\n{\n\tpublic:\n\t\tint b;\n};\nclass C : virtual public A\n{\n\tpublic:\n\t\tint c;\n};\nclass D : public B,C\n{\n\tpublic:\n\t\tint d;\n};\nvoid main()\n{\n    D d;\n    d.a = 1;\n}\n```\n\n这里有一点要注意，虚继承的应用场景有限，虚继承只能解决这种情况：\n\n![](【C++】C++高级/Snipaste_2019-10-02_15-50-39.png)\n\n而不能解决这种情况：\n\n![](【C++】C++高级/Snipaste_2019-10-02_16-10-55.png)\n\n## 2.继承中的static关键字\n\n<font color=red> 类中的静态成员变量被类的所有对象共享，同时也被类的派生类的所有对象共享。</font>\n\n# 三、多态\n\n​\t在C++的几个特性中，封装、继承和抽象都相对好理解，而多态则不太好理解，这里就说说C++的多态。\n\n## 1.多态分两种：\n\n​\t静态多态：静态多态指的就是函数重载和运算符重载。\n\n```c++\nclass Animal\n{\npublic:\n\tstring name = \"动物\";\n\tvirtual void speak()\n\t{\n\t\tcout << name << \"在叫\" << endl;\n\t}\n};\n\nclass Dog : public Animal\n{\npublic:\n\tstring name = \"狗\";\n\tvoid speak()\n\t{\n\t\tcout << name << \"在叫\" <<endl;\n\t}\n};\n\nstring operator+(Animal animal,Dog dog)\n{\n\treturn animal.name + \"是\" + dog.name + \"的父类\";\n}\n\nvoid Run(Animal animal)\n{\n\tcout << animal.name <<\"在跑\" << endl;\n}\n\nvoid Run(Dog dog)\n{\n\tcout << dog.name << \"在跑\" << endl;\n}\n\nint main()\n{\n\tAnimal animal;\n\tDog dog;\n\tRun(animal);\n\tRun(dog);\n\tcout<<animal+dog<<endl;\n\tsystem(\"pause\");\n}\n```\n\n​\t动态多态：动态多态则是通过继承和虚函数实现标签相同的函数因为传入不同的对象来实现不同的功能。\n\n```c++\nclass Animal\n{\npublic:\n\tstring name = \"动物\";\n\tvirtual void speak()\n\t{\n\t\tcout << name << \"在叫\" << endl;\n\t}\n};\n\nclass Dog : public Animal\n{\npublic:\n\tstring name = \"狗\";\n\tvoid speak()\n\t{\n\t\tcout << name << \"在叫\" <<endl;\n\t}\n};\n\nvoid Speak(Animal *animal)\n{\n\tanimal->speak();\n}\n\nint main()\n{\n\tAnimal animal;\n\tDog dog;\n\tSpeak(&animal);\n\tSpeak(&dog);\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n​\t动态多态中只能用父类对象的指针或引用来指向子类或自身对象。\n\n## 2.多态的实现原理\n\n​\tC++多态的实现依赖于类的虚函数表，当一个类中定义了虚函数，那么这个类就拥有的了一个记录这个虚函数入口地址的虚函数表，子类继承父类时也会继承父类的虚函数表，当子类重写父类的虚函数时，则子类的虚函数入口地址将覆盖父类的地址，如此当子类对象调用此函数时则从子类的虚函数表中寻找入口地址，当父类的对象调用此函数时则从父类的虚函数表中寻找入口地址。\n\n```\n当类生命虚函数时，编译器会在类中生成一个虚函数表\n虚函数表是一个存储类成员函数指针的数据结构\n虚函数表有编译器自动生成和维护\n虚成员函数会被编译器放入虚函数表中\n存在虚函数时，每一个对象中都会拥有一个指向虚函数表的虚函数表指针(vptr)\n```\n\n简单来说，多态实现的条件有三：\n\n- 要有继承\n\n- 要有虚函数重写\n\n- 要有父类指针(或引用)指向子类对象\n\n## 3.纯虚函数和抽象类\n\n​\t纯虚函数的定义：\n\n```c++\nvirtual void speak() = 0\n```\n\n​\t定义了纯虚函数的类就被成为抽象类，C++引入纯虚函数和抽象类的概念就是为了更好的使用多态，抽象类不能实例化对象，这个特性就规范了继承这个抽象类的子类必须重写父类的虚函数，因为如果继承了抽象类的子类不重写父类的虚函数，那么子类也是一个抽象类，子类便也不能实例化对象，如此便规范了多态实现，防止当子类很多时，出现某个子类在编写时忘记重写父类的虚函数，而导致这个子类没有实现多态。\n\n## 4.虚析构函数和纯虚析构函数\n\n- 虚析构函数的定义：\n\n```c++\nvirtual ~Animal();\n```\n\n- 纯虚析构函数的定义：\n\n```c++\nvirtual ~Animal() = 0;\n//纯虚析构函数必须要有申明也要有实现\nAnimal：：~Animal()\n{\n    //代码实现\n}\n```\n\n​\t如果子类在堆区中定义了数据，那么我们使用父类指针或引用来使用多态时，父类指针或引用是无法寻找到子在堆区中的数据并释放的。C++引入虚析构函数和纯虚析构函数就是为了解决此类问题。\n\n​\t我们来看一个例子：\n\n```c++\nclass Animal\n{\npublic:\n\tAnimal()\n\t{\n\t\tcout << \"这是Animal的构造函数\" << endl;\n\t}\n\t~Animal()\n\t{\n\t\tcout << \"这是Animal的析构函数\" << endl;\n\t}\n};\n\nclass Dog : public Animal\n{\npublic:\n\tint *p;\n\tDog()\n\t{\n\t\tp = new int;\n\t\tcout << \"这是Dog的构造函数\" << endl;\n\t}\n\t~Dog()\n\t{\n\t\tcout << \"这是Dog的析构函数\" << endl;\n\t\tif (p != NULL)\n\t\t{\t\t\n\t\t\tcout << \"释放堆区的p\" << endl;\n\t\t\tdelete p;\n\t\t\tp = NULL;\n\t\t}\n\t}\n};\n\nint main()\n{\n\tAnimal *animal = new Dog();\n\tdelete animal;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n输出结果：\n\n```\n这是Animal的构造函数\n这是Dog的构造函数\n这是Animal的析构函数\n```\n\n可以看到，delete animal后并没有调用Dog的析构函数，释放子类Dog在堆区申请的空间。这样便出现了内存泄漏。\n\n此时虚析构函数和纯虚析构函数便可以起作用了，我们再看一个例子：\n\n```c++\nclass Animal\n{\npublic:\n\tAnimal()\n\t{\n\t\tcout << \"这是Animal的构造函数\" << endl;\n\t}\n\tvirtual ~Animal()//把父类的析构函数改为虚析构函数\n\t{\n\t\tcout << \"这是Animal的析构函数\" << endl;\n\t}\n};\n\nclass Dog : public Animal\n{\npublic:\n\tint *p;\n\tDog()\n\t{\n\t\tp = new int;\n\t\tcout << \"这是Dog的构造函数\" << endl;\n\t}\n\t~Dog()\n\t{\n\t\tcout << \"这是Dog的析构函数\" << endl;\n\t\tif (p != NULL)\n\t\t{\t\t\n\t\t\tcout << \"释放堆区的p\" << endl;\n\t\t\tdelete p;\n\t\t\tp = NULL;\n\t\t}\n\t}\n};\n\nint main()\n{\n\tAnimal *animal = new Dog();\n\tdelete animal;\n\tsystem(\"pause\");\n\treturn 0;\n}\n\n```\n\n​\t输出结果：\n\n```\n这是Animal的构造函数\n这是Dog的构造函数\n这是Dog的析构函数\n释放堆区的p\n这是Animal的析构函数\n```\n\n​\t如此便可以释放子类Dog在堆区申请的空间了，纯虚析构函数和虚析构函数的作用是一样，只是纯虚析构函数有一个和纯虚函数一样的特性，即定义看纯虚析构函数的类也属于抽象类，纯虚析构函数必须实现，如果不实现所有继承了拥有纯虚析构函数的抽象类的派生类都属于抽象类。需要注意的是，因为纯虚析构函数的特性，纯虚析构函数的实现就必须在类外实现了。\n\n## 5.重载、重写、重定义\n\n**重载**\n\n重载发生在一个类的内部，拥有相同函数名，相同返回值而参数列表不同的函数之间互为重载关系。如：\n\n```c++\nclass A\n{\n\tpublic:\n\t\tvoid fun(){}\n\t\tvoid fun(int a){}\n};\n```\n\n<font color=red> 只有相同函数名而参数列表的函数才是重载，函数名相同参数列表也相同而返回值不同的函数在C++中是不允许的。</font>\n\n**重写**\n\n重写发生在基类和派生类之间，基类中定义虚函数(纯虚函数)，派生类中定义和虚函数拥有**相同函数名，相同参数列表和相同返回值**的函数，这种情况下发生函数重写。如：\n\n```c++\nclass A\n{\n    public:\n    \tvirtual void fun(){}\n};\nclass B : public A\n{\n\tpublic:\n\t\tvoid fun(){}//重写A类的fun函数\n\t\tvoid fun(int a){}//重定义一个新函数\n\t\tint fun(){return 0;}//这种情况C++不允许\n};\n```\n\n**重定义**\n\n重定义也是发生在基类和派生类之间，派生类拥有与基类函数名相同，返回值相同，而参数列表不同的函数，此时发生重定义。如：\n\n```c++\nclass A\n{\n  public:\n    void fun(){}\n};\nclass B : public A\n{\n\tpublic:\n\t\tvoid fun(int a){}//发生重定义\n};\n```\n\n<font color = red> 派生类中可以重定义基类的任何函数，包括虚函数和纯虚函数。</font>\n\n## 6.父类指针和子类指针步长不一致问题\n\n问题出现的场景是这样的：\n\n```c++\nclass A\n{\npublic:\n\tint a;\n\tvirtual void print() {}\n};\nclass B : virtual public A\n{\npublic:\n\tint b;\n\tB(int b)\n\t{\n\t\tthis->b = b;\n\t}\n\tvoid print()\n\t{\n\t\tcout << b << endl;\n\t}\n};\nint main()\n{\n\tA *a = NULL;\n\tB *b = NULL;\n\tB array[2]{ B(1),B(2) };\n\ta = array;\n\tb = array;\n\ta->print();\n\tb->print();\n\ta++; b++;\n\ta->print();//这一步会出现异常\n\tb->print();\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n即父类指针a和子类指针b都指向一个子类对象数组，于是我们可以通过指针++的自增运算来逐步访问数组元素，问题就出在这，使用`sizeof()`计算两个类的大小分别得出，sizeof(A)=8;sizeof(B)=20;这就导致A类指针a每一次移步时只移动了8个字节，这个距离还远远没有达到下一个元素的首地址，所以访问会出错，这是因为指针每次移步移动的距离是指针类型的空间大小，如：A类大小为8，所以A类指针每移步一次走8个字节。\n\n可能会有疑问，为什么类B的大小是20？\n\n我们可以算一算，类B继承至类A所以类A中拥有的成员变量，类B也拥有，占8字节，这8字节分别是int变量4字节和虚函数表指针4字节；类B自身定义了一个int变量占4字节，由于类B重写了类A的虚函数，所以类B也拥有一个自己的虚函数表指针，占4字节；类B虚继承了类A，在这个过程中，C++编译器会给类B增加一个属性，占4字节，于是，**8+4+4+4+4=20**。\n\n------\n\n# 四、泛型编程\n\n## 1.函数模板\n\n### 函数模板的基本语法\n\n```c++\n//---------------函数模板\ntemplate <typename T>//告诉编译器我要开始泛型编程了，遇到T不要报错\nvoid Fun(T &a,T &b)\n{\n\tT t = a;\n\ta = b;\n\tb = t;\n}\n//----------------\nint main()\n{\n\tchar a = 97,b = 102;\n\tFun(a, b);//自动推导类型调用\n\tcout << a << \",\" << b << endl;\n\tstring x = \"xxx\", y = \"yyy\";\n\tFun<string>(x, y);//显示类型调用\n\tcout << x << \",\" << y << endl;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n### 当函数模板遇到函数重载\n\n当函数模板遇到函数重载准许下面4条原则\n\n- 函数模板可以像普通函数一样被重载\n- C++编译器优先考虑普通函数\n- 如果函数模板可以产生一个更好的匹配，那么选择函数模板\n- 可以通过模板的空实参列表的语法限定编译器只通过函数模板匹配\n\n我们来看一个例子，逐一分析\n\n```c++\ntemplate <typename T>\nvoid Fun(T a,T b)\n{\n\ta = a + b;\n\tcout << \"我是函数模板\" << endl;\n}\ntemplate <typename T1,typename T2>\nvoid Fun(T1 a,T2 b)\n{\n\tT1 x = a;\n\tT2 y = b;\n\tcout << \"我是函数模板重载\" << endl;\n}\nvoid Fun(int a, int b)\n{\n\tcout << \"我是普通函数\" << endl;\n}\nvoid Fun2(int a, int b)\n{\n\tcout << a << \",\" << b << endl;\n}\nint main()\n{\n\tFun(1, 2);\n\tFun(0.1, 0.2);\n\tFun('c', 1);\n\tFun<>(1, 2);\n\tFun2(0.1, 0.2);\n\tFun2('a', 3);\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**输出结果：**\n\n```\n我是普通函数\n我是函数模板\n我是函数模板重载\n我是函数模板\n0,0\n97,3\n```\n\n**分析：**\n\n- `Fun(1,2)`:有完全匹配的普通函数，所以调用`void Fun(int a, int b)`\n- `Fun(0.1,0.2)`:虽然普通函数`void Fun(int a, int b)`可以像`void Fun2(int a, int b)`一样进行隐式类型转换调用，倒是`Fun()`函数有更好的重载函数`void Fun(T1 a,T2 b)`模板匹配所以编译器优先调用`void Fun(T1 a,T2 b)`\n- `Fun('c',1)`:编译器能找到匹配的函数模板重载`void Fun(T1 a,T2 b)`所以优先调用函数模板\n- `Fun<>(1,2)`:使用了空参数列表，告诉编译器只匹配函数模板，即使代码段中有能完美匹配的普通函数，也只调用函数模板\n\n## 2.类模板\n\n### 定义\n\n```c++\ntemplate <typename T>//定义\nclass TemplateA\n{\npublic:\n\tTemplateA(T a)\n\t{\n\t\tthis->a = a;\n\t}\n\tvoid PrintA()\n\t{\n\t\tcout << \"a:\" << a << endl;\n\t}\nprivate:\n\tT a;\n};\n\nvoid Test(TemplateA<int> &a)//类模板作形参\n{\n\ta.PrintA();\n}\n\nint main()\n{\n\tTemplateA<int> a(1);//使用\n\tTemplateA<string> b(\"str\");\n\tTemplateA<bool> c(true);\n\tTest(a);\n\tb.PrintA();\n\tc.PrintA();\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**输出结果：**\n\n```\na:1\na:str\na:1\n```\n\n类模板的定义和函数模板的定义类似\n\n### 使用\n\n类模板的使用必须显示的确定模板的类型参数，如：`TemplateA<string> b(\"str\")`\n\n### 类模板作参数\n\n类模板作参数也必须显示的确定模板那的类型参数，如：\n\n`void Test(TemplateA<int> &a)`以便编译器为形参确定内存空间。\n\n### 类模板派生普通类\n\n类模板也可以被继承，但是在继承时需要显示确定模板的类型参数\n\n```c++\ntemplate <typename T>\nclass TemplateA\n{\npublic:\n\tTemplateA(T a)\n\t{\n\t\tthis->a = a;\n\t}\n\tvoid PrintA()\n\t{\n\t\tcout << \"a:\" << a << endl;\n\t}\nprivate:\n\tT a;\n};\nclass B : public TemplateA<int>//类模板派生普通类\n{\npublic:\n\tB(int a, int b) :TemplateA(a)\n\t{\n\t\tthis->b = b;\n\t}\n\tvoid PrintB()\n\t{\n\t\tcout << \"b:\" << b << endl;\n\t}\nprivate:\n\tint b;\n};\n\nint main()\n{\n\tB b(1, 2);\n\tb.PrintA();\n\tb.PrintB();\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n### 模板类派生模板类\n\n模板类不仅可以派生普通类，还可以派生模板类\n\n```c++\ntemplate <typename T>\nclass TemplateA\n{\npublic:\n\tTemplateA(T a)\n\t{\n\t\tthis->a = a;\n\t}\n\tvoid PrintA()\n\t{\n\t\tcout << \"a:\" << a << endl;\n\t}\nprivate:\n\tT a;\n};\ntemplate <typename T1,typename T2>\nclass TemplateB : public TemplateA<T2>//类模板派生类模板\n{\npublic:\n\tTemplateB(T2 a, T1 b) :TemplateA(a)\n\t{\n\t\tthis->b = b;\n\t}\n\tvoid PrintB()\n\t{\n\t\tcout << \"b:\" << b << endl;\n\t}\nprivate:\n\tT1 b;\n};\n\nint main()\n{\n\tTemplateB<string,char> b('A', \"TemplateB\");\n\tb.PrintA();\n\tb.PrintB();\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**输出结果：**\n\n```\na:A\nb:TemplateB\n```\n\n### 类模板的主要作用\n\n类模板的主要作用就是将数据结构的表示和算法不受包含的元素类型的影响，即类模板将元素类型和数据结构算法分离开来了，使数据结构和算法成为真正意义上的数据结构和算法，如：链表不再因为`int`类型而定义一个`int`类型的链表，因`string`类型而定义一个`string`类型的链表，而是定义一个链表可以通用于所有类型。\n\n# 五、异常处理\n\n## 1.异常的基本语法\n\n```C++\nvoid Try(int x, int y)\n{\n\tif (y == 0)\n\t{\n\t\tcout << \"除数不能等于0，抛出异常\"<<endl;\n\t\tthrow y;//这里必须指明抛出异常的数据类型，否则程序无法处理异常，只能使用这个类型的变量，x和y的效果是一样的，不能直接抛出int，即这样是不行的throw int\n\t}\n\tcout << \"x/y=\" << x / y << endl;\n}\n\nvoid Test1()\n{\n\tTry(1, 2);\n\tTry(3, 0);\n}\n\nvoid Test2()\n{\n\ttry\n\t{\n\t\tTest1();\n\t}\n\tcatch (char e)\n\t{\n\t\tcout << \"处理char异常\" << endl;\n\t}\n\tcatch(...)\n\t{\n\t\tcout << \"无法处理的异常继续往上抛\" << endl;\n\t\tthrow;\n\t}\n}\n\nint main()\n{\n\ttry\n\t{\n\t\tTest2();\n\t}\n\tcatch(int e)\n\t{\n\t\tcout << \"处理int异常\" << endl;\n\t}\n\tcatch (...)\n\t{\n\t\tcout << \"处理其他异常\" << endl;\n\t}\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**输出结果：**\n\n```\nx/y=0\n除数不能等于0，抛出异常\n无法处理的异常继续往上抛\n处理int异常\n```\n\n- 异常的抛出是可以跨函数的，如上面的代码，在`Try`函数里抛出的异常可以在`mian`函数中处理，中间跨过了`Test1`，`Test2`两个函数\n- 如果在一个函数内捕捉到异常但是却无法处理可以通过`throw`继续向上抛，直至main函数，如上面代码，`Test2`捕捉到异常但是没有处理继续向上抛给了main函数，如果main函数还是没有处理，则会直接中断程序\n- C++使用`cacth(...)`来捕捉其他没有捕捉到的异常，如上面代码，main函数中只捕捉了int类型的异常，如果出现其他类型的异常则有`cacth(...)`来捕捉\n- 异常处理是按照类型匹配来处理的，即`throw`的int类型的异常只有`cacth(int e)`能够接收得到，否则就只能使用`cacth(...)`来接收未知异常\n\n## 2.C++异常处理的特性\n\n​\tC++的异常处理具有跨函数性，这使得<font color=red> 异常引发</font>和<font color=red> 异常处理</font>分离开来，这样下层函数可以不用过多的在一异常处理，而把重点放在问题的逻辑处理上，异常处理可以由上层调用者专门来处理。\n\n## 3.异常接口申明\n\n**不抛出任何异常：**\n\n```C++\nvoid Try(int x, int y) throw()//异常接口申明\n{\n\tif (y == 0)\n\t{\n\t\tcout << \"除数不能等于0，抛出异常\"<<endl;\n\t\tthrow x;\n\t}\n\tcout << \"x/y=\" << x / y << endl;\n}\n```\n\n**只能抛出列表中类型的异常：**\n\n```C++\nvoid Try(int x, int y) throw(char,int*)\n{\n\tif (y == 0)\n\t{\n\t\tcout << \"除数不能等于0，抛出异常\"<<endl;\n\t\tthrow x;\n\t}\n\tcout << \"x/y=\" << x / y << endl;\n}\n```\n\n**可以抛出任何异常：**\n\n```C++\nvoid Try(int x, int y)\n{\n\tif (y == 0)\n\t{\n\t\tcout << \"除数不能等于0，抛出异常\"<<endl;\n\t\tthrow x;\n\t}\n\tcout << \"x/y=\" << x / y << endl;\n}\n```\n\n不过经过测试，三份代码无论是否写throw都是可以抛出并处理异常的，似乎这个语法没什么卵用，可能C++11摒弃了这种用法，但是考虑到兼容保留这个语法。\n\n## 4.异常接收的3种方式\n\n### 普通形参\n\n```c++\nclass A\n{\npublic:\n\tA() { cout << \"构造A\" << endl; }\n\tA(const A &a) { cout << \"拷贝A\" << endl; }\n\t~A() { cout << \"析构A\" << endl; }\n};\n\nvoid Try()\n{\n\tA a;\n\tthrow a;\n}\n\nint main()\n{\n\ttry\n\t{\n\t\tTry();\n\t}\n\tcatch(A e)//使用普通形参\n\t{\n\t\tcout << \"处理int异常\" << endl;\n\t}\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**输出结果：**\n\n```\n构造A\n拷贝A\n拷贝A\n析构A\n处理int异常\n析构A\n析构A\n```\n\n可以看到a被拷贝两次，第一次从`A a`拷贝到`throw a`，第二次从`throw a`拷贝到`catch(A e)`，可以看出如果使用普通形参来接收异常，异常变量会由异常抛出处拷贝到异常接收处。\n\n### 引用\n\n将上面代码的`catch(A e)`改为`catch(A &e)`\n\n**输出结果：**\n\n```\n构造A\n拷贝A\n析构A\n处理int异常\n析构A\n```\n\n可以看到只拷贝了一次，即从`A a`拷贝到`throw a`。\n\n### 指针\n\n上面代码应该修改为如下\n\n```C++\nclass A\n{\npublic:\n\tA() { cout << \"构造A\" << endl; }\n\tA(const A &a) { cout << \"拷贝A\" << endl; }\n\t~A() { cout << \"析构A\" << endl; }\n};\n\nvoid Try()\n{\n\tA *a = new A();//对象必须创建在堆区，函数结束对象就会被销毁，而无法通过指针传递到catch中\n\tthrow a;\n}\n\nint main()\n{\n\ttry\n\t{\n\t\tTry();\n\t}\n\tcatch(A *e)\n\t{\n\t\tcout << \"处理int异常\" << endl;\n\t\tdelete e;//需要手动释放堆区的内存\n\t}\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**输出结果：**\n\n```\n构造A\n处理int异常\n析构A\n```\n\n可以看到使用指针完全不需要拷贝，但是却需要消耗堆区的内存且容易造成内存泄露。\n\n### 总结\n\n总的来说，最优的方式还是使用引用。\n\n## 5.继承在异常处理中的应用\n\n在实际的项目中我们处理的异常并不是一些基础的数据类型，大多都是开发者的自定义类，这种情况在捕捉异常的时候就相当麻烦，尽管有些异常处理起来程序基本一致，但是却要将每一种异常一一捕捉并一一处理，下面的代码我们来模拟一下这种情况。\n\n```C++\nclass A//A类实现输入一个范围在0-10的奇数\n{\npublic:\n\tA(int a) \n\t{\n\t\tif (a % 2 != 0) {\n\t\t\tif (a < 0)throw LtZero();\n\t\t\tif (a > 10)throw GtTen();\n\t\t\telse num = a;\n\t\t}\n\t\telse throw Even();\n\t}\nprivate:\n\tint num;\n};\nclass LtZero//专门处理异常的异常类\n{};\nclass GtTen\n{};\nclass Even\n{};\n\nint main()\n{\n\ttry { A a(4); }\n\tcatch (LtZero &lz) { cout << \"输入的数小于0\" << endl; }\n\tcatch (GtTen &gt) { cout << \"输入的数大于10\" << endl; }\n\tcatch (Even &ev) { cout << \"输入的数是偶数\" << endl; }\n\tcatch (...) { cout << \"其他异常\" << endl; }\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n可以看到我们的异常处理模块相当繁杂，在实际开发项目中异常的数量远远不止上面模拟的三种，可能多达上百种或则更多，这是异常的处理将变得十分繁杂，那么如何处理呢？\n\n可能心细的读者会发现，我们在处理异常时使用了专门的异常处理类，而类是可以继承的，于是乎，继承在异常处理中的作用就体现出来了。\n\n我们再来看一份优化后的代码\n\n```c++\nclass A//A类实现输入一个范围在0-10的奇数\n{\npublic:\n\tA(int a) \n\t{\n\t\tif (a % 2 != 0) {\n\t\t\tif (a < 0)throw LtZero();\n\t\t\tif (a > 10)throw GtTen();\n\t\t\telse num = a;\n\t\t}\n\t\telse throw Even();\n\t}\n\n\tclass Even\n\t{\n\tpublic:\n\t\tvirtual void PrintErro()\n\t\t{\n\t\t\tcout<< \"输入的数是偶数\" << endl;\n\t\t}\n\t};\n\tclass LtZero:public Even\n\t{\n\tpublic:\n\t\tvoid PrintErro()\n\t\t{\n\t\t\tcout << \"输入的数小于0\" << endl;\n\t\t}\n\t};\n\tclass GtTen:public Even\n\t{\n\tpublic:\n\t\tvoid PrintErro()\n\t\t{\n\t\t\tcout << \"输入的数大于10\" << endl;\n\t\t}\n\t};\nprivate:\n\tint num;\n};\n\nint main()\n{\n\ttry { A a(4); }\n\tcatch (A::Even e) { e.PrintErro(); }\n\tcatch (...) { cout << \"其他异常\" << endl; }\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n可以看到我们的异常处理模块使用多态，繁杂程度被大幅缩水了，而我们的异常处理被集中在了异常处理类中，有时，如果我们的异常处理只对某一个类有效也是可以直接将异常处理类定义在抛出类里面的。\n\n## 6.标准异常库\n\nC++提供一些标准的异常库，头文件为：#include<stdexcep>\n\n# 六、标准IO流\n\n## 1.标准IO流流程\n\n![](【C++】C++高级/Snipaste_2019-10-06_10-03-47.png)\n\n## 2.标准输入流\n\n| 标准函数                             | 作用                                                         |\n| ------------------------------------ | ------------------------------------------------------------ |\n| cin                                  | cin>>操作支持任何基本类型的输入，但是遇到空格则结束读取      |\n| cin.get(char chr)                    | 从缓冲区中读取一个字符到chr中，因为C++定义的cin.get(char)中会返回一个函数自身的引用，所以此函数支持链式编程，即cin.get(a).get(b).get(c);b表示依次从缓冲区中读取三个字符到a，b，c中 |\n| cin.get(char* buf,int cout)          | 从缓冲区中读取cout个字符到buf数组中，因为函数似乎会在数组末尾添加点什么，所以实际读取的字符数量是cout-1个，此函数也支持链式编程 |\n| cin.get(char* buf,int cout,char chr) | 从缓冲区中读取cout个字符到buf数组中，如果碰到字符chr则结束读取 |\n| cin.getline(char buf,int cout)       | 从缓冲区中读取cout个字符到buf数组中                          |\n| cin.ignore(int num)                  | 忽略缓冲区当前读取指针开始的num个字符再读取                  |\n| cin.peek()                           | 判断缓冲区中是否有数据，如果有则返回第一个字符，如果没有则阻塞程序 |\n| cin.putback(char chr)                | 将读取出来的字符再返存回缓冲区，只能读取一个字符             |\n\n## 3.标准输出流\n\n| 标准函数                       | 作用                                                         |\n| ------------------------------ | ------------------------------------------------------------ |\n| cout                           | 输出缓冲区内容，支持任何基本类型数据的输出                   |\n| cout.flush(void)               | 刷新缓冲区，无视系统繁忙，强制输出缓冲区的字符，语法和cout一样“cout.flush()<<buf<<endl;” |\n| cout.put(char chr)             | 在标准输出设备输出指针的当前位置插入字符chr，语法和cout一致  |\n| cout.write(char *chr,int cout) | 输出*chr所指向空间中cout个数量的字符，即使越界也会继续输出，语法和cout一致 |\n| cout.width(int num)            | 输出num个字节宽度的字符，一般配合cout.fill(char chr)和其他cout函数一起使用 |\n| cout.fill(char chr)            | 配合cout.width(int num)和其他cout一起使用，在输出的num宽度的字符中将cout函数没有填充完的字符用chr填充 |\n| cout.setf(标记)                | 格式化cout输出，标记种类很多，具体的可以查阅资料，配合cout函数一起使用 |\n\n## 4.文件IO流\n\n​\t文件操作相对来说比较简单，总的来说就是5个步骤，即\n\n### 操作步骤\n\n- ​\t包含头文件<font color = red>#include<ftream></font>\n\n- ​\t创建流对象\n\n- ​\t打开文件\n\n- ​\t读写文件\n\n  ​\t<font color = red>需要注意的是C++中文件写的方式是使用符号“<<”，如：fout << \"文件内容\"<<endl;</font>\n\n  ​\t<font color = red>同理文件读也可以使用“>>”来读。</font>\n\n- ​\t关闭文件\n\n  **文件写**\n\n```c++\n#include <iostream>\n#include <string>\n#include <fstream>\n\nusing namespace std;\n\nvoid test()\n{\n\tofstream fout;\n\tfout.open(\"文件测试.txt\", ios::out);\n\tfout << \"姓名：张三\" << endl;\n\tfout << \"性别：男\" << endl;\n\tfout.close();\n}\n\nint main()\n{\n\ttest();\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n​\t**输出结果：**\t\n\n![](【C++】C++高级/Snipaste_2019-09-14_16-29-43.png)\n\n### 4种文件读的方式\n\n```c++\n#include <iostream>\n#include <string>\n#include <fstream>\n\nusing namespace std;\n\nvoid test()\n{\n\tifstream fin;\n\tfin.open(\"文件测试.txt\", ios::in);\n\tif (!fin.is_open())//文件读需要多添加一步判断文件是否打开成功的步骤\n\t{\n\t\tcout << \"文件打开失败\" << endl;\n\t}\n\tchar str[1024];\n\tstring strs;\n\tchar chr;\n\t//第一中方式\n\t//while (fin >> str)//操作符\">>\"每次只能读取一行数据，读到文件尾“EOF”时结束\n\t//{\n\t//\tcout << str << endl;\n\t//}\n\n\t//第二种方式\n\t//while (fin.getline(str, 50))//ifstream::getline(char *str,int num);这个函数只支持字符数组，参数num指的是需要读取的字节数\n\t//{\n\t//\tcout << str << endl;\n\t//}\n\n\t//第三种方式\n\t//while (getline(fin, strs))//与第二种方式不同的是，这个getline函数是全局的，且只支持输出到string类型的对象中\n\t//{\n\t//\tcout << strs << endl;\n\t//}\n\n\t//第四中方式\n\twhile ((chr = fin.get()) != EOF)//get()函数每次只能读取一个字符\n\t{\n\t\tcout << chr ;\n\t}\n\tfin.close();\n}\n\nint main()\n{\n\ttest();\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n### 文件的打开模式\n\n​\tC++提供6中文件的打开方式\n\n| 打开方式    | 解释                                               |\n| ----------- | -------------------------------------------------- |\n| ios::in     | 以读的形式打开                                     |\n| ios::out    | 以写的形式打开，会覆盖源文件                       |\n| ios::ate    | 以写的形式打开并初始文件位置：文件尾，会覆盖源文件 |\n| ios::app    | 以追加的方式打开文件                               |\n| ios::trunc  | 如果文件存在先删除再创建                           |\n| ios::binary | 以二进制的形式打开                                 |\n\n### 读写二进制文件\n\n```c++\n#include <iostream>\n#include <string>\n#include <fstream>\n\nusing namespace std;\n\nclass Person\n{\npublic:\n\tstring name = \"张三\";\n\tstring sex = \"男\";\n};\n\nvoid test()\n{\n\tofstream fout;\n\tfout.open(\"二进制文件测试.txt\", ios::out | ios::binary);\n\tPerson p;\n\tfout.write((char *)&p, sizeof(Person));//注意这里使用ofstream::write()来写\n\tfout.close;\n\n\tifstream fin;\n\tfin.open(\"二进制文件测试.txt\", ios::in | ios::binary);\n\tif (!fin.is_open())\n\t{\n\t\tcout << \"文件打开错误\" << endl;\n\t\treturn;\n\t}\n\tPerson pin;\n\tfin.read((char *)&pin, sizeof(Person));//注意这里使用ofstream::read()来读\n\tcout << \"姓名：\" << pin.name << endl;\n\tcout << \"性别：\" << pin.sex << endl;\n\tfin.close();\n}\n\nint main()\n{\n\ttest();\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n","slug":"【C++】C++高级","published":1,"updated":"2021-02-01T13:27:20.343Z","_id":"ckk9hocbm003xdwr7encjdct0","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"一、类\"><a href=\"#一、类\" class=\"headerlink\" title=\"一、类\"></a>一、类</h1><h2 id=\"1-浅拷贝与深拷贝\"><a href=\"#1-浅拷贝与深拷贝\" class=\"headerlink\" title=\"1.浅拷贝与深拷贝\"></a>1.浅拷贝与深拷贝</h2><h3 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h3><p><font color=\"red\"> C++在进行浅拷贝时，只拷贝栈区的内存空间，不拷贝堆区的内存空间，即浅拷贝只拷贝非指针的成员变量和指针本身，而不拷贝指针所指向的堆区的内容。</font></p>\n<p>我们代码1.1为例</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//代码1.1</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Obj</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tObj(<span class=\"hljs-keyword\">char</span> *tp)<br>\t&#123;<br>\t\tlen = <span class=\"hljs-built_in\">strlen</span>(tp);<br>\t\tp = (<span class=\"hljs-keyword\">char</span>*)<span class=\"hljs-built_in\">malloc</span>(len + <span class=\"hljs-number\">1</span>);<br>\t\tstrcpy_s(p, len+<span class=\"hljs-number\">1</span>, tp);<br>\t&#125;<br>\t~Obj()<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">if</span> (p != <span class=\"hljs-literal\">NULL</span>)<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-built_in\">free</span>(p);<br>\t\t\tp = <span class=\"hljs-literal\">NULL</span>;<br>\t\t\tlen = <span class=\"hljs-number\">0</span>;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Show</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; *p &lt;&lt; *(p + <span class=\"hljs-number\">1</span>) &lt;&lt; *(p + <span class=\"hljs-number\">2</span>) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br><span class=\"hljs-keyword\">private</span>:<br>\t<span class=\"hljs-keyword\">char</span> *p;<br>\t<span class=\"hljs-keyword\">int</span> len;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">text</span><span class=\"hljs-params\">(Obj &amp;obj)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tObj obj2 = obj;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-function\">Obj <span class=\"hljs-title\">obj1</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;asd&quot;</span>)</span></span>;<br>\ttext(obj1);<br>\tobj1.Show();<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>我们作一个图示：</p>\n<p><img src=\"/2019/09/14/%E3%80%90C++%E3%80%91C++%E9%AB%98%E7%BA%A7/Git\\Blog\\source_posts\\【C++】C++高级\\Snipaste_2019-10-01_16-21-15.png\"></p>\n<p>​    我们没有自定义Obj类的拷贝构造函数，所以当代码执行到<code>Obj obj2 = obj1;</code>时，编译器将调用默认的拷贝构造函数，然而，<font color=\"red\"> 编译器默认的拷贝构造函数是一个浅拷贝</font>，所以新创建的对象obj2没有自己的堆区空间，obj2.p指向的是obj1.p所指向的内存地址。</p>\n<p>​    上面的代码编译是通不过的，<font color=\"red\"> 原因在于，对象析构时，同一个内存地址<code>0x0001</code>被对象obj1和obj2一起析构了两次</font>。当代码执行完<code>test(obj1)</code>时，对象obj2被析构，指针obj2.p所指向的内存地址<code>0x0001</code>被释放，所以当代码执行到<code>obj1.Show()</code>时，使用了已经被释放掉的内存<code>0x0001</code>地址，从而导致运行错误。</p>\n<p>​    <font color=\"green\"> <strong>这里我有一个疑问，既然浅拷贝在拷贝有指针的对象时，会出现两次析构而出错，所以浅拷贝只能拷贝没有指针成员的对象，那么浅拷贝和深拷贝似乎没有什么区别了，那么浅拷贝存在的意义是什么呢？</strong></font></p>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><p>C++没有提供给开发者预定义的深拷贝方法，所以要想使用深拷贝，我们需要字写一个拷贝构造函数。</p>\n<p>深拷贝可以解决上面遇到的浅拷贝的问题，因为，<font color=\"red\"> 深拷贝会申请一新的内存空间用于存放拷贝过来的内容，即深拷贝拷贝对象的所有成员，包括指针所指向的内存空间也会一起被拷贝，被拷贝过来的指针会指向一个新的内存地址</font>。</p>\n<p><img src=\"/2019/09/14/%E3%80%90C++%E3%80%91C++%E9%AB%98%E7%BA%A7/Snipaste_2019-10-01_16-52-53.png\"></p>\n<h3 id=\"定义深拷贝构造函数\"><a href=\"#定义深拷贝构造函数\" class=\"headerlink\" title=\"定义深拷贝构造函数\"></a>定义深拷贝构造函数</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//代码1.2</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Obj</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tObj(<span class=\"hljs-keyword\">char</span> *tp)<br>\t&#123;<br>\t\tlen = <span class=\"hljs-built_in\">strlen</span>(tp);<br>\t\tp = (<span class=\"hljs-keyword\">char</span>*)<span class=\"hljs-built_in\">malloc</span>(len + <span class=\"hljs-number\">1</span>);<br>\t\tstrcpy_s(p, len+<span class=\"hljs-number\">1</span>, tp);<br>\t&#125;<br>    <span class=\"hljs-comment\">//------------------------------</span><br>    <span class=\"hljs-comment\">//拷贝构造函数--深拷贝</span><br>\tObj(<span class=\"hljs-keyword\">const</span> Obj &amp;obj)<br>\t&#123;<br>\t\tlen = obj.len;<br>\t\tp = (<span class=\"hljs-keyword\">char</span>*)<span class=\"hljs-built_in\">malloc</span>(len + <span class=\"hljs-number\">1</span>);<br>\t\tstrcpy_s(p, len + <span class=\"hljs-number\">1</span>, obj.p);<br>\t&#125;<br>    <span class=\"hljs-comment\">//------------------------------</span><br>\t~Obj()<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">if</span> (p != <span class=\"hljs-literal\">NULL</span>)<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-built_in\">free</span>(p);<br>\t\t\tp = <span class=\"hljs-literal\">NULL</span>;<br>\t\t\tlen = <span class=\"hljs-number\">0</span>;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Show</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; *p &lt;&lt; *(p + <span class=\"hljs-number\">1</span>) &lt;&lt; *(p + <span class=\"hljs-number\">2</span>) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br><span class=\"hljs-keyword\">private</span>:<br>\t<span class=\"hljs-keyword\">char</span> *p;<br>\t<span class=\"hljs-keyword\">int</span> len;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>当一个类中定义了拷贝构造函数，则在对象拷贝时，编译器就不会在调用默认的拷贝构造函数转而调用自定义的拷贝构造函数，当我们把代码1.1中类的定义改为代码1.2中类的定义后，程序就可以正常执行了。</p>\n<p><font color=\"red\">使用深拷贝时，我们还需要注意下面的情况：</font></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">Obj <span class=\"hljs-title\">obj1</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;asd&quot;</span>)</span></span>;<br><span class=\"hljs-function\">Obj <span class=\"hljs-title\">obj3</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;fgh&quot;</span>)</span></span>;<br>obj3 = obj1;<br></code></pre></td></tr></table></figure>\n<p>此时，在<code>obj3=obj1;</code>处依旧调用默认的拷贝构造函数，这里我们要弄清楚<code>obj3=obj1</code>和<code>Obj obj3 = obj1</code>之间的区别，<code>obj3=obj1</code>是将<font color=\"red\">obj1赋值给obj3</font>，<code>=</code>赋值与拷贝构造函数没有什么关联，<code>=</code>在赋值时是C++编译器自己调用默认的拷贝构造函数—浅拷贝，和类中有无定义深拷贝无关；而<code>Obj obj3=obj1</code>则是<font color=\"red\">使用obj1来构造obj3</font>，此时如果类中定义了深拷贝构造函数，就会使用深拷贝。要解决这个问题，就需要显示重载<code>=</code>运算符了。</p>\n<h3 id=\"小知识\"><a href=\"#小知识\" class=\"headerlink\" title=\"小知识\"></a><font color=\"blue\"><strong>小知识</strong></font></h3><ul>\n<li><font color=\"blue\">在定义拷贝构造函数时，必须使用引用传递，否则会出现无限拷贝的情况，因为，如果我们使用传值传递的话，在传递对象到拷贝构造函数时，又会调用拷贝构造函数将实参拷贝给形参，而这个过程又会将对象传递给拷贝构造函数，从而在此调用拷贝构造函数将实参拷贝给形参，如此无限循环</font></li>\n<li><font color=\"blue\">拷贝构造函数只能有一个参数，且必须是自身类的引用，否则编译器将识别被普通构造函数</font></li>\n</ul>\n<h2 id=\"2-初始化参数列表\"><a href=\"#2-初始化参数列表\" class=\"headerlink\" title=\"2.初始化参数列表\"></a>2.初始化参数列表</h2><h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>我们以下面的代码1.3来说明初始化参数列表</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tA(<span class=\"hljs-keyword\">int</span> a)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;a = a;<br>\t&#125;<br><span class=\"hljs-keyword\">private</span>:<br>\t<span class=\"hljs-keyword\">int</span> a;<br>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span> :<br>\tB(<span class=\"hljs-keyword\">int</span> i)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;i = i;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">int</span> i;<br>\tA a;<br><br>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-function\">B <span class=\"hljs-title\">b</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span></span>;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>运行结果：</strong></p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">错误\tC2512\t“<span class=\"hljs-keyword\">A</span>”: 没有合适的默认构造函数可用<br></code></pre></td></tr></table></figure>\n<p>​    这个问题就在于，在类B中组合了一个A类的成员，编译器在构造B类对象时，同时会构造一个A类对象作为B类的成员，然而，因为A类自定义了一个有参的构造函数，所以在构造A类时，编译器不会使用默认构造函数，而是使用自定义的有参构造函数，问题就出在这里，编译器在构造A类时，没有参数传递到A类的有参构造函数中。初始化参数列表就是用于解决这种问题的。</p>\n<p>​    需要说明的是，如果A类中没有自定义有参的构造函数，则在B类构造对象时编译器自动调用A类的默认构造函数构造A类对象成员，就不会报错。</p>\n<p>​    初始化参数列表可以让我们在构造B类对象时，根据参数列表来构造不同的A类成员。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>初始化参数列表的使用如下面的<code>B(int i):a1(1),a2(2,&quot;asd&quot;)</code>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tA(<span class=\"hljs-keyword\">int</span> a)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;a = a;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;构造小A&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\tA(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-built_in\">string</span> str)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;a = a;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;str = str;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;构造大A&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\t~A()<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;析构A&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">int</span> a;<br>\t<span class=\"hljs-built_in\">string</span> str;<br>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span> :<br>\tB(<span class=\"hljs-keyword\">int</span> i):a1(<span class=\"hljs-number\">1</span>),a2(<span class=\"hljs-number\">2</span>,<span class=\"hljs-string\">&quot;asd&quot;</span>)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;i = i;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;构造B&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\t~B()<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;析构B&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">int</span> i;<br>\tA a1;<br>\tA a2;<br>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-function\">B <span class=\"hljs-title\">b</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span></span>;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; b.a1.str &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; b.a2.str &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\ttest();<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">构造小<span class=\"hljs-keyword\">A</span><br>构造大<span class=\"hljs-keyword\">A</span><br>构造B<br><br>asd<br>析构B<br>析构<span class=\"hljs-keyword\">A</span><br>析构<span class=\"hljs-keyword\">A</span><br></code></pre></td></tr></table></figure>\n<p>​    值得注意的是<font color=\"red\"> A类对象的构造顺序不是由初始化参数列表的顺序决定的，而是由对象的申明的前后顺序决定的</font>，如：<code>B(int i):a1(1),a2(2,&quot;asd&quot;)</code>和<code>B(int i):a2(2,&quot;asd&quot;),a1(1)</code>的构造顺序是一样的，但是当我们将类B中组合的A类对象的申明顺序改为如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span> :<br>\tB(<span class=\"hljs-keyword\">int</span> i):a1(<span class=\"hljs-number\">1</span>),a2(<span class=\"hljs-number\">2</span>,<span class=\"hljs-string\">&quot;asd&quot;</span>)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;i = i;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;构造B&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\t~B()<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;析构B&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">int</span> i;<br>\tA a2;<br>\tA a1;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>则构造顺序就变为“先构造a2再构造a1”了。</p>\n<p><font color=\"red\"> 析构的顺序和构造的顺序相反。</font></p>\n<h3 id=\"小知识-1\"><a href=\"#小知识-1\" class=\"headerlink\" title=\" 小知识\"></a><font color=\"blue\"> 小知识</font></h3><ul>\n<li><font color=\"blue\"> 当一个类中组合了其他的类对象作为成员时，拷贝构造函数也必须使用初始化参数列表，来构造对象成员然后拷贝</font></li>\n</ul>\n<h2 id=\"3-匿名对象的生命周期\"><a href=\"#3-匿名对象的生命周期\" class=\"headerlink\" title=\"3.匿名对象的生命周期\"></a>3.匿名对象的生命周期</h2><h3 id=\"什么是匿名对象\"><a href=\"#什么是匿名对象\" class=\"headerlink\" title=\"什么是匿名对象\"></a>什么是匿名对象</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\">calss A<br>&#123;<br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-keyword\">int</span> a;<br>\tA(<span class=\"hljs-keyword\">int</span> a)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;a = a;<br>\t&#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    A(<span class=\"hljs-number\">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>上面的语句<code>A(1)</code>创建的就是一个匿名临时的对象，<font color=\"red\"> 需要注意，如果一个类只有无参的构造函数，那么这个类将无法构建匿名对象</font>，匿名对象的生命周期就只在创建匿名对象的这条语句内，如果我们不使用一个对象来接收这个匿名对象，那么匿名对象会在语句结束时被销毁，当我们使用<code>A a = A(1);</code>不会出现匿名对象拷贝到类B对象b的情况，这种语句已经被C++优化成了类B的构造语句。说这么多其实匿名对象没什么卵用。</p>\n<h2 id=\"4-new和delete\"><a href=\"#4-new和delete\" class=\"headerlink\" title=\"4.new和delete\"></a>4.new和delete</h2><p>1.new和delete的用法</p>\n<p><code>new</code>可以为<strong>基础类型</strong>、<strong>数组</strong>、<strong>类</strong>分配内存空间，<code>new</code>分配的内存空间都分配在<strong>堆</strong>上。随意<code>new</code>出来的内存空间必须使用一个指针来指向，不能使用同类型的变量来接收，也禁止不接受。</p>\n<p><strong>new 基础类型</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> *p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>;<br><span class=\"hljs-keyword\">delete</span> p;<br></code></pre></td></tr></table></figure>\n<p><strong>new 数组</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> *p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">10</span>];<br><span class=\"hljs-keyword\">delete</span>[] p;<br></code></pre></td></tr></table></figure>\n<p><strong>new 类</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//C++</span><br>A *p = <span class=\"hljs-keyword\">new</span> A();<br><span class=\"hljs-keyword\">delete</span> p;<br><span class=\"hljs-comment\">//C</span><br>A *pc = (A*)<span class=\"hljs-built_in\">malloc</span>(A);<br><span class=\"hljs-built_in\">free</span>(pc);<br></code></pre></td></tr></table></figure>\n<h3 id=\"new-delete和malloc-free的区别\"><a href=\"#new-delete和malloc-free的区别\" class=\"headerlink\" title=\"new delete和malloc free的区别\"></a><code>new delete</code>和<code>malloc free</code>的区别</h3><ul>\n<li><p>在基础类型和基础类型数组方面<code>new delete</code>和<code>malloc free</code>几乎没有什么区别</p>\n</li>\n<li><p><code>new</code>不仅会分配内存还会调用构造函数，而<code>malloc</code>只会分配内存</p>\n</li>\n<li><p><code>delete</code>会调用析构函数来销毁对象，而<code>free</code>只是单纯的释放内存</p>\n</li>\n</ul>\n<h3 id=\"小知识-2\"><a href=\"#小知识-2\" class=\"headerlink\" title=\" 小知识\"></a><font color=\"blue\"> <strong>小知识</strong></font></h3><p><font color=\"blue\"> <code>new delete</code>和<code>malloc free</code>是可以穿插使用的，即<code>new</code>可以和<code>free</code>搭配使用，<code>malloc</code>可以和<code>delete</code>搭配使用。</font></p>\n<h1 id=\"二、继承\"><a href=\"#二、继承\" class=\"headerlink\" title=\"二、继承\"></a>二、继承</h1><p>继承这边主要分析一下<code>虚继承</code></p>\n<h2 id=\"1-虚继承\"><a href=\"#1-虚继承\" class=\"headerlink\" title=\"1.虚继承\"></a>1.虚继承</h2><p>虚继承的出现主要是为解决如下的继承关系中的二义性问题</p>\n<p><img src=\"/2019/09/14/%E3%80%90C++%E3%80%91C++%E9%AB%98%E7%BA%A7/Snipaste_2019-10-02_15-50-39.png\" alt=\"图1\"></p>\n<p>当我们的类的继承过程中出现这种继承关系时，我们需要使类B和类C分别虚继承类A来解决二义性，具体操作如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span></span><br><span class=\"hljs-class\">&#123;</span><br>   <span class=\"hljs-keyword\">public</span>:<br>    \t<span class=\"hljs-keyword\">int</span> a;<br>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span> :</span> <span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">public</span> A<br>&#123;<br>\t<span class=\"hljs-keyword\">public</span>:<br>\t\t<span class=\"hljs-keyword\">int</span> b;<br>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">C</span> :</span> <span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">public</span> A<br>&#123;<br>\t<span class=\"hljs-keyword\">public</span>:<br>\t\t<span class=\"hljs-keyword\">int</span> c;<br>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">D</span> :</span> <span class=\"hljs-keyword\">public</span> B,C<br>&#123;<br>\t<span class=\"hljs-keyword\">public</span>:<br>\t\t<span class=\"hljs-keyword\">int</span> d;<br>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    D d;<br>    d.a = <span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这里有一点要注意，虚继承的应用场景有限，虚继承只能解决这种情况：</p>\n<p><img src=\"/2019/09/14/%E3%80%90C++%E3%80%91C++%E9%AB%98%E7%BA%A7/Snipaste_2019-10-02_15-50-39.png\"></p>\n<p>而不能解决这种情况：</p>\n<p><img src=\"/2019/09/14/%E3%80%90C++%E3%80%91C++%E9%AB%98%E7%BA%A7/Snipaste_2019-10-02_16-10-55.png\"></p>\n<h2 id=\"2-继承中的static关键字\"><a href=\"#2-继承中的static关键字\" class=\"headerlink\" title=\"2.继承中的static关键字\"></a>2.继承中的static关键字</h2><p><font color=\"red\"> 类中的静态成员变量被类的所有对象共享，同时也被类的派生类的所有对象共享。</font></p>\n<h1 id=\"三、多态\"><a href=\"#三、多态\" class=\"headerlink\" title=\"三、多态\"></a>三、多态</h1><p>​    在C++的几个特性中，封装、继承和抽象都相对好理解，而多态则不太好理解，这里就说说C++的多态。</p>\n<h2 id=\"1-多态分两种：\"><a href=\"#1-多态分两种：\" class=\"headerlink\" title=\"1.多态分两种：\"></a>1.多态分两种：</h2><p>​    静态多态：静态多态指的就是函数重载和运算符重载。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-built_in\">string</span> name = <span class=\"hljs-string\">&quot;动物&quot;</span>;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">speak</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"hljs-string\">&quot;在叫&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>&#125;;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dog</span> :</span> <span class=\"hljs-keyword\">public</span> Animal<br>&#123;<br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-built_in\">string</span> name = <span class=\"hljs-string\">&quot;狗&quot;</span>;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">speak</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"hljs-string\">&quot;在叫&quot;</span> &lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>&#125;;<br><br><span class=\"hljs-built_in\">string</span> <span class=\"hljs-keyword\">operator</span>+(Animal animal,Dog dog)<br>&#123;<br>\t<span class=\"hljs-keyword\">return</span> animal.name + <span class=\"hljs-string\">&quot;是&quot;</span> + dog.name + <span class=\"hljs-string\">&quot;的父类&quot;</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Run</span><span class=\"hljs-params\">(Animal animal)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; animal.name &lt;&lt;<span class=\"hljs-string\">&quot;在跑&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Run</span><span class=\"hljs-params\">(Dog dog)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; dog.name &lt;&lt; <span class=\"hljs-string\">&quot;在跑&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tAnimal animal;<br>\tDog dog;<br>\tRun(animal);<br>\tRun(dog);<br>\t<span class=\"hljs-built_in\">cout</span>&lt;&lt;animal+dog&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>​    动态多态：动态多态则是通过继承和虚函数实现标签相同的函数因为传入不同的对象来实现不同的功能。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-built_in\">string</span> name = <span class=\"hljs-string\">&quot;动物&quot;</span>;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">speak</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"hljs-string\">&quot;在叫&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>&#125;;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dog</span> :</span> <span class=\"hljs-keyword\">public</span> Animal<br>&#123;<br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-built_in\">string</span> name = <span class=\"hljs-string\">&quot;狗&quot;</span>;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">speak</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"hljs-string\">&quot;在叫&quot;</span> &lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Speak</span><span class=\"hljs-params\">(Animal *animal)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tanimal-&gt;speak();<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tAnimal animal;<br>\tDog dog;<br>\tSpeak(&amp;animal);<br>\tSpeak(&amp;dog);<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>​    动态多态中只能用父类对象的指针或引用来指向子类或自身对象。</p>\n<h2 id=\"2-多态的实现原理\"><a href=\"#2-多态的实现原理\" class=\"headerlink\" title=\"2.多态的实现原理\"></a>2.多态的实现原理</h2><p>​    C++多态的实现依赖于类的虚函数表，当一个类中定义了虚函数，那么这个类就拥有的了一个记录这个虚函数入口地址的虚函数表，子类继承父类时也会继承父类的虚函数表，当子类重写父类的虚函数时，则子类的虚函数入口地址将覆盖父类的地址，如此当子类对象调用此函数时则从子类的虚函数表中寻找入口地址，当父类的对象调用此函数时则从父类的虚函数表中寻找入口地址。</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gcode\">当类生命虚函数时，编译器会在类中生成一个虚函数表<br>虚函数表是一个存储类成员函数指针的数据结构<br>虚函数表有编译器自动生成和维护<br>虚成员函数会被编译器放入虚函数表中<br>存在虚函数时，每一个对象中都会拥有一个指向虚函数表的虚函数表指针<span class=\"hljs-comment\">(vptr)</span><br></code></pre></td></tr></table></figure>\n<p>简单来说，多态实现的条件有三：</p>\n<ul>\n<li><p>要有继承</p>\n</li>\n<li><p>要有虚函数重写</p>\n</li>\n<li><p>要有父类指针(或引用)指向子类对象</p>\n</li>\n</ul>\n<h2 id=\"3-纯虚函数和抽象类\"><a href=\"#3-纯虚函数和抽象类\" class=\"headerlink\" title=\"3.纯虚函数和抽象类\"></a>3.纯虚函数和抽象类</h2><p>​    纯虚函数的定义：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">speak</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n<p>​    定义了纯虚函数的类就被成为抽象类，C++引入纯虚函数和抽象类的概念就是为了更好的使用多态，抽象类不能实例化对象，这个特性就规范了继承这个抽象类的子类必须重写父类的虚函数，因为如果继承了抽象类的子类不重写父类的虚函数，那么子类也是一个抽象类，子类便也不能实例化对象，如此便规范了多态实现，防止当子类很多时，出现某个子类在编写时忘记重写父类的虚函数，而导致这个子类没有实现多态。</p>\n<h2 id=\"4-虚析构函数和纯虚析构函数\"><a href=\"#4-虚析构函数和纯虚析构函数\" class=\"headerlink\" title=\"4.虚析构函数和纯虚析构函数\"></a>4.虚析构函数和纯虚析构函数</h2><ul>\n<li>虚析构函数的定义：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">virtual</span> ~Animal();<br></code></pre></td></tr></table></figure>\n<ul>\n<li>纯虚析构函数的定义：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">virtual</span> ~Animal() = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-comment\">//纯虚析构函数必须要有申明也要有实现</span><br>Animal：：~Animal()<br>&#123;<br>    <span class=\"hljs-comment\">//代码实现</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>​    如果子类在堆区中定义了数据，那么我们使用父类指针或引用来使用多态时，父类指针或引用是无法寻找到子在堆区中的数据并释放的。C++引入虚析构函数和纯虚析构函数就是为了解决此类问题。</p>\n<p>​    我们来看一个例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tAnimal()<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;这是Animal的构造函数&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\t~Animal()<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;这是Animal的析构函数&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>&#125;;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dog</span> :</span> <span class=\"hljs-keyword\">public</span> Animal<br>&#123;<br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-keyword\">int</span> *p;<br>\tDog()<br>\t&#123;<br>\t\tp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;这是Dog的构造函数&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\t~Dog()<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;这是Dog的析构函数&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t\t<span class=\"hljs-keyword\">if</span> (p != <span class=\"hljs-literal\">NULL</span>)<br>\t\t&#123;\t\t<br>\t\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;释放堆区的p&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t\t\t<span class=\"hljs-keyword\">delete</span> p;<br>\t\t\tp = <span class=\"hljs-literal\">NULL</span>;<br>\t\t&#125;<br>\t&#125;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tAnimal *animal = <span class=\"hljs-keyword\">new</span> Dog();<br>\t<span class=\"hljs-keyword\">delete</span> animal;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs inform7\">这是<span class=\"hljs-keyword\">Animal</span>的构造函数<br>这是Dog的构造函数<br>这是<span class=\"hljs-keyword\">Animal</span>的析构函数<br></code></pre></td></tr></table></figure>\n<p>可以看到，delete animal后并没有调用Dog的析构函数，释放子类Dog在堆区申请的空间。这样便出现了内存泄漏。</p>\n<p>此时虚析构函数和纯虚析构函数便可以起作用了，我们再看一个例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tAnimal()<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;这是Animal的构造函数&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">virtual</span> ~Animal()<span class=\"hljs-comment\">//把父类的析构函数改为虚析构函数</span><br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;这是Animal的析构函数&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>&#125;;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dog</span> :</span> <span class=\"hljs-keyword\">public</span> Animal<br>&#123;<br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-keyword\">int</span> *p;<br>\tDog()<br>\t&#123;<br>\t\tp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;这是Dog的构造函数&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\t~Dog()<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;这是Dog的析构函数&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t\t<span class=\"hljs-keyword\">if</span> (p != <span class=\"hljs-literal\">NULL</span>)<br>\t\t&#123;\t\t<br>\t\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;释放堆区的p&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t\t\t<span class=\"hljs-keyword\">delete</span> p;<br>\t\t\tp = <span class=\"hljs-literal\">NULL</span>;<br>\t\t&#125;<br>\t&#125;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tAnimal *animal = <span class=\"hljs-keyword\">new</span> Dog();<br>\t<span class=\"hljs-keyword\">delete</span> animal;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>​    输出结果：</p>\n<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs inform7\">这是<span class=\"hljs-keyword\">Animal</span>的构造函数<br>这是Dog的构造函数<br>这是Dog的析构函数<br>释放堆区的p<br>这是<span class=\"hljs-keyword\">Animal</span>的析构函数<br></code></pre></td></tr></table></figure>\n<p>​    如此便可以释放子类Dog在堆区申请的空间了，纯虚析构函数和虚析构函数的作用是一样，只是纯虚析构函数有一个和纯虚函数一样的特性，即定义看纯虚析构函数的类也属于抽象类，纯虚析构函数必须实现，如果不实现所有继承了拥有纯虚析构函数的抽象类的派生类都属于抽象类。需要注意的是，因为纯虚析构函数的特性，纯虚析构函数的实现就必须在类外实现了。</p>\n<h2 id=\"5-重载、重写、重定义\"><a href=\"#5-重载、重写、重定义\" class=\"headerlink\" title=\"5.重载、重写、重定义\"></a>5.重载、重写、重定义</h2><p><strong>重载</strong></p>\n<p>重载发生在一个类的内部，拥有相同函数名，相同返回值而参数列表不同的函数之间互为重载关系。如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span></span><br><span class=\"hljs-class\">&#123;</span><br>\t<span class=\"hljs-keyword\">public</span>:<br>\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fun</span><span class=\"hljs-params\">()</span></span>&#123;&#125;<br>\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fun</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a)</span></span>&#123;&#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p><font color=\"red\"> 只有相同函数名而参数列表的函数才是重载，函数名相同参数列表也相同而返回值不同的函数在C++中是不允许的。</font></p>\n<p><strong>重写</strong></p>\n<p>重写发生在基类和派生类之间，基类中定义虚函数(纯虚函数)，派生类中定义和虚函数拥有<strong>相同函数名，相同参数列表和相同返回值</strong>的函数，这种情况下发生函数重写。如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span></span><br><span class=\"hljs-class\">&#123;</span><br>    <span class=\"hljs-keyword\">public</span>:<br>    \t<span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fun</span><span class=\"hljs-params\">()</span></span>&#123;&#125;<br>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span> :</span> <span class=\"hljs-keyword\">public</span> A<br>&#123;<br>\t<span class=\"hljs-keyword\">public</span>:<br>\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fun</span><span class=\"hljs-params\">()</span></span>&#123;&#125;<span class=\"hljs-comment\">//重写A类的fun函数</span><br>\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fun</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a)</span></span>&#123;&#125;<span class=\"hljs-comment\">//重定义一个新函数</span><br>\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">fun</span><span class=\"hljs-params\">()</span></span>&#123;<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;&#125;<span class=\"hljs-comment\">//这种情况C++不允许</span><br>&#125;;<br></code></pre></td></tr></table></figure>\n<p><strong>重定义</strong></p>\n<p>重定义也是发生在基类和派生类之间，派生类拥有与基类函数名相同，返回值相同，而参数列表不同的函数，此时发生重定义。如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span></span><br><span class=\"hljs-class\">&#123;</span><br>  <span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fun</span><span class=\"hljs-params\">()</span></span>&#123;&#125;<br>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span> :</span> <span class=\"hljs-keyword\">public</span> A<br>&#123;<br>\t<span class=\"hljs-keyword\">public</span>:<br>\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fun</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a)</span></span>&#123;&#125;<span class=\"hljs-comment\">//发生重定义</span><br>&#125;;<br></code></pre></td></tr></table></figure>\n<p><font color=\"red\"> 派生类中可以重定义基类的任何函数，包括虚函数和纯虚函数。</font></p>\n<h2 id=\"6-父类指针和子类指针步长不一致问题\"><a href=\"#6-父类指针和子类指针步长不一致问题\" class=\"headerlink\" title=\"6.父类指针和子类指针步长不一致问题\"></a>6.父类指针和子类指针步长不一致问题</h2><p>问题出现的场景是这样的：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-keyword\">int</span> a;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">()</span> </span>&#123;&#125;<br>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span> :</span> <span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">public</span> A<br>&#123;<br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-keyword\">int</span> b;<br>\tB(<span class=\"hljs-keyword\">int</span> b)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;b = b;<br>\t&#125;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tA *a = <span class=\"hljs-literal\">NULL</span>;<br>\tB *b = <span class=\"hljs-literal\">NULL</span>;<br>\tB <span class=\"hljs-built_in\">array</span>[<span class=\"hljs-number\">2</span>]&#123; B(<span class=\"hljs-number\">1</span>),B(<span class=\"hljs-number\">2</span>) &#125;;<br>\ta = <span class=\"hljs-built_in\">array</span>;<br>\tb = <span class=\"hljs-built_in\">array</span>;<br>\ta-&gt;print();<br>\tb-&gt;print();<br>\ta++; b++;<br>\ta-&gt;print();<span class=\"hljs-comment\">//这一步会出现异常</span><br>\tb-&gt;print();<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>即父类指针a和子类指针b都指向一个子类对象数组，于是我们可以通过指针++的自增运算来逐步访问数组元素，问题就出在这，使用<code>sizeof()</code>计算两个类的大小分别得出，sizeof(A)=8;sizeof(B)=20;这就导致A类指针a每一次移步时只移动了8个字节，这个距离还远远没有达到下一个元素的首地址，所以访问会出错，这是因为指针每次移步移动的距离是指针类型的空间大小，如：A类大小为8，所以A类指针每移步一次走8个字节。</p>\n<p>可能会有疑问，为什么类B的大小是20？</p>\n<p>我们可以算一算，类B继承至类A所以类A中拥有的成员变量，类B也拥有，占8字节，这8字节分别是int变量4字节和虚函数表指针4字节；类B自身定义了一个int变量占4字节，由于类B重写了类A的虚函数，所以类B也拥有一个自己的虚函数表指针，占4字节；类B虚继承了类A，在这个过程中，C++编译器会给类B增加一个属性，占4字节，于是，<strong>8+4+4+4+4=20</strong>。</p>\n<hr>\n<h1 id=\"四、泛型编程\"><a href=\"#四、泛型编程\" class=\"headerlink\" title=\"四、泛型编程\"></a>四、泛型编程</h1><h2 id=\"1-函数模板\"><a href=\"#1-函数模板\" class=\"headerlink\" title=\"1.函数模板\"></a>1.函数模板</h2><h3 id=\"函数模板的基本语法\"><a href=\"#函数模板的基本语法\" class=\"headerlink\" title=\"函数模板的基本语法\"></a>函数模板的基本语法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//---------------函数模板</span><br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;<span class=\"hljs-comment\">//告诉编译器我要开始泛型编程了，遇到T不要报错</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Fun</span><span class=\"hljs-params\">(T &amp;a,T &amp;b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tT t = a;<br>\ta = b;<br>\tb = t;<br>&#125;<br><span class=\"hljs-comment\">//----------------</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">char</span> a = <span class=\"hljs-number\">97</span>,b = <span class=\"hljs-number\">102</span>;<br>\tFun(a, b);<span class=\"hljs-comment\">//自动推导类型调用</span><br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot;,&quot;</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t<span class=\"hljs-built_in\">string</span> x = <span class=\"hljs-string\">&quot;xxx&quot;</span>, y = <span class=\"hljs-string\">&quot;yyy&quot;</span>;<br>\tFun&lt;<span class=\"hljs-built_in\">string</span>&gt;(x, y);<span class=\"hljs-comment\">//显示类型调用</span><br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; x &lt;&lt; <span class=\"hljs-string\">&quot;,&quot;</span> &lt;&lt; y &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"当函数模板遇到函数重载\"><a href=\"#当函数模板遇到函数重载\" class=\"headerlink\" title=\"当函数模板遇到函数重载\"></a>当函数模板遇到函数重载</h3><p>当函数模板遇到函数重载准许下面4条原则</p>\n<ul>\n<li>函数模板可以像普通函数一样被重载</li>\n<li>C++编译器优先考虑普通函数</li>\n<li>如果函数模板可以产生一个更好的匹配，那么选择函数模板</li>\n<li>可以通过模板的空实参列表的语法限定编译器只通过函数模板匹配</li>\n</ul>\n<p>我们来看一个例子，逐一分析</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Fun</span><span class=\"hljs-params\">(T a,T b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\ta = a + b;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;我是函数模板&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T1,<span class=\"hljs-keyword\">typename</span> T2&gt;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Fun</span><span class=\"hljs-params\">(T1 a,T2 b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tT1 x = a;<br>\tT2 y = b;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;我是函数模板重载&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Fun</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;我是普通函数&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Fun2</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot;,&quot;</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tFun(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br>\tFun(<span class=\"hljs-number\">0.1</span>, <span class=\"hljs-number\">0.2</span>);<br>\tFun(<span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-number\">1</span>);<br>\tFun&lt;&gt;(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br>\tFun2(<span class=\"hljs-number\">0.1</span>, <span class=\"hljs-number\">0.2</span>);<br>\tFun2(<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-number\">3</span>);<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">我是普通函数<br>我是函数模板<br>我是函数模板重载<br>我是函数模板<br>0,0<br>97,3<br></code></pre></td></tr></table></figure>\n<p><strong>分析：</strong></p>\n<ul>\n<li><code>Fun(1,2)</code>:有完全匹配的普通函数，所以调用<code>void Fun(int a, int b)</code></li>\n<li><code>Fun(0.1,0.2)</code>:虽然普通函数<code>void Fun(int a, int b)</code>可以像<code>void Fun2(int a, int b)</code>一样进行隐式类型转换调用，倒是<code>Fun()</code>函数有更好的重载函数<code>void Fun(T1 a,T2 b)</code>模板匹配所以编译器优先调用<code>void Fun(T1 a,T2 b)</code></li>\n<li><code>Fun(&#39;c&#39;,1)</code>:编译器能找到匹配的函数模板重载<code>void Fun(T1 a,T2 b)</code>所以优先调用函数模板</li>\n<li><code>Fun&lt;&gt;(1,2)</code>:使用了空参数列表，告诉编译器只匹配函数模板，即使代码段中有能完美匹配的普通函数，也只调用函数模板</li>\n</ul>\n<h2 id=\"2-类模板\"><a href=\"#2-类模板\" class=\"headerlink\" title=\"2.类模板\"></a>2.类模板</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;<span class=\"hljs-comment\">//定义</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TemplateA</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tTemplateA(T a)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;a = a;<br>\t&#125;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintA</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br><span class=\"hljs-keyword\">private</span>:<br>\tT a;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Test</span><span class=\"hljs-params\">(TemplateA&lt;<span class=\"hljs-keyword\">int</span>&gt; &amp;a)</span><span class=\"hljs-comment\">//类模板作形参</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\ta.PrintA();<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-function\">TemplateA&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">a</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span></span>;<span class=\"hljs-comment\">//使用</span><br>\t<span class=\"hljs-function\">TemplateA&lt;<span class=\"hljs-built_in\">string</span>&gt; <span class=\"hljs-title\">b</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;str&quot;</span>)</span></span>;<br>\t<span class=\"hljs-function\">TemplateA&lt;<span class=\"hljs-keyword\">bool</span>&gt; <span class=\"hljs-title\">c</span><span class=\"hljs-params\">(<span class=\"hljs-literal\">true</span>)</span></span>;<br>\tTest(a);<br>\tb.PrintA();<br>\tc.PrintA();<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">a:</span><span class=\"hljs-number\">1</span><br><span class=\"hljs-symbol\">a:</span>str<br><span class=\"hljs-symbol\">a:</span><span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n<p>类模板的定义和函数模板的定义类似</p>\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>类模板的使用必须显示的确定模板的类型参数，如：<code>TemplateA&lt;string&gt; b(&quot;str&quot;)</code></p>\n<h3 id=\"类模板作参数\"><a href=\"#类模板作参数\" class=\"headerlink\" title=\"类模板作参数\"></a>类模板作参数</h3><p>类模板作参数也必须显示的确定模板那的类型参数，如：</p>\n<p><code>void Test(TemplateA&lt;int&gt; &amp;a)</code>以便编译器为形参确定内存空间。</p>\n<h3 id=\"类模板派生普通类\"><a href=\"#类模板派生普通类\" class=\"headerlink\" title=\"类模板派生普通类\"></a>类模板派生普通类</h3><p>类模板也可以被继承，但是在继承时需要显示确定模板的类型参数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TemplateA</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tTemplateA(T a)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;a = a;<br>\t&#125;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintA</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br><span class=\"hljs-keyword\">private</span>:<br>\tT a;<br>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span> :</span> <span class=\"hljs-keyword\">public</span> TemplateA&lt;<span class=\"hljs-keyword\">int</span>&gt;<span class=\"hljs-comment\">//类模板派生普通类</span><br>&#123;<br><span class=\"hljs-keyword\">public</span>:<br>\tB(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b) :TemplateA(a)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;b = b;<br>\t&#125;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintB</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;b:&quot;</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br><span class=\"hljs-keyword\">private</span>:<br>\t<span class=\"hljs-keyword\">int</span> b;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-function\">B <span class=\"hljs-title\">b</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)</span></span>;<br>\tb.PrintA();<br>\tb.PrintB();<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"模板类派生模板类\"><a href=\"#模板类派生模板类\" class=\"headerlink\" title=\"模板类派生模板类\"></a>模板类派生模板类</h3><p>模板类不仅可以派生普通类，还可以派生模板类</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TemplateA</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tTemplateA(T a)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;a = a;<br>\t&#125;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintA</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br><span class=\"hljs-keyword\">private</span>:<br>\tT a;<br>&#125;;<br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T1,<span class=\"hljs-keyword\">typename</span> T2&gt;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TemplateB</span> :</span> <span class=\"hljs-keyword\">public</span> TemplateA&lt;T2&gt;<span class=\"hljs-comment\">//类模板派生类模板</span><br>&#123;<br><span class=\"hljs-keyword\">public</span>:<br>\tTemplateB(T2 a, T1 b) :TemplateA(a)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;b = b;<br>\t&#125;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintB</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;b:&quot;</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br><span class=\"hljs-keyword\">private</span>:<br>\tT1 b;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tTemplateB&lt;string,char&gt; b(&#x27;A&#x27;, &quot;TemplateB&quot;);<br>\tb.PrintA();<br>\tb.PrintB();<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">a:</span>A<br><span class=\"hljs-symbol\">b:</span>TemplateB<br></code></pre></td></tr></table></figure>\n<h3 id=\"类模板的主要作用\"><a href=\"#类模板的主要作用\" class=\"headerlink\" title=\"类模板的主要作用\"></a>类模板的主要作用</h3><p>类模板的主要作用就是将数据结构的表示和算法不受包含的元素类型的影响，即类模板将元素类型和数据结构算法分离开来了，使数据结构和算法成为真正意义上的数据结构和算法，如：链表不再因为<code>int</code>类型而定义一个<code>int</code>类型的链表，因<code>string</code>类型而定义一个<code>string</code>类型的链表，而是定义一个链表可以通用于所有类型。</p>\n<h1 id=\"五、异常处理\"><a href=\"#五、异常处理\" class=\"headerlink\" title=\"五、异常处理\"></a>五、异常处理</h1><h2 id=\"1-异常的基本语法\"><a href=\"#1-异常的基本语法\" class=\"headerlink\" title=\"1.异常的基本语法\"></a>1.异常的基本语法</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Try</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> y)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">if</span> (y == <span class=\"hljs-number\">0</span>)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;除数不能等于0，抛出异常&quot;</span>&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br>\t\t<span class=\"hljs-keyword\">throw</span> y;<span class=\"hljs-comment\">//这里必须指明抛出异常的数据类型，否则程序无法处理异常，只能使用这个类型的变量，x和y的效果是一样的，不能直接抛出int，即这样是不行的throw int</span><br>\t&#125;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;x/y=&quot;</span> &lt;&lt; x / y &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Test1</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tTry(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br>\tTry(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Test2</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">try</span><br>\t&#123;<br>\t\tTest1();<br>\t&#125;<br>\t<span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-keyword\">char</span> e)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;处理char异常&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">catch</span>(...)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;无法处理的异常继续往上抛&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t\t<span class=\"hljs-keyword\">throw</span>;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">try</span><br>\t&#123;<br>\t\tTest2();<br>\t&#125;<br>\t<span class=\"hljs-keyword\">catch</span>(<span class=\"hljs-keyword\">int</span> e)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;处理int异常&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">catch</span> (...)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;处理其他异常&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight gml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gml\"><span class=\"hljs-symbol\">x</span>/<span class=\"hljs-symbol\">y</span>=<span class=\"hljs-number\">0</span><br>除数不能等于<span class=\"hljs-number\">0</span>，抛出异常<br>无法处理的异常继续往上抛<br>处理int异常<br></code></pre></td></tr></table></figure>\n<ul>\n<li>异常的抛出是可以跨函数的，如上面的代码，在<code>Try</code>函数里抛出的异常可以在<code>mian</code>函数中处理，中间跨过了<code>Test1</code>，<code>Test2</code>两个函数</li>\n<li>如果在一个函数内捕捉到异常但是却无法处理可以通过<code>throw</code>继续向上抛，直至main函数，如上面代码，<code>Test2</code>捕捉到异常但是没有处理继续向上抛给了main函数，如果main函数还是没有处理，则会直接中断程序</li>\n<li>C++使用<code>cacth(...)</code>来捕捉其他没有捕捉到的异常，如上面代码，main函数中只捕捉了int类型的异常，如果出现其他类型的异常则有<code>cacth(...)</code>来捕捉</li>\n<li>异常处理是按照类型匹配来处理的，即<code>throw</code>的int类型的异常只有<code>cacth(int e)</code>能够接收得到，否则就只能使用<code>cacth(...)</code>来接收未知异常</li>\n</ul>\n<h2 id=\"2-C-异常处理的特性\"><a href=\"#2-C-异常处理的特性\" class=\"headerlink\" title=\"2.C++异常处理的特性\"></a>2.C++异常处理的特性</h2><p>​    C++的异常处理具有跨函数性，这使得<font color=\"red\"> 异常引发</font>和<font color=\"red\"> 异常处理</font>分离开来，这样下层函数可以不用过多的在一异常处理，而把重点放在问题的逻辑处理上，异常处理可以由上层调用者专门来处理。</p>\n<h2 id=\"3-异常接口申明\"><a href=\"#3-异常接口申明\" class=\"headerlink\" title=\"3.异常接口申明\"></a>3.异常接口申明</h2><p><strong>不抛出任何异常：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Try</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> y)</span> <span class=\"hljs-title\">throw</span><span class=\"hljs-params\">()</span><span class=\"hljs-comment\">//异常接口申明</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">if</span> (y == <span class=\"hljs-number\">0</span>)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;除数不能等于0，抛出异常&quot;</span>&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br>\t\t<span class=\"hljs-keyword\">throw</span> x;<br>\t&#125;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;x/y=&quot;</span> &lt;&lt; x / y &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>只能抛出列表中类型的异常：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Try</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> y)</span> <span class=\"hljs-title\">throw</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span>,<span class=\"hljs-keyword\">int</span>*)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">if</span> (y == <span class=\"hljs-number\">0</span>)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;除数不能等于0，抛出异常&quot;</span>&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br>\t\t<span class=\"hljs-keyword\">throw</span> x;<br>\t&#125;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;x/y=&quot;</span> &lt;&lt; x / y &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>可以抛出任何异常：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Try</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> y)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">if</span> (y == <span class=\"hljs-number\">0</span>)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;除数不能等于0，抛出异常&quot;</span>&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br>\t\t<span class=\"hljs-keyword\">throw</span> x;<br>\t&#125;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;x/y=&quot;</span> &lt;&lt; x / y &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>不过经过测试，三份代码无论是否写throw都是可以抛出并处理异常的，似乎这个语法没什么卵用，可能C++11摒弃了这种用法，但是考虑到兼容保留这个语法。</p>\n<h2 id=\"4-异常接收的3种方式\"><a href=\"#4-异常接收的3种方式\" class=\"headerlink\" title=\"4.异常接收的3种方式\"></a>4.异常接收的3种方式</h2><h3 id=\"普通形参\"><a href=\"#普通形参\" class=\"headerlink\" title=\"普通形参\"></a>普通形参</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tA() &#123; <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;构造A&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>; &#125;<br>\tA(<span class=\"hljs-keyword\">const</span> A &amp;a) &#123; <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;拷贝A&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>; &#125;<br>\t~A() &#123; <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;析构A&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>; &#125;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Try</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tA a;<br>\t<span class=\"hljs-keyword\">throw</span> a;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">try</span><br>\t&#123;<br>\t\tTry();<br>\t&#125;<br>\t<span class=\"hljs-keyword\">catch</span>(A e)<span class=\"hljs-comment\">//使用普通形参</span><br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;处理int异常&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">构造<span class=\"hljs-keyword\">A</span><br>拷贝<span class=\"hljs-keyword\">A</span><br>拷贝<span class=\"hljs-keyword\">A</span><br>析构<span class=\"hljs-keyword\">A</span><br>处理int异常<br>析构<span class=\"hljs-keyword\">A</span><br>析构<span class=\"hljs-keyword\">A</span><br></code></pre></td></tr></table></figure>\n<p>可以看到a被拷贝两次，第一次从<code>A a</code>拷贝到<code>throw a</code>，第二次从<code>throw a</code>拷贝到<code>catch(A e)</code>，可以看出如果使用普通形参来接收异常，异常变量会由异常抛出处拷贝到异常接收处。</p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p>将上面代码的<code>catch(A e)</code>改为<code>catch(A &amp;e)</code></p>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">构造<span class=\"hljs-keyword\">A</span><br>拷贝<span class=\"hljs-keyword\">A</span><br>析构<span class=\"hljs-keyword\">A</span><br>处理int异常<br>析构<span class=\"hljs-keyword\">A</span><br></code></pre></td></tr></table></figure>\n<p>可以看到只拷贝了一次，即从<code>A a</code>拷贝到<code>throw a</code>。</p>\n<h3 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h3><p>上面代码应该修改为如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tA() &#123; <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;构造A&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>; &#125;<br>\tA(<span class=\"hljs-keyword\">const</span> A &amp;a) &#123; <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;拷贝A&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>; &#125;<br>\t~A() &#123; <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;析构A&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>; &#125;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Try</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tA *a = <span class=\"hljs-keyword\">new</span> A();<span class=\"hljs-comment\">//对象必须创建在堆区，函数结束对象就会被销毁，而无法通过指针传递到catch中</span><br>\t<span class=\"hljs-keyword\">throw</span> a;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">try</span><br>\t&#123;<br>\t\tTry();<br>\t&#125;<br>\t<span class=\"hljs-keyword\">catch</span>(A *e)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;处理int异常&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t\t<span class=\"hljs-keyword\">delete</span> e;<span class=\"hljs-comment\">//需要手动释放堆区的内存</span><br>\t&#125;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">构造<span class=\"hljs-keyword\">A</span><br>处理int异常<br>析构<span class=\"hljs-keyword\">A</span><br></code></pre></td></tr></table></figure>\n<p>可以看到使用指针完全不需要拷贝，但是却需要消耗堆区的内存且容易造成内存泄露。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>总的来说，最优的方式还是使用引用。</p>\n<h2 id=\"5-继承在异常处理中的应用\"><a href=\"#5-继承在异常处理中的应用\" class=\"headerlink\" title=\"5.继承在异常处理中的应用\"></a>5.继承在异常处理中的应用</h2><p>在实际的项目中我们处理的异常并不是一些基础的数据类型，大多都是开发者的自定义类，这种情况在捕捉异常的时候就相当麻烦，尽管有些异常处理起来程序基本一致，但是却要将每一种异常一一捕捉并一一处理，下面的代码我们来模拟一下这种情况。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span>//<span class=\"hljs-title\">A</span>类实现输入一个范围在0-10的奇数</span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tA(<span class=\"hljs-keyword\">int</span> a) <br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">if</span> (a % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>) &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> (a &lt; <span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">throw</span> LtZero();<br>\t\t\t<span class=\"hljs-keyword\">if</span> (a &gt; <span class=\"hljs-number\">10</span>)<span class=\"hljs-keyword\">throw</span> GtTen();<br>\t\t\t<span class=\"hljs-keyword\">else</span> num = a;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">throw</span> Even();<br>\t&#125;<br><span class=\"hljs-keyword\">private</span>:<br>\t<span class=\"hljs-keyword\">int</span> num;<br>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LtZero</span>//专门处理异常的异常类</span><br><span class=\"hljs-class\">&#123;</span>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GtTen</span></span><br><span class=\"hljs-class\">&#123;</span>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Even</span></span><br><span class=\"hljs-class\">&#123;</span>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">try</span> &#123; <span class=\"hljs-function\">A <span class=\"hljs-title\">a</span><span class=\"hljs-params\">(<span class=\"hljs-number\">4</span>)</span></span>; &#125;<br>\t<span class=\"hljs-keyword\">catch</span> (LtZero &amp;lz) &#123; <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;输入的数小于0&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>; &#125;<br>\t<span class=\"hljs-keyword\">catch</span> (GtTen &amp;gt) &#123; <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;输入的数大于10&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>; &#125;<br>\t<span class=\"hljs-keyword\">catch</span> (Even &amp;ev) &#123; <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;输入的数是偶数&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>; &#125;<br>\t<span class=\"hljs-keyword\">catch</span> (...) &#123; <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;其他异常&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>; &#125;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>可以看到我们的异常处理模块相当繁杂，在实际开发项目中异常的数量远远不止上面模拟的三种，可能多达上百种或则更多，这是异常的处理将变得十分繁杂，那么如何处理呢？</p>\n<p>可能心细的读者会发现，我们在处理异常时使用了专门的异常处理类，而类是可以继承的，于是乎，继承在异常处理中的作用就体现出来了。</p>\n<p>我们再来看一份优化后的代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span>//<span class=\"hljs-title\">A</span>类实现输入一个范围在0-10的奇数</span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tA(<span class=\"hljs-keyword\">int</span> a) <br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">if</span> (a % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>) &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> (a &lt; <span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">throw</span> LtZero();<br>\t\t\t<span class=\"hljs-keyword\">if</span> (a &gt; <span class=\"hljs-number\">10</span>)<span class=\"hljs-keyword\">throw</span> GtTen();<br>\t\t\t<span class=\"hljs-keyword\">else</span> num = a;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">throw</span> Even();<br>\t&#125;<br><br>\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Even</span></span><br><span class=\"hljs-class\">\t&#123;</span><br>\t<span class=\"hljs-keyword\">public</span>:<br>\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintErro</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t\t</span>&#123;<br>\t\t\t<span class=\"hljs-built_in\">cout</span>&lt;&lt; <span class=\"hljs-string\">&quot;输入的数是偶数&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t\t&#125;<br>\t&#125;;<br>\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LtZero</span>:</span><span class=\"hljs-keyword\">public</span> Even<br>\t&#123;<br>\t<span class=\"hljs-keyword\">public</span>:<br>\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintErro</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t\t</span>&#123;<br>\t\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;输入的数小于0&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t\t&#125;<br>\t&#125;;<br>\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GtTen</span>:</span><span class=\"hljs-keyword\">public</span> Even<br>\t&#123;<br>\t<span class=\"hljs-keyword\">public</span>:<br>\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintErro</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t\t</span>&#123;<br>\t\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;输入的数大于10&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t\t&#125;<br>\t&#125;;<br><span class=\"hljs-keyword\">private</span>:<br>\t<span class=\"hljs-keyword\">int</span> num;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">try</span> &#123; <span class=\"hljs-function\">A <span class=\"hljs-title\">a</span><span class=\"hljs-params\">(<span class=\"hljs-number\">4</span>)</span></span>; &#125;<br>\t<span class=\"hljs-keyword\">catch</span> (A::Even e) &#123; e.PrintErro(); &#125;<br>\t<span class=\"hljs-keyword\">catch</span> (...) &#123; <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;其他异常&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>; &#125;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>可以看到我们的异常处理模块使用多态，繁杂程度被大幅缩水了，而我们的异常处理被集中在了异常处理类中，有时，如果我们的异常处理只对某一个类有效也是可以直接将异常处理类定义在抛出类里面的。</p>\n<h2 id=\"6-标准异常库\"><a href=\"#6-标准异常库\" class=\"headerlink\" title=\"6.标准异常库\"></a>6.标准异常库</h2><p>C++提供一些标准的异常库，头文件为：#include<stdexcep></stdexcep></p>\n<h1 id=\"六、标准IO流\"><a href=\"#六、标准IO流\" class=\"headerlink\" title=\"六、标准IO流\"></a>六、标准IO流</h1><h2 id=\"1-标准IO流流程\"><a href=\"#1-标准IO流流程\" class=\"headerlink\" title=\"1.标准IO流流程\"></a>1.标准IO流流程</h2><p><img src=\"/2019/09/14/%E3%80%90C++%E3%80%91C++%E9%AB%98%E7%BA%A7/Snipaste_2019-10-06_10-03-47.png\"></p>\n<h2 id=\"2-标准输入流\"><a href=\"#2-标准输入流\" class=\"headerlink\" title=\"2.标准输入流\"></a>2.标准输入流</h2><table>\n<thead>\n<tr>\n<th>标准函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cin</td>\n<td>cin&gt;&gt;操作支持任何基本类型的输入，但是遇到空格则结束读取</td>\n</tr>\n<tr>\n<td>cin.get(char chr)</td>\n<td>从缓冲区中读取一个字符到chr中，因为C++定义的cin.get(char)中会返回一个函数自身的引用，所以此函数支持链式编程，即cin.get(a).get(b).get(c);b表示依次从缓冲区中读取三个字符到a，b，c中</td>\n</tr>\n<tr>\n<td>cin.get(char* buf,int cout)</td>\n<td>从缓冲区中读取cout个字符到buf数组中，因为函数似乎会在数组末尾添加点什么，所以实际读取的字符数量是cout-1个，此函数也支持链式编程</td>\n</tr>\n<tr>\n<td>cin.get(char* buf,int cout,char chr)</td>\n<td>从缓冲区中读取cout个字符到buf数组中，如果碰到字符chr则结束读取</td>\n</tr>\n<tr>\n<td>cin.getline(char buf,int cout)</td>\n<td>从缓冲区中读取cout个字符到buf数组中</td>\n</tr>\n<tr>\n<td>cin.ignore(int num)</td>\n<td>忽略缓冲区当前读取指针开始的num个字符再读取</td>\n</tr>\n<tr>\n<td>cin.peek()</td>\n<td>判断缓冲区中是否有数据，如果有则返回第一个字符，如果没有则阻塞程序</td>\n</tr>\n<tr>\n<td>cin.putback(char chr)</td>\n<td>将读取出来的字符再返存回缓冲区，只能读取一个字符</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-标准输出流\"><a href=\"#3-标准输出流\" class=\"headerlink\" title=\"3.标准输出流\"></a>3.标准输出流</h2><table>\n<thead>\n<tr>\n<th>标准函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cout</td>\n<td>输出缓冲区内容，支持任何基本类型数据的输出</td>\n</tr>\n<tr>\n<td>cout.flush(void)</td>\n<td>刷新缓冲区，无视系统繁忙，强制输出缓冲区的字符，语法和cout一样“cout.flush()&lt;&lt;buf&lt;&lt;endl;”</td>\n</tr>\n<tr>\n<td>cout.put(char chr)</td>\n<td>在标准输出设备输出指针的当前位置插入字符chr，语法和cout一致</td>\n</tr>\n<tr>\n<td>cout.write(char *chr,int cout)</td>\n<td>输出*chr所指向空间中cout个数量的字符，即使越界也会继续输出，语法和cout一致</td>\n</tr>\n<tr>\n<td>cout.width(int num)</td>\n<td>输出num个字节宽度的字符，一般配合cout.fill(char chr)和其他cout函数一起使用</td>\n</tr>\n<tr>\n<td>cout.fill(char chr)</td>\n<td>配合cout.width(int num)和其他cout一起使用，在输出的num宽度的字符中将cout函数没有填充完的字符用chr填充</td>\n</tr>\n<tr>\n<td>cout.setf(标记)</td>\n<td>格式化cout输出，标记种类很多，具体的可以查阅资料，配合cout函数一起使用</td>\n</tr>\n</tbody></table>\n<h2 id=\"4-文件IO流\"><a href=\"#4-文件IO流\" class=\"headerlink\" title=\"4.文件IO流\"></a>4.文件IO流</h2><p>​    文件操作相对来说比较简单，总的来说就是5个步骤，即</p>\n<h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h3><ul>\n<li><p>​    包含头文件<font color=\"red\">#include<ftream></ftream></font></p>\n</li>\n<li><p>​    创建流对象</p>\n</li>\n<li><p>​    打开文件</p>\n</li>\n<li><p>​    读写文件</p>\n<p>​    <font color=\"red\">需要注意的是C++中文件写的方式是使用符号“&lt;&lt;”，如：fout &lt;&lt; “文件内容”&lt;&lt;endl;</font></p>\n<p>​    <font color=\"red\">同理文件读也可以使用“&gt;&gt;”来读。</font></p>\n</li>\n<li><p>​    关闭文件</p>\n<p><strong>文件写</strong></p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;fstream&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tofstream fout;<br>\tfout.open(<span class=\"hljs-string\">&quot;文件测试.txt&quot;</span>, ios::out);<br>\tfout &lt;&lt; <span class=\"hljs-string\">&quot;姓名：张三&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\tfout &lt;&lt; <span class=\"hljs-string\">&quot;性别：男&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\tfout.close();<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\ttest();<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>​    <strong>输出结果：</strong>    </p>\n<p><img src=\"/2019/09/14/%E3%80%90C++%E3%80%91C++%E9%AB%98%E7%BA%A7/Snipaste_2019-09-14_16-29-43.png\"></p>\n<h3 id=\"4种文件读的方式\"><a href=\"#4种文件读的方式\" class=\"headerlink\" title=\"4种文件读的方式\"></a>4种文件读的方式</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;fstream&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tifstream fin;<br>\tfin.open(<span class=\"hljs-string\">&quot;文件测试.txt&quot;</span>, ios::in);<br>\t<span class=\"hljs-keyword\">if</span> (!fin.is_open())<span class=\"hljs-comment\">//文件读需要多添加一步判断文件是否打开成功的步骤</span><br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;文件打开失败&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">char</span> str[<span class=\"hljs-number\">1024</span>];<br>\t<span class=\"hljs-built_in\">string</span> strs;<br>\t<span class=\"hljs-keyword\">char</span> chr;<br>\t<span class=\"hljs-comment\">//第一中方式</span><br>\t<span class=\"hljs-comment\">//while (fin &gt;&gt; str)//操作符&quot;&gt;&gt;&quot;每次只能读取一行数据，读到文件尾“EOF”时结束</span><br>\t<span class=\"hljs-comment\">//&#123;</span><br>\t<span class=\"hljs-comment\">//\tcout &lt;&lt; str &lt;&lt; endl;</span><br>\t<span class=\"hljs-comment\">//&#125;</span><br><br>\t<span class=\"hljs-comment\">//第二种方式</span><br>\t<span class=\"hljs-comment\">//while (fin.getline(str, 50))//ifstream::getline(char *str,int num);这个函数只支持字符数组，参数num指的是需要读取的字节数</span><br>\t<span class=\"hljs-comment\">//&#123;</span><br>\t<span class=\"hljs-comment\">//\tcout &lt;&lt; str &lt;&lt; endl;</span><br>\t<span class=\"hljs-comment\">//&#125;</span><br><br>\t<span class=\"hljs-comment\">//第三种方式</span><br>\t<span class=\"hljs-comment\">//while (getline(fin, strs))//与第二种方式不同的是，这个getline函数是全局的，且只支持输出到string类型的对象中</span><br>\t<span class=\"hljs-comment\">//&#123;</span><br>\t<span class=\"hljs-comment\">//\tcout &lt;&lt; strs &lt;&lt; endl;</span><br>\t<span class=\"hljs-comment\">//&#125;</span><br><br>\t<span class=\"hljs-comment\">//第四中方式</span><br>\t<span class=\"hljs-keyword\">while</span> ((chr = fin.get()) != EOF)<span class=\"hljs-comment\">//get()函数每次只能读取一个字符</span><br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; chr ;<br>\t&#125;<br>\tfin.close();<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\ttest();<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"文件的打开模式\"><a href=\"#文件的打开模式\" class=\"headerlink\" title=\"文件的打开模式\"></a>文件的打开模式</h3><p>​    C++提供6中文件的打开方式</p>\n<table>\n<thead>\n<tr>\n<th>打开方式</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ios::in</td>\n<td>以读的形式打开</td>\n</tr>\n<tr>\n<td>ios::out</td>\n<td>以写的形式打开，会覆盖源文件</td>\n</tr>\n<tr>\n<td>ios::ate</td>\n<td>以写的形式打开并初始文件位置：文件尾，会覆盖源文件</td>\n</tr>\n<tr>\n<td>ios::app</td>\n<td>以追加的方式打开文件</td>\n</tr>\n<tr>\n<td>ios::trunc</td>\n<td>如果文件存在先删除再创建</td>\n</tr>\n<tr>\n<td>ios::binary</td>\n<td>以二进制的形式打开</td>\n</tr>\n</tbody></table>\n<h3 id=\"读写二进制文件\"><a href=\"#读写二进制文件\" class=\"headerlink\" title=\"读写二进制文件\"></a>读写二进制文件</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;fstream&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-built_in\">string</span> name = <span class=\"hljs-string\">&quot;张三&quot;</span>;<br>\t<span class=\"hljs-built_in\">string</span> sex = <span class=\"hljs-string\">&quot;男&quot;</span>;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tofstream fout;<br>\tfout.open(<span class=\"hljs-string\">&quot;二进制文件测试.txt&quot;</span>, ios::out | ios::binary);<br>\tPerson p;<br>\tfout.write((<span class=\"hljs-keyword\">char</span> *)&amp;p, <span class=\"hljs-keyword\">sizeof</span>(Person));<span class=\"hljs-comment\">//注意这里使用ofstream::write()来写</span><br>\tfout.close;<br><br>\tifstream fin;<br>\tfin.open(<span class=\"hljs-string\">&quot;二进制文件测试.txt&quot;</span>, ios::in | ios::binary);<br>\t<span class=\"hljs-keyword\">if</span> (!fin.is_open())<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;文件打开错误&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t\t<span class=\"hljs-keyword\">return</span>;<br>\t&#125;<br>\tPerson pin;<br>\tfin.read((<span class=\"hljs-keyword\">char</span> *)&amp;pin, <span class=\"hljs-keyword\">sizeof</span>(Person));<span class=\"hljs-comment\">//注意这里使用ofstream::read()来读</span><br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;姓名：&quot;</span> &lt;&lt; pin.name &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;性别：&quot;</span> &lt;&lt; pin.sex &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\tfin.close();<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\ttest();<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"一、类\"><a href=\"#一、类\" class=\"headerlink\" title=\"一、类\"></a>一、类</h1><h2 id=\"1-浅拷贝与深拷贝\"><a href=\"#1-浅拷贝与深拷贝\" class=\"headerlink\" title=\"1.浅拷贝与深拷贝\"></a>1.浅拷贝与深拷贝</h2><h3 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h3><p><font color=\"red\"> C++在进行浅拷贝时，只拷贝栈区的内存空间，不拷贝堆区的内存空间，即浅拷贝只拷贝非指针的成员变量和指针本身，而不拷贝指针所指向的堆区的内容。</font></p>\n<p>我们代码1.1为例</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//代码1.1</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Obj</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tObj(<span class=\"hljs-keyword\">char</span> *tp)<br>\t&#123;<br>\t\tlen = <span class=\"hljs-built_in\">strlen</span>(tp);<br>\t\tp = (<span class=\"hljs-keyword\">char</span>*)<span class=\"hljs-built_in\">malloc</span>(len + <span class=\"hljs-number\">1</span>);<br>\t\tstrcpy_s(p, len+<span class=\"hljs-number\">1</span>, tp);<br>\t&#125;<br>\t~Obj()<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">if</span> (p != <span class=\"hljs-literal\">NULL</span>)<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-built_in\">free</span>(p);<br>\t\t\tp = <span class=\"hljs-literal\">NULL</span>;<br>\t\t\tlen = <span class=\"hljs-number\">0</span>;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Show</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; *p &lt;&lt; *(p + <span class=\"hljs-number\">1</span>) &lt;&lt; *(p + <span class=\"hljs-number\">2</span>) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br><span class=\"hljs-keyword\">private</span>:<br>\t<span class=\"hljs-keyword\">char</span> *p;<br>\t<span class=\"hljs-keyword\">int</span> len;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">text</span><span class=\"hljs-params\">(Obj &amp;obj)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tObj obj2 = obj;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-function\">Obj <span class=\"hljs-title\">obj1</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;asd&quot;</span>)</span></span>;<br>\ttext(obj1);<br>\tobj1.Show();<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>我们作一个图示：</p>\n<p><img src=\"/2019/09/14/%E3%80%90C++%E3%80%91C++%E9%AB%98%E7%BA%A7/Git\\Blog\\source_posts\\【C++】C++高级\\Snipaste_2019-10-01_16-21-15.png\"></p>\n<p>​    我们没有自定义Obj类的拷贝构造函数，所以当代码执行到<code>Obj obj2 = obj1;</code>时，编译器将调用默认的拷贝构造函数，然而，<font color=\"red\"> 编译器默认的拷贝构造函数是一个浅拷贝</font>，所以新创建的对象obj2没有自己的堆区空间，obj2.p指向的是obj1.p所指向的内存地址。</p>\n<p>​    上面的代码编译是通不过的，<font color=\"red\"> 原因在于，对象析构时，同一个内存地址<code>0x0001</code>被对象obj1和obj2一起析构了两次</font>。当代码执行完<code>test(obj1)</code>时，对象obj2被析构，指针obj2.p所指向的内存地址<code>0x0001</code>被释放，所以当代码执行到<code>obj1.Show()</code>时，使用了已经被释放掉的内存<code>0x0001</code>地址，从而导致运行错误。</p>\n<p>​    <font color=\"green\"> <strong>这里我有一个疑问，既然浅拷贝在拷贝有指针的对象时，会出现两次析构而出错，所以浅拷贝只能拷贝没有指针成员的对象，那么浅拷贝和深拷贝似乎没有什么区别了，那么浅拷贝存在的意义是什么呢？</strong></font></p>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><p>C++没有提供给开发者预定义的深拷贝方法，所以要想使用深拷贝，我们需要字写一个拷贝构造函数。</p>\n<p>深拷贝可以解决上面遇到的浅拷贝的问题，因为，<font color=\"red\"> 深拷贝会申请一新的内存空间用于存放拷贝过来的内容，即深拷贝拷贝对象的所有成员，包括指针所指向的内存空间也会一起被拷贝，被拷贝过来的指针会指向一个新的内存地址</font>。</p>\n<p><img src=\"/2019/09/14/%E3%80%90C++%E3%80%91C++%E9%AB%98%E7%BA%A7/Snipaste_2019-10-01_16-52-53.png\"></p>\n<h3 id=\"定义深拷贝构造函数\"><a href=\"#定义深拷贝构造函数\" class=\"headerlink\" title=\"定义深拷贝构造函数\"></a>定义深拷贝构造函数</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//代码1.2</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Obj</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tObj(<span class=\"hljs-keyword\">char</span> *tp)<br>\t&#123;<br>\t\tlen = <span class=\"hljs-built_in\">strlen</span>(tp);<br>\t\tp = (<span class=\"hljs-keyword\">char</span>*)<span class=\"hljs-built_in\">malloc</span>(len + <span class=\"hljs-number\">1</span>);<br>\t\tstrcpy_s(p, len+<span class=\"hljs-number\">1</span>, tp);<br>\t&#125;<br>    <span class=\"hljs-comment\">//------------------------------</span><br>    <span class=\"hljs-comment\">//拷贝构造函数--深拷贝</span><br>\tObj(<span class=\"hljs-keyword\">const</span> Obj &amp;obj)<br>\t&#123;<br>\t\tlen = obj.len;<br>\t\tp = (<span class=\"hljs-keyword\">char</span>*)<span class=\"hljs-built_in\">malloc</span>(len + <span class=\"hljs-number\">1</span>);<br>\t\tstrcpy_s(p, len + <span class=\"hljs-number\">1</span>, obj.p);<br>\t&#125;<br>    <span class=\"hljs-comment\">//------------------------------</span><br>\t~Obj()<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">if</span> (p != <span class=\"hljs-literal\">NULL</span>)<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-built_in\">free</span>(p);<br>\t\t\tp = <span class=\"hljs-literal\">NULL</span>;<br>\t\t\tlen = <span class=\"hljs-number\">0</span>;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Show</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; *p &lt;&lt; *(p + <span class=\"hljs-number\">1</span>) &lt;&lt; *(p + <span class=\"hljs-number\">2</span>) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br><span class=\"hljs-keyword\">private</span>:<br>\t<span class=\"hljs-keyword\">char</span> *p;<br>\t<span class=\"hljs-keyword\">int</span> len;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>当一个类中定义了拷贝构造函数，则在对象拷贝时，编译器就不会在调用默认的拷贝构造函数转而调用自定义的拷贝构造函数，当我们把代码1.1中类的定义改为代码1.2中类的定义后，程序就可以正常执行了。</p>\n<p><font color=\"red\">使用深拷贝时，我们还需要注意下面的情况：</font></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">Obj <span class=\"hljs-title\">obj1</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;asd&quot;</span>)</span></span>;<br><span class=\"hljs-function\">Obj <span class=\"hljs-title\">obj3</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;fgh&quot;</span>)</span></span>;<br>obj3 = obj1;<br></code></pre></td></tr></table></figure>\n<p>此时，在<code>obj3=obj1;</code>处依旧调用默认的拷贝构造函数，这里我们要弄清楚<code>obj3=obj1</code>和<code>Obj obj3 = obj1</code>之间的区别，<code>obj3=obj1</code>是将<font color=\"red\">obj1赋值给obj3</font>，<code>=</code>赋值与拷贝构造函数没有什么关联，<code>=</code>在赋值时是C++编译器自己调用默认的拷贝构造函数—浅拷贝，和类中有无定义深拷贝无关；而<code>Obj obj3=obj1</code>则是<font color=\"red\">使用obj1来构造obj3</font>，此时如果类中定义了深拷贝构造函数，就会使用深拷贝。要解决这个问题，就需要显示重载<code>=</code>运算符了。</p>\n<h3 id=\"小知识\"><a href=\"#小知识\" class=\"headerlink\" title=\"小知识\"></a><font color=\"blue\"><strong>小知识</strong></font></h3><ul>\n<li><font color=\"blue\">在定义拷贝构造函数时，必须使用引用传递，否则会出现无限拷贝的情况，因为，如果我们使用传值传递的话，在传递对象到拷贝构造函数时，又会调用拷贝构造函数将实参拷贝给形参，而这个过程又会将对象传递给拷贝构造函数，从而在此调用拷贝构造函数将实参拷贝给形参，如此无限循环</font></li>\n<li><font color=\"blue\">拷贝构造函数只能有一个参数，且必须是自身类的引用，否则编译器将识别被普通构造函数</font></li>\n</ul>\n<h2 id=\"2-初始化参数列表\"><a href=\"#2-初始化参数列表\" class=\"headerlink\" title=\"2.初始化参数列表\"></a>2.初始化参数列表</h2><h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>我们以下面的代码1.3来说明初始化参数列表</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tA(<span class=\"hljs-keyword\">int</span> a)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;a = a;<br>\t&#125;<br><span class=\"hljs-keyword\">private</span>:<br>\t<span class=\"hljs-keyword\">int</span> a;<br>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span> :<br>\tB(<span class=\"hljs-keyword\">int</span> i)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;i = i;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">int</span> i;<br>\tA a;<br><br>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-function\">B <span class=\"hljs-title\">b</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span></span>;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>运行结果：</strong></p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">错误\tC2512\t“<span class=\"hljs-keyword\">A</span>”: 没有合适的默认构造函数可用<br></code></pre></td></tr></table></figure>\n<p>​    这个问题就在于，在类B中组合了一个A类的成员，编译器在构造B类对象时，同时会构造一个A类对象作为B类的成员，然而，因为A类自定义了一个有参的构造函数，所以在构造A类时，编译器不会使用默认构造函数，而是使用自定义的有参构造函数，问题就出在这里，编译器在构造A类时，没有参数传递到A类的有参构造函数中。初始化参数列表就是用于解决这种问题的。</p>\n<p>​    需要说明的是，如果A类中没有自定义有参的构造函数，则在B类构造对象时编译器自动调用A类的默认构造函数构造A类对象成员，就不会报错。</p>\n<p>​    初始化参数列表可以让我们在构造B类对象时，根据参数列表来构造不同的A类成员。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>初始化参数列表的使用如下面的<code>B(int i):a1(1),a2(2,&quot;asd&quot;)</code>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tA(<span class=\"hljs-keyword\">int</span> a)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;a = a;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;构造小A&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\tA(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-built_in\">string</span> str)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;a = a;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;str = str;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;构造大A&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\t~A()<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;析构A&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">int</span> a;<br>\t<span class=\"hljs-built_in\">string</span> str;<br>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span> :<br>\tB(<span class=\"hljs-keyword\">int</span> i):a1(<span class=\"hljs-number\">1</span>),a2(<span class=\"hljs-number\">2</span>,<span class=\"hljs-string\">&quot;asd&quot;</span>)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;i = i;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;构造B&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\t~B()<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;析构B&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">int</span> i;<br>\tA a1;<br>\tA a2;<br>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-function\">B <span class=\"hljs-title\">b</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span></span>;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; b.a1.str &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; b.a2.str &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\ttest();<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">构造小<span class=\"hljs-keyword\">A</span><br>构造大<span class=\"hljs-keyword\">A</span><br>构造B<br><br>asd<br>析构B<br>析构<span class=\"hljs-keyword\">A</span><br>析构<span class=\"hljs-keyword\">A</span><br></code></pre></td></tr></table></figure>\n<p>​    值得注意的是<font color=\"red\"> A类对象的构造顺序不是由初始化参数列表的顺序决定的，而是由对象的申明的前后顺序决定的</font>，如：<code>B(int i):a1(1),a2(2,&quot;asd&quot;)</code>和<code>B(int i):a2(2,&quot;asd&quot;),a1(1)</code>的构造顺序是一样的，但是当我们将类B中组合的A类对象的申明顺序改为如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span> :<br>\tB(<span class=\"hljs-keyword\">int</span> i):a1(<span class=\"hljs-number\">1</span>),a2(<span class=\"hljs-number\">2</span>,<span class=\"hljs-string\">&quot;asd&quot;</span>)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;i = i;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;构造B&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\t~B()<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;析构B&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">int</span> i;<br>\tA a2;<br>\tA a1;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>则构造顺序就变为“先构造a2再构造a1”了。</p>\n<p><font color=\"red\"> 析构的顺序和构造的顺序相反。</font></p>\n<h3 id=\"小知识-1\"><a href=\"#小知识-1\" class=\"headerlink\" title=\" 小知识\"></a><font color=\"blue\"> 小知识</font></h3><ul>\n<li><font color=\"blue\"> 当一个类中组合了其他的类对象作为成员时，拷贝构造函数也必须使用初始化参数列表，来构造对象成员然后拷贝</font></li>\n</ul>\n<h2 id=\"3-匿名对象的生命周期\"><a href=\"#3-匿名对象的生命周期\" class=\"headerlink\" title=\"3.匿名对象的生命周期\"></a>3.匿名对象的生命周期</h2><h3 id=\"什么是匿名对象\"><a href=\"#什么是匿名对象\" class=\"headerlink\" title=\"什么是匿名对象\"></a>什么是匿名对象</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\">calss A<br>&#123;<br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-keyword\">int</span> a;<br>\tA(<span class=\"hljs-keyword\">int</span> a)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;a = a;<br>\t&#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    A(<span class=\"hljs-number\">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>上面的语句<code>A(1)</code>创建的就是一个匿名临时的对象，<font color=\"red\"> 需要注意，如果一个类只有无参的构造函数，那么这个类将无法构建匿名对象</font>，匿名对象的生命周期就只在创建匿名对象的这条语句内，如果我们不使用一个对象来接收这个匿名对象，那么匿名对象会在语句结束时被销毁，当我们使用<code>A a = A(1);</code>不会出现匿名对象拷贝到类B对象b的情况，这种语句已经被C++优化成了类B的构造语句。说这么多其实匿名对象没什么卵用。</p>\n<h2 id=\"4-new和delete\"><a href=\"#4-new和delete\" class=\"headerlink\" title=\"4.new和delete\"></a>4.new和delete</h2><p>1.new和delete的用法</p>\n<p><code>new</code>可以为<strong>基础类型</strong>、<strong>数组</strong>、<strong>类</strong>分配内存空间，<code>new</code>分配的内存空间都分配在<strong>堆</strong>上。随意<code>new</code>出来的内存空间必须使用一个指针来指向，不能使用同类型的变量来接收，也禁止不接受。</p>\n<p><strong>new 基础类型</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> *p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>;<br><span class=\"hljs-keyword\">delete</span> p;<br></code></pre></td></tr></table></figure>\n<p><strong>new 数组</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> *p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">10</span>];<br><span class=\"hljs-keyword\">delete</span>[] p;<br></code></pre></td></tr></table></figure>\n<p><strong>new 类</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//C++</span><br>A *p = <span class=\"hljs-keyword\">new</span> A();<br><span class=\"hljs-keyword\">delete</span> p;<br><span class=\"hljs-comment\">//C</span><br>A *pc = (A*)<span class=\"hljs-built_in\">malloc</span>(A);<br><span class=\"hljs-built_in\">free</span>(pc);<br></code></pre></td></tr></table></figure>\n<h3 id=\"new-delete和malloc-free的区别\"><a href=\"#new-delete和malloc-free的区别\" class=\"headerlink\" title=\"new delete和malloc free的区别\"></a><code>new delete</code>和<code>malloc free</code>的区别</h3><ul>\n<li><p>在基础类型和基础类型数组方面<code>new delete</code>和<code>malloc free</code>几乎没有什么区别</p>\n</li>\n<li><p><code>new</code>不仅会分配内存还会调用构造函数，而<code>malloc</code>只会分配内存</p>\n</li>\n<li><p><code>delete</code>会调用析构函数来销毁对象，而<code>free</code>只是单纯的释放内存</p>\n</li>\n</ul>\n<h3 id=\"小知识-2\"><a href=\"#小知识-2\" class=\"headerlink\" title=\" 小知识\"></a><font color=\"blue\"> <strong>小知识</strong></font></h3><p><font color=\"blue\"> <code>new delete</code>和<code>malloc free</code>是可以穿插使用的，即<code>new</code>可以和<code>free</code>搭配使用，<code>malloc</code>可以和<code>delete</code>搭配使用。</font></p>\n<h1 id=\"二、继承\"><a href=\"#二、继承\" class=\"headerlink\" title=\"二、继承\"></a>二、继承</h1><p>继承这边主要分析一下<code>虚继承</code></p>\n<h2 id=\"1-虚继承\"><a href=\"#1-虚继承\" class=\"headerlink\" title=\"1.虚继承\"></a>1.虚继承</h2><p>虚继承的出现主要是为解决如下的继承关系中的二义性问题</p>\n<p><img src=\"/2019/09/14/%E3%80%90C++%E3%80%91C++%E9%AB%98%E7%BA%A7/Snipaste_2019-10-02_15-50-39.png\" alt=\"图1\"></p>\n<p>当我们的类的继承过程中出现这种继承关系时，我们需要使类B和类C分别虚继承类A来解决二义性，具体操作如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span></span><br><span class=\"hljs-class\">&#123;</span><br>   <span class=\"hljs-keyword\">public</span>:<br>    \t<span class=\"hljs-keyword\">int</span> a;<br>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span> :</span> <span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">public</span> A<br>&#123;<br>\t<span class=\"hljs-keyword\">public</span>:<br>\t\t<span class=\"hljs-keyword\">int</span> b;<br>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">C</span> :</span> <span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">public</span> A<br>&#123;<br>\t<span class=\"hljs-keyword\">public</span>:<br>\t\t<span class=\"hljs-keyword\">int</span> c;<br>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">D</span> :</span> <span class=\"hljs-keyword\">public</span> B,C<br>&#123;<br>\t<span class=\"hljs-keyword\">public</span>:<br>\t\t<span class=\"hljs-keyword\">int</span> d;<br>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    D d;<br>    d.a = <span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这里有一点要注意，虚继承的应用场景有限，虚继承只能解决这种情况：</p>\n<p><img src=\"/2019/09/14/%E3%80%90C++%E3%80%91C++%E9%AB%98%E7%BA%A7/Snipaste_2019-10-02_15-50-39.png\"></p>\n<p>而不能解决这种情况：</p>\n<p><img src=\"/2019/09/14/%E3%80%90C++%E3%80%91C++%E9%AB%98%E7%BA%A7/Snipaste_2019-10-02_16-10-55.png\"></p>\n<h2 id=\"2-继承中的static关键字\"><a href=\"#2-继承中的static关键字\" class=\"headerlink\" title=\"2.继承中的static关键字\"></a>2.继承中的static关键字</h2><p><font color=\"red\"> 类中的静态成员变量被类的所有对象共享，同时也被类的派生类的所有对象共享。</font></p>\n<h1 id=\"三、多态\"><a href=\"#三、多态\" class=\"headerlink\" title=\"三、多态\"></a>三、多态</h1><p>​    在C++的几个特性中，封装、继承和抽象都相对好理解，而多态则不太好理解，这里就说说C++的多态。</p>\n<h2 id=\"1-多态分两种：\"><a href=\"#1-多态分两种：\" class=\"headerlink\" title=\"1.多态分两种：\"></a>1.多态分两种：</h2><p>​    静态多态：静态多态指的就是函数重载和运算符重载。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-built_in\">string</span> name = <span class=\"hljs-string\">&quot;动物&quot;</span>;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">speak</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"hljs-string\">&quot;在叫&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>&#125;;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dog</span> :</span> <span class=\"hljs-keyword\">public</span> Animal<br>&#123;<br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-built_in\">string</span> name = <span class=\"hljs-string\">&quot;狗&quot;</span>;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">speak</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"hljs-string\">&quot;在叫&quot;</span> &lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>&#125;;<br><br><span class=\"hljs-built_in\">string</span> <span class=\"hljs-keyword\">operator</span>+(Animal animal,Dog dog)<br>&#123;<br>\t<span class=\"hljs-keyword\">return</span> animal.name + <span class=\"hljs-string\">&quot;是&quot;</span> + dog.name + <span class=\"hljs-string\">&quot;的父类&quot;</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Run</span><span class=\"hljs-params\">(Animal animal)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; animal.name &lt;&lt;<span class=\"hljs-string\">&quot;在跑&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Run</span><span class=\"hljs-params\">(Dog dog)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; dog.name &lt;&lt; <span class=\"hljs-string\">&quot;在跑&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tAnimal animal;<br>\tDog dog;<br>\tRun(animal);<br>\tRun(dog);<br>\t<span class=\"hljs-built_in\">cout</span>&lt;&lt;animal+dog&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>​    动态多态：动态多态则是通过继承和虚函数实现标签相同的函数因为传入不同的对象来实现不同的功能。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-built_in\">string</span> name = <span class=\"hljs-string\">&quot;动物&quot;</span>;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">speak</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"hljs-string\">&quot;在叫&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>&#125;;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dog</span> :</span> <span class=\"hljs-keyword\">public</span> Animal<br>&#123;<br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-built_in\">string</span> name = <span class=\"hljs-string\">&quot;狗&quot;</span>;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">speak</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"hljs-string\">&quot;在叫&quot;</span> &lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Speak</span><span class=\"hljs-params\">(Animal *animal)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tanimal-&gt;speak();<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tAnimal animal;<br>\tDog dog;<br>\tSpeak(&amp;animal);<br>\tSpeak(&amp;dog);<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>​    动态多态中只能用父类对象的指针或引用来指向子类或自身对象。</p>\n<h2 id=\"2-多态的实现原理\"><a href=\"#2-多态的实现原理\" class=\"headerlink\" title=\"2.多态的实现原理\"></a>2.多态的实现原理</h2><p>​    C++多态的实现依赖于类的虚函数表，当一个类中定义了虚函数，那么这个类就拥有的了一个记录这个虚函数入口地址的虚函数表，子类继承父类时也会继承父类的虚函数表，当子类重写父类的虚函数时，则子类的虚函数入口地址将覆盖父类的地址，如此当子类对象调用此函数时则从子类的虚函数表中寻找入口地址，当父类的对象调用此函数时则从父类的虚函数表中寻找入口地址。</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gcode\">当类生命虚函数时，编译器会在类中生成一个虚函数表<br>虚函数表是一个存储类成员函数指针的数据结构<br>虚函数表有编译器自动生成和维护<br>虚成员函数会被编译器放入虚函数表中<br>存在虚函数时，每一个对象中都会拥有一个指向虚函数表的虚函数表指针<span class=\"hljs-comment\">(vptr)</span><br></code></pre></td></tr></table></figure>\n<p>简单来说，多态实现的条件有三：</p>\n<ul>\n<li><p>要有继承</p>\n</li>\n<li><p>要有虚函数重写</p>\n</li>\n<li><p>要有父类指针(或引用)指向子类对象</p>\n</li>\n</ul>\n<h2 id=\"3-纯虚函数和抽象类\"><a href=\"#3-纯虚函数和抽象类\" class=\"headerlink\" title=\"3.纯虚函数和抽象类\"></a>3.纯虚函数和抽象类</h2><p>​    纯虚函数的定义：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">speak</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n<p>​    定义了纯虚函数的类就被成为抽象类，C++引入纯虚函数和抽象类的概念就是为了更好的使用多态，抽象类不能实例化对象，这个特性就规范了继承这个抽象类的子类必须重写父类的虚函数，因为如果继承了抽象类的子类不重写父类的虚函数，那么子类也是一个抽象类，子类便也不能实例化对象，如此便规范了多态实现，防止当子类很多时，出现某个子类在编写时忘记重写父类的虚函数，而导致这个子类没有实现多态。</p>\n<h2 id=\"4-虚析构函数和纯虚析构函数\"><a href=\"#4-虚析构函数和纯虚析构函数\" class=\"headerlink\" title=\"4.虚析构函数和纯虚析构函数\"></a>4.虚析构函数和纯虚析构函数</h2><ul>\n<li>虚析构函数的定义：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">virtual</span> ~Animal();<br></code></pre></td></tr></table></figure>\n<ul>\n<li>纯虚析构函数的定义：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">virtual</span> ~Animal() = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-comment\">//纯虚析构函数必须要有申明也要有实现</span><br>Animal：：~Animal()<br>&#123;<br>    <span class=\"hljs-comment\">//代码实现</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>​    如果子类在堆区中定义了数据，那么我们使用父类指针或引用来使用多态时，父类指针或引用是无法寻找到子在堆区中的数据并释放的。C++引入虚析构函数和纯虚析构函数就是为了解决此类问题。</p>\n<p>​    我们来看一个例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tAnimal()<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;这是Animal的构造函数&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\t~Animal()<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;这是Animal的析构函数&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>&#125;;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dog</span> :</span> <span class=\"hljs-keyword\">public</span> Animal<br>&#123;<br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-keyword\">int</span> *p;<br>\tDog()<br>\t&#123;<br>\t\tp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;这是Dog的构造函数&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\t~Dog()<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;这是Dog的析构函数&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t\t<span class=\"hljs-keyword\">if</span> (p != <span class=\"hljs-literal\">NULL</span>)<br>\t\t&#123;\t\t<br>\t\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;释放堆区的p&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t\t\t<span class=\"hljs-keyword\">delete</span> p;<br>\t\t\tp = <span class=\"hljs-literal\">NULL</span>;<br>\t\t&#125;<br>\t&#125;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tAnimal *animal = <span class=\"hljs-keyword\">new</span> Dog();<br>\t<span class=\"hljs-keyword\">delete</span> animal;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs inform7\">这是<span class=\"hljs-keyword\">Animal</span>的构造函数<br>这是Dog的构造函数<br>这是<span class=\"hljs-keyword\">Animal</span>的析构函数<br></code></pre></td></tr></table></figure>\n<p>可以看到，delete animal后并没有调用Dog的析构函数，释放子类Dog在堆区申请的空间。这样便出现了内存泄漏。</p>\n<p>此时虚析构函数和纯虚析构函数便可以起作用了，我们再看一个例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tAnimal()<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;这是Animal的构造函数&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">virtual</span> ~Animal()<span class=\"hljs-comment\">//把父类的析构函数改为虚析构函数</span><br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;这是Animal的析构函数&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>&#125;;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dog</span> :</span> <span class=\"hljs-keyword\">public</span> Animal<br>&#123;<br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-keyword\">int</span> *p;<br>\tDog()<br>\t&#123;<br>\t\tp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;这是Dog的构造函数&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\t~Dog()<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;这是Dog的析构函数&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t\t<span class=\"hljs-keyword\">if</span> (p != <span class=\"hljs-literal\">NULL</span>)<br>\t\t&#123;\t\t<br>\t\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;释放堆区的p&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t\t\t<span class=\"hljs-keyword\">delete</span> p;<br>\t\t\tp = <span class=\"hljs-literal\">NULL</span>;<br>\t\t&#125;<br>\t&#125;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tAnimal *animal = <span class=\"hljs-keyword\">new</span> Dog();<br>\t<span class=\"hljs-keyword\">delete</span> animal;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>​    输出结果：</p>\n<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs inform7\">这是<span class=\"hljs-keyword\">Animal</span>的构造函数<br>这是Dog的构造函数<br>这是Dog的析构函数<br>释放堆区的p<br>这是<span class=\"hljs-keyword\">Animal</span>的析构函数<br></code></pre></td></tr></table></figure>\n<p>​    如此便可以释放子类Dog在堆区申请的空间了，纯虚析构函数和虚析构函数的作用是一样，只是纯虚析构函数有一个和纯虚函数一样的特性，即定义看纯虚析构函数的类也属于抽象类，纯虚析构函数必须实现，如果不实现所有继承了拥有纯虚析构函数的抽象类的派生类都属于抽象类。需要注意的是，因为纯虚析构函数的特性，纯虚析构函数的实现就必须在类外实现了。</p>\n<h2 id=\"5-重载、重写、重定义\"><a href=\"#5-重载、重写、重定义\" class=\"headerlink\" title=\"5.重载、重写、重定义\"></a>5.重载、重写、重定义</h2><p><strong>重载</strong></p>\n<p>重载发生在一个类的内部，拥有相同函数名，相同返回值而参数列表不同的函数之间互为重载关系。如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span></span><br><span class=\"hljs-class\">&#123;</span><br>\t<span class=\"hljs-keyword\">public</span>:<br>\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fun</span><span class=\"hljs-params\">()</span></span>&#123;&#125;<br>\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fun</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a)</span></span>&#123;&#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p><font color=\"red\"> 只有相同函数名而参数列表的函数才是重载，函数名相同参数列表也相同而返回值不同的函数在C++中是不允许的。</font></p>\n<p><strong>重写</strong></p>\n<p>重写发生在基类和派生类之间，基类中定义虚函数(纯虚函数)，派生类中定义和虚函数拥有<strong>相同函数名，相同参数列表和相同返回值</strong>的函数，这种情况下发生函数重写。如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span></span><br><span class=\"hljs-class\">&#123;</span><br>    <span class=\"hljs-keyword\">public</span>:<br>    \t<span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fun</span><span class=\"hljs-params\">()</span></span>&#123;&#125;<br>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span> :</span> <span class=\"hljs-keyword\">public</span> A<br>&#123;<br>\t<span class=\"hljs-keyword\">public</span>:<br>\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fun</span><span class=\"hljs-params\">()</span></span>&#123;&#125;<span class=\"hljs-comment\">//重写A类的fun函数</span><br>\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fun</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a)</span></span>&#123;&#125;<span class=\"hljs-comment\">//重定义一个新函数</span><br>\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">fun</span><span class=\"hljs-params\">()</span></span>&#123;<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;&#125;<span class=\"hljs-comment\">//这种情况C++不允许</span><br>&#125;;<br></code></pre></td></tr></table></figure>\n<p><strong>重定义</strong></p>\n<p>重定义也是发生在基类和派生类之间，派生类拥有与基类函数名相同，返回值相同，而参数列表不同的函数，此时发生重定义。如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span></span><br><span class=\"hljs-class\">&#123;</span><br>  <span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fun</span><span class=\"hljs-params\">()</span></span>&#123;&#125;<br>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span> :</span> <span class=\"hljs-keyword\">public</span> A<br>&#123;<br>\t<span class=\"hljs-keyword\">public</span>:<br>\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fun</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a)</span></span>&#123;&#125;<span class=\"hljs-comment\">//发生重定义</span><br>&#125;;<br></code></pre></td></tr></table></figure>\n<p><font color=\"red\"> 派生类中可以重定义基类的任何函数，包括虚函数和纯虚函数。</font></p>\n<h2 id=\"6-父类指针和子类指针步长不一致问题\"><a href=\"#6-父类指针和子类指针步长不一致问题\" class=\"headerlink\" title=\"6.父类指针和子类指针步长不一致问题\"></a>6.父类指针和子类指针步长不一致问题</h2><p>问题出现的场景是这样的：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-keyword\">int</span> a;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">()</span> </span>&#123;&#125;<br>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span> :</span> <span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">public</span> A<br>&#123;<br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-keyword\">int</span> b;<br>\tB(<span class=\"hljs-keyword\">int</span> b)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;b = b;<br>\t&#125;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tA *a = <span class=\"hljs-literal\">NULL</span>;<br>\tB *b = <span class=\"hljs-literal\">NULL</span>;<br>\tB <span class=\"hljs-built_in\">array</span>[<span class=\"hljs-number\">2</span>]&#123; B(<span class=\"hljs-number\">1</span>),B(<span class=\"hljs-number\">2</span>) &#125;;<br>\ta = <span class=\"hljs-built_in\">array</span>;<br>\tb = <span class=\"hljs-built_in\">array</span>;<br>\ta-&gt;print();<br>\tb-&gt;print();<br>\ta++; b++;<br>\ta-&gt;print();<span class=\"hljs-comment\">//这一步会出现异常</span><br>\tb-&gt;print();<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>即父类指针a和子类指针b都指向一个子类对象数组，于是我们可以通过指针++的自增运算来逐步访问数组元素，问题就出在这，使用<code>sizeof()</code>计算两个类的大小分别得出，sizeof(A)=8;sizeof(B)=20;这就导致A类指针a每一次移步时只移动了8个字节，这个距离还远远没有达到下一个元素的首地址，所以访问会出错，这是因为指针每次移步移动的距离是指针类型的空间大小，如：A类大小为8，所以A类指针每移步一次走8个字节。</p>\n<p>可能会有疑问，为什么类B的大小是20？</p>\n<p>我们可以算一算，类B继承至类A所以类A中拥有的成员变量，类B也拥有，占8字节，这8字节分别是int变量4字节和虚函数表指针4字节；类B自身定义了一个int变量占4字节，由于类B重写了类A的虚函数，所以类B也拥有一个自己的虚函数表指针，占4字节；类B虚继承了类A，在这个过程中，C++编译器会给类B增加一个属性，占4字节，于是，<strong>8+4+4+4+4=20</strong>。</p>\n<hr>\n<h1 id=\"四、泛型编程\"><a href=\"#四、泛型编程\" class=\"headerlink\" title=\"四、泛型编程\"></a>四、泛型编程</h1><h2 id=\"1-函数模板\"><a href=\"#1-函数模板\" class=\"headerlink\" title=\"1.函数模板\"></a>1.函数模板</h2><h3 id=\"函数模板的基本语法\"><a href=\"#函数模板的基本语法\" class=\"headerlink\" title=\"函数模板的基本语法\"></a>函数模板的基本语法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//---------------函数模板</span><br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;<span class=\"hljs-comment\">//告诉编译器我要开始泛型编程了，遇到T不要报错</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Fun</span><span class=\"hljs-params\">(T &amp;a,T &amp;b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tT t = a;<br>\ta = b;<br>\tb = t;<br>&#125;<br><span class=\"hljs-comment\">//----------------</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">char</span> a = <span class=\"hljs-number\">97</span>,b = <span class=\"hljs-number\">102</span>;<br>\tFun(a, b);<span class=\"hljs-comment\">//自动推导类型调用</span><br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot;,&quot;</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t<span class=\"hljs-built_in\">string</span> x = <span class=\"hljs-string\">&quot;xxx&quot;</span>, y = <span class=\"hljs-string\">&quot;yyy&quot;</span>;<br>\tFun&lt;<span class=\"hljs-built_in\">string</span>&gt;(x, y);<span class=\"hljs-comment\">//显示类型调用</span><br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; x &lt;&lt; <span class=\"hljs-string\">&quot;,&quot;</span> &lt;&lt; y &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"当函数模板遇到函数重载\"><a href=\"#当函数模板遇到函数重载\" class=\"headerlink\" title=\"当函数模板遇到函数重载\"></a>当函数模板遇到函数重载</h3><p>当函数模板遇到函数重载准许下面4条原则</p>\n<ul>\n<li>函数模板可以像普通函数一样被重载</li>\n<li>C++编译器优先考虑普通函数</li>\n<li>如果函数模板可以产生一个更好的匹配，那么选择函数模板</li>\n<li>可以通过模板的空实参列表的语法限定编译器只通过函数模板匹配</li>\n</ul>\n<p>我们来看一个例子，逐一分析</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Fun</span><span class=\"hljs-params\">(T a,T b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\ta = a + b;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;我是函数模板&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T1,<span class=\"hljs-keyword\">typename</span> T2&gt;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Fun</span><span class=\"hljs-params\">(T1 a,T2 b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tT1 x = a;<br>\tT2 y = b;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;我是函数模板重载&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Fun</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;我是普通函数&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Fun2</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot;,&quot;</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tFun(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br>\tFun(<span class=\"hljs-number\">0.1</span>, <span class=\"hljs-number\">0.2</span>);<br>\tFun(<span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-number\">1</span>);<br>\tFun&lt;&gt;(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br>\tFun2(<span class=\"hljs-number\">0.1</span>, <span class=\"hljs-number\">0.2</span>);<br>\tFun2(<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-number\">3</span>);<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">我是普通函数<br>我是函数模板<br>我是函数模板重载<br>我是函数模板<br>0,0<br>97,3<br></code></pre></td></tr></table></figure>\n<p><strong>分析：</strong></p>\n<ul>\n<li><code>Fun(1,2)</code>:有完全匹配的普通函数，所以调用<code>void Fun(int a, int b)</code></li>\n<li><code>Fun(0.1,0.2)</code>:虽然普通函数<code>void Fun(int a, int b)</code>可以像<code>void Fun2(int a, int b)</code>一样进行隐式类型转换调用，倒是<code>Fun()</code>函数有更好的重载函数<code>void Fun(T1 a,T2 b)</code>模板匹配所以编译器优先调用<code>void Fun(T1 a,T2 b)</code></li>\n<li><code>Fun(&#39;c&#39;,1)</code>:编译器能找到匹配的函数模板重载<code>void Fun(T1 a,T2 b)</code>所以优先调用函数模板</li>\n<li><code>Fun&lt;&gt;(1,2)</code>:使用了空参数列表，告诉编译器只匹配函数模板，即使代码段中有能完美匹配的普通函数，也只调用函数模板</li>\n</ul>\n<h2 id=\"2-类模板\"><a href=\"#2-类模板\" class=\"headerlink\" title=\"2.类模板\"></a>2.类模板</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;<span class=\"hljs-comment\">//定义</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TemplateA</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tTemplateA(T a)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;a = a;<br>\t&#125;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintA</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br><span class=\"hljs-keyword\">private</span>:<br>\tT a;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Test</span><span class=\"hljs-params\">(TemplateA&lt;<span class=\"hljs-keyword\">int</span>&gt; &amp;a)</span><span class=\"hljs-comment\">//类模板作形参</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\ta.PrintA();<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-function\">TemplateA&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">a</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span></span>;<span class=\"hljs-comment\">//使用</span><br>\t<span class=\"hljs-function\">TemplateA&lt;<span class=\"hljs-built_in\">string</span>&gt; <span class=\"hljs-title\">b</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;str&quot;</span>)</span></span>;<br>\t<span class=\"hljs-function\">TemplateA&lt;<span class=\"hljs-keyword\">bool</span>&gt; <span class=\"hljs-title\">c</span><span class=\"hljs-params\">(<span class=\"hljs-literal\">true</span>)</span></span>;<br>\tTest(a);<br>\tb.PrintA();<br>\tc.PrintA();<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">a:</span><span class=\"hljs-number\">1</span><br><span class=\"hljs-symbol\">a:</span>str<br><span class=\"hljs-symbol\">a:</span><span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n<p>类模板的定义和函数模板的定义类似</p>\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>类模板的使用必须显示的确定模板的类型参数，如：<code>TemplateA&lt;string&gt; b(&quot;str&quot;)</code></p>\n<h3 id=\"类模板作参数\"><a href=\"#类模板作参数\" class=\"headerlink\" title=\"类模板作参数\"></a>类模板作参数</h3><p>类模板作参数也必须显示的确定模板那的类型参数，如：</p>\n<p><code>void Test(TemplateA&lt;int&gt; &amp;a)</code>以便编译器为形参确定内存空间。</p>\n<h3 id=\"类模板派生普通类\"><a href=\"#类模板派生普通类\" class=\"headerlink\" title=\"类模板派生普通类\"></a>类模板派生普通类</h3><p>类模板也可以被继承，但是在继承时需要显示确定模板的类型参数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TemplateA</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tTemplateA(T a)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;a = a;<br>\t&#125;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintA</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br><span class=\"hljs-keyword\">private</span>:<br>\tT a;<br>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span> :</span> <span class=\"hljs-keyword\">public</span> TemplateA&lt;<span class=\"hljs-keyword\">int</span>&gt;<span class=\"hljs-comment\">//类模板派生普通类</span><br>&#123;<br><span class=\"hljs-keyword\">public</span>:<br>\tB(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b) :TemplateA(a)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;b = b;<br>\t&#125;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintB</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;b:&quot;</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br><span class=\"hljs-keyword\">private</span>:<br>\t<span class=\"hljs-keyword\">int</span> b;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-function\">B <span class=\"hljs-title\">b</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)</span></span>;<br>\tb.PrintA();<br>\tb.PrintB();<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"模板类派生模板类\"><a href=\"#模板类派生模板类\" class=\"headerlink\" title=\"模板类派生模板类\"></a>模板类派生模板类</h3><p>模板类不仅可以派生普通类，还可以派生模板类</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TemplateA</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tTemplateA(T a)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;a = a;<br>\t&#125;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintA</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br><span class=\"hljs-keyword\">private</span>:<br>\tT a;<br>&#125;;<br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T1,<span class=\"hljs-keyword\">typename</span> T2&gt;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TemplateB</span> :</span> <span class=\"hljs-keyword\">public</span> TemplateA&lt;T2&gt;<span class=\"hljs-comment\">//类模板派生类模板</span><br>&#123;<br><span class=\"hljs-keyword\">public</span>:<br>\tTemplateB(T2 a, T1 b) :TemplateA(a)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>-&gt;b = b;<br>\t&#125;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintB</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t</span>&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;b:&quot;</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br><span class=\"hljs-keyword\">private</span>:<br>\tT1 b;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tTemplateB&lt;string,char&gt; b(&#x27;A&#x27;, &quot;TemplateB&quot;);<br>\tb.PrintA();<br>\tb.PrintB();<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">a:</span>A<br><span class=\"hljs-symbol\">b:</span>TemplateB<br></code></pre></td></tr></table></figure>\n<h3 id=\"类模板的主要作用\"><a href=\"#类模板的主要作用\" class=\"headerlink\" title=\"类模板的主要作用\"></a>类模板的主要作用</h3><p>类模板的主要作用就是将数据结构的表示和算法不受包含的元素类型的影响，即类模板将元素类型和数据结构算法分离开来了，使数据结构和算法成为真正意义上的数据结构和算法，如：链表不再因为<code>int</code>类型而定义一个<code>int</code>类型的链表，因<code>string</code>类型而定义一个<code>string</code>类型的链表，而是定义一个链表可以通用于所有类型。</p>\n<h1 id=\"五、异常处理\"><a href=\"#五、异常处理\" class=\"headerlink\" title=\"五、异常处理\"></a>五、异常处理</h1><h2 id=\"1-异常的基本语法\"><a href=\"#1-异常的基本语法\" class=\"headerlink\" title=\"1.异常的基本语法\"></a>1.异常的基本语法</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Try</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> y)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">if</span> (y == <span class=\"hljs-number\">0</span>)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;除数不能等于0，抛出异常&quot;</span>&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br>\t\t<span class=\"hljs-keyword\">throw</span> y;<span class=\"hljs-comment\">//这里必须指明抛出异常的数据类型，否则程序无法处理异常，只能使用这个类型的变量，x和y的效果是一样的，不能直接抛出int，即这样是不行的throw int</span><br>\t&#125;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;x/y=&quot;</span> &lt;&lt; x / y &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Test1</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tTry(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br>\tTry(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Test2</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">try</span><br>\t&#123;<br>\t\tTest1();<br>\t&#125;<br>\t<span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-keyword\">char</span> e)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;处理char异常&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">catch</span>(...)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;无法处理的异常继续往上抛&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t\t<span class=\"hljs-keyword\">throw</span>;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">try</span><br>\t&#123;<br>\t\tTest2();<br>\t&#125;<br>\t<span class=\"hljs-keyword\">catch</span>(<span class=\"hljs-keyword\">int</span> e)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;处理int异常&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">catch</span> (...)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;处理其他异常&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight gml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gml\"><span class=\"hljs-symbol\">x</span>/<span class=\"hljs-symbol\">y</span>=<span class=\"hljs-number\">0</span><br>除数不能等于<span class=\"hljs-number\">0</span>，抛出异常<br>无法处理的异常继续往上抛<br>处理int异常<br></code></pre></td></tr></table></figure>\n<ul>\n<li>异常的抛出是可以跨函数的，如上面的代码，在<code>Try</code>函数里抛出的异常可以在<code>mian</code>函数中处理，中间跨过了<code>Test1</code>，<code>Test2</code>两个函数</li>\n<li>如果在一个函数内捕捉到异常但是却无法处理可以通过<code>throw</code>继续向上抛，直至main函数，如上面代码，<code>Test2</code>捕捉到异常但是没有处理继续向上抛给了main函数，如果main函数还是没有处理，则会直接中断程序</li>\n<li>C++使用<code>cacth(...)</code>来捕捉其他没有捕捉到的异常，如上面代码，main函数中只捕捉了int类型的异常，如果出现其他类型的异常则有<code>cacth(...)</code>来捕捉</li>\n<li>异常处理是按照类型匹配来处理的，即<code>throw</code>的int类型的异常只有<code>cacth(int e)</code>能够接收得到，否则就只能使用<code>cacth(...)</code>来接收未知异常</li>\n</ul>\n<h2 id=\"2-C-异常处理的特性\"><a href=\"#2-C-异常处理的特性\" class=\"headerlink\" title=\"2.C++异常处理的特性\"></a>2.C++异常处理的特性</h2><p>​    C++的异常处理具有跨函数性，这使得<font color=\"red\"> 异常引发</font>和<font color=\"red\"> 异常处理</font>分离开来，这样下层函数可以不用过多的在一异常处理，而把重点放在问题的逻辑处理上，异常处理可以由上层调用者专门来处理。</p>\n<h2 id=\"3-异常接口申明\"><a href=\"#3-异常接口申明\" class=\"headerlink\" title=\"3.异常接口申明\"></a>3.异常接口申明</h2><p><strong>不抛出任何异常：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Try</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> y)</span> <span class=\"hljs-title\">throw</span><span class=\"hljs-params\">()</span><span class=\"hljs-comment\">//异常接口申明</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">if</span> (y == <span class=\"hljs-number\">0</span>)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;除数不能等于0，抛出异常&quot;</span>&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br>\t\t<span class=\"hljs-keyword\">throw</span> x;<br>\t&#125;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;x/y=&quot;</span> &lt;&lt; x / y &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>只能抛出列表中类型的异常：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Try</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> y)</span> <span class=\"hljs-title\">throw</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span>,<span class=\"hljs-keyword\">int</span>*)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">if</span> (y == <span class=\"hljs-number\">0</span>)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;除数不能等于0，抛出异常&quot;</span>&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br>\t\t<span class=\"hljs-keyword\">throw</span> x;<br>\t&#125;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;x/y=&quot;</span> &lt;&lt; x / y &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>可以抛出任何异常：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Try</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> y)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">if</span> (y == <span class=\"hljs-number\">0</span>)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;除数不能等于0，抛出异常&quot;</span>&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br>\t\t<span class=\"hljs-keyword\">throw</span> x;<br>\t&#125;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;x/y=&quot;</span> &lt;&lt; x / y &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>不过经过测试，三份代码无论是否写throw都是可以抛出并处理异常的，似乎这个语法没什么卵用，可能C++11摒弃了这种用法，但是考虑到兼容保留这个语法。</p>\n<h2 id=\"4-异常接收的3种方式\"><a href=\"#4-异常接收的3种方式\" class=\"headerlink\" title=\"4.异常接收的3种方式\"></a>4.异常接收的3种方式</h2><h3 id=\"普通形参\"><a href=\"#普通形参\" class=\"headerlink\" title=\"普通形参\"></a>普通形参</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tA() &#123; <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;构造A&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>; &#125;<br>\tA(<span class=\"hljs-keyword\">const</span> A &amp;a) &#123; <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;拷贝A&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>; &#125;<br>\t~A() &#123; <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;析构A&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>; &#125;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Try</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tA a;<br>\t<span class=\"hljs-keyword\">throw</span> a;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">try</span><br>\t&#123;<br>\t\tTry();<br>\t&#125;<br>\t<span class=\"hljs-keyword\">catch</span>(A e)<span class=\"hljs-comment\">//使用普通形参</span><br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;处理int异常&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">构造<span class=\"hljs-keyword\">A</span><br>拷贝<span class=\"hljs-keyword\">A</span><br>拷贝<span class=\"hljs-keyword\">A</span><br>析构<span class=\"hljs-keyword\">A</span><br>处理int异常<br>析构<span class=\"hljs-keyword\">A</span><br>析构<span class=\"hljs-keyword\">A</span><br></code></pre></td></tr></table></figure>\n<p>可以看到a被拷贝两次，第一次从<code>A a</code>拷贝到<code>throw a</code>，第二次从<code>throw a</code>拷贝到<code>catch(A e)</code>，可以看出如果使用普通形参来接收异常，异常变量会由异常抛出处拷贝到异常接收处。</p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p>将上面代码的<code>catch(A e)</code>改为<code>catch(A &amp;e)</code></p>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">构造<span class=\"hljs-keyword\">A</span><br>拷贝<span class=\"hljs-keyword\">A</span><br>析构<span class=\"hljs-keyword\">A</span><br>处理int异常<br>析构<span class=\"hljs-keyword\">A</span><br></code></pre></td></tr></table></figure>\n<p>可以看到只拷贝了一次，即从<code>A a</code>拷贝到<code>throw a</code>。</p>\n<h3 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h3><p>上面代码应该修改为如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tA() &#123; <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;构造A&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>; &#125;<br>\tA(<span class=\"hljs-keyword\">const</span> A &amp;a) &#123; <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;拷贝A&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>; &#125;<br>\t~A() &#123; <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;析构A&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>; &#125;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Try</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tA *a = <span class=\"hljs-keyword\">new</span> A();<span class=\"hljs-comment\">//对象必须创建在堆区，函数结束对象就会被销毁，而无法通过指针传递到catch中</span><br>\t<span class=\"hljs-keyword\">throw</span> a;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">try</span><br>\t&#123;<br>\t\tTry();<br>\t&#125;<br>\t<span class=\"hljs-keyword\">catch</span>(A *e)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;处理int异常&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t\t<span class=\"hljs-keyword\">delete</span> e;<span class=\"hljs-comment\">//需要手动释放堆区的内存</span><br>\t&#125;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">构造<span class=\"hljs-keyword\">A</span><br>处理int异常<br>析构<span class=\"hljs-keyword\">A</span><br></code></pre></td></tr></table></figure>\n<p>可以看到使用指针完全不需要拷贝，但是却需要消耗堆区的内存且容易造成内存泄露。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>总的来说，最优的方式还是使用引用。</p>\n<h2 id=\"5-继承在异常处理中的应用\"><a href=\"#5-继承在异常处理中的应用\" class=\"headerlink\" title=\"5.继承在异常处理中的应用\"></a>5.继承在异常处理中的应用</h2><p>在实际的项目中我们处理的异常并不是一些基础的数据类型，大多都是开发者的自定义类，这种情况在捕捉异常的时候就相当麻烦，尽管有些异常处理起来程序基本一致，但是却要将每一种异常一一捕捉并一一处理，下面的代码我们来模拟一下这种情况。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span>//<span class=\"hljs-title\">A</span>类实现输入一个范围在0-10的奇数</span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tA(<span class=\"hljs-keyword\">int</span> a) <br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">if</span> (a % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>) &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> (a &lt; <span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">throw</span> LtZero();<br>\t\t\t<span class=\"hljs-keyword\">if</span> (a &gt; <span class=\"hljs-number\">10</span>)<span class=\"hljs-keyword\">throw</span> GtTen();<br>\t\t\t<span class=\"hljs-keyword\">else</span> num = a;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">throw</span> Even();<br>\t&#125;<br><span class=\"hljs-keyword\">private</span>:<br>\t<span class=\"hljs-keyword\">int</span> num;<br>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LtZero</span>//专门处理异常的异常类</span><br><span class=\"hljs-class\">&#123;</span>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GtTen</span></span><br><span class=\"hljs-class\">&#123;</span>&#125;;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Even</span></span><br><span class=\"hljs-class\">&#123;</span>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">try</span> &#123; <span class=\"hljs-function\">A <span class=\"hljs-title\">a</span><span class=\"hljs-params\">(<span class=\"hljs-number\">4</span>)</span></span>; &#125;<br>\t<span class=\"hljs-keyword\">catch</span> (LtZero &amp;lz) &#123; <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;输入的数小于0&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>; &#125;<br>\t<span class=\"hljs-keyword\">catch</span> (GtTen &amp;gt) &#123; <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;输入的数大于10&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>; &#125;<br>\t<span class=\"hljs-keyword\">catch</span> (Even &amp;ev) &#123; <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;输入的数是偶数&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>; &#125;<br>\t<span class=\"hljs-keyword\">catch</span> (...) &#123; <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;其他异常&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>; &#125;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>可以看到我们的异常处理模块相当繁杂，在实际开发项目中异常的数量远远不止上面模拟的三种，可能多达上百种或则更多，这是异常的处理将变得十分繁杂，那么如何处理呢？</p>\n<p>可能心细的读者会发现，我们在处理异常时使用了专门的异常处理类，而类是可以继承的，于是乎，继承在异常处理中的作用就体现出来了。</p>\n<p>我们再来看一份优化后的代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span>//<span class=\"hljs-title\">A</span>类实现输入一个范围在0-10的奇数</span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\tA(<span class=\"hljs-keyword\">int</span> a) <br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">if</span> (a % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>) &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> (a &lt; <span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">throw</span> LtZero();<br>\t\t\t<span class=\"hljs-keyword\">if</span> (a &gt; <span class=\"hljs-number\">10</span>)<span class=\"hljs-keyword\">throw</span> GtTen();<br>\t\t\t<span class=\"hljs-keyword\">else</span> num = a;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">throw</span> Even();<br>\t&#125;<br><br>\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Even</span></span><br><span class=\"hljs-class\">\t&#123;</span><br>\t<span class=\"hljs-keyword\">public</span>:<br>\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintErro</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t\t</span>&#123;<br>\t\t\t<span class=\"hljs-built_in\">cout</span>&lt;&lt; <span class=\"hljs-string\">&quot;输入的数是偶数&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t\t&#125;<br>\t&#125;;<br>\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LtZero</span>:</span><span class=\"hljs-keyword\">public</span> Even<br>\t&#123;<br>\t<span class=\"hljs-keyword\">public</span>:<br>\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintErro</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t\t</span>&#123;<br>\t\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;输入的数小于0&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t\t&#125;<br>\t&#125;;<br>\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GtTen</span>:</span><span class=\"hljs-keyword\">public</span> Even<br>\t&#123;<br>\t<span class=\"hljs-keyword\">public</span>:<br>\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PrintErro</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">\t\t</span>&#123;<br>\t\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;输入的数大于10&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t\t&#125;<br>\t&#125;;<br><span class=\"hljs-keyword\">private</span>:<br>\t<span class=\"hljs-keyword\">int</span> num;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">try</span> &#123; <span class=\"hljs-function\">A <span class=\"hljs-title\">a</span><span class=\"hljs-params\">(<span class=\"hljs-number\">4</span>)</span></span>; &#125;<br>\t<span class=\"hljs-keyword\">catch</span> (A::Even e) &#123; e.PrintErro(); &#125;<br>\t<span class=\"hljs-keyword\">catch</span> (...) &#123; <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;其他异常&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>; &#125;<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>可以看到我们的异常处理模块使用多态，繁杂程度被大幅缩水了，而我们的异常处理被集中在了异常处理类中，有时，如果我们的异常处理只对某一个类有效也是可以直接将异常处理类定义在抛出类里面的。</p>\n<h2 id=\"6-标准异常库\"><a href=\"#6-标准异常库\" class=\"headerlink\" title=\"6.标准异常库\"></a>6.标准异常库</h2><p>C++提供一些标准的异常库，头文件为：#include<stdexcep></stdexcep></p>\n<h1 id=\"六、标准IO流\"><a href=\"#六、标准IO流\" class=\"headerlink\" title=\"六、标准IO流\"></a>六、标准IO流</h1><h2 id=\"1-标准IO流流程\"><a href=\"#1-标准IO流流程\" class=\"headerlink\" title=\"1.标准IO流流程\"></a>1.标准IO流流程</h2><p><img src=\"/2019/09/14/%E3%80%90C++%E3%80%91C++%E9%AB%98%E7%BA%A7/Snipaste_2019-10-06_10-03-47.png\"></p>\n<h2 id=\"2-标准输入流\"><a href=\"#2-标准输入流\" class=\"headerlink\" title=\"2.标准输入流\"></a>2.标准输入流</h2><table>\n<thead>\n<tr>\n<th>标准函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cin</td>\n<td>cin&gt;&gt;操作支持任何基本类型的输入，但是遇到空格则结束读取</td>\n</tr>\n<tr>\n<td>cin.get(char chr)</td>\n<td>从缓冲区中读取一个字符到chr中，因为C++定义的cin.get(char)中会返回一个函数自身的引用，所以此函数支持链式编程，即cin.get(a).get(b).get(c);b表示依次从缓冲区中读取三个字符到a，b，c中</td>\n</tr>\n<tr>\n<td>cin.get(char* buf,int cout)</td>\n<td>从缓冲区中读取cout个字符到buf数组中，因为函数似乎会在数组末尾添加点什么，所以实际读取的字符数量是cout-1个，此函数也支持链式编程</td>\n</tr>\n<tr>\n<td>cin.get(char* buf,int cout,char chr)</td>\n<td>从缓冲区中读取cout个字符到buf数组中，如果碰到字符chr则结束读取</td>\n</tr>\n<tr>\n<td>cin.getline(char buf,int cout)</td>\n<td>从缓冲区中读取cout个字符到buf数组中</td>\n</tr>\n<tr>\n<td>cin.ignore(int num)</td>\n<td>忽略缓冲区当前读取指针开始的num个字符再读取</td>\n</tr>\n<tr>\n<td>cin.peek()</td>\n<td>判断缓冲区中是否有数据，如果有则返回第一个字符，如果没有则阻塞程序</td>\n</tr>\n<tr>\n<td>cin.putback(char chr)</td>\n<td>将读取出来的字符再返存回缓冲区，只能读取一个字符</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-标准输出流\"><a href=\"#3-标准输出流\" class=\"headerlink\" title=\"3.标准输出流\"></a>3.标准输出流</h2><table>\n<thead>\n<tr>\n<th>标准函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cout</td>\n<td>输出缓冲区内容，支持任何基本类型数据的输出</td>\n</tr>\n<tr>\n<td>cout.flush(void)</td>\n<td>刷新缓冲区，无视系统繁忙，强制输出缓冲区的字符，语法和cout一样“cout.flush()&lt;&lt;buf&lt;&lt;endl;”</td>\n</tr>\n<tr>\n<td>cout.put(char chr)</td>\n<td>在标准输出设备输出指针的当前位置插入字符chr，语法和cout一致</td>\n</tr>\n<tr>\n<td>cout.write(char *chr,int cout)</td>\n<td>输出*chr所指向空间中cout个数量的字符，即使越界也会继续输出，语法和cout一致</td>\n</tr>\n<tr>\n<td>cout.width(int num)</td>\n<td>输出num个字节宽度的字符，一般配合cout.fill(char chr)和其他cout函数一起使用</td>\n</tr>\n<tr>\n<td>cout.fill(char chr)</td>\n<td>配合cout.width(int num)和其他cout一起使用，在输出的num宽度的字符中将cout函数没有填充完的字符用chr填充</td>\n</tr>\n<tr>\n<td>cout.setf(标记)</td>\n<td>格式化cout输出，标记种类很多，具体的可以查阅资料，配合cout函数一起使用</td>\n</tr>\n</tbody></table>\n<h2 id=\"4-文件IO流\"><a href=\"#4-文件IO流\" class=\"headerlink\" title=\"4.文件IO流\"></a>4.文件IO流</h2><p>​    文件操作相对来说比较简单，总的来说就是5个步骤，即</p>\n<h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h3><ul>\n<li><p>​    包含头文件<font color=\"red\">#include<ftream></ftream></font></p>\n</li>\n<li><p>​    创建流对象</p>\n</li>\n<li><p>​    打开文件</p>\n</li>\n<li><p>​    读写文件</p>\n<p>​    <font color=\"red\">需要注意的是C++中文件写的方式是使用符号“&lt;&lt;”，如：fout &lt;&lt; “文件内容”&lt;&lt;endl;</font></p>\n<p>​    <font color=\"red\">同理文件读也可以使用“&gt;&gt;”来读。</font></p>\n</li>\n<li><p>​    关闭文件</p>\n<p><strong>文件写</strong></p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;fstream&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tofstream fout;<br>\tfout.open(<span class=\"hljs-string\">&quot;文件测试.txt&quot;</span>, ios::out);<br>\tfout &lt;&lt; <span class=\"hljs-string\">&quot;姓名：张三&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\tfout &lt;&lt; <span class=\"hljs-string\">&quot;性别：男&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\tfout.close();<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\ttest();<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>​    <strong>输出结果：</strong>    </p>\n<p><img src=\"/2019/09/14/%E3%80%90C++%E3%80%91C++%E9%AB%98%E7%BA%A7/Snipaste_2019-09-14_16-29-43.png\"></p>\n<h3 id=\"4种文件读的方式\"><a href=\"#4种文件读的方式\" class=\"headerlink\" title=\"4种文件读的方式\"></a>4种文件读的方式</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;fstream&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tifstream fin;<br>\tfin.open(<span class=\"hljs-string\">&quot;文件测试.txt&quot;</span>, ios::in);<br>\t<span class=\"hljs-keyword\">if</span> (!fin.is_open())<span class=\"hljs-comment\">//文件读需要多添加一步判断文件是否打开成功的步骤</span><br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;文件打开失败&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">char</span> str[<span class=\"hljs-number\">1024</span>];<br>\t<span class=\"hljs-built_in\">string</span> strs;<br>\t<span class=\"hljs-keyword\">char</span> chr;<br>\t<span class=\"hljs-comment\">//第一中方式</span><br>\t<span class=\"hljs-comment\">//while (fin &gt;&gt; str)//操作符&quot;&gt;&gt;&quot;每次只能读取一行数据，读到文件尾“EOF”时结束</span><br>\t<span class=\"hljs-comment\">//&#123;</span><br>\t<span class=\"hljs-comment\">//\tcout &lt;&lt; str &lt;&lt; endl;</span><br>\t<span class=\"hljs-comment\">//&#125;</span><br><br>\t<span class=\"hljs-comment\">//第二种方式</span><br>\t<span class=\"hljs-comment\">//while (fin.getline(str, 50))//ifstream::getline(char *str,int num);这个函数只支持字符数组，参数num指的是需要读取的字节数</span><br>\t<span class=\"hljs-comment\">//&#123;</span><br>\t<span class=\"hljs-comment\">//\tcout &lt;&lt; str &lt;&lt; endl;</span><br>\t<span class=\"hljs-comment\">//&#125;</span><br><br>\t<span class=\"hljs-comment\">//第三种方式</span><br>\t<span class=\"hljs-comment\">//while (getline(fin, strs))//与第二种方式不同的是，这个getline函数是全局的，且只支持输出到string类型的对象中</span><br>\t<span class=\"hljs-comment\">//&#123;</span><br>\t<span class=\"hljs-comment\">//\tcout &lt;&lt; strs &lt;&lt; endl;</span><br>\t<span class=\"hljs-comment\">//&#125;</span><br><br>\t<span class=\"hljs-comment\">//第四中方式</span><br>\t<span class=\"hljs-keyword\">while</span> ((chr = fin.get()) != EOF)<span class=\"hljs-comment\">//get()函数每次只能读取一个字符</span><br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; chr ;<br>\t&#125;<br>\tfin.close();<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\ttest();<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"文件的打开模式\"><a href=\"#文件的打开模式\" class=\"headerlink\" title=\"文件的打开模式\"></a>文件的打开模式</h3><p>​    C++提供6中文件的打开方式</p>\n<table>\n<thead>\n<tr>\n<th>打开方式</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ios::in</td>\n<td>以读的形式打开</td>\n</tr>\n<tr>\n<td>ios::out</td>\n<td>以写的形式打开，会覆盖源文件</td>\n</tr>\n<tr>\n<td>ios::ate</td>\n<td>以写的形式打开并初始文件位置：文件尾，会覆盖源文件</td>\n</tr>\n<tr>\n<td>ios::app</td>\n<td>以追加的方式打开文件</td>\n</tr>\n<tr>\n<td>ios::trunc</td>\n<td>如果文件存在先删除再创建</td>\n</tr>\n<tr>\n<td>ios::binary</td>\n<td>以二进制的形式打开</td>\n</tr>\n</tbody></table>\n<h3 id=\"读写二进制文件\"><a href=\"#读写二进制文件\" class=\"headerlink\" title=\"读写二进制文件\"></a>读写二进制文件</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;fstream&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span></span><br><span class=\"hljs-class\">&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-built_in\">string</span> name = <span class=\"hljs-string\">&quot;张三&quot;</span>;<br>\t<span class=\"hljs-built_in\">string</span> sex = <span class=\"hljs-string\">&quot;男&quot;</span>;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tofstream fout;<br>\tfout.open(<span class=\"hljs-string\">&quot;二进制文件测试.txt&quot;</span>, ios::out | ios::binary);<br>\tPerson p;<br>\tfout.write((<span class=\"hljs-keyword\">char</span> *)&amp;p, <span class=\"hljs-keyword\">sizeof</span>(Person));<span class=\"hljs-comment\">//注意这里使用ofstream::write()来写</span><br>\tfout.close;<br><br>\tifstream fin;<br>\tfin.open(<span class=\"hljs-string\">&quot;二进制文件测试.txt&quot;</span>, ios::in | ios::binary);<br>\t<span class=\"hljs-keyword\">if</span> (!fin.is_open())<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;文件打开错误&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t\t<span class=\"hljs-keyword\">return</span>;<br>\t&#125;<br>\tPerson pin;<br>\tfin.read((<span class=\"hljs-keyword\">char</span> *)&amp;pin, <span class=\"hljs-keyword\">sizeof</span>(Person));<span class=\"hljs-comment\">//注意这里使用ofstream::read()来读</span><br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;姓名：&quot;</span> &lt;&lt; pin.name &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;性别：&quot;</span> &lt;&lt; pin.sex &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>\tfin.close();<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\ttest();<br>\tsystem(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"【日记】在衡变的日子","password":"snoopy","abstract":"绕路吧！","message":"这里不可以看哦！","date":"2021-02-02T12:32:12.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n​\t从离开三大来到衡变工作到现在已经七个月了，由想上一篇日记还是在2019年10月12日写的啊，这一眨眼一个2020就过去了，在蜘网的余热还没蜕净，又到了春招的时节，该动动身了。\n\n<!--more-->\n\n​\t今年年初的时候的，各种魔幻2020的视频刷爆了B站，回想2020发生的事情可真不少啊。\n\n​\t2019年1月22日早10：30我在武昌站登上了返家的列车，当我22：00到家打开手机，各种武汉封城的消息刷爆了朋友圈，从12月9号开始的新冠病毒借着春运突然爆发，我真是庆幸上天佑我，不然我要是被关在武汉，都不知道怎么死。当天晚上蜘网的同事大都连夜跑出了武汉，不过还是被留下来了两个，标哥和静静。不过失策的是我以为过年只有7天假，于是就没有带电脑回家了，结果一波疫情直接来了个史上最长寒假，直到4月8号武汉解封这个寒假才结束。虽说假期很长，但是我却无比的忧愁，因为我不仅没有带电脑回家，我的毕设还给放公司电脑上了，看着武汉解封从3月10号又推到3月20号，眼看离五月预答辩只剩一个月多月了，实在等不了了，于是我只好忍痛买了一台新电脑。毕设….唉！又从头开始，于是整个从3月24号电脑到手到4月7号前往武汉，我就过上了997的生活，没日没夜肝毕设，回到蜘网后也是白天上班晚上肝毕设，总算是在预答辩之前把毕设给肝出来了。\n\n​\t这里放上黄兴灿录的我们的毕设的视频链接（自己懒得录视频了）：https://www.bilibili.com/video/BV1gf4y11715?p=1\n\n​\t当然有时间我还是要自己保存一份的，顺便把毕设也传到github上。\n\n​\t我拿出我的毕设时同学们的一片惊呼依旧在脑后回响，成就感不言而喻，终答辩也一番风顺，导师们挨个问我问题，我就挨个解答，导师见问不倒我，居然让我现场写外挂，我真是向骂特么了，还好我刷了点小手段，给忽悠过去了🤣。想想我的论文被我两天肝出来，可真是不可思议，而且查重也在15%以内，那时的我真的充满了能量啊。\n\n​\t答辩结束了，6月22号我从蜘网离职回到了母校，和室友定了9天的酒店，开始了疯玩模式，我是提前去的，还在超哥的租房住了两天，害的超哥小姐姐出去住了两天，还蹭吃蹭喝的，现在想想都还怪不好意思的😊。四年的书总共才买了120块左右，最可恨的是电动车只卖了20块，唉！现在废品可不是一般的廉价。每天和浩，狗儒，超哥窝在一块玩，很快6月29号到了，我也该启程回家了。\n\n​\t<font color=red>再见，三大！</font>\n\n<img src=\"【日记】在衡变的日子\\QQ图片20210202211910.jpg\" style=\"zoom: 25%;\" />\n\n​                                                                      \t<img src=\"【日记】在衡变的日子\\QQ图片20210202211325.jpg\" style=\"zoom:25%;\" />\n\n<img src=\"【日记】在衡变的日子\\QQ图片20210202211328.jpg\" style=\"zoom:25%;\" />\n\n<img src=\"【日记】在衡变的日子\\QQ图片20210202211323.jpg\" style=\"zoom:25%;\" />\n\n<font color=red>再见了，宜昌！</font>\n\n<img src=\"【日记】在衡变的日子\\QQ图片20210202211257.jpg\" style=\"zoom:25%;\" />\n\n<font color=red>再见了，2班！</font>\n\n<img src=\"【日记】在衡变的日子\\QQ图片20210202211250.jpg\" style=\"zoom:25%;\" />\n\n<font color=red>再见了，蜘网！</font>\n\n<img src=\"【日记】在衡变的日子\\QQ图片20210202211319.jpg\" style=\"zoom:25%;\" />\n\n<font color=red>再见了，武汉！</font>\n\n<img src=\"【日记】在衡变的日子\\QQ图片20210202211306.jpg\" style=\"zoom:25%;\" />\n\n​\t这本来是写在上一篇日记里的，可惜换电脑时那片日记丢失了，只好写在这里了。\n\n​\t在家待了一个月后，2020年7月27号，我来到了衡阳了，开始了在衡变的生活，来到衡阳的第一感觉呢，热，脏，路况极差！这不是一个好城市。最开始是一个为期20天的集训，集训的日子还是很快的，认识了很多人，陈龙、郭阳、彭紫薇、陈淼、温毅、蒋琨、陈奕君、李萌萌、张艳艳、伍坤杰。然后我们下车间了，车间实习可真是够了，我进的是线圈一车间，每天和铜线打交道，听说实习还要一年，顿时我就萌生了退意，其实在当初看到劳动合同上的5500的工资，加上不保吃住和大小周的暴击已经让我动摇了车间实习是压死骆驼的最后一根稻草，还好鹏哥出手早，两个月后把我和陈龙从车间捞了上去，不然他可能等不到我了。我最早一批进入部门的人，进入部门后第一个星期写了一个星期的编程规范，可以看的出设计部对参数化的野心很大，想要做无纸化，信息化，可惜实力不够，又舍不得下资本砸，开不了高工资怎么可能揽得住人才，就算不小心进来也是留不住的，比如我😁。然后我就开始了无休止的写界面的活，说实话写前端真的很无聊。\n\n​\t期间跟着陈龙开始学习投资，买了一些基金，但是不太敢碰股票。陈龙炒股确实有一手，他去年炒股挣了2w+，我就买卖基金就可以，至少基金比银行还是要好些的。\n\n​\t在衡变的日子也不能说不快乐，设计部活动很多，三天一小吃五天一大吃，各种饭局吃得停不下来，于是我稳定在110斤了，和朋友们玩得也很开心，但是呀，没有涨薪途径，这里我可真就待不了了。\n\n​\t今天是2021年2月2号，我得春招开始了。\n\n![](【日记】在衡变的日子\\QQ图片20210202211300.jpg)\n\n","source":"_posts/【日记】在衡变的日子.md","raw":"---\ntitle: 【日记】在衡变的日子\npassword: snoopy\nabstract: 绕路吧！\nmessage: 这里不可以看哦！\ndate: 2021-02-02 20:32:12\ntags: 大事件\ncategories: 日记\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n​\t从离开三大来到衡变工作到现在已经七个月了，由想上一篇日记还是在2019年10月12日写的啊，这一眨眼一个2020就过去了，在蜘网的余热还没蜕净，又到了春招的时节，该动动身了。\n\n<!--more-->\n\n​\t今年年初的时候的，各种魔幻2020的视频刷爆了B站，回想2020发生的事情可真不少啊。\n\n​\t2019年1月22日早10：30我在武昌站登上了返家的列车，当我22：00到家打开手机，各种武汉封城的消息刷爆了朋友圈，从12月9号开始的新冠病毒借着春运突然爆发，我真是庆幸上天佑我，不然我要是被关在武汉，都不知道怎么死。当天晚上蜘网的同事大都连夜跑出了武汉，不过还是被留下来了两个，标哥和静静。不过失策的是我以为过年只有7天假，于是就没有带电脑回家了，结果一波疫情直接来了个史上最长寒假，直到4月8号武汉解封这个寒假才结束。虽说假期很长，但是我却无比的忧愁，因为我不仅没有带电脑回家，我的毕设还给放公司电脑上了，看着武汉解封从3月10号又推到3月20号，眼看离五月预答辩只剩一个月多月了，实在等不了了，于是我只好忍痛买了一台新电脑。毕设….唉！又从头开始，于是整个从3月24号电脑到手到4月7号前往武汉，我就过上了997的生活，没日没夜肝毕设，回到蜘网后也是白天上班晚上肝毕设，总算是在预答辩之前把毕设给肝出来了。\n\n​\t这里放上黄兴灿录的我们的毕设的视频链接（自己懒得录视频了）：https://www.bilibili.com/video/BV1gf4y11715?p=1\n\n​\t当然有时间我还是要自己保存一份的，顺便把毕设也传到github上。\n\n​\t我拿出我的毕设时同学们的一片惊呼依旧在脑后回响，成就感不言而喻，终答辩也一番风顺，导师们挨个问我问题，我就挨个解答，导师见问不倒我，居然让我现场写外挂，我真是向骂特么了，还好我刷了点小手段，给忽悠过去了🤣。想想我的论文被我两天肝出来，可真是不可思议，而且查重也在15%以内，那时的我真的充满了能量啊。\n\n​\t答辩结束了，6月22号我从蜘网离职回到了母校，和室友定了9天的酒店，开始了疯玩模式，我是提前去的，还在超哥的租房住了两天，害的超哥小姐姐出去住了两天，还蹭吃蹭喝的，现在想想都还怪不好意思的😊。四年的书总共才买了120块左右，最可恨的是电动车只卖了20块，唉！现在废品可不是一般的廉价。每天和浩，狗儒，超哥窝在一块玩，很快6月29号到了，我也该启程回家了。\n\n​\t<font color=red>再见，三大！</font>\n\n<img src=\"【日记】在衡变的日子\\QQ图片20210202211910.jpg\" style=\"zoom: 25%;\" />\n\n​                                                                      \t<img src=\"【日记】在衡变的日子\\QQ图片20210202211325.jpg\" style=\"zoom:25%;\" />\n\n<img src=\"【日记】在衡变的日子\\QQ图片20210202211328.jpg\" style=\"zoom:25%;\" />\n\n<img src=\"【日记】在衡变的日子\\QQ图片20210202211323.jpg\" style=\"zoom:25%;\" />\n\n<font color=red>再见了，宜昌！</font>\n\n<img src=\"【日记】在衡变的日子\\QQ图片20210202211257.jpg\" style=\"zoom:25%;\" />\n\n<font color=red>再见了，2班！</font>\n\n<img src=\"【日记】在衡变的日子\\QQ图片20210202211250.jpg\" style=\"zoom:25%;\" />\n\n<font color=red>再见了，蜘网！</font>\n\n<img src=\"【日记】在衡变的日子\\QQ图片20210202211319.jpg\" style=\"zoom:25%;\" />\n\n<font color=red>再见了，武汉！</font>\n\n<img src=\"【日记】在衡变的日子\\QQ图片20210202211306.jpg\" style=\"zoom:25%;\" />\n\n​\t这本来是写在上一篇日记里的，可惜换电脑时那片日记丢失了，只好写在这里了。\n\n​\t在家待了一个月后，2020年7月27号，我来到了衡阳了，开始了在衡变的生活，来到衡阳的第一感觉呢，热，脏，路况极差！这不是一个好城市。最开始是一个为期20天的集训，集训的日子还是很快的，认识了很多人，陈龙、郭阳、彭紫薇、陈淼、温毅、蒋琨、陈奕君、李萌萌、张艳艳、伍坤杰。然后我们下车间了，车间实习可真是够了，我进的是线圈一车间，每天和铜线打交道，听说实习还要一年，顿时我就萌生了退意，其实在当初看到劳动合同上的5500的工资，加上不保吃住和大小周的暴击已经让我动摇了车间实习是压死骆驼的最后一根稻草，还好鹏哥出手早，两个月后把我和陈龙从车间捞了上去，不然他可能等不到我了。我最早一批进入部门的人，进入部门后第一个星期写了一个星期的编程规范，可以看的出设计部对参数化的野心很大，想要做无纸化，信息化，可惜实力不够，又舍不得下资本砸，开不了高工资怎么可能揽得住人才，就算不小心进来也是留不住的，比如我😁。然后我就开始了无休止的写界面的活，说实话写前端真的很无聊。\n\n​\t期间跟着陈龙开始学习投资，买了一些基金，但是不太敢碰股票。陈龙炒股确实有一手，他去年炒股挣了2w+，我就买卖基金就可以，至少基金比银行还是要好些的。\n\n​\t在衡变的日子也不能说不快乐，设计部活动很多，三天一小吃五天一大吃，各种饭局吃得停不下来，于是我稳定在110斤了，和朋友们玩得也很开心，但是呀，没有涨薪途径，这里我可真就待不了了。\n\n​\t今天是2021年2月2号，我得春招开始了。\n\n![](【日记】在衡变的日子\\QQ图片20210202211300.jpg)\n\n","slug":"【日记】在衡变的日子","published":1,"updated":"2021-02-02T13:51:19.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckko29br50000pwr7hthl4tkw","content":"<script src=\"/crypto-js.js\"></script><script src=\"/mcommon.js\"></script><h3 id=\"encrypt-message\">这里不可以看哦！</h3><link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css\"> <link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\"> <script src=\"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js\"></script> <script src=\"//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js\"></script> <div id=\"security\"> <div> <div class=\"input-group\"> <input type=\"text\" class=\"form-control\" aria-label=\"Enter the password.\" id=\"pass\"/> <div class=\"input-group-btn\"> <button type=\"button\" class=\"btn btn-default\" onclick=\"decryptAES()\">Decrypt</button> </div> </div> </div> </div> <div id=\"encrypt-blog\" style=\"display:none\">  </div>","site":{"data":{}},"excerpt":"绕路吧！","more":"绕路吧！","origin":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<p>​    从离开三大来到衡变工作到现在已经七个月了，由想上一篇日记还是在2019年10月12日写的啊，这一眨眼一个2020就过去了，在蜘网的余热还没蜕净，又到了春招的时节，该动动身了。</p>\n<a id=\"more\"></a>\n\n<p>​    今年年初的时候的，各种魔幻2020的视频刷爆了B站，回想2020发生的事情可真不少啊。</p>\n<p>​    2019年1月22日早10：30我在武昌站登上了返家的列车，当我22：00到家打开手机，各种武汉封城的消息刷爆了朋友圈，从12月9号开始的新冠病毒借着春运突然爆发，我真是庆幸上天佑我，不然我要是被关在武汉，都不知道怎么死。当天晚上蜘网的同事大都连夜跑出了武汉，不过还是被留下来了两个，标哥和静静。不过失策的是我以为过年只有7天假，于是就没有带电脑回家了，结果一波疫情直接来了个史上最长寒假，直到4月8号武汉解封这个寒假才结束。虽说假期很长，但是我却无比的忧愁，因为我不仅没有带电脑回家，我的毕设还给放公司电脑上了，看着武汉解封从3月10号又推到3月20号，眼看离五月预答辩只剩一个月多月了，实在等不了了，于是我只好忍痛买了一台新电脑。毕设….唉！又从头开始，于是整个从3月24号电脑到手到4月7号前往武汉，我就过上了997的生活，没日没夜肝毕设，回到蜘网后也是白天上班晚上肝毕设，总算是在预答辩之前把毕设给肝出来了。</p>\n<p>​    这里放上黄兴灿录的我们的毕设的视频链接（自己懒得录视频了）：<a href=\"https://www.bilibili.com/video/BV1gf4y11715?p=1\">https://www.bilibili.com/video/BV1gf4y11715?p=1</a></p>\n<p>​    当然有时间我还是要自己保存一份的，顺便把毕设也传到github上。</p>\n<p>​    我拿出我的毕设时同学们的一片惊呼依旧在脑后回响，成就感不言而喻，终答辩也一番风顺，导师们挨个问我问题，我就挨个解答，导师见问不倒我，居然让我现场写外挂，我真是向骂特么了，还好我刷了点小手段，给忽悠过去了🤣。想想我的论文被我两天肝出来，可真是不可思议，而且查重也在15%以内，那时的我真的充满了能量啊。</p>\n<p>​    答辩结束了，6月22号我从蜘网离职回到了母校，和室友定了9天的酒店，开始了疯玩模式，我是提前去的，还在超哥的租房住了两天，害的超哥小姐姐出去住了两天，还蹭吃蹭喝的，现在想想都还怪不好意思的😊。四年的书总共才买了120块左右，最可恨的是电动车只卖了20块，唉！现在废品可不是一般的廉价。每天和浩，狗儒，超哥窝在一块玩，很快6月29号到了，我也该启程回家了。</p>\n<p>​    <font color=\"red\">再见，三大！</font></p>\n<img src=\"/2021/02/02/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E5%9C%A8%E8%A1%A1%E5%8F%98%E7%9A%84%E6%97%A5%E5%AD%90/QQ图片20210202211910.jpg\" style=\"zoom: 25%;\">\n\n<p>​                                                                          <img src=\"/2021/02/02/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E5%9C%A8%E8%A1%A1%E5%8F%98%E7%9A%84%E6%97%A5%E5%AD%90/QQ图片20210202211325.jpg\" style=\"zoom:25%;\"></p>\n<img src=\"/2021/02/02/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E5%9C%A8%E8%A1%A1%E5%8F%98%E7%9A%84%E6%97%A5%E5%AD%90/QQ图片20210202211328.jpg\" style=\"zoom:25%;\">\n\n<img src=\"/2021/02/02/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E5%9C%A8%E8%A1%A1%E5%8F%98%E7%9A%84%E6%97%A5%E5%AD%90/QQ图片20210202211323.jpg\" style=\"zoom:25%;\">\n\n<p><font color=\"red\">再见了，宜昌！</font></p>\n<img src=\"/2021/02/02/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E5%9C%A8%E8%A1%A1%E5%8F%98%E7%9A%84%E6%97%A5%E5%AD%90/QQ图片20210202211257.jpg\" style=\"zoom:25%;\">\n\n<p><font color=\"red\">再见了，2班！</font></p>\n<img src=\"/2021/02/02/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E5%9C%A8%E8%A1%A1%E5%8F%98%E7%9A%84%E6%97%A5%E5%AD%90/QQ图片20210202211250.jpg\" style=\"zoom:25%;\">\n\n<p><font color=\"red\">再见了，蜘网！</font></p>\n<img src=\"/2021/02/02/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E5%9C%A8%E8%A1%A1%E5%8F%98%E7%9A%84%E6%97%A5%E5%AD%90/QQ图片20210202211319.jpg\" style=\"zoom:25%;\">\n\n<p><font color=\"red\">再见了，武汉！</font></p>\n<img src=\"/2021/02/02/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E5%9C%A8%E8%A1%A1%E5%8F%98%E7%9A%84%E6%97%A5%E5%AD%90/QQ图片20210202211306.jpg\" style=\"zoom:25%;\">\n\n<p>​    这本来是写在上一篇日记里的，可惜换电脑时那片日记丢失了，只好写在这里了。</p>\n<p>​    在家待了一个月后，2020年7月27号，我来到了衡阳了，开始了在衡变的生活，来到衡阳的第一感觉呢，热，脏，路况极差！这不是一个好城市。最开始是一个为期20天的集训，集训的日子还是很快的，认识了很多人，陈龙、郭阳、彭紫薇、陈淼、温毅、蒋琨、陈奕君、李萌萌、张艳艳、伍坤杰。然后我们下车间了，车间实习可真是够了，我进的是线圈一车间，每天和铜线打交道，听说实习还要一年，顿时我就萌生了退意，其实在当初看到劳动合同上的5500的工资，加上不保吃住和大小周的暴击已经让我动摇了车间实习是压死骆驼的最后一根稻草，还好鹏哥出手早，两个月后把我和陈龙从车间捞了上去，不然他可能等不到我了。我最早一批进入部门的人，进入部门后第一个星期写了一个星期的编程规范，可以看的出设计部对参数化的野心很大，想要做无纸化，信息化，可惜实力不够，又舍不得下资本砸，开不了高工资怎么可能揽得住人才，就算不小心进来也是留不住的，比如我😁。然后我就开始了无休止的写界面的活，说实话写前端真的很无聊。</p>\n<p>​    期间跟着陈龙开始学习投资，买了一些基金，但是不太敢碰股票。陈龙炒股确实有一手，他去年炒股挣了2w+，我就买卖基金就可以，至少基金比银行还是要好些的。</p>\n<p>​    在衡变的日子也不能说不快乐，设计部活动很多，三天一小吃五天一大吃，各种饭局吃得停不下来，于是我稳定在110斤了，和朋友们玩得也很开心，但是呀，没有涨薪途径，这里我可真就待不了了。</p>\n<p>​    今天是2021年2月2号，我得春招开始了。</p>\n<p><img src=\"/2021/02/02/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E5%9C%A8%E8%A1%A1%E5%8F%98%E7%9A%84%E6%97%A5%E5%AD%90/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E5%9C%A8%E8%A1%A1%E5%8F%98%E7%9A%84%E6%97%A5%E5%AD%90%5CQQ%E5%9B%BE%E7%89%8720210202211300.jpg\"></p>\n","encrypt":true,"template":"<link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css\"> <link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\"> <script src=\"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js\"></script> <script src=\"//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js\"></script> <div id=\"security\"> <div> <div class=\"input-group\"> <input type=\"text\" class=\"form-control\" aria-label=\"Enter the password.\" id=\"pass\"/> <div class=\"input-group-btn\"> <button type=\"button\" class=\"btn btn-default\" onclick=\"decryptAES()\">Decrypt</button> </div> </div> </div> </div> <div id=\"encrypt-blog\" style=\"display:none\"> {{content}} </div>"},{"title":"【C++】C++ PremierReadNote","password":null,"abstract":null,"message":null,"date":"2021-02-03T02:52:44.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# C++ Primer 阅读笔记\n\n---\n\n<!--more-->\n\n# 一、开始\n\n---\n\n## 1.输入输出流的数据传输过程\n\n**输入:**\n[窗]->[输入流对象(cin)]\n\n**输出:**\n[输出流对象(cout，cerr，clog)->[窗口]\n\nc++从窗口中读取输入时不是直接存储在变量中而是先存储在istream类型对象cin中，输出是也非直接从变量输出到窗口而是先写入ostream对象cout/cerr/clog中，在从对象传输到窗口。\n\n## 2.输出运算符“<<”\n\n“<<”运算符输出的是一个ostream类型对象，“<<”接受两个运算对象，其中左侧的运算对象必须是一个ostream对象，右侧可以是需要输出的值，“<<”将需要输出的值写入到ostream对象中。\nstd::cout<<\"num:\"<<a<<std::endl；\n“<<”连续表达式可以理解为:\n((std::cout<<\"num:\")<<a)<<std::endl；\n每一个括号最终返回的都是一个ostream对象。其中endl是“操纵符”，运行效果是换行，并将与设备关联的缓冲区的内容刷新到设备中去，如果不写endl则在程序运行结束或缓冲区满后系统自动将缓冲区内容刷新到设备中去。\n输入运算符“>>”和输出运算符运行逻辑一样。\n\n## 3.char与unsigned char\n\n在计算机中char也是分无符号和有符号两类的，char与int等类型不同的是，int等类型不显示标注unsigned默认为有符号数，而char在不同硬件环境中表示的类型可能是不一样的，所以为保证移植性最好在使用时指定signed和unsigned，c++标准不建议使用char来存储数值，这种区别主要出现在char类型向值类型的转换的过程中。\n\n## 4.有符号数与无符号数的运算\n\n在c++运算优先级中，无符号数的优先级大于有符号数，所以当一个表达式中即存在有符号数又不存在无符号数时，运算将被转换为无符号数的运算，由于无符号数表示的最小值是0所以当表达式的运算结果为负数时就会出现运算错误。\n\n## 5.c++11的四种变量初始化方式\n\nint a=0;\nint a={0};\nint a{0};\n\nint a(0);\n --- \n\n# 二、变量和基本类型\n\n---\n\n1.const引用的隐式类型转换\n举例使用const限定的int类型的引用来引用double类型的变量的过程：double b=3.14;const int a=b;\n在将double类型变量赋值给const int类型的引用时系统先创建一个临时变量，并将double隐式成int类型的结果存放到临时变量中，然后再将临时变量赋给引用，此时引用本质上是int类型的临时变量的别名，之后如果更改了double类型变量的值，引用值随之改变。\n\n## 2.constexpr变量\n\nconstexpr是一个常量表达式，与const不同的是，const限定的变量只能被常量、常量的引用、常量表达式和常量与常量引用的表达式赋值，而constexpr可以被常量、常量的引用、表达式、以及可以在编译阶段就确定返回值的函数赋值。const在程序运行时的本质是在程序用的const的地方直接替换成期对应\n的常量，而constexpr则是替换其在编译器期计算出来的结果值。\nconstexpr的意义在于constexpr强制要求赋值给变量的表达式必须在编译阶段可计算出结果值，这对很多重复运算的简单表达式直接限定了在编译期只进行一次运算起到了优化效果。\n\n## 3.constexpr指针\n\n被constexpr限定的指针的初始值只能是nullptr或者0或者指向一个地址固定不变的对象，这里需要注意在函数里的任何对象都不是存储在固定地址中的，所以constexpr限定的指针不能指向函数中的对象，全局对象则是存在在固定地址中的所以constexpr限定的指针可以指向这样的对象。\n\n## 4.c++ 11的两种别名声明方法\n\ntypedef bm int;\nusing bm=int;\n\n\n##  5.decltype类型指示符\n\ndecltype的作用是通过表达式或函数的返回值动态的推断其指示变量的类型，如：\n\n```\ndecltype(fun()) sum = x;//sum的类型为fun函数返回值的类型，sum的值由x赋予\n```\n\n\n## 顶层Const与底层Const\n\n由于指针本身也是一个对象，所以在Const修饰指针时，就立存在修饰指针或修饰指针所指的对象。如果Const修饰指针则是底层Const，如果修饰指针所指的对象则是顶层Const。\n\n```\nconst int* pa;//const修饰指针，所以为底层const\nint* const pb;//const修饰pb，所以为顶层const\n```\n\n---\n\n# 三、字符串、向量和数组\n\n---\n\n## 1.c++11的string对象的初始化方式\n\nstring s;\nstring str=s;\nstring str(s);\nstring str(\"str\");\nstring str=\"str\";\nstring str(2,'s');//这种形式得到的是字符串\"ss\",其中括号里只能使用字符。\n\n## 2.cin、getline()和cin.getline()\n\ncin在对象在从缓存中读取数据时遇到空格符，制表符，换行符时或读至文件尾时会结束读取。\ngetline()可以读取空格符，遇到换行符时或读至文件尾时结束读取。\ncin.getline()作用和getline一样，只是cin.getline和cin都是标准输出流iosteeam中的对象方法，而getline这是属于string.h中的方法。\n\n## 3.string::size_type类型\n\n`size_type`类型是c++定义的几种标准库类型的几种配套类型，其目的在于解决在不同机器中因为机器字长不同而导致string.size()的返回值无法存储的问题，比如在一个16位的机器中int整型存储的最大字符数为32767，但这对于储存一个文件大小的string来说这个大小是明显不够的，所以c++引入`size_type`，以解决不同机器上string.size()的返回值一定能被存储。\n`size_type`的本质是无符号类型所以在使用string.size()和有符号数做运算时要十分注意，因为这会导致计算结果出现异常。\n需要注意的一点是`size_type`类型实际上不是一个确定的类型，在使用`size_type`时应注明`size_type`的类型，如:`string::size_type,vector<int>::size_type`。\n\n## 4.cctype头文件提供的一些字符判断函数\n\n* isalnum(c) 当c是字母过数字时为真\n\n* isalpha(c) 当c是字母时为真\n\n* iscntrl(c) 当c是控制字符时为真\n\n* isdigit(c) 当c是数字时为真\n\n* isgraph(c) 当c不是空格但可以打印时为真\n\n* islower(c) 当c是小写字母时为真\n\n* isprint(c) 当c是可打印字符时为真(即c是空格或c具有可视化形式)\n\n* ispunct(c) 当c是标点符号时为真(即c不是控制字符、数字、字母、可打印空白中的一种)\n\n* isspace(c) 当c是空格时为真\n\n* isupper(c) 当c是大写字母时为真\n\n* isxdigit(c) 当c是16进制数字时为真\n\n* tolower(c) 如果c是大写字母则输出其小写\n\n* toupper(c) 如果c是小写字母则输出其大写\n\n\n## 5.c++11的“foreach”\n\nc++本没有foreach循环，但是c++11为for语句添加了新的语法:\nfor(param:array){}这个for语法每次循环从array中读取一个数据并存放在param中用于操作\n需要注意的是param如果不使用引用的话，param实际是array中元素的拷贝，此时对param进行修改不会改变array的元素，如需要更改array中的元素的值时需要对param取引用。\n还有一点十分重要的是不可以在范围for语句中更改array的容量大小，这是因为能被范围for遍历的序列都需要包含begin,end两个返回迭代器的成员，我们可以先看一下范围for的源码:\nfor(auto beg=v.begin(),end=v.end();beg!=end;++beg)\n{\n}\n可以看到在范围for中实际上在循环前就已经存储了可遍历序列的begin,end迭代器，所以如果在循环中改变了序列的大小循环就会出错。\n\n## 6.vector容器的初始化方式\n\n* vector<T> v v是一个空的vector\n* vector<T> v2(v) v2是一个包含v所有副本的的vector\n* vector<T> v2=v 等价物v2(v)\n* vector<T> v(n,val) v是一个包含了n个重复元素，每个元素都是val的vector\n* vector<T> v(n) v是一个包含了n个重复执行了初始化的对象\n* vector<T> v{a,b,c……} v是一个包含了初始值个数元素的vector，每个元素被赋予对应的初始值\n* vector<T> v={a,b,c……} 等于v{a,b,c……}\n* <font color=red> 使用数组初始化vector容器，vector<T>(begin(array),end(array))，其中begin(array)是数组array的首地址，end(array)是数组array的尾地址 </font>\n\n\n## 7.vector对象能高效增长\n\nc++标准要求vector容器在运行时能高效快速地添加元素，在c++11标准中vector的动态添加元素的性能要优于预先规定容器大小的性能，只有一种情况例外，就是vector中的元素全部都是相同的时候这种情况会反过来。\n\n## 8.迭代器的end\n\n迭代器的end()并不实际指向某个元素，所以不能对其进行递增或解引用操作。 \n\n## 9.iterator和const_iterator\n\niterator和`const_iterator`是标准库定义的迭代器的类型，一般迭代器没有固定的类型，一般使用`类型::iterator`或`const_iterator`来确定迭代器的类型，如：`vector<int>::iterator  it`\n`iterator`为可读可写迭代器，`iterator`迭代器只能用于非常量容器；\n`const_iterator`为只读迭代器，`const_iterator`既可以用于非常量容器又可以用于常量容器，但是常量容器只能使用`const_iterator`迭代器。\n\n## 10.cbegin与cend\n\ncbegin和cend与begin和end相对，cbegin和cend返回const_iterator迭代器。\n\n\n## 11.迭代器的->运算符\n\n在使用迭代器的过程中经常需要通过解引用后再进行.运算，如：`(*it).empty()`，操作较为繁琐，c++11对这个操作进行了简化，即通过->运算来替换`(*it).`，前面的操作就可以替换为`it->empty()`\n\n\n## 12.容器的删添操作会是迭代器、引用和指针失效\n\n<font color=red>这是因为容器的删添操作可能会出现存储空间的重新分配，用string作为例子是最贴切的，当我们想一个string字符串中添加一个字符时，如：</font>\n\n\n```\nsting v = \"str\";\nv = v + ‘s’;\n\n```\n\n<font color=red>程序的实际操作是先创建一个临时变量来存储添加之后的字符串strs，然后再将v指向新分配的存储空间，于是指向之前空间位置的迭代器、引用和指针自然就失效了。</font>\n\n\n## 13.迭代器的运算\n\n![Alt](https://i.loli.net/2020/08/27/EG2yOZL4H8YvhsT.jpg)\n\n迭代器之后同时也可以进行加减运算其结果为dfference_type的带符号整型数表示两个迭代器之间的距离。\n\n\n## 14.数组的特殊性\n\n<font color=red>不能使数组来初始化数组，也不能使用数组来赋值数组，有的编译器支持数组初始化和赋值这是编译器的自身扩展，但仍然不应该这样做，因为当换了编译环境后程序可能就会出错人。</font>\n\n\n## 15.存放存放指针的数组和指向数组的指针\n\n```\nint *ptr[2];//拥有两个指针成员的数组\nint &ptr2[2];//错误，不存在引用数组\nint (*ptr3)[2];//指向有两个长度的整型数组的指针\nint (&ptr4)[2];//指向两个长度的整型数组的引用\n\n```\n\n## 16.数组和指针\n\n数组的名字实际上就是指向数组收地址的指针，所以下面操作得到是指针：\n\n```\nint arr[2] = {};\nauto ptr(arr);//per是一个指向arr首地址的int*类型指针\n\n```\n\n<font color =red >使用decltype进行上面的操作不会得到指针，而是得到数组，如：</font>\n\n```\ndecltype(arr) arr2 = {1};//arr2是一个包含一个元素的int型数组\n```\n\n<font color =red >对数组执行下标运算实质上是对指向数组首地址的指针执行下标运算，如：</font>\n\n```\nint i = ia[2]; //实际得到是(ia+2)所指向的元素\n```\n\n\n<font color =red >数组的下标运算只要不超过数组长度就可以执行下标运算，如：含有10个元素数组下标从0-9，但是 下标运算可以取到10，即a[10]，a[10]是数组的尾元素的下一个位置，但是对a[10]只能进行去地址运算(&a[10])，不能对a[10]解引用或读取。</font>\n\n## 17.ptrdiff_t类型\n\n和`size_type`一样，`ptrdiff_t`是c++11专门定制给begin()与end()的运算结果的类型，用于适应不同机器的字长。\n<font color=red>需要注意的是，内置数组下标值不是`ptrdiff_t`类型，如：a[1]，1就不是`ptrdiff_t`类型。</font>\n\n\n## 18.void *指针\n\n任何非常量值都可以存入`void *`指针中。\n --- \n\n# 四、表达式\n\n---\n\n## 1.为定义行为\n\nc++中存在一些为定义行为，如<<运算符在c++中并没有定义其后表达式的运算顺序，此时运行下面代码就会出现为定义行为。\n\n```\nint i=0;\ncout<<i<<\",\"<<++i<<endl;\n```\n\n此时会出现0，1或1，1两种结果，这是因为<<没有明确指定何时及如何对运算对象求值，但是在实际使用过程中并没有出现上述情况，这可能是编译器为<<规定了运算顺序。\n\n## 2.溢出与其他算术异常\n\n![6](https://i.loli.net/2020/09/04/QRnNjiTqEeOGaLV.jpg)\n\n## 3.运算符的优先级\n\n![Alt](https://i.loli.net/2020/10/09/6aVu9jBoswIgUEY.jpg)\n\n\n## 4.前置递增运算符与后置递增运算符的运行过程\n\n前置递增运算符先将对象递增之后再返回递增后的结果，而后置递增运算符则先创建一个临时变量先将旧的值存储起来，然后再将变量递增，再将旧的值返回。\n相对于前置递增运算符，后置递增运算符需要创建一个临时变量，这就产生了一个消耗，在一些普通的后置递增运算中可能不大可看得出来，但在较为复杂的迭代器中这种额外的消耗就会产生巨大的性能浪费，所以平时使用时尽量使用前置递增运算符。\n\n\n## 5.表达式在运算过程中值发生变化\n\n<font color=red>在一个运算表达式中，参与运算的值不应该在运算的过程中发生变化，否则极易造成未定义行为，如：</font>\n<font color=red>`v[i++]<v[i]`，在大于号运算的过程中v[i++]的值向后移动了一位，造成了值的变化，由于C++没有定义二元运算符两端未定义自增运算符的运算顺序，所级就造成了未定义行为。</font>\n\n\n## 6.有符号数的位运算\n\n有符号数尽量不要做位运算，因为位运算容易改变有符号数的符号位导致未定义行为。\n\n\n## 7.位运算中的类型提升\n\n在程序编写时需要注意，任何占字节小于int类型的类型变量进行位运算时都会产生类型提升而被转换成int类型，如下代码所示：\n\n```\nint main(){\nchar s='s';\nshort a=1;\nbool b=true;\nlong c=2;\ncout<<sizeof(s)<<endl;\ncout << sizeof(~s)<<endl;\ncout<<sizeof(s<<1)<<endl;\ncout<<\"----------\"<<endl;\ncout<<sizeof(a)<<endl;\ncout<<sizeof(~a)<<endl;\ncout<<\"----------\"<<endl;\ncout<<sizeof(b)<<endl;\ncout<<sizeof(~b)<<endl;\ncout<<\"----------\"<<endl;\ncout<<sizeof(c)<<endl;\ncout<<sizeof(~c)<<endl;\ncout<<\"----------\"<<endl;\ncout<<~s<<endl;\ncout<<~b<<endl;\nreturn 0;\n}\n```\n\n输出结果：\n![Alt](https://i.loli.net/2020/10/23/GUI54xhOrQs7oyK.jpg)\n\n\n## 8.sizeof计算指针大小\n\nsizeof在计算指针时有个很有趣的现象，因为sizeof满足右结合律且优先级与`*`相同，所以在`sizeof *p`中，先对p解引用，然后在对解引用后的内容计算所占内存大小，由于sizeof并没有使用解引用的内容，所以`*p`是否为空是否有效对sizeof的计算没有影响。\n`sizeof *p` == `sizeof(*p)`\n\n\n## 9.隐式转换的过程\n\n以`int a=3.14+3；`为例\n在这个例子中3.14是山比double类型，3是int类型，运算时为了保证精度C++会将int类型转换成double类型，而不是因为结果是int类型而将double类型转换成int类型，所以在表达示右侧的运算过程得到的结果是一个double类型的值，当这个值被赋值给a的时候才进行double到int的类型转换。\n\n---\n\n# 五、语句\n\n---\n\n## 1.switch语句跨case标签引用变量\n\n若需要在一个 case 语句下定义变量同时在多个 case 语下使用这个变量，则定义变量时不能同时初始化变量，应另起等于初始变量，否则编译器会报跨标签访问错误，如：\n\n```\nswitch (a)\n{\n    case 0:\n        int b;  //如果直接int b=1;则会报跨标签访问错误\n        b=1;\n        break;\n    case 1:\n        cout<<b<<endl;\n        break;\n    default:\n        ;\n}\n```\n\n\n## 2.C++无法捕获计算溢出异常和除0异常\n\nC++认为计算溢出和除0异常属于底层事件，应被同样底层的事件去处理，所以C++没有提供计算溢出和除0异常，如果需要捕获这两类异常在Windows系统中应使用Windows提供的SEH模型`__try`、`__except`、`__finally`异常语句，使用方法和try-catch基本类似，与try-catch不同的是，SEH中使用的是`__try-__except`搭配和`__try-__finally`搭配。\n\n---\n\n# 六、函数\n\n---\n\n## 1.静态局布变量\n\n在函数体内使用static关键字可以效静态局布量，静态局布变量的生命周期从变量定义到程序结束，但是静态局布变量只对函数可见，在函数外不可访问。\n\n\n## 2.C++程序的编译过程\n\n![Alt](https://i.loli.net/2020/11/09/bJ5xRFg6TGHnLCO.jpg)\n\n\n## 3.函数调用过程中的形参创建\n\n函数的每一次调用都会重新创建形参并传入实参对其进行初始化，形餐盘类型决定了形参与实参的交互类型，如果形参是引用类型，则形参与相对应的实参相绑定，作为实参的别名使用；如果形参是值类型，则实参的值拷贝给形参，形参与实参相互独立。\n\n\n## 4.函数的指针参数传递\n\n<font color=red>当指针作为实参传递给函数形参时，传递的是指针的值拷贝而不是指针所指的对象，且形参指针与实参指针是两个不同的指针，此时形参指针与实参指针指向同一对象，修改形参的指针指向不会影实参指针。</font>\n\n\n## 5.引用形参的限制\n\n* 如果将函数的参数定义普通引用参数，那么这个形参就无法接受const对象、字面值和需要类型转换的对象作为实参。\n\n* 如果将函数的参数定义为const引用参数，这个参数可以接受第一条中的参数，但是却无法修改参数的值。\n\n\n## 6.数组的两个特殊性质\n\n* 数组不可被拷贝\n* 数组再使用时被转换为指针\n\n\n## 7.数组引用形参\n\n当我们使用数组作普通形参时，\n\n```\nvoid fun(int* arr);\nvoid fun(int arr[]);\nvoid fun(int arr[10]);\n```\n\n表示的都是同一个函数，且形参可接受任意长度的实参数组，但是当将普通形参改为引用形参时，\n\n```\nvoid fun(int (&arr)[10]);\n```\n\n`(&arr)`中()不可缺少，否则形参变成引用的数组而非数组的引用，且形参只能接收长度为10的数组。\n\n\n## 8.main函数传参\n\n有的时候我们会遇到这样的main函数：\n\n```\nint main(int argc,char** argv)\n{\n}\n```\n\n通常情况下，直接使用argv，argv中的内容是空的，那么main函数在什么情况下会接收参数呢？\n事实上main函数本身就是当前程序的入口，在当前程序中没有其他程序为main函数传入参数了，当我们把写好的程序打包后在外部调用时就可以给main函数传入参数了，如在CMD中调程序\n\n```\nprog -o -d ofile data0//prog为程序名\n```\n\n<font color=red>需要注意的是argv数组的0号索引存储程序的名字，参数从1号索引开始存储，且最后一个索引位置固定内容为0</font>\n\n","source":"_posts/【C++】C++ PremierReadNote.md","raw":"---\ntitle: 【C++】C++ PremierReadNote\npassword: \nabstract: \nmessage: \ndate: 2021-02-03 10:52:44\ntags: C++\ncategories: 学习笔记\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# C++ Primer 阅读笔记\n\n---\n\n<!--more-->\n\n# 一、开始\n\n---\n\n## 1.输入输出流的数据传输过程\n\n**输入:**\n[窗]->[输入流对象(cin)]\n\n**输出:**\n[输出流对象(cout，cerr，clog)->[窗口]\n\nc++从窗口中读取输入时不是直接存储在变量中而是先存储在istream类型对象cin中，输出是也非直接从变量输出到窗口而是先写入ostream对象cout/cerr/clog中，在从对象传输到窗口。\n\n## 2.输出运算符“<<”\n\n“<<”运算符输出的是一个ostream类型对象，“<<”接受两个运算对象，其中左侧的运算对象必须是一个ostream对象，右侧可以是需要输出的值，“<<”将需要输出的值写入到ostream对象中。\nstd::cout<<\"num:\"<<a<<std::endl；\n“<<”连续表达式可以理解为:\n((std::cout<<\"num:\")<<a)<<std::endl；\n每一个括号最终返回的都是一个ostream对象。其中endl是“操纵符”，运行效果是换行，并将与设备关联的缓冲区的内容刷新到设备中去，如果不写endl则在程序运行结束或缓冲区满后系统自动将缓冲区内容刷新到设备中去。\n输入运算符“>>”和输出运算符运行逻辑一样。\n\n## 3.char与unsigned char\n\n在计算机中char也是分无符号和有符号两类的，char与int等类型不同的是，int等类型不显示标注unsigned默认为有符号数，而char在不同硬件环境中表示的类型可能是不一样的，所以为保证移植性最好在使用时指定signed和unsigned，c++标准不建议使用char来存储数值，这种区别主要出现在char类型向值类型的转换的过程中。\n\n## 4.有符号数与无符号数的运算\n\n在c++运算优先级中，无符号数的优先级大于有符号数，所以当一个表达式中即存在有符号数又不存在无符号数时，运算将被转换为无符号数的运算，由于无符号数表示的最小值是0所以当表达式的运算结果为负数时就会出现运算错误。\n\n## 5.c++11的四种变量初始化方式\n\nint a=0;\nint a={0};\nint a{0};\n\nint a(0);\n --- \n\n# 二、变量和基本类型\n\n---\n\n1.const引用的隐式类型转换\n举例使用const限定的int类型的引用来引用double类型的变量的过程：double b=3.14;const int a=b;\n在将double类型变量赋值给const int类型的引用时系统先创建一个临时变量，并将double隐式成int类型的结果存放到临时变量中，然后再将临时变量赋给引用，此时引用本质上是int类型的临时变量的别名，之后如果更改了double类型变量的值，引用值随之改变。\n\n## 2.constexpr变量\n\nconstexpr是一个常量表达式，与const不同的是，const限定的变量只能被常量、常量的引用、常量表达式和常量与常量引用的表达式赋值，而constexpr可以被常量、常量的引用、表达式、以及可以在编译阶段就确定返回值的函数赋值。const在程序运行时的本质是在程序用的const的地方直接替换成期对应\n的常量，而constexpr则是替换其在编译器期计算出来的结果值。\nconstexpr的意义在于constexpr强制要求赋值给变量的表达式必须在编译阶段可计算出结果值，这对很多重复运算的简单表达式直接限定了在编译期只进行一次运算起到了优化效果。\n\n## 3.constexpr指针\n\n被constexpr限定的指针的初始值只能是nullptr或者0或者指向一个地址固定不变的对象，这里需要注意在函数里的任何对象都不是存储在固定地址中的，所以constexpr限定的指针不能指向函数中的对象，全局对象则是存在在固定地址中的所以constexpr限定的指针可以指向这样的对象。\n\n## 4.c++ 11的两种别名声明方法\n\ntypedef bm int;\nusing bm=int;\n\n\n##  5.decltype类型指示符\n\ndecltype的作用是通过表达式或函数的返回值动态的推断其指示变量的类型，如：\n\n```\ndecltype(fun()) sum = x;//sum的类型为fun函数返回值的类型，sum的值由x赋予\n```\n\n\n## 顶层Const与底层Const\n\n由于指针本身也是一个对象，所以在Const修饰指针时，就立存在修饰指针或修饰指针所指的对象。如果Const修饰指针则是底层Const，如果修饰指针所指的对象则是顶层Const。\n\n```\nconst int* pa;//const修饰指针，所以为底层const\nint* const pb;//const修饰pb，所以为顶层const\n```\n\n---\n\n# 三、字符串、向量和数组\n\n---\n\n## 1.c++11的string对象的初始化方式\n\nstring s;\nstring str=s;\nstring str(s);\nstring str(\"str\");\nstring str=\"str\";\nstring str(2,'s');//这种形式得到的是字符串\"ss\",其中括号里只能使用字符。\n\n## 2.cin、getline()和cin.getline()\n\ncin在对象在从缓存中读取数据时遇到空格符，制表符，换行符时或读至文件尾时会结束读取。\ngetline()可以读取空格符，遇到换行符时或读至文件尾时结束读取。\ncin.getline()作用和getline一样，只是cin.getline和cin都是标准输出流iosteeam中的对象方法，而getline这是属于string.h中的方法。\n\n## 3.string::size_type类型\n\n`size_type`类型是c++定义的几种标准库类型的几种配套类型，其目的在于解决在不同机器中因为机器字长不同而导致string.size()的返回值无法存储的问题，比如在一个16位的机器中int整型存储的最大字符数为32767，但这对于储存一个文件大小的string来说这个大小是明显不够的，所以c++引入`size_type`，以解决不同机器上string.size()的返回值一定能被存储。\n`size_type`的本质是无符号类型所以在使用string.size()和有符号数做运算时要十分注意，因为这会导致计算结果出现异常。\n需要注意的一点是`size_type`类型实际上不是一个确定的类型，在使用`size_type`时应注明`size_type`的类型，如:`string::size_type,vector<int>::size_type`。\n\n## 4.cctype头文件提供的一些字符判断函数\n\n* isalnum(c) 当c是字母过数字时为真\n\n* isalpha(c) 当c是字母时为真\n\n* iscntrl(c) 当c是控制字符时为真\n\n* isdigit(c) 当c是数字时为真\n\n* isgraph(c) 当c不是空格但可以打印时为真\n\n* islower(c) 当c是小写字母时为真\n\n* isprint(c) 当c是可打印字符时为真(即c是空格或c具有可视化形式)\n\n* ispunct(c) 当c是标点符号时为真(即c不是控制字符、数字、字母、可打印空白中的一种)\n\n* isspace(c) 当c是空格时为真\n\n* isupper(c) 当c是大写字母时为真\n\n* isxdigit(c) 当c是16进制数字时为真\n\n* tolower(c) 如果c是大写字母则输出其小写\n\n* toupper(c) 如果c是小写字母则输出其大写\n\n\n## 5.c++11的“foreach”\n\nc++本没有foreach循环，但是c++11为for语句添加了新的语法:\nfor(param:array){}这个for语法每次循环从array中读取一个数据并存放在param中用于操作\n需要注意的是param如果不使用引用的话，param实际是array中元素的拷贝，此时对param进行修改不会改变array的元素，如需要更改array中的元素的值时需要对param取引用。\n还有一点十分重要的是不可以在范围for语句中更改array的容量大小，这是因为能被范围for遍历的序列都需要包含begin,end两个返回迭代器的成员，我们可以先看一下范围for的源码:\nfor(auto beg=v.begin(),end=v.end();beg!=end;++beg)\n{\n}\n可以看到在范围for中实际上在循环前就已经存储了可遍历序列的begin,end迭代器，所以如果在循环中改变了序列的大小循环就会出错。\n\n## 6.vector容器的初始化方式\n\n* vector<T> v v是一个空的vector\n* vector<T> v2(v) v2是一个包含v所有副本的的vector\n* vector<T> v2=v 等价物v2(v)\n* vector<T> v(n,val) v是一个包含了n个重复元素，每个元素都是val的vector\n* vector<T> v(n) v是一个包含了n个重复执行了初始化的对象\n* vector<T> v{a,b,c……} v是一个包含了初始值个数元素的vector，每个元素被赋予对应的初始值\n* vector<T> v={a,b,c……} 等于v{a,b,c……}\n* <font color=red> 使用数组初始化vector容器，vector<T>(begin(array),end(array))，其中begin(array)是数组array的首地址，end(array)是数组array的尾地址 </font>\n\n\n## 7.vector对象能高效增长\n\nc++标准要求vector容器在运行时能高效快速地添加元素，在c++11标准中vector的动态添加元素的性能要优于预先规定容器大小的性能，只有一种情况例外，就是vector中的元素全部都是相同的时候这种情况会反过来。\n\n## 8.迭代器的end\n\n迭代器的end()并不实际指向某个元素，所以不能对其进行递增或解引用操作。 \n\n## 9.iterator和const_iterator\n\niterator和`const_iterator`是标准库定义的迭代器的类型，一般迭代器没有固定的类型，一般使用`类型::iterator`或`const_iterator`来确定迭代器的类型，如：`vector<int>::iterator  it`\n`iterator`为可读可写迭代器，`iterator`迭代器只能用于非常量容器；\n`const_iterator`为只读迭代器，`const_iterator`既可以用于非常量容器又可以用于常量容器，但是常量容器只能使用`const_iterator`迭代器。\n\n## 10.cbegin与cend\n\ncbegin和cend与begin和end相对，cbegin和cend返回const_iterator迭代器。\n\n\n## 11.迭代器的->运算符\n\n在使用迭代器的过程中经常需要通过解引用后再进行.运算，如：`(*it).empty()`，操作较为繁琐，c++11对这个操作进行了简化，即通过->运算来替换`(*it).`，前面的操作就可以替换为`it->empty()`\n\n\n## 12.容器的删添操作会是迭代器、引用和指针失效\n\n<font color=red>这是因为容器的删添操作可能会出现存储空间的重新分配，用string作为例子是最贴切的，当我们想一个string字符串中添加一个字符时，如：</font>\n\n\n```\nsting v = \"str\";\nv = v + ‘s’;\n\n```\n\n<font color=red>程序的实际操作是先创建一个临时变量来存储添加之后的字符串strs，然后再将v指向新分配的存储空间，于是指向之前空间位置的迭代器、引用和指针自然就失效了。</font>\n\n\n## 13.迭代器的运算\n\n![Alt](https://i.loli.net/2020/08/27/EG2yOZL4H8YvhsT.jpg)\n\n迭代器之后同时也可以进行加减运算其结果为dfference_type的带符号整型数表示两个迭代器之间的距离。\n\n\n## 14.数组的特殊性\n\n<font color=red>不能使数组来初始化数组，也不能使用数组来赋值数组，有的编译器支持数组初始化和赋值这是编译器的自身扩展，但仍然不应该这样做，因为当换了编译环境后程序可能就会出错人。</font>\n\n\n## 15.存放存放指针的数组和指向数组的指针\n\n```\nint *ptr[2];//拥有两个指针成员的数组\nint &ptr2[2];//错误，不存在引用数组\nint (*ptr3)[2];//指向有两个长度的整型数组的指针\nint (&ptr4)[2];//指向两个长度的整型数组的引用\n\n```\n\n## 16.数组和指针\n\n数组的名字实际上就是指向数组收地址的指针，所以下面操作得到是指针：\n\n```\nint arr[2] = {};\nauto ptr(arr);//per是一个指向arr首地址的int*类型指针\n\n```\n\n<font color =red >使用decltype进行上面的操作不会得到指针，而是得到数组，如：</font>\n\n```\ndecltype(arr) arr2 = {1};//arr2是一个包含一个元素的int型数组\n```\n\n<font color =red >对数组执行下标运算实质上是对指向数组首地址的指针执行下标运算，如：</font>\n\n```\nint i = ia[2]; //实际得到是(ia+2)所指向的元素\n```\n\n\n<font color =red >数组的下标运算只要不超过数组长度就可以执行下标运算，如：含有10个元素数组下标从0-9，但是 下标运算可以取到10，即a[10]，a[10]是数组的尾元素的下一个位置，但是对a[10]只能进行去地址运算(&a[10])，不能对a[10]解引用或读取。</font>\n\n## 17.ptrdiff_t类型\n\n和`size_type`一样，`ptrdiff_t`是c++11专门定制给begin()与end()的运算结果的类型，用于适应不同机器的字长。\n<font color=red>需要注意的是，内置数组下标值不是`ptrdiff_t`类型，如：a[1]，1就不是`ptrdiff_t`类型。</font>\n\n\n## 18.void *指针\n\n任何非常量值都可以存入`void *`指针中。\n --- \n\n# 四、表达式\n\n---\n\n## 1.为定义行为\n\nc++中存在一些为定义行为，如<<运算符在c++中并没有定义其后表达式的运算顺序，此时运行下面代码就会出现为定义行为。\n\n```\nint i=0;\ncout<<i<<\",\"<<++i<<endl;\n```\n\n此时会出现0，1或1，1两种结果，这是因为<<没有明确指定何时及如何对运算对象求值，但是在实际使用过程中并没有出现上述情况，这可能是编译器为<<规定了运算顺序。\n\n## 2.溢出与其他算术异常\n\n![6](https://i.loli.net/2020/09/04/QRnNjiTqEeOGaLV.jpg)\n\n## 3.运算符的优先级\n\n![Alt](https://i.loli.net/2020/10/09/6aVu9jBoswIgUEY.jpg)\n\n\n## 4.前置递增运算符与后置递增运算符的运行过程\n\n前置递增运算符先将对象递增之后再返回递增后的结果，而后置递增运算符则先创建一个临时变量先将旧的值存储起来，然后再将变量递增，再将旧的值返回。\n相对于前置递增运算符，后置递增运算符需要创建一个临时变量，这就产生了一个消耗，在一些普通的后置递增运算中可能不大可看得出来，但在较为复杂的迭代器中这种额外的消耗就会产生巨大的性能浪费，所以平时使用时尽量使用前置递增运算符。\n\n\n## 5.表达式在运算过程中值发生变化\n\n<font color=red>在一个运算表达式中，参与运算的值不应该在运算的过程中发生变化，否则极易造成未定义行为，如：</font>\n<font color=red>`v[i++]<v[i]`，在大于号运算的过程中v[i++]的值向后移动了一位，造成了值的变化，由于C++没有定义二元运算符两端未定义自增运算符的运算顺序，所级就造成了未定义行为。</font>\n\n\n## 6.有符号数的位运算\n\n有符号数尽量不要做位运算，因为位运算容易改变有符号数的符号位导致未定义行为。\n\n\n## 7.位运算中的类型提升\n\n在程序编写时需要注意，任何占字节小于int类型的类型变量进行位运算时都会产生类型提升而被转换成int类型，如下代码所示：\n\n```\nint main(){\nchar s='s';\nshort a=1;\nbool b=true;\nlong c=2;\ncout<<sizeof(s)<<endl;\ncout << sizeof(~s)<<endl;\ncout<<sizeof(s<<1)<<endl;\ncout<<\"----------\"<<endl;\ncout<<sizeof(a)<<endl;\ncout<<sizeof(~a)<<endl;\ncout<<\"----------\"<<endl;\ncout<<sizeof(b)<<endl;\ncout<<sizeof(~b)<<endl;\ncout<<\"----------\"<<endl;\ncout<<sizeof(c)<<endl;\ncout<<sizeof(~c)<<endl;\ncout<<\"----------\"<<endl;\ncout<<~s<<endl;\ncout<<~b<<endl;\nreturn 0;\n}\n```\n\n输出结果：\n![Alt](https://i.loli.net/2020/10/23/GUI54xhOrQs7oyK.jpg)\n\n\n## 8.sizeof计算指针大小\n\nsizeof在计算指针时有个很有趣的现象，因为sizeof满足右结合律且优先级与`*`相同，所以在`sizeof *p`中，先对p解引用，然后在对解引用后的内容计算所占内存大小，由于sizeof并没有使用解引用的内容，所以`*p`是否为空是否有效对sizeof的计算没有影响。\n`sizeof *p` == `sizeof(*p)`\n\n\n## 9.隐式转换的过程\n\n以`int a=3.14+3；`为例\n在这个例子中3.14是山比double类型，3是int类型，运算时为了保证精度C++会将int类型转换成double类型，而不是因为结果是int类型而将double类型转换成int类型，所以在表达示右侧的运算过程得到的结果是一个double类型的值，当这个值被赋值给a的时候才进行double到int的类型转换。\n\n---\n\n# 五、语句\n\n---\n\n## 1.switch语句跨case标签引用变量\n\n若需要在一个 case 语句下定义变量同时在多个 case 语下使用这个变量，则定义变量时不能同时初始化变量，应另起等于初始变量，否则编译器会报跨标签访问错误，如：\n\n```\nswitch (a)\n{\n    case 0:\n        int b;  //如果直接int b=1;则会报跨标签访问错误\n        b=1;\n        break;\n    case 1:\n        cout<<b<<endl;\n        break;\n    default:\n        ;\n}\n```\n\n\n## 2.C++无法捕获计算溢出异常和除0异常\n\nC++认为计算溢出和除0异常属于底层事件，应被同样底层的事件去处理，所以C++没有提供计算溢出和除0异常，如果需要捕获这两类异常在Windows系统中应使用Windows提供的SEH模型`__try`、`__except`、`__finally`异常语句，使用方法和try-catch基本类似，与try-catch不同的是，SEH中使用的是`__try-__except`搭配和`__try-__finally`搭配。\n\n---\n\n# 六、函数\n\n---\n\n## 1.静态局布变量\n\n在函数体内使用static关键字可以效静态局布量，静态局布变量的生命周期从变量定义到程序结束，但是静态局布变量只对函数可见，在函数外不可访问。\n\n\n## 2.C++程序的编译过程\n\n![Alt](https://i.loli.net/2020/11/09/bJ5xRFg6TGHnLCO.jpg)\n\n\n## 3.函数调用过程中的形参创建\n\n函数的每一次调用都会重新创建形参并传入实参对其进行初始化，形餐盘类型决定了形参与实参的交互类型，如果形参是引用类型，则形参与相对应的实参相绑定，作为实参的别名使用；如果形参是值类型，则实参的值拷贝给形参，形参与实参相互独立。\n\n\n## 4.函数的指针参数传递\n\n<font color=red>当指针作为实参传递给函数形参时，传递的是指针的值拷贝而不是指针所指的对象，且形参指针与实参指针是两个不同的指针，此时形参指针与实参指针指向同一对象，修改形参的指针指向不会影实参指针。</font>\n\n\n## 5.引用形参的限制\n\n* 如果将函数的参数定义普通引用参数，那么这个形参就无法接受const对象、字面值和需要类型转换的对象作为实参。\n\n* 如果将函数的参数定义为const引用参数，这个参数可以接受第一条中的参数，但是却无法修改参数的值。\n\n\n## 6.数组的两个特殊性质\n\n* 数组不可被拷贝\n* 数组再使用时被转换为指针\n\n\n## 7.数组引用形参\n\n当我们使用数组作普通形参时，\n\n```\nvoid fun(int* arr);\nvoid fun(int arr[]);\nvoid fun(int arr[10]);\n```\n\n表示的都是同一个函数，且形参可接受任意长度的实参数组，但是当将普通形参改为引用形参时，\n\n```\nvoid fun(int (&arr)[10]);\n```\n\n`(&arr)`中()不可缺少，否则形参变成引用的数组而非数组的引用，且形参只能接收长度为10的数组。\n\n\n## 8.main函数传参\n\n有的时候我们会遇到这样的main函数：\n\n```\nint main(int argc,char** argv)\n{\n}\n```\n\n通常情况下，直接使用argv，argv中的内容是空的，那么main函数在什么情况下会接收参数呢？\n事实上main函数本身就是当前程序的入口，在当前程序中没有其他程序为main函数传入参数了，当我们把写好的程序打包后在外部调用时就可以给main函数传入参数了，如在CMD中调程序\n\n```\nprog -o -d ofile data0//prog为程序名\n```\n\n<font color=red>需要注意的是argv数组的0号索引存储程序的名字，参数从1号索引开始存储，且最后一个索引位置固定内容为0</font>\n\n","slug":"【C++】C++ PremierReadNote","published":1,"updated":"2021-02-03T02:56:09.709Z","_id":"ckkou93gg0000ekr70u00eitq","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"C-Primer-阅读笔记\"><a href=\"#C-Primer-阅读笔记\" class=\"headerlink\" title=\"C++ Primer 阅读笔记\"></a>C++ Primer 阅读笔记</h1><hr>\n<a id=\"more\"></a>\n\n<h1 id=\"一、开始\"><a href=\"#一、开始\" class=\"headerlink\" title=\"一、开始\"></a>一、开始</h1><hr>\n<h2 id=\"1-输入输出流的数据传输过程\"><a href=\"#1-输入输出流的数据传输过程\" class=\"headerlink\" title=\"1.输入输出流的数据传输过程\"></a>1.输入输出流的数据传输过程</h2><p><strong>输入:</strong><br>[窗]-&gt;[输入流对象(cin)]</p>\n<p><strong>输出:</strong><br>[输出流对象(cout，cerr，clog)-&gt;[窗口]</p>\n<p>c++从窗口中读取输入时不是直接存储在变量中而是先存储在istream类型对象cin中，输出是也非直接从变量输出到窗口而是先写入ostream对象cout/cerr/clog中，在从对象传输到窗口。</p>\n<h2 id=\"2-输出运算符“-lt-lt-”\"><a href=\"#2-输出运算符“-lt-lt-”\" class=\"headerlink\" title=\"2.输出运算符“&lt;&lt;”\"></a>2.输出运算符“&lt;&lt;”</h2><p>“&lt;&lt;”运算符输出的是一个ostream类型对象，“&lt;&lt;”接受两个运算对象，其中左侧的运算对象必须是一个ostream对象，右侧可以是需要输出的值，“&lt;&lt;”将需要输出的值写入到ostream对象中。<br>std::cout&lt;&lt;”num:”&lt;&lt;a&lt;&lt;std::endl；<br>“&lt;&lt;”连续表达式可以理解为:<br>((std::cout&lt;&lt;”num:”)&lt;&lt;a)&lt;&lt;std::endl；<br>每一个括号最终返回的都是一个ostream对象。其中endl是“操纵符”，运行效果是换行，并将与设备关联的缓冲区的内容刷新到设备中去，如果不写endl则在程序运行结束或缓冲区满后系统自动将缓冲区内容刷新到设备中去。<br>输入运算符“&gt;&gt;”和输出运算符运行逻辑一样。</p>\n<h2 id=\"3-char与unsigned-char\"><a href=\"#3-char与unsigned-char\" class=\"headerlink\" title=\"3.char与unsigned char\"></a>3.char与unsigned char</h2><p>在计算机中char也是分无符号和有符号两类的，char与int等类型不同的是，int等类型不显示标注unsigned默认为有符号数，而char在不同硬件环境中表示的类型可能是不一样的，所以为保证移植性最好在使用时指定signed和unsigned，c++标准不建议使用char来存储数值，这种区别主要出现在char类型向值类型的转换的过程中。</p>\n<h2 id=\"4-有符号数与无符号数的运算\"><a href=\"#4-有符号数与无符号数的运算\" class=\"headerlink\" title=\"4.有符号数与无符号数的运算\"></a>4.有符号数与无符号数的运算</h2><p>在c++运算优先级中，无符号数的优先级大于有符号数，所以当一个表达式中即存在有符号数又不存在无符号数时，运算将被转换为无符号数的运算，由于无符号数表示的最小值是0所以当表达式的运算结果为负数时就会出现运算错误。</p>\n<h2 id=\"5-c-11的四种变量初始化方式\"><a href=\"#5-c-11的四种变量初始化方式\" class=\"headerlink\" title=\"5.c++11的四种变量初始化方式\"></a>5.c++11的四种变量初始化方式</h2><p>int a=0;<br>int a={0};<br>int a{0};</p>\n<h2 id=\"int-a-0\"><a href=\"#int-a-0\" class=\"headerlink\" title=\"int a(0);\"></a>int a(0);</h2><h1 id=\"二、变量和基本类型\"><a href=\"#二、变量和基本类型\" class=\"headerlink\" title=\"二、变量和基本类型\"></a>二、变量和基本类型</h1><hr>\n<p>1.const引用的隐式类型转换<br>举例使用const限定的int类型的引用来引用double类型的变量的过程：double b=3.14;const int a=b;<br>在将double类型变量赋值给const int类型的引用时系统先创建一个临时变量，并将double隐式成int类型的结果存放到临时变量中，然后再将临时变量赋给引用，此时引用本质上是int类型的临时变量的别名，之后如果更改了double类型变量的值，引用值随之改变。</p>\n<h2 id=\"2-constexpr变量\"><a href=\"#2-constexpr变量\" class=\"headerlink\" title=\"2.constexpr变量\"></a>2.constexpr变量</h2><p>constexpr是一个常量表达式，与const不同的是，const限定的变量只能被常量、常量的引用、常量表达式和常量与常量引用的表达式赋值，而constexpr可以被常量、常量的引用、表达式、以及可以在编译阶段就确定返回值的函数赋值。const在程序运行时的本质是在程序用的const的地方直接替换成期对应<br>的常量，而constexpr则是替换其在编译器期计算出来的结果值。<br>constexpr的意义在于constexpr强制要求赋值给变量的表达式必须在编译阶段可计算出结果值，这对很多重复运算的简单表达式直接限定了在编译期只进行一次运算起到了优化效果。</p>\n<h2 id=\"3-constexpr指针\"><a href=\"#3-constexpr指针\" class=\"headerlink\" title=\"3.constexpr指针\"></a>3.constexpr指针</h2><p>被constexpr限定的指针的初始值只能是nullptr或者0或者指向一个地址固定不变的对象，这里需要注意在函数里的任何对象都不是存储在固定地址中的，所以constexpr限定的指针不能指向函数中的对象，全局对象则是存在在固定地址中的所以constexpr限定的指针可以指向这样的对象。</p>\n<h2 id=\"4-c-11的两种别名声明方法\"><a href=\"#4-c-11的两种别名声明方法\" class=\"headerlink\" title=\"4.c++ 11的两种别名声明方法\"></a>4.c++ 11的两种别名声明方法</h2><p>typedef bm int;<br>using bm=int;</p>\n<h2 id=\"5-decltype类型指示符\"><a href=\"#5-decltype类型指示符\" class=\"headerlink\" title=\"5.decltype类型指示符\"></a>5.decltype类型指示符</h2><p>decltype的作用是通过表达式或函数的返回值动态的推断其指示变量的类型，如：</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\">decltype(<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span>()) <span class=\"hljs-title\">sum</span></span> = x;<span class=\"hljs-regexp\">//sum</span>的类型为<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span>函数返回值的类型，<span class=\"hljs-title\">sum</span></span>的值由x赋予<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"顶层Const与底层Const\"><a href=\"#顶层Const与底层Const\" class=\"headerlink\" title=\"顶层Const与底层Const\"></a>顶层Const与底层Const</h2><p>由于指针本身也是一个对象，所以在Const修饰指针时，就立存在修饰指针或修饰指针所指的对象。如果Const修饰指针则是底层Const，如果修饰指针所指的对象则是顶层Const。</p>\n<figure class=\"highlight nim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nim\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">int</span>* pa;//<span class=\"hljs-keyword\">const</span>修饰指针，所以为底层<span class=\"hljs-keyword\">const</span><br><span class=\"hljs-built_in\">int</span>* <span class=\"hljs-keyword\">const</span> pb;//<span class=\"hljs-keyword\">const</span>修饰pb，所以为顶层<span class=\"hljs-keyword\">const</span><br></code></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"三、字符串、向量和数组\"><a href=\"#三、字符串、向量和数组\" class=\"headerlink\" title=\"三、字符串、向量和数组\"></a>三、字符串、向量和数组</h1><hr>\n<h2 id=\"1-c-11的string对象的初始化方式\"><a href=\"#1-c-11的string对象的初始化方式\" class=\"headerlink\" title=\"1.c++11的string对象的初始化方式\"></a>1.c++11的string对象的初始化方式</h2><p>string s;<br>string str=s;<br>string str(s);<br>string str(“str”);<br>string str=”str”;<br>string str(2,’s’);//这种形式得到的是字符串”ss”,其中括号里只能使用字符。</p>\n<h2 id=\"2-cin、getline-和cin-getline\"><a href=\"#2-cin、getline-和cin-getline\" class=\"headerlink\" title=\"2.cin、getline()和cin.getline()\"></a>2.cin、getline()和cin.getline()</h2><p>cin在对象在从缓存中读取数据时遇到空格符，制表符，换行符时或读至文件尾时会结束读取。<br>getline()可以读取空格符，遇到换行符时或读至文件尾时结束读取。<br>cin.getline()作用和getline一样，只是cin.getline和cin都是标准输出流iosteeam中的对象方法，而getline这是属于string.h中的方法。</p>\n<h2 id=\"3-string-size-type类型\"><a href=\"#3-string-size-type类型\" class=\"headerlink\" title=\"3.string::size_type类型\"></a>3.string::size_type类型</h2><p><code>size_type</code>类型是c++定义的几种标准库类型的几种配套类型，其目的在于解决在不同机器中因为机器字长不同而导致string.size()的返回值无法存储的问题，比如在一个16位的机器中int整型存储的最大字符数为32767，但这对于储存一个文件大小的string来说这个大小是明显不够的，所以c++引入<code>size_type</code>，以解决不同机器上string.size()的返回值一定能被存储。<br><code>size_type</code>的本质是无符号类型所以在使用string.size()和有符号数做运算时要十分注意，因为这会导致计算结果出现异常。<br>需要注意的一点是<code>size_type</code>类型实际上不是一个确定的类型，在使用<code>size_type</code>时应注明<code>size_type</code>的类型，如:<code>string::size_type,vector&lt;int&gt;::size_type</code>。</p>\n<h2 id=\"4-cctype头文件提供的一些字符判断函数\"><a href=\"#4-cctype头文件提供的一些字符判断函数\" class=\"headerlink\" title=\"4.cctype头文件提供的一些字符判断函数\"></a>4.cctype头文件提供的一些字符判断函数</h2><ul>\n<li><p>isalnum(c) 当c是字母过数字时为真</p>\n</li>\n<li><p>isalpha(c) 当c是字母时为真</p>\n</li>\n<li><p>iscntrl(c) 当c是控制字符时为真</p>\n</li>\n<li><p>isdigit(c) 当c是数字时为真</p>\n</li>\n<li><p>isgraph(c) 当c不是空格但可以打印时为真</p>\n</li>\n<li><p>islower(c) 当c是小写字母时为真</p>\n</li>\n<li><p>isprint(c) 当c是可打印字符时为真(即c是空格或c具有可视化形式)</p>\n</li>\n<li><p>ispunct(c) 当c是标点符号时为真(即c不是控制字符、数字、字母、可打印空白中的一种)</p>\n</li>\n<li><p>isspace(c) 当c是空格时为真</p>\n</li>\n<li><p>isupper(c) 当c是大写字母时为真</p>\n</li>\n<li><p>isxdigit(c) 当c是16进制数字时为真</p>\n</li>\n<li><p>tolower(c) 如果c是大写字母则输出其小写</p>\n</li>\n<li><p>toupper(c) 如果c是小写字母则输出其大写</p>\n</li>\n</ul>\n<h2 id=\"5-c-11的“foreach”\"><a href=\"#5-c-11的“foreach”\" class=\"headerlink\" title=\"5.c++11的“foreach”\"></a>5.c++11的“foreach”</h2><p>c++本没有foreach循环，但是c++11为for语句添加了新的语法:<br>for(param:array){}这个for语法每次循环从array中读取一个数据并存放在param中用于操作<br>需要注意的是param如果不使用引用的话，param实际是array中元素的拷贝，此时对param进行修改不会改变array的元素，如需要更改array中的元素的值时需要对param取引用。<br>还有一点十分重要的是不可以在范围for语句中更改array的容量大小，这是因为能被范围for遍历的序列都需要包含begin,end两个返回迭代器的成员，我们可以先看一下范围for的源码:<br>for(auto beg=v.begin(),end=v.end();beg!=end;++beg)<br>{<br>}<br>可以看到在范围for中实际上在循环前就已经存储了可遍历序列的begin,end迭代器，所以如果在循环中改变了序列的大小循环就会出错。</p>\n<h2 id=\"6-vector容器的初始化方式\"><a href=\"#6-vector容器的初始化方式\" class=\"headerlink\" title=\"6.vector容器的初始化方式\"></a>6.vector容器的初始化方式</h2><ul>\n<li>vector<T> v v是一个空的vector</T></li>\n<li>vector<T> v2(v) v2是一个包含v所有副本的的vector</T></li>\n<li>vector<T> v2=v 等价物v2(v)</T></li>\n<li>vector<T> v(n,val) v是一个包含了n个重复元素，每个元素都是val的vector</T></li>\n<li>vector<T> v(n) v是一个包含了n个重复执行了初始化的对象</T></li>\n<li>vector<T> v{a,b,c……} v是一个包含了初始值个数元素的vector，每个元素被赋予对应的初始值</T></li>\n<li>vector<T> v={a,b,c……} 等于v{a,b,c……}</T></li>\n<li><font color=\"red\"> 使用数组初始化vector容器，vector<T>(begin(array),end(array))，其中begin(array)是数组array的首地址，end(array)是数组array的尾地址 </T></font></li>\n</ul>\n<h2 id=\"7-vector对象能高效增长\"><a href=\"#7-vector对象能高效增长\" class=\"headerlink\" title=\"7.vector对象能高效增长\"></a>7.vector对象能高效增长</h2><p>c++标准要求vector容器在运行时能高效快速地添加元素，在c++11标准中vector的动态添加元素的性能要优于预先规定容器大小的性能，只有一种情况例外，就是vector中的元素全部都是相同的时候这种情况会反过来。</p>\n<h2 id=\"8-迭代器的end\"><a href=\"#8-迭代器的end\" class=\"headerlink\" title=\"8.迭代器的end\"></a>8.迭代器的end</h2><p>迭代器的end()并不实际指向某个元素，所以不能对其进行递增或解引用操作。 </p>\n<h2 id=\"9-iterator和const-iterator\"><a href=\"#9-iterator和const-iterator\" class=\"headerlink\" title=\"9.iterator和const_iterator\"></a>9.iterator和const_iterator</h2><p>iterator和<code>const_iterator</code>是标准库定义的迭代器的类型，一般迭代器没有固定的类型，一般使用<code>类型::iterator</code>或<code>const_iterator</code>来确定迭代器的类型，如：<code>vector&lt;int&gt;::iterator  it</code><br><code>iterator</code>为可读可写迭代器，<code>iterator</code>迭代器只能用于非常量容器；<br><code>const_iterator</code>为只读迭代器，<code>const_iterator</code>既可以用于非常量容器又可以用于常量容器，但是常量容器只能使用<code>const_iterator</code>迭代器。</p>\n<h2 id=\"10-cbegin与cend\"><a href=\"#10-cbegin与cend\" class=\"headerlink\" title=\"10.cbegin与cend\"></a>10.cbegin与cend</h2><p>cbegin和cend与begin和end相对，cbegin和cend返回const_iterator迭代器。</p>\n<h2 id=\"11-迭代器的-gt-运算符\"><a href=\"#11-迭代器的-gt-运算符\" class=\"headerlink\" title=\"11.迭代器的-&gt;运算符\"></a>11.迭代器的-&gt;运算符</h2><p>在使用迭代器的过程中经常需要通过解引用后再进行.运算，如：<code>(*it).empty()</code>，操作较为繁琐，c++11对这个操作进行了简化，即通过-&gt;运算来替换<code>(*it).</code>，前面的操作就可以替换为<code>it-&gt;empty()</code></p>\n<h2 id=\"12-容器的删添操作会是迭代器、引用和指针失效\"><a href=\"#12-容器的删添操作会是迭代器、引用和指针失效\" class=\"headerlink\" title=\"12.容器的删添操作会是迭代器、引用和指针失效\"></a>12.容器的删添操作会是迭代器、引用和指针失效</h2><p><font color=\"red\">这是因为容器的删添操作可能会出现存储空间的重新分配，用string作为例子是最贴切的，当我们想一个string字符串中添加一个字符时，如：</font></p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">sting v</span> = <span class=\"hljs-string\">&quot;str&quot;</span>;<br><span class=\"hljs-attribute\">v</span> = v + ‘s’;<br><br></code></pre></td></tr></table></figure>\n<p><font color=\"red\">程序的实际操作是先创建一个临时变量来存储添加之后的字符串strs，然后再将v指向新分配的存储空间，于是指向之前空间位置的迭代器、引用和指针自然就失效了。</font></p>\n<h2 id=\"13-迭代器的运算\"><a href=\"#13-迭代器的运算\" class=\"headerlink\" title=\"13.迭代器的运算\"></a>13.迭代器的运算</h2><p><img src=\"https://i.loli.net/2020/08/27/EG2yOZL4H8YvhsT.jpg\" alt=\"Alt\"></p>\n<p>迭代器之后同时也可以进行加减运算其结果为dfference_type的带符号整型数表示两个迭代器之间的距离。</p>\n<h2 id=\"14-数组的特殊性\"><a href=\"#14-数组的特殊性\" class=\"headerlink\" title=\"14.数组的特殊性\"></a>14.数组的特殊性</h2><p><font color=\"red\">不能使数组来初始化数组，也不能使用数组来赋值数组，有的编译器支持数组初始化和赋值这是编译器的自身扩展，但仍然不应该这样做，因为当换了编译环境后程序可能就会出错人。</font></p>\n<h2 id=\"15-存放存放指针的数组和指向数组的指针\"><a href=\"#15-存放存放指针的数组和指向数组的指针\" class=\"headerlink\" title=\"15.存放存放指针的数组和指向数组的指针\"></a>15.存放存放指针的数组和指向数组的指针</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">int</span> *<span class=\"hljs-selector-tag\">ptr</span><span class=\"hljs-selector-attr\">[2]</span>;<span class=\"hljs-comment\">//拥有两个指针成员的数组</span><br><span class=\"hljs-selector-tag\">int</span> <span class=\"hljs-selector-tag\">&amp;</span><span class=\"hljs-selector-tag\">ptr2</span><span class=\"hljs-selector-attr\">[2]</span>;<span class=\"hljs-comment\">//错误，不存在引用数组</span><br><span class=\"hljs-selector-tag\">int</span> (*ptr3)<span class=\"hljs-selector-attr\">[2]</span>;<span class=\"hljs-comment\">//指向有两个长度的整型数组的指针</span><br><span class=\"hljs-selector-tag\">int</span> (&amp;ptr4)<span class=\"hljs-selector-attr\">[2]</span>;<span class=\"hljs-comment\">//指向两个长度的整型数组的引用</span><br><br></code></pre></td></tr></table></figure>\n<h2 id=\"16-数组和指针\"><a href=\"#16-数组和指针\" class=\"headerlink\" title=\"16.数组和指针\"></a>16.数组和指针</h2><p>数组的名字实际上就是指向数组收地址的指针，所以下面操作得到是指针：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">int</span> arr[<span class=\"hljs-number\">2</span>] = &#123;&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">auto</span> <span class=\"hljs-title\">ptr</span><span class=\"hljs-params\">(arr)</span></span>;<span class=\"hljs-comment\">//per是一个指向arr首地址的int*类型指针</span><br><br></code></pre></td></tr></table></figure>\n<p><font color=\"red\">使用decltype进行上面的操作不会得到指针，而是得到数组，如：</font></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">decltype</span>(arr) arr<span class=\"hljs-number\">2</span> = &#123;<span class=\"hljs-number\">1</span>&#125;;//arr<span class=\"hljs-number\">2</span>是一个包含一个元素的int型数组<br></code></pre></td></tr></table></figure>\n<p><font color=\"red\">对数组执行下标运算实质上是对指向数组首地址的指针执行下标运算，如：</font></p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-built_in\">int</span> i = ia[<span class=\"hljs-number\">2</span>]; <span class=\"hljs-comment\">//实际得到是(ia+2)所指向的元素</span><br></code></pre></td></tr></table></figure>\n\n<p><font color=\"red\">数组的下标运算只要不超过数组长度就可以执行下标运算，如：含有10个元素数组下标从0-9，但是 下标运算可以取到10，即a[10]，a[10]是数组的尾元素的下一个位置，但是对a[10]只能进行去地址运算(&amp;a[10])，不能对a[10]解引用或读取。</font></p>\n<h2 id=\"17-ptrdiff-t类型\"><a href=\"#17-ptrdiff-t类型\" class=\"headerlink\" title=\"17.ptrdiff_t类型\"></a>17.ptrdiff_t类型</h2><p>和<code>size_type</code>一样，<code>ptrdiff_t</code>是c++11专门定制给begin()与end()的运算结果的类型，用于适应不同机器的字长。<br><font color=\"red\">需要注意的是，内置数组下标值不是<code>ptrdiff_t</code>类型，如：a[1]，1就不是<code>ptrdiff_t</code>类型。</font></p>\n<h2 id=\"18-void-指针\"><a href=\"#18-void-指针\" class=\"headerlink\" title=\"18.void *指针\"></a>18.void *指针</h2><h2 id=\"任何非常量值都可以存入void-指针中。\"><a href=\"#任何非常量值都可以存入void-指针中。\" class=\"headerlink\" title=\"任何非常量值都可以存入void *指针中。\"></a>任何非常量值都可以存入<code>void *</code>指针中。</h2><h1 id=\"四、表达式\"><a href=\"#四、表达式\" class=\"headerlink\" title=\"四、表达式\"></a>四、表达式</h1><hr>\n<h2 id=\"1-为定义行为\"><a href=\"#1-为定义行为\" class=\"headerlink\" title=\"1.为定义行为\"></a>1.为定义行为</h2><p>c++中存在一些为定义行为，如&lt;&lt;运算符在c++中并没有定义其后表达式的运算顺序，此时运行下面代码就会出现为定义行为。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;i&lt;&lt;<span class=\"hljs-string\">&quot;,&quot;</span>&lt;&lt;++i&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br></code></pre></td></tr></table></figure>\n<p>此时会出现0，1或1，1两种结果，这是因为&lt;&lt;没有明确指定何时及如何对运算对象求值，但是在实际使用过程中并没有出现上述情况，这可能是编译器为&lt;&lt;规定了运算顺序。</p>\n<h2 id=\"2-溢出与其他算术异常\"><a href=\"#2-溢出与其他算术异常\" class=\"headerlink\" title=\"2.溢出与其他算术异常\"></a>2.溢出与其他算术异常</h2><p><img src=\"https://i.loli.net/2020/09/04/QRnNjiTqEeOGaLV.jpg\" alt=\"6\"></p>\n<h2 id=\"3-运算符的优先级\"><a href=\"#3-运算符的优先级\" class=\"headerlink\" title=\"3.运算符的优先级\"></a>3.运算符的优先级</h2><p><img src=\"https://i.loli.net/2020/10/09/6aVu9jBoswIgUEY.jpg\" alt=\"Alt\"></p>\n<h2 id=\"4-前置递增运算符与后置递增运算符的运行过程\"><a href=\"#4-前置递增运算符与后置递增运算符的运行过程\" class=\"headerlink\" title=\"4.前置递增运算符与后置递增运算符的运行过程\"></a>4.前置递增运算符与后置递增运算符的运行过程</h2><p>前置递增运算符先将对象递增之后再返回递增后的结果，而后置递增运算符则先创建一个临时变量先将旧的值存储起来，然后再将变量递增，再将旧的值返回。<br>相对于前置递增运算符，后置递增运算符需要创建一个临时变量，这就产生了一个消耗，在一些普通的后置递增运算中可能不大可看得出来，但在较为复杂的迭代器中这种额外的消耗就会产生巨大的性能浪费，所以平时使用时尽量使用前置递增运算符。</p>\n<h2 id=\"5-表达式在运算过程中值发生变化\"><a href=\"#5-表达式在运算过程中值发生变化\" class=\"headerlink\" title=\"5.表达式在运算过程中值发生变化\"></a>5.表达式在运算过程中值发生变化</h2><p><font color=\"red\">在一个运算表达式中，参与运算的值不应该在运算的过程中发生变化，否则极易造成未定义行为，如：</font><br><font color=\"red\"><code>v[i++]&lt;v[i]</code>，在大于号运算的过程中v[i++]的值向后移动了一位，造成了值的变化，由于C++没有定义二元运算符两端未定义自增运算符的运算顺序，所级就造成了未定义行为。</font></p>\n<h2 id=\"6-有符号数的位运算\"><a href=\"#6-有符号数的位运算\" class=\"headerlink\" title=\"6.有符号数的位运算\"></a>6.有符号数的位运算</h2><p>有符号数尽量不要做位运算，因为位运算容易改变有符号数的符号位导致未定义行为。</p>\n<h2 id=\"7-位运算中的类型提升\"><a href=\"#7-位运算中的类型提升\" class=\"headerlink\" title=\"7.位运算中的类型提升\"></a>7.位运算中的类型提升</h2><p>在程序编写时需要注意，任何占字节小于int类型的类型变量进行位运算时都会产生类型提升而被转换成int类型，如下代码所示：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br><span class=\"hljs-keyword\">char</span> s=<span class=\"hljs-string\">&#x27;s&#x27;</span>;<br><span class=\"hljs-keyword\">short</span> a=<span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">bool</span> b=<span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">long</span> c=<span class=\"hljs-number\">2</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-keyword\">sizeof</span>(s)&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-keyword\">sizeof</span>(~s)&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-keyword\">sizeof</span>(s&lt;&lt;<span class=\"hljs-number\">1</span>)&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-string\">&quot;----------&quot;</span>&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-keyword\">sizeof</span>(a)&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-keyword\">sizeof</span>(~a)&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-string\">&quot;----------&quot;</span>&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-keyword\">sizeof</span>(b)&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-keyword\">sizeof</span>(~b)&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-string\">&quot;----------&quot;</span>&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-keyword\">sizeof</span>(c)&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-keyword\">sizeof</span>(~c)&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-string\">&quot;----------&quot;</span>&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;~s&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;~b&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>输出结果：<br><img src=\"https://i.loli.net/2020/10/23/GUI54xhOrQs7oyK.jpg\" alt=\"Alt\"></p>\n<h2 id=\"8-sizeof计算指针大小\"><a href=\"#8-sizeof计算指针大小\" class=\"headerlink\" title=\"8.sizeof计算指针大小\"></a>8.sizeof计算指针大小</h2><p>sizeof在计算指针时有个很有趣的现象，因为sizeof满足右结合律且优先级与<code>*</code>相同，所以在<code>sizeof *p</code>中，先对p解引用，然后在对解引用后的内容计算所占内存大小，由于sizeof并没有使用解引用的内容，所以<code>*p</code>是否为空是否有效对sizeof的计算没有影响。<br><code>sizeof *p</code> == <code>sizeof(*p)</code></p>\n<h2 id=\"9-隐式转换的过程\"><a href=\"#9-隐式转换的过程\" class=\"headerlink\" title=\"9.隐式转换的过程\"></a>9.隐式转换的过程</h2><p>以<code>int a=3.14+3；</code>为例<br>在这个例子中3.14是山比double类型，3是int类型，运算时为了保证精度C++会将int类型转换成double类型，而不是因为结果是int类型而将double类型转换成int类型，所以在表达示右侧的运算过程得到的结果是一个double类型的值，当这个值被赋值给a的时候才进行double到int的类型转换。</p>\n<hr>\n<h1 id=\"五、语句\"><a href=\"#五、语句\" class=\"headerlink\" title=\"五、语句\"></a>五、语句</h1><hr>\n<h2 id=\"1-switch语句跨case标签引用变量\"><a href=\"#1-switch语句跨case标签引用变量\" class=\"headerlink\" title=\"1.switch语句跨case标签引用变量\"></a>1.switch语句跨case标签引用变量</h2><p>若需要在一个 case 语句下定义变量同时在多个 case 语下使用这个变量，则定义变量时不能同时初始化变量，应另起等于初始变量，否则编译器会报跨标签访问错误，如：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">switch</span> (a)<br>&#123;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>        <span class=\"hljs-keyword\">int</span> b;  <span class=\"hljs-comment\">//如果直接int b=1;则会报跨标签访问错误</span><br>        b=<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:<br>        <span class=\"hljs-built_in\">cout</span>&lt;&lt;b&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br>        <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-keyword\">default</span>:<br>        ;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-C-无法捕获计算溢出异常和除0异常\"><a href=\"#2-C-无法捕获计算溢出异常和除0异常\" class=\"headerlink\" title=\"2.C++无法捕获计算溢出异常和除0异常\"></a>2.C++无法捕获计算溢出异常和除0异常</h2><p>C++认为计算溢出和除0异常属于底层事件，应被同样底层的事件去处理，所以C++没有提供计算溢出和除0异常，如果需要捕获这两类异常在Windows系统中应使用Windows提供的SEH模型<code>__try</code>、<code>__except</code>、<code>__finally</code>异常语句，使用方法和try-catch基本类似，与try-catch不同的是，SEH中使用的是<code>__try-__except</code>搭配和<code>__try-__finally</code>搭配。</p>\n<hr>\n<h1 id=\"六、函数\"><a href=\"#六、函数\" class=\"headerlink\" title=\"六、函数\"></a>六、函数</h1><hr>\n<h2 id=\"1-静态局布变量\"><a href=\"#1-静态局布变量\" class=\"headerlink\" title=\"1.静态局布变量\"></a>1.静态局布变量</h2><p>在函数体内使用static关键字可以效静态局布量，静态局布变量的生命周期从变量定义到程序结束，但是静态局布变量只对函数可见，在函数外不可访问。</p>\n<h2 id=\"2-C-程序的编译过程\"><a href=\"#2-C-程序的编译过程\" class=\"headerlink\" title=\"2.C++程序的编译过程\"></a>2.C++程序的编译过程</h2><p><img src=\"https://i.loli.net/2020/11/09/bJ5xRFg6TGHnLCO.jpg\" alt=\"Alt\"></p>\n<h2 id=\"3-函数调用过程中的形参创建\"><a href=\"#3-函数调用过程中的形参创建\" class=\"headerlink\" title=\"3.函数调用过程中的形参创建\"></a>3.函数调用过程中的形参创建</h2><p>函数的每一次调用都会重新创建形参并传入实参对其进行初始化，形餐盘类型决定了形参与实参的交互类型，如果形参是引用类型，则形参与相对应的实参相绑定，作为实参的别名使用；如果形参是值类型，则实参的值拷贝给形参，形参与实参相互独立。</p>\n<h2 id=\"4-函数的指针参数传递\"><a href=\"#4-函数的指针参数传递\" class=\"headerlink\" title=\"4.函数的指针参数传递\"></a>4.函数的指针参数传递</h2><p><font color=\"red\">当指针作为实参传递给函数形参时，传递的是指针的值拷贝而不是指针所指的对象，且形参指针与实参指针是两个不同的指针，此时形参指针与实参指针指向同一对象，修改形参的指针指向不会影实参指针。</font></p>\n<h2 id=\"5-引用形参的限制\"><a href=\"#5-引用形参的限制\" class=\"headerlink\" title=\"5.引用形参的限制\"></a>5.引用形参的限制</h2><ul>\n<li><p>如果将函数的参数定义普通引用参数，那么这个形参就无法接受const对象、字面值和需要类型转换的对象作为实参。</p>\n</li>\n<li><p>如果将函数的参数定义为const引用参数，这个参数可以接受第一条中的参数，但是却无法修改参数的值。</p>\n</li>\n</ul>\n<h2 id=\"6-数组的两个特殊性质\"><a href=\"#6-数组的两个特殊性质\" class=\"headerlink\" title=\"6.数组的两个特殊性质\"></a>6.数组的两个特殊性质</h2><ul>\n<li>数组不可被拷贝</li>\n<li>数组再使用时被转换为指针</li>\n</ul>\n<h2 id=\"7-数组引用形参\"><a href=\"#7-数组引用形参\" class=\"headerlink\" title=\"7.数组引用形参\"></a>7.数组引用形参</h2><p>当我们使用数组作普通形参时，</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\">void <span class=\"hljs-function\"><span class=\"hljs-title\">fun</span><span class=\"hljs-params\">(int* arr)</span></span>;<br>void <span class=\"hljs-function\"><span class=\"hljs-title\">fun</span><span class=\"hljs-params\">(int arr[])</span></span>;<br>void <span class=\"hljs-function\"><span class=\"hljs-title\">fun</span><span class=\"hljs-params\">(int arr[<span class=\"hljs-number\">10</span>])</span></span>;<br></code></pre></td></tr></table></figure>\n<p>表示的都是同一个函数，且形参可接受任意长度的实参数组，但是当将普通形参改为引用形参时，</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\">void <span class=\"hljs-function\"><span class=\"hljs-title\">fun</span><span class=\"hljs-params\">(int (&amp;arr)</span></span>[<span class=\"hljs-number\">10</span>]);<br></code></pre></td></tr></table></figure>\n<p><code>(&amp;arr)</code>中()不可缺少，否则形参变成引用的数组而非数组的引用，且形参只能接收长度为10的数组。</p>\n<h2 id=\"8-main函数传参\"><a href=\"#8-main函数传参\" class=\"headerlink\" title=\"8.main函数传参\"></a>8.main函数传参</h2><p>有的时候我们会遇到这样的main函数：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc,<span class=\"hljs-keyword\">char</span>** argv)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>通常情况下，直接使用argv，argv中的内容是空的，那么main函数在什么情况下会接收参数呢？<br>事实上main函数本身就是当前程序的入口，在当前程序中没有其他程序为main函数传入参数了，当我们把写好的程序打包后在外部调用时就可以给main函数传入参数了，如在CMD中调程序</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">prog -o -d ofile data0<span class=\"hljs-regexp\">//</span>prog为程序名<br></code></pre></td></tr></table></figure>\n<p><font color=\"red\">需要注意的是argv数组的0号索引存储程序的名字，参数从1号索引开始存储，且最后一个索引位置固定内容为0</font></p>\n","site":{"data":{}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"C-Primer-阅读笔记\"><a href=\"#C-Primer-阅读笔记\" class=\"headerlink\" title=\"C++ Primer 阅读笔记\"></a>C++ Primer 阅读笔记</h1><hr>","more":"<h1 id=\"一、开始\"><a href=\"#一、开始\" class=\"headerlink\" title=\"一、开始\"></a>一、开始</h1><hr>\n<h2 id=\"1-输入输出流的数据传输过程\"><a href=\"#1-输入输出流的数据传输过程\" class=\"headerlink\" title=\"1.输入输出流的数据传输过程\"></a>1.输入输出流的数据传输过程</h2><p><strong>输入:</strong><br>[窗]-&gt;[输入流对象(cin)]</p>\n<p><strong>输出:</strong><br>[输出流对象(cout，cerr，clog)-&gt;[窗口]</p>\n<p>c++从窗口中读取输入时不是直接存储在变量中而是先存储在istream类型对象cin中，输出是也非直接从变量输出到窗口而是先写入ostream对象cout/cerr/clog中，在从对象传输到窗口。</p>\n<h2 id=\"2-输出运算符“-lt-lt-”\"><a href=\"#2-输出运算符“-lt-lt-”\" class=\"headerlink\" title=\"2.输出运算符“&lt;&lt;”\"></a>2.输出运算符“&lt;&lt;”</h2><p>“&lt;&lt;”运算符输出的是一个ostream类型对象，“&lt;&lt;”接受两个运算对象，其中左侧的运算对象必须是一个ostream对象，右侧可以是需要输出的值，“&lt;&lt;”将需要输出的值写入到ostream对象中。<br>std::cout&lt;&lt;”num:”&lt;&lt;a&lt;&lt;std::endl；<br>“&lt;&lt;”连续表达式可以理解为:<br>((std::cout&lt;&lt;”num:”)&lt;&lt;a)&lt;&lt;std::endl；<br>每一个括号最终返回的都是一个ostream对象。其中endl是“操纵符”，运行效果是换行，并将与设备关联的缓冲区的内容刷新到设备中去，如果不写endl则在程序运行结束或缓冲区满后系统自动将缓冲区内容刷新到设备中去。<br>输入运算符“&gt;&gt;”和输出运算符运行逻辑一样。</p>\n<h2 id=\"3-char与unsigned-char\"><a href=\"#3-char与unsigned-char\" class=\"headerlink\" title=\"3.char与unsigned char\"></a>3.char与unsigned char</h2><p>在计算机中char也是分无符号和有符号两类的，char与int等类型不同的是，int等类型不显示标注unsigned默认为有符号数，而char在不同硬件环境中表示的类型可能是不一样的，所以为保证移植性最好在使用时指定signed和unsigned，c++标准不建议使用char来存储数值，这种区别主要出现在char类型向值类型的转换的过程中。</p>\n<h2 id=\"4-有符号数与无符号数的运算\"><a href=\"#4-有符号数与无符号数的运算\" class=\"headerlink\" title=\"4.有符号数与无符号数的运算\"></a>4.有符号数与无符号数的运算</h2><p>在c++运算优先级中，无符号数的优先级大于有符号数，所以当一个表达式中即存在有符号数又不存在无符号数时，运算将被转换为无符号数的运算，由于无符号数表示的最小值是0所以当表达式的运算结果为负数时就会出现运算错误。</p>\n<h2 id=\"5-c-11的四种变量初始化方式\"><a href=\"#5-c-11的四种变量初始化方式\" class=\"headerlink\" title=\"5.c++11的四种变量初始化方式\"></a>5.c++11的四种变量初始化方式</h2><p>int a=0;<br>int a={0};<br>int a{0};</p>\n<h2 id=\"int-a-0\"><a href=\"#int-a-0\" class=\"headerlink\" title=\"int a(0);\"></a>int a(0);</h2><h1 id=\"二、变量和基本类型\"><a href=\"#二、变量和基本类型\" class=\"headerlink\" title=\"二、变量和基本类型\"></a>二、变量和基本类型</h1><hr>\n<p>1.const引用的隐式类型转换<br>举例使用const限定的int类型的引用来引用double类型的变量的过程：double b=3.14;const int a=b;<br>在将double类型变量赋值给const int类型的引用时系统先创建一个临时变量，并将double隐式成int类型的结果存放到临时变量中，然后再将临时变量赋给引用，此时引用本质上是int类型的临时变量的别名，之后如果更改了double类型变量的值，引用值随之改变。</p>\n<h2 id=\"2-constexpr变量\"><a href=\"#2-constexpr变量\" class=\"headerlink\" title=\"2.constexpr变量\"></a>2.constexpr变量</h2><p>constexpr是一个常量表达式，与const不同的是，const限定的变量只能被常量、常量的引用、常量表达式和常量与常量引用的表达式赋值，而constexpr可以被常量、常量的引用、表达式、以及可以在编译阶段就确定返回值的函数赋值。const在程序运行时的本质是在程序用的const的地方直接替换成期对应<br>的常量，而constexpr则是替换其在编译器期计算出来的结果值。<br>constexpr的意义在于constexpr强制要求赋值给变量的表达式必须在编译阶段可计算出结果值，这对很多重复运算的简单表达式直接限定了在编译期只进行一次运算起到了优化效果。</p>\n<h2 id=\"3-constexpr指针\"><a href=\"#3-constexpr指针\" class=\"headerlink\" title=\"3.constexpr指针\"></a>3.constexpr指针</h2><p>被constexpr限定的指针的初始值只能是nullptr或者0或者指向一个地址固定不变的对象，这里需要注意在函数里的任何对象都不是存储在固定地址中的，所以constexpr限定的指针不能指向函数中的对象，全局对象则是存在在固定地址中的所以constexpr限定的指针可以指向这样的对象。</p>\n<h2 id=\"4-c-11的两种别名声明方法\"><a href=\"#4-c-11的两种别名声明方法\" class=\"headerlink\" title=\"4.c++ 11的两种别名声明方法\"></a>4.c++ 11的两种别名声明方法</h2><p>typedef bm int;<br>using bm=int;</p>\n<h2 id=\"5-decltype类型指示符\"><a href=\"#5-decltype类型指示符\" class=\"headerlink\" title=\"5.decltype类型指示符\"></a>5.decltype类型指示符</h2><p>decltype的作用是通过表达式或函数的返回值动态的推断其指示变量的类型，如：</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\">decltype(<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span>()) <span class=\"hljs-title\">sum</span></span> = x;<span class=\"hljs-regexp\">//sum</span>的类型为<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span>函数返回值的类型，<span class=\"hljs-title\">sum</span></span>的值由x赋予<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"顶层Const与底层Const\"><a href=\"#顶层Const与底层Const\" class=\"headerlink\" title=\"顶层Const与底层Const\"></a>顶层Const与底层Const</h2><p>由于指针本身也是一个对象，所以在Const修饰指针时，就立存在修饰指针或修饰指针所指的对象。如果Const修饰指针则是底层Const，如果修饰指针所指的对象则是顶层Const。</p>\n<figure class=\"highlight nim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nim\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">int</span>* pa;//<span class=\"hljs-keyword\">const</span>修饰指针，所以为底层<span class=\"hljs-keyword\">const</span><br><span class=\"hljs-built_in\">int</span>* <span class=\"hljs-keyword\">const</span> pb;//<span class=\"hljs-keyword\">const</span>修饰pb，所以为顶层<span class=\"hljs-keyword\">const</span><br></code></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"三、字符串、向量和数组\"><a href=\"#三、字符串、向量和数组\" class=\"headerlink\" title=\"三、字符串、向量和数组\"></a>三、字符串、向量和数组</h1><hr>\n<h2 id=\"1-c-11的string对象的初始化方式\"><a href=\"#1-c-11的string对象的初始化方式\" class=\"headerlink\" title=\"1.c++11的string对象的初始化方式\"></a>1.c++11的string对象的初始化方式</h2><p>string s;<br>string str=s;<br>string str(s);<br>string str(“str”);<br>string str=”str”;<br>string str(2,’s’);//这种形式得到的是字符串”ss”,其中括号里只能使用字符。</p>\n<h2 id=\"2-cin、getline-和cin-getline\"><a href=\"#2-cin、getline-和cin-getline\" class=\"headerlink\" title=\"2.cin、getline()和cin.getline()\"></a>2.cin、getline()和cin.getline()</h2><p>cin在对象在从缓存中读取数据时遇到空格符，制表符，换行符时或读至文件尾时会结束读取。<br>getline()可以读取空格符，遇到换行符时或读至文件尾时结束读取。<br>cin.getline()作用和getline一样，只是cin.getline和cin都是标准输出流iosteeam中的对象方法，而getline这是属于string.h中的方法。</p>\n<h2 id=\"3-string-size-type类型\"><a href=\"#3-string-size-type类型\" class=\"headerlink\" title=\"3.string::size_type类型\"></a>3.string::size_type类型</h2><p><code>size_type</code>类型是c++定义的几种标准库类型的几种配套类型，其目的在于解决在不同机器中因为机器字长不同而导致string.size()的返回值无法存储的问题，比如在一个16位的机器中int整型存储的最大字符数为32767，但这对于储存一个文件大小的string来说这个大小是明显不够的，所以c++引入<code>size_type</code>，以解决不同机器上string.size()的返回值一定能被存储。<br><code>size_type</code>的本质是无符号类型所以在使用string.size()和有符号数做运算时要十分注意，因为这会导致计算结果出现异常。<br>需要注意的一点是<code>size_type</code>类型实际上不是一个确定的类型，在使用<code>size_type</code>时应注明<code>size_type</code>的类型，如:<code>string::size_type,vector&lt;int&gt;::size_type</code>。</p>\n<h2 id=\"4-cctype头文件提供的一些字符判断函数\"><a href=\"#4-cctype头文件提供的一些字符判断函数\" class=\"headerlink\" title=\"4.cctype头文件提供的一些字符判断函数\"></a>4.cctype头文件提供的一些字符判断函数</h2><ul>\n<li><p>isalnum(c) 当c是字母过数字时为真</p>\n</li>\n<li><p>isalpha(c) 当c是字母时为真</p>\n</li>\n<li><p>iscntrl(c) 当c是控制字符时为真</p>\n</li>\n<li><p>isdigit(c) 当c是数字时为真</p>\n</li>\n<li><p>isgraph(c) 当c不是空格但可以打印时为真</p>\n</li>\n<li><p>islower(c) 当c是小写字母时为真</p>\n</li>\n<li><p>isprint(c) 当c是可打印字符时为真(即c是空格或c具有可视化形式)</p>\n</li>\n<li><p>ispunct(c) 当c是标点符号时为真(即c不是控制字符、数字、字母、可打印空白中的一种)</p>\n</li>\n<li><p>isspace(c) 当c是空格时为真</p>\n</li>\n<li><p>isupper(c) 当c是大写字母时为真</p>\n</li>\n<li><p>isxdigit(c) 当c是16进制数字时为真</p>\n</li>\n<li><p>tolower(c) 如果c是大写字母则输出其小写</p>\n</li>\n<li><p>toupper(c) 如果c是小写字母则输出其大写</p>\n</li>\n</ul>\n<h2 id=\"5-c-11的“foreach”\"><a href=\"#5-c-11的“foreach”\" class=\"headerlink\" title=\"5.c++11的“foreach”\"></a>5.c++11的“foreach”</h2><p>c++本没有foreach循环，但是c++11为for语句添加了新的语法:<br>for(param:array){}这个for语法每次循环从array中读取一个数据并存放在param中用于操作<br>需要注意的是param如果不使用引用的话，param实际是array中元素的拷贝，此时对param进行修改不会改变array的元素，如需要更改array中的元素的值时需要对param取引用。<br>还有一点十分重要的是不可以在范围for语句中更改array的容量大小，这是因为能被范围for遍历的序列都需要包含begin,end两个返回迭代器的成员，我们可以先看一下范围for的源码:<br>for(auto beg=v.begin(),end=v.end();beg!=end;++beg)<br>{<br>}<br>可以看到在范围for中实际上在循环前就已经存储了可遍历序列的begin,end迭代器，所以如果在循环中改变了序列的大小循环就会出错。</p>\n<h2 id=\"6-vector容器的初始化方式\"><a href=\"#6-vector容器的初始化方式\" class=\"headerlink\" title=\"6.vector容器的初始化方式\"></a>6.vector容器的初始化方式</h2><ul>\n<li>vector<T> v v是一个空的vector</T></li>\n<li>vector<T> v2(v) v2是一个包含v所有副本的的vector</T></li>\n<li>vector<T> v2=v 等价物v2(v)</T></li>\n<li>vector<T> v(n,val) v是一个包含了n个重复元素，每个元素都是val的vector</T></li>\n<li>vector<T> v(n) v是一个包含了n个重复执行了初始化的对象</T></li>\n<li>vector<T> v{a,b,c……} v是一个包含了初始值个数元素的vector，每个元素被赋予对应的初始值</T></li>\n<li>vector<T> v={a,b,c……} 等于v{a,b,c……}</T></li>\n<li><font color=\"red\"> 使用数组初始化vector容器，vector<T>(begin(array),end(array))，其中begin(array)是数组array的首地址，end(array)是数组array的尾地址 </T></font></li>\n</ul>\n<h2 id=\"7-vector对象能高效增长\"><a href=\"#7-vector对象能高效增长\" class=\"headerlink\" title=\"7.vector对象能高效增长\"></a>7.vector对象能高效增长</h2><p>c++标准要求vector容器在运行时能高效快速地添加元素，在c++11标准中vector的动态添加元素的性能要优于预先规定容器大小的性能，只有一种情况例外，就是vector中的元素全部都是相同的时候这种情况会反过来。</p>\n<h2 id=\"8-迭代器的end\"><a href=\"#8-迭代器的end\" class=\"headerlink\" title=\"8.迭代器的end\"></a>8.迭代器的end</h2><p>迭代器的end()并不实际指向某个元素，所以不能对其进行递增或解引用操作。 </p>\n<h2 id=\"9-iterator和const-iterator\"><a href=\"#9-iterator和const-iterator\" class=\"headerlink\" title=\"9.iterator和const_iterator\"></a>9.iterator和const_iterator</h2><p>iterator和<code>const_iterator</code>是标准库定义的迭代器的类型，一般迭代器没有固定的类型，一般使用<code>类型::iterator</code>或<code>const_iterator</code>来确定迭代器的类型，如：<code>vector&lt;int&gt;::iterator  it</code><br><code>iterator</code>为可读可写迭代器，<code>iterator</code>迭代器只能用于非常量容器；<br><code>const_iterator</code>为只读迭代器，<code>const_iterator</code>既可以用于非常量容器又可以用于常量容器，但是常量容器只能使用<code>const_iterator</code>迭代器。</p>\n<h2 id=\"10-cbegin与cend\"><a href=\"#10-cbegin与cend\" class=\"headerlink\" title=\"10.cbegin与cend\"></a>10.cbegin与cend</h2><p>cbegin和cend与begin和end相对，cbegin和cend返回const_iterator迭代器。</p>\n<h2 id=\"11-迭代器的-gt-运算符\"><a href=\"#11-迭代器的-gt-运算符\" class=\"headerlink\" title=\"11.迭代器的-&gt;运算符\"></a>11.迭代器的-&gt;运算符</h2><p>在使用迭代器的过程中经常需要通过解引用后再进行.运算，如：<code>(*it).empty()</code>，操作较为繁琐，c++11对这个操作进行了简化，即通过-&gt;运算来替换<code>(*it).</code>，前面的操作就可以替换为<code>it-&gt;empty()</code></p>\n<h2 id=\"12-容器的删添操作会是迭代器、引用和指针失效\"><a href=\"#12-容器的删添操作会是迭代器、引用和指针失效\" class=\"headerlink\" title=\"12.容器的删添操作会是迭代器、引用和指针失效\"></a>12.容器的删添操作会是迭代器、引用和指针失效</h2><p><font color=\"red\">这是因为容器的删添操作可能会出现存储空间的重新分配，用string作为例子是最贴切的，当我们想一个string字符串中添加一个字符时，如：</font></p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">sting v</span> = <span class=\"hljs-string\">&quot;str&quot;</span>;<br><span class=\"hljs-attribute\">v</span> = v + ‘s’;<br><br></code></pre></td></tr></table></figure>\n<p><font color=\"red\">程序的实际操作是先创建一个临时变量来存储添加之后的字符串strs，然后再将v指向新分配的存储空间，于是指向之前空间位置的迭代器、引用和指针自然就失效了。</font></p>\n<h2 id=\"13-迭代器的运算\"><a href=\"#13-迭代器的运算\" class=\"headerlink\" title=\"13.迭代器的运算\"></a>13.迭代器的运算</h2><p><img src=\"https://i.loli.net/2020/08/27/EG2yOZL4H8YvhsT.jpg\" alt=\"Alt\"></p>\n<p>迭代器之后同时也可以进行加减运算其结果为dfference_type的带符号整型数表示两个迭代器之间的距离。</p>\n<h2 id=\"14-数组的特殊性\"><a href=\"#14-数组的特殊性\" class=\"headerlink\" title=\"14.数组的特殊性\"></a>14.数组的特殊性</h2><p><font color=\"red\">不能使数组来初始化数组，也不能使用数组来赋值数组，有的编译器支持数组初始化和赋值这是编译器的自身扩展，但仍然不应该这样做，因为当换了编译环境后程序可能就会出错人。</font></p>\n<h2 id=\"15-存放存放指针的数组和指向数组的指针\"><a href=\"#15-存放存放指针的数组和指向数组的指针\" class=\"headerlink\" title=\"15.存放存放指针的数组和指向数组的指针\"></a>15.存放存放指针的数组和指向数组的指针</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">int</span> *<span class=\"hljs-selector-tag\">ptr</span><span class=\"hljs-selector-attr\">[2]</span>;<span class=\"hljs-comment\">//拥有两个指针成员的数组</span><br><span class=\"hljs-selector-tag\">int</span> <span class=\"hljs-selector-tag\">&amp;</span><span class=\"hljs-selector-tag\">ptr2</span><span class=\"hljs-selector-attr\">[2]</span>;<span class=\"hljs-comment\">//错误，不存在引用数组</span><br><span class=\"hljs-selector-tag\">int</span> (*ptr3)<span class=\"hljs-selector-attr\">[2]</span>;<span class=\"hljs-comment\">//指向有两个长度的整型数组的指针</span><br><span class=\"hljs-selector-tag\">int</span> (&amp;ptr4)<span class=\"hljs-selector-attr\">[2]</span>;<span class=\"hljs-comment\">//指向两个长度的整型数组的引用</span><br><br></code></pre></td></tr></table></figure>\n<h2 id=\"16-数组和指针\"><a href=\"#16-数组和指针\" class=\"headerlink\" title=\"16.数组和指针\"></a>16.数组和指针</h2><p>数组的名字实际上就是指向数组收地址的指针，所以下面操作得到是指针：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">int</span> arr[<span class=\"hljs-number\">2</span>] = &#123;&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">auto</span> <span class=\"hljs-title\">ptr</span><span class=\"hljs-params\">(arr)</span></span>;<span class=\"hljs-comment\">//per是一个指向arr首地址的int*类型指针</span><br><br></code></pre></td></tr></table></figure>\n<p><font color=\"red\">使用decltype进行上面的操作不会得到指针，而是得到数组，如：</font></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">decltype</span>(arr) arr<span class=\"hljs-number\">2</span> = &#123;<span class=\"hljs-number\">1</span>&#125;;//arr<span class=\"hljs-number\">2</span>是一个包含一个元素的int型数组<br></code></pre></td></tr></table></figure>\n<p><font color=\"red\">对数组执行下标运算实质上是对指向数组首地址的指针执行下标运算，如：</font></p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-built_in\">int</span> i = ia[<span class=\"hljs-number\">2</span>]; <span class=\"hljs-comment\">//实际得到是(ia+2)所指向的元素</span><br></code></pre></td></tr></table></figure>\n\n<p><font color=\"red\">数组的下标运算只要不超过数组长度就可以执行下标运算，如：含有10个元素数组下标从0-9，但是 下标运算可以取到10，即a[10]，a[10]是数组的尾元素的下一个位置，但是对a[10]只能进行去地址运算(&amp;a[10])，不能对a[10]解引用或读取。</font></p>\n<h2 id=\"17-ptrdiff-t类型\"><a href=\"#17-ptrdiff-t类型\" class=\"headerlink\" title=\"17.ptrdiff_t类型\"></a>17.ptrdiff_t类型</h2><p>和<code>size_type</code>一样，<code>ptrdiff_t</code>是c++11专门定制给begin()与end()的运算结果的类型，用于适应不同机器的字长。<br><font color=\"red\">需要注意的是，内置数组下标值不是<code>ptrdiff_t</code>类型，如：a[1]，1就不是<code>ptrdiff_t</code>类型。</font></p>\n<h2 id=\"18-void-指针\"><a href=\"#18-void-指针\" class=\"headerlink\" title=\"18.void *指针\"></a>18.void *指针</h2><h2 id=\"任何非常量值都可以存入void-指针中。\"><a href=\"#任何非常量值都可以存入void-指针中。\" class=\"headerlink\" title=\"任何非常量值都可以存入void *指针中。\"></a>任何非常量值都可以存入<code>void *</code>指针中。</h2><h1 id=\"四、表达式\"><a href=\"#四、表达式\" class=\"headerlink\" title=\"四、表达式\"></a>四、表达式</h1><hr>\n<h2 id=\"1-为定义行为\"><a href=\"#1-为定义行为\" class=\"headerlink\" title=\"1.为定义行为\"></a>1.为定义行为</h2><p>c++中存在一些为定义行为，如&lt;&lt;运算符在c++中并没有定义其后表达式的运算顺序，此时运行下面代码就会出现为定义行为。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;i&lt;&lt;<span class=\"hljs-string\">&quot;,&quot;</span>&lt;&lt;++i&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br></code></pre></td></tr></table></figure>\n<p>此时会出现0，1或1，1两种结果，这是因为&lt;&lt;没有明确指定何时及如何对运算对象求值，但是在实际使用过程中并没有出现上述情况，这可能是编译器为&lt;&lt;规定了运算顺序。</p>\n<h2 id=\"2-溢出与其他算术异常\"><a href=\"#2-溢出与其他算术异常\" class=\"headerlink\" title=\"2.溢出与其他算术异常\"></a>2.溢出与其他算术异常</h2><p><img src=\"https://i.loli.net/2020/09/04/QRnNjiTqEeOGaLV.jpg\" alt=\"6\"></p>\n<h2 id=\"3-运算符的优先级\"><a href=\"#3-运算符的优先级\" class=\"headerlink\" title=\"3.运算符的优先级\"></a>3.运算符的优先级</h2><p><img src=\"https://i.loli.net/2020/10/09/6aVu9jBoswIgUEY.jpg\" alt=\"Alt\"></p>\n<h2 id=\"4-前置递增运算符与后置递增运算符的运行过程\"><a href=\"#4-前置递增运算符与后置递增运算符的运行过程\" class=\"headerlink\" title=\"4.前置递增运算符与后置递增运算符的运行过程\"></a>4.前置递增运算符与后置递增运算符的运行过程</h2><p>前置递增运算符先将对象递增之后再返回递增后的结果，而后置递增运算符则先创建一个临时变量先将旧的值存储起来，然后再将变量递增，再将旧的值返回。<br>相对于前置递增运算符，后置递增运算符需要创建一个临时变量，这就产生了一个消耗，在一些普通的后置递增运算中可能不大可看得出来，但在较为复杂的迭代器中这种额外的消耗就会产生巨大的性能浪费，所以平时使用时尽量使用前置递增运算符。</p>\n<h2 id=\"5-表达式在运算过程中值发生变化\"><a href=\"#5-表达式在运算过程中值发生变化\" class=\"headerlink\" title=\"5.表达式在运算过程中值发生变化\"></a>5.表达式在运算过程中值发生变化</h2><p><font color=\"red\">在一个运算表达式中，参与运算的值不应该在运算的过程中发生变化，否则极易造成未定义行为，如：</font><br><font color=\"red\"><code>v[i++]&lt;v[i]</code>，在大于号运算的过程中v[i++]的值向后移动了一位，造成了值的变化，由于C++没有定义二元运算符两端未定义自增运算符的运算顺序，所级就造成了未定义行为。</font></p>\n<h2 id=\"6-有符号数的位运算\"><a href=\"#6-有符号数的位运算\" class=\"headerlink\" title=\"6.有符号数的位运算\"></a>6.有符号数的位运算</h2><p>有符号数尽量不要做位运算，因为位运算容易改变有符号数的符号位导致未定义行为。</p>\n<h2 id=\"7-位运算中的类型提升\"><a href=\"#7-位运算中的类型提升\" class=\"headerlink\" title=\"7.位运算中的类型提升\"></a>7.位运算中的类型提升</h2><p>在程序编写时需要注意，任何占字节小于int类型的类型变量进行位运算时都会产生类型提升而被转换成int类型，如下代码所示：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br><span class=\"hljs-keyword\">char</span> s=<span class=\"hljs-string\">&#x27;s&#x27;</span>;<br><span class=\"hljs-keyword\">short</span> a=<span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">bool</span> b=<span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">long</span> c=<span class=\"hljs-number\">2</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-keyword\">sizeof</span>(s)&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-keyword\">sizeof</span>(~s)&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-keyword\">sizeof</span>(s&lt;&lt;<span class=\"hljs-number\">1</span>)&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-string\">&quot;----------&quot;</span>&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-keyword\">sizeof</span>(a)&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-keyword\">sizeof</span>(~a)&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-string\">&quot;----------&quot;</span>&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-keyword\">sizeof</span>(b)&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-keyword\">sizeof</span>(~b)&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-string\">&quot;----------&quot;</span>&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-keyword\">sizeof</span>(c)&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-keyword\">sizeof</span>(~c)&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-string\">&quot;----------&quot;</span>&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;~s&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;~b&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>输出结果：<br><img src=\"https://i.loli.net/2020/10/23/GUI54xhOrQs7oyK.jpg\" alt=\"Alt\"></p>\n<h2 id=\"8-sizeof计算指针大小\"><a href=\"#8-sizeof计算指针大小\" class=\"headerlink\" title=\"8.sizeof计算指针大小\"></a>8.sizeof计算指针大小</h2><p>sizeof在计算指针时有个很有趣的现象，因为sizeof满足右结合律且优先级与<code>*</code>相同，所以在<code>sizeof *p</code>中，先对p解引用，然后在对解引用后的内容计算所占内存大小，由于sizeof并没有使用解引用的内容，所以<code>*p</code>是否为空是否有效对sizeof的计算没有影响。<br><code>sizeof *p</code> == <code>sizeof(*p)</code></p>\n<h2 id=\"9-隐式转换的过程\"><a href=\"#9-隐式转换的过程\" class=\"headerlink\" title=\"9.隐式转换的过程\"></a>9.隐式转换的过程</h2><p>以<code>int a=3.14+3；</code>为例<br>在这个例子中3.14是山比double类型，3是int类型，运算时为了保证精度C++会将int类型转换成double类型，而不是因为结果是int类型而将double类型转换成int类型，所以在表达示右侧的运算过程得到的结果是一个double类型的值，当这个值被赋值给a的时候才进行double到int的类型转换。</p>\n<hr>\n<h1 id=\"五、语句\"><a href=\"#五、语句\" class=\"headerlink\" title=\"五、语句\"></a>五、语句</h1><hr>\n<h2 id=\"1-switch语句跨case标签引用变量\"><a href=\"#1-switch语句跨case标签引用变量\" class=\"headerlink\" title=\"1.switch语句跨case标签引用变量\"></a>1.switch语句跨case标签引用变量</h2><p>若需要在一个 case 语句下定义变量同时在多个 case 语下使用这个变量，则定义变量时不能同时初始化变量，应另起等于初始变量，否则编译器会报跨标签访问错误，如：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">switch</span> (a)<br>&#123;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>        <span class=\"hljs-keyword\">int</span> b;  <span class=\"hljs-comment\">//如果直接int b=1;则会报跨标签访问错误</span><br>        b=<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:<br>        <span class=\"hljs-built_in\">cout</span>&lt;&lt;b&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br>        <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-keyword\">default</span>:<br>        ;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-C-无法捕获计算溢出异常和除0异常\"><a href=\"#2-C-无法捕获计算溢出异常和除0异常\" class=\"headerlink\" title=\"2.C++无法捕获计算溢出异常和除0异常\"></a>2.C++无法捕获计算溢出异常和除0异常</h2><p>C++认为计算溢出和除0异常属于底层事件，应被同样底层的事件去处理，所以C++没有提供计算溢出和除0异常，如果需要捕获这两类异常在Windows系统中应使用Windows提供的SEH模型<code>__try</code>、<code>__except</code>、<code>__finally</code>异常语句，使用方法和try-catch基本类似，与try-catch不同的是，SEH中使用的是<code>__try-__except</code>搭配和<code>__try-__finally</code>搭配。</p>\n<hr>\n<h1 id=\"六、函数\"><a href=\"#六、函数\" class=\"headerlink\" title=\"六、函数\"></a>六、函数</h1><hr>\n<h2 id=\"1-静态局布变量\"><a href=\"#1-静态局布变量\" class=\"headerlink\" title=\"1.静态局布变量\"></a>1.静态局布变量</h2><p>在函数体内使用static关键字可以效静态局布量，静态局布变量的生命周期从变量定义到程序结束，但是静态局布变量只对函数可见，在函数外不可访问。</p>\n<h2 id=\"2-C-程序的编译过程\"><a href=\"#2-C-程序的编译过程\" class=\"headerlink\" title=\"2.C++程序的编译过程\"></a>2.C++程序的编译过程</h2><p><img src=\"https://i.loli.net/2020/11/09/bJ5xRFg6TGHnLCO.jpg\" alt=\"Alt\"></p>\n<h2 id=\"3-函数调用过程中的形参创建\"><a href=\"#3-函数调用过程中的形参创建\" class=\"headerlink\" title=\"3.函数调用过程中的形参创建\"></a>3.函数调用过程中的形参创建</h2><p>函数的每一次调用都会重新创建形参并传入实参对其进行初始化，形餐盘类型决定了形参与实参的交互类型，如果形参是引用类型，则形参与相对应的实参相绑定，作为实参的别名使用；如果形参是值类型，则实参的值拷贝给形参，形参与实参相互独立。</p>\n<h2 id=\"4-函数的指针参数传递\"><a href=\"#4-函数的指针参数传递\" class=\"headerlink\" title=\"4.函数的指针参数传递\"></a>4.函数的指针参数传递</h2><p><font color=\"red\">当指针作为实参传递给函数形参时，传递的是指针的值拷贝而不是指针所指的对象，且形参指针与实参指针是两个不同的指针，此时形参指针与实参指针指向同一对象，修改形参的指针指向不会影实参指针。</font></p>\n<h2 id=\"5-引用形参的限制\"><a href=\"#5-引用形参的限制\" class=\"headerlink\" title=\"5.引用形参的限制\"></a>5.引用形参的限制</h2><ul>\n<li><p>如果将函数的参数定义普通引用参数，那么这个形参就无法接受const对象、字面值和需要类型转换的对象作为实参。</p>\n</li>\n<li><p>如果将函数的参数定义为const引用参数，这个参数可以接受第一条中的参数，但是却无法修改参数的值。</p>\n</li>\n</ul>\n<h2 id=\"6-数组的两个特殊性质\"><a href=\"#6-数组的两个特殊性质\" class=\"headerlink\" title=\"6.数组的两个特殊性质\"></a>6.数组的两个特殊性质</h2><ul>\n<li>数组不可被拷贝</li>\n<li>数组再使用时被转换为指针</li>\n</ul>\n<h2 id=\"7-数组引用形参\"><a href=\"#7-数组引用形参\" class=\"headerlink\" title=\"7.数组引用形参\"></a>7.数组引用形参</h2><p>当我们使用数组作普通形参时，</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\">void <span class=\"hljs-function\"><span class=\"hljs-title\">fun</span><span class=\"hljs-params\">(int* arr)</span></span>;<br>void <span class=\"hljs-function\"><span class=\"hljs-title\">fun</span><span class=\"hljs-params\">(int arr[])</span></span>;<br>void <span class=\"hljs-function\"><span class=\"hljs-title\">fun</span><span class=\"hljs-params\">(int arr[<span class=\"hljs-number\">10</span>])</span></span>;<br></code></pre></td></tr></table></figure>\n<p>表示的都是同一个函数，且形参可接受任意长度的实参数组，但是当将普通形参改为引用形参时，</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\">void <span class=\"hljs-function\"><span class=\"hljs-title\">fun</span><span class=\"hljs-params\">(int (&amp;arr)</span></span>[<span class=\"hljs-number\">10</span>]);<br></code></pre></td></tr></table></figure>\n<p><code>(&amp;arr)</code>中()不可缺少，否则形参变成引用的数组而非数组的引用，且形参只能接收长度为10的数组。</p>\n<h2 id=\"8-main函数传参\"><a href=\"#8-main函数传参\" class=\"headerlink\" title=\"8.main函数传参\"></a>8.main函数传参</h2><p>有的时候我们会遇到这样的main函数：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc,<span class=\"hljs-keyword\">char</span>** argv)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>通常情况下，直接使用argv，argv中的内容是空的，那么main函数在什么情况下会接收参数呢？<br>事实上main函数本身就是当前程序的入口，在当前程序中没有其他程序为main函数传入参数了，当我们把写好的程序打包后在外部调用时就可以给main函数传入参数了，如在CMD中调程序</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">prog -o -d ofile data0<span class=\"hljs-regexp\">//</span>prog为程序名<br></code></pre></td></tr></table></figure>\n<p><font color=\"red\">需要注意的是argv数组的0号索引存储程序的名字，参数从1号索引开始存储，且最后一个索引位置固定内容为0</font></p>"},{"title":"【Dev】DevExpress应用","password":null,"abstract":null,"message":null,"date":"2021-02-03T02:33:53.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n## 一、大纲\n\n最近使用DevExpress做C/S开发碰到了一些问题，在解决问题的同时在这里做一下记录，下面列出涉及到技术点\n\n- **Dev框架下GridControl与GridView**\n- **使用模板列动态替换GridView的指定列**\n- **GridView分组并去掉列名的前缀**\n- **FPT服务器文件预览与下载**\n- **单元格添加按钮并添加自定义点击事件**\n- **GridView数据导出到Excel**\n- **向Word模板中写数据**\n\n<!--more-->\n\n## 二、Dev框架下的GridControl和GridView\n\n![](https://Goulandis.PicGo.com/img/Image_20201222193848.png)\n\n### 1.GridControl和GridView的关系\n\nDev框架下GridControl负责操作数据，GridView负责展示数据，GridControl是GridView的容器，一个GridControl可以容纳多个GridView，在GridView中的任何数据操作都不会影响到GridControl中的源数据，即当我们将GridControl中数据重新刷入GridView时，GridView中数据操作会被清除，所以如果我们有要在本地展示的数据则需要在GridControl刷数据进入GridView的时候重新再刷入一次本地数据。\n\n### 2.GridControl输入数据到GridView的原理\n\nGridControl的数据刷入GridView的操作由Dev框架执行，我们需要做的只是把数据绑定到GridControl.DataSource中即可。\n\n只有当GridView中存在与GridControl数据源对应列时，GridControl才能将对应列的数据刷入GridView的对应列中，这里的对应列指的是GridView中列的`FiledName`的值与GridControl数据源的列名相同，且大小写敏感。\n\n在GridView的列属性中有三个极为重要的属性：\n\n![](https://raw.githubusercontent.com/Goulandis/ImgLib/main/Snipaste_2020-12-17_19-20-19.png)\n\n![image-20210203152634176](https://raw.githubusercontent.com/Goulandis/ImgLib/main/image-20210203152634176.png)\n\n- Name：列在程序中操作的标识符，类似变量名，对列的操作都由它来引用，如：修改colfilename列的列宽\n\n  ```c#\n  colfilename.Width = 300;\n  ```\n\n- ColumnEdit：用于挂载模板列的属性，可以将列动态的替换为其他类型的控件，例子中是将列挂载了一个多行编辑框，这样就可以在单元格中显示多行内容\n\n  ![](【Dev】DevExpress应用\\Snipaste_2020-12-17_19-29-45.png)\n\n- FieldName：FieldName属性是列与GridControl数据源对应的标志，如果想要将GridControl数据源中某一列的数据刷入当前列，那么当前列的FieldName的取值必须和数据源中对应列的列名一致，并且FielName也是用来获取表格数据的标识，如：\n\n  ```C#\n  gridView_FileViewer.GetFocusedDataRow()[\"path\"]//取所选行的path列单元格的数据\n  ```\n\n  \n\n### 3.向GridView存在而GridControl中不存在的列刷入数据\n\n有的时候为了展示需要，我们需要在GridView中增加新列刷入自己的数据，而新增列在GridControl的数据源中没有与之对应的列，即在数据源中没有对应的字段（这里的数据源通常情况下指的就是数据库中的表），此时我们就需要在GridControl.Datasource中动态地添加一列来与新增列对应。\n\n为什么要要在GridControl.Datasource中动态地添加一列呢？\n\n这可能是由GridControl和GridView的内部机制影响的，当一列在GridView中存在而GridControl中不存在时，我们是无法向此列写入数据的，即使数据是来自本地而不是数据库，并且编译器会报错：\n\n![](【Dev】DevExpress应用\\Snipaste_2020-12-17_19-49-11.png)\n\n如果我们要向GridView存在而GridControl中不存在的列刷入数据，那么我们必须在GridControl的DataSource中动态的加列，下面是示例代码：\n\n```c#\nprivate void LoadFileNameColumn(object sender, EventArgs args)\n{\n\tGridColumn col = gridView_JobPlacement.Columns[\"xgwj\"];//取表格xgwj列的索引\n\n\t/*代码块说明：\n\t*   作用：向gridview的datasource动态添加filename列，使GridView中的filename列与DataSource中的filename字段对应\n\t*   说明：因为在GridView中添加了filename列如果在GridView的DataSource中没有与之对应的字段，\n\t*       则无法对filename列做任何操作\n\t*/\n\tDataTable gridViewTable = gridControl_JobPlacement.DataSource as DataTable;//取DataSource的引用并转换成DataTable\n\tif (!gridViewTable.Columns.Contains(\"filename\"))//判断DataSource中是否已存在filename列\n\t{\n\t\tDataColumn dsFileNameCol = new DataColumn();//创建新列\n\t\tdsFileNameCol.ColumnName = \"filename\";//将新列命名为filename\n         gridViewTable.Columns.Add(dsFileNameCol);//将新列添加到DataSource中\n\t}//至此，DataSource中就存在与GridView中的filename列对应的filename列了\n\n\t//遍历GridView所有行，对有文件组编码的行在filename列载入文件列表信息\n\t for (int rowIndex = 0; rowIndex < gridView_JobPlacement.RowCount; rowIndex++)\n\t{     \n\t\t DataRow row = gridView_JobPlacement.GetDataRow(rowIndex);//根据索引数据行\n\t\tif (row[\"xgwj\"].ToString() != \"\")//如果数据行中的xgwj列单元格不为空，则向单元格刷入指定数据\n\t\t{\n\t\t\tstring fileGroupTmp = gridView_JobPlacement.GetRowCellDisplayText(rowIndex, col);//取指定单元格显示的内容\n\t\t\tstring fileGroup = CodingTool.GetFileGroup(fileGroupTmp);//将单元格存储的文件组编码转换成数据库可用的编码\n\t\t\tDataTable table = bll.SelectFromFileTableByFileGroup(fileGroup);//根据编码到数据库查询文件列表\n\t\t\tforeach(DataRow tableRow in table.Rows)//遍历文件列表将文件名刷入新增列\n\t\t\t{\n\t\t\t\trow[\"filename\"] += tableRow[\"filename\"]+\"\\n\";//将数据刷入filename列单元格\n\t\t\t}\n         }\n     }\n}\n```\n\n## 三、使用模板列动态替换GridView中的指定列\n\n有的时候为了保密需要，在数据库中部分字段会用编码标识，如：人名使用编码标识，张三对应编码001，但是在表格中展示的时候应该显示人名而不是编码，此时我们就需要用到模板列的动态替换。\n\n直接上代码：\n\n```c#\nSecurity.BLL.userinfo ubll = new Security.BLL.userinfo();\n\nRepositoryItemGridLookUpEdit replaceRegistrant = new RepositoryItemGridLookUpEdit();\nreplaceRegistrant.DataSource = ubll.GetAllList().Tables[0];//绑定数据源到RepositoryItemGridLookUpEdit\nreplaceRegistrant.DisplayMember = \"fullname\";  //选择要替换显示的字段\nreplaceRegistrant.ValueMember = \"ID\";  //\nreplaceRegistrant.NullText = \"\";//字段为空时要显示的内容\ngridView_JobPlacement.Columns[\"djr\"].ColumnEdit = replaceRegistrant;//将RepositoryItemGridLookUpEdit绑定到GridView的“djr”列\n\nRepositoryItemGridLookUpEdit replacePricipal = new RepositoryItemGridLookUpEdit();\nreplacePricipal.DataSource = ubll.GetAllList().Tables[0];//绑定数据源到RepositoryItemGridLookUpEdit\nreplacePricipal.DisplayMember = \"fullname\";  //选择要替换显示的字段\nreplacePricipal.ValueMember = \"ID\";  //\nreplacePricipal.NullText = \"\";//字段为空时要显示的内容\ngridView_JobPlacement.Columns[\"fzr\"].ColumnEdit = replacePricipal;//将RepositoryItemGridLookUpEdit绑定到GridView的“djr”列\n```\n\n这是通过代码添加动态的添加模板列，同时我们也可以在列属性中的ColumnEdit属性中静态的添加模板列。\n\n## 四、GridView分组并去掉列名的前缀\n\n### 1.分组\n\nGridView分组只需要在需要分组的列的属性中将GroupIndex属性值由“-1”改为0即可，如果需要二级分组则在需要分组的列的属性中将GroupIndex属性值由“-1”改为1，以此类推需要三级分组则改为2。\n\n![](【Dev】DevExpress应用\\Snipaste_2021-01-07_20-38-53.png)\n\n### 2.去掉列名前缀\n\n分完组后如果不做修改我们加载数据之后表格是这样的：\n\n![](【Dev】DevExpress应用\\Snipaste_2021-01-07_20-43-04.png)\n\n有时我们不需要显示列名前缀，这时我们需要修改GridView的GroupFormat属性修改为{1}，GroupFormat属性的默认值是`{0}: [#image]{1} {2}`，其中\n\n- {0}显示列标题\n- [#image]显示图片\n- {1}显示列的内容值\n- {2}显示列的摘要\n\n![](【Dev】DevExpress应用\\Snipaste_2021-01-07_20-45-55.png)\n\n设置好之后，效果是这样的:\n\n![](【Dev】DevExpress应用\\Snipaste_2021-01-07_20-45-28.png)\n\n## 四、FTP文件预览与下载\n\n直接上代码，解释都放注释上了：\n\n```c#\nprivate void PreviewFile(object sender,EventArgs e)\n{\n    if (fileDic == null)\n    {\n        return;\n    }\n    //自定义函数，获取文件在服务器中的路径\n    string serverPath = ServerFTP.CreateFilePathInServerBySQLPath(gridView_FileViewer.GetFocusedDataRow()[\"path\"].ToString());\n    //获取文件名\n    string fileName = gridView_FileViewer.GetFocusedDataRow()[\"file\"].ToString();\n    //根据路径将文件下载到本地，并返回文件路径\n    string savePath = ServerFTP.currentMode.RequestFile(serverPath,fileName,GeneralLib.FTPDownloadStyle.CACHE);\n    if (savePath != \"\")\n    {\n        //调用系统软件打开文件\n        FileIO.OpenFileInWindows(savePath);\n    }  \n}\n```\n\n这里挑几个比较重要的函数讲解\n\n**RequestFile**\n\n```c#\npublic string RequestFile(string serverPath,string fileName, FTPDownloadStyle style)\n{\n    string savePath = \"\";\n    switch (style)\n    {\n        //下载文件到缓存临时文件夹，用于预览\n        case FTPDownloadStyle.CACHE:\n            savePath = Path.Combine(ServerFTP.cachePath, fileName);\n            break;\n        //下载文件到所选的文件夹，用于下载\n        case FTPDownloadStyle.CHOOSEDIC:\n            savePath = FileIO.ChooseSaveFile(fileName, \"\", ServerFTP.chooseTempDic);       \n            //保存所选的文件夹，以便下次打开直接进入相应目录\n            ServerFTP.chooseTempDic = Path.GetDirectoryName(savePath);\n            break;\n    }\n    if (savePath == null)\n    {\n        return \"\";\n    }\n\n    //判断目录是否存在\n    if (!Directory.Exists(Path.GetDirectoryName(savePath)))\n    {\n        //如果不存在则创建目录\n        Directory.CreateDirectory(Path.GetDirectoryName(savePath));\n    }\n\n\t//根据文件路径创建FPT连接实例\n    FtpWebRequest ftp = (FtpWebRequest)WebRequest.Create(serverPath);\n    //从配置文件中读取登录项\n    ICredentials credentials = new NetworkCredential(Config.Get[\"ftp_username\"], Config.Get[\"ftp_password\"]);\n    //配置FPT服务器登录项\n    ftp.Credentials = credentials；\n    //配置FPT操作为下载文件\n    ftp.Method = WebRequestMethods.Ftp.DownloadFile;\n\t//向FPT服务器发出操作请求\n    FtpWebResponse response = (FtpWebResponse)ftp.GetResponse();\n    //创建流缓冲区接收FPT服务器反馈的字节流\n    Stream responseStream = response.GetResponseStream();\n    //根据存储路径在本地创建文件\n    FileStream fs = File.Create(savePath);\n    //创建用于批量取缓冲区字节数据的数据\n    byte[] buffer = new byte[ConstLib.BUFFER_SIZE];\n    int read = 0;\n    do\n    {\n        //将缓冲区的字节数据读入字节数组\n        read = responseStream.Read(buffer, 0, buffer.Length);\n        //将字节数组的数据写入到文件中\n        fs.Write(buffer, 0, read);\n        //清楚fs的流缓冲区，这里fs的流缓冲区与responseStream流缓冲区不是同一个缓冲区，需要注意\n        fs.Flush();\n    }\n    while (read != 0)；\n        \n    fs.Flush();\n    //关闭文件\n    fs.Close();\n    \n    return savePath;\n}\n```\n\n**OpenFileInWindows**\n\n```C#\npublic static Process OpenFileInWindows(string filePath)\n{\n    //创建一个新的进程\n    ProcessStartInfo info = new ProcessStartInfo();\n    //设置进程要打开的文档，Windows会根据文件类型的默认开打应用来启动对应应用程序来打开文件\n    info.FileName = Path.GetFileName(filePath);\n    //设置启动进程的初始目录\n    info.WorkingDirectory = Path.GetDirectoryName(filePath);\n    //设置进程启动后，窗口的状态，可以设置为最大化，最小化和正常\n    info.WindowStyle = ProcessWindowStyle.Normal;\n    //启动进程\n    Process proc = Process.Start(info);\n\n    return proc;\n}\n```\n\n当关闭文件时清楚临时文件夹的内容\n\n```c#\npublic static void CleanCacheDirectory()\n{\n    //判断临时文件夹是否存在\n    if (!Directory.Exists(ServerFTP.cachePath))\n    {\n        return;\n    }\n    try\n    {\n        //等待系统将占用文件的进程杀死再清空临时文件夹\n        System.Threading.Thread.Sleep(500);\n        //获取临时文件夹目录信息\n        DirectoryInfo dicInfo = new DirectoryInfo(ServerFTP.cachePath);\n        //直接删除临时文件夹\n        dicInfo.Delete(true);\n    }\n    catch\n    {\n        //如果目录被其他进程占用，则暂时不清空临时文件夹\n        return;\n    }\n}\n```\n\n这里我使用的是最简单的直接删除临时文件夹的暴力删除法，这样做会有一个问题就是，在程序删除文件夹的时候，可能预览文件的进程还没有被系统杀死或有其他的进程占用了目录中文件，这都会导致目录删除失败而抛出异常，我的解决方案是在删除目录之前等待500ms，等待系统将预览文件的进程杀死后在删除文件夹，但是如果是其他的进程占用了目录，则需要手动结束进程才能继续删除临时文件夹，我的解决方案是，如果有其他进程占用了目录，则本次本次临时缓冲区先不删除，等下次有机会再删除。所以这里的try-catch不是用来抛出异常的，而是用来推出函数的。\n\n当然比较理想的删除方法是遍历整个目录中文件和子文件夹，依次删除目录下文件和子文件夹，有被其他进程占用的文件暂时不删除。这样就可以只留下被占用的文件，而不是整个目录。\n\n## 五、单元格添加按钮并添加自定义点击事件\n\n有时我们需要向某一列的单元格添加点击事件，甚至向某一个单元格添加点击事件，这时我们就需要向单元格添加按钮了。\n\n### 1.向单元格添加简单的点击事件\n\n如果我们只想在某一单元格添加简单的点击事件\n\n```C#\nprivate void gridView_JobPlacement_RowCellClick(object sender, RowCellClickEventArgs e)\n{\n    if (e.RowHandle == 1 && e.Column.FieldName == \"filename\")\n    {\n        if (e.Button == MouseButtons.Left)\n        {\n            //todo\n        }\n        if (e.Button == MouseButtons.Right)\n        {\n\t\t\t//todo\n        }\n        if(e.Button == MouseButtons.Moddle)\n        {\n            //todo\n        }\n    }\n}\n```\n\n这时我们需要用到RowCellClick事件，RowCellClick事件在鼠标点击单元格时触发，然后我们只需要判定鼠标点击是哪一行哪一列，就可以实现某一个单元格的点击事件了。当然我们也可以通过添加按钮来实现。\n\n### 2.向单元格添加复杂点击事件\n\n如果我们想向单元格添加一系列复杂的点击事件，如在某一单元格内做文件的上传，预览，下载，删除等操作，这时我们就需要借助模板列了，使用模板列是无法只向某一个单元添加点击事件的，因为模板列挂载的是一整列。\n\n我需要用到模板列`RepositoryItemButtonEdit`，我可以在列属性里静态挂载，也可以在代码中动态挂载，重要的是我们需要用到`RepositoryItemButtonEdit`属性里的`Buttons`属性，向Buttons属性里添加元素。\n\n![](【Dev】DevExpress应用\\Snipaste_2020-12-18_09-11-36.png)\n\n光是添加按钮单元中还是看不到按钮的，我们还需要将每个按钮的Kind属性设置为Glyph，这样我们才能在单元格中看到按钮\n\n![](【Dev】DevExpress应用\\Snipaste_2020-12-18_09-13-12.png)\n\n添加完按钮就可以向对应按钮添加点击事件了，我们可以发现在列属性里找不到事件，所以我们需要在代码中为按钮添加点击事件，这时我们需要用到`repositoryItemButtonEdit.Buttons[0].Click`，其中repositoryItemButtonEdit是模板列的名字，Buttons[0]是第一个按钮的引用，我们只需要向Click事件添加我们想要执行的函数即可。\n\n## 六、GridView数据导出到Excel\n\n GridView的数据要导出到Excel有很多种方法，可以最直接的就是遍历GridView，然后将数据写入Excel，这算是比较麻烦的做法了，事实上Dev已经提供了一些便捷的方法。\n\n### 1.GetAllFilteredAndSortedRows()方法\n\nDev提供了一个`GridView.DataController.GetAllFilteredAndSortedRows()`方法，可以用于提取GridView当前数据，在筛选排序等操作之后更改了的数据也可以提取。\n\n<font color=red> 但是，GridView类中的DataController对象在VS中被隐藏了，即通过提示器是找不到GDataController对象的的，只能通过手写调用。</font>\n\n![](【Dev】DevExpress应用\\Snipaste_2020-12-22_19-13-20.png)\n\nGetAllFilteredAndSortedRows()方法返回的是一个IList泛型列表，数据写入Excel一就要自己手动写入，写入方法：\n\n```C#\n//需要包含的引用\nusing DevExpress.XtraSpreadsheet;\nusing DevExpress.Spreadsheet;\n\nSpreadsheetControl ss = new SpreadsheetControl();\nvar book = ss.Document;\nWorksheet sheet = book.Worksheets[0];\nsheet.Import(table, true, 0, 0);//table是DataTable类型，也是要导出到Excel的数据\n```\n\n<font color=red> 其中有一点需要格外注意，在使用Import函数时需要引用`DevExpress.Docs`程序集，因为Import函数在这个程序集里，Dev在DevExpress.Docs程序集里给Worksheet的父类ExternalWorksheet写了扩展，也就是扩展了Import函数等，其中DevExpress.Docs程序集和DevExpress.Spreadsheet程序集的命名空间是一样的，如果没有搞清楚这一点很容易产生玄学问题🥴</font>\n\n### 2.GridView.Export()方法\n\n最简单的方法就是使用Dev官方提供的导出方法GridView.Export().\n\nDev已经在GridView中添加了官方的Export方法，支持多种导出格式：\n\n- Xls\n- Xlsx\n- Html\n- Mht\n- Pdf\n- Text\n- Rtf\n- Csv\n- Image\n- Docx\n\n同时提供三种重载：\n\n![](【Dev】DevExpress应用\\Image_20201222193848.png)\n\n使用方法也很简单：\n\n```C#\n/// <summary>\n/// 将GridView中的数据导出到Excel\n/// </summary>\n/// <param name=\"fileName\"></param>\n/// <param name=\"view\"></param>\npublic static void ExportExcel(string fileName, GridView view)\n{\n    SaveFileDialog sfd = new SaveFileDialog();\n    sfd.Title = \"另存为\";\n    sfd.InitialDirectory = \"C:\\\\\";\n    sfd.Filter = \"Excel文件(*.xlsx) | *.xlsx\";\n    sfd.FileName = fileName;//fileName文件名不需要包含后缀\n    if (sfd.ShowDialog() == DialogResult.OK)\n    {\n        view.Export(DevExpress.XtraPrinting.ExportTarget.Xlsx, sfd.FileName);\n    }\n}\n```\n\n- view.Export是dev自带的导出方法，在导出文件后dev会自动调用系统对此文件的默认打开应用来打开文件，当然dev也提供内置的预览方法，这在下一节导出word模板中使用。\n\n## 七、向Word模板中写入数据\n\n### 1.载入word模板文件\n\n向word模板中写入数据我这里主要使用的是<font color=red>RichEditControl</font>类，RichEditControl类提供海量的富文本API接口，这里主要讲解使用到的API。\n\n首先打开word文档，RichEditControl类提供RichEditControl.LoadDocument(string path)方法加载文档，RichEditControl类也提供多个LoadDocument函数的重载给予各种文件的加载形式，我这里使用的是直接通过文件路径加载文档。LoadDocument函数支持DOC、DOCX、RTP、HTM、HTML、MHT、XML和EPUB类型的文档，可以自动检测文档类型。\n\n```C#\nRichEditControl.LoadDocument(string path)\n```\n\n将文档载入内存之后就可以通过<font color=red>RichEditControl.Document.Text</font>属性查看文档内容了，也可以通过RichEditControl.Document.Text属性判断文档是否加载成功。\n\n```C#\nif(richEditControl.Document.Text == null)\n{\n\treturn;\n}\n```\n\n### 2.向word模板的指定位置写入数据\n\n向word模板的指定位置写入数据主要使用Word的书签和域，我这里使用的是书签，在word中想要插入数据的地方添加一个书签即可，如：\n\n![](【Dev】DevExpress应用\\Snipaste_2021-01-06_21-26-31.png)\n\n我想要在生产号、型号和图号后面的单元格写入数据，那么我只需要在这些单元中添加书签即可，添加书签的步骤：\n\n```mermaid\ngraph LR;\n将光标定位到要添加的书签的位置-->插入-->书签-->添加一个书签名-->添加\n```\n\n添加完书签时候在word上是看不到的，但是把光标定位到书签所在的位置处，插入书签时会自定定位到所插入的书签名。\n\n然后即可通过<font color=red> Document.Replace(DocumentRange range,string text)</font>函数来向书签所在位置插入数据了，其中DocumentRange类型的参数需要通过<font color=red>Document.Bookmarks[string bookmarks].Range</font>来将字符串类型的书签标志转换为DocumentRange类型的可用书签标志。\n\n如：我要在生产号、型号和图号后面的单元格写入数据，那么我需要分别在这些单元格中插入书签`sch`、`xh`、`th`，然后通过下面代码即可向word模板中写入数据\n\n```C#\nRichEditControl richEdit = new RichEditControl();\nrichEdit.LoadDocument(\"C:/a.doc\");\nDocument doc = rich.Document;\ndoc.Replace(doc.Bookmarks[\"sch\"].Range,\"01\");\ndoc.Replace(doc.Bookmarks[\"xh\"].Range,\"02\");\ndoc.Replace(doc.Bookmarks[\"th\"].Range,\"03\");\n```\n\n原理就是书签提供了一个占位符，而dev则通过搜索匹配的占位符，将指定数据替换掉占位符。\n\n### 3.向word模板中的表格插入新行并写入内容\n\n向word模板中的表格插入新行则稍微复杂一些。主要步骤如下：\n\n- 首先word文档中要有一个模板表格\n\n- 需要在要插入表的位置添加书签table\n\n- 遍历word文档中所有的表再遍历每一个表中所有的单元格，查找到书签所在的单元格\n\n  ```c#\n  public TableCell GetTableCell(Document document) \n  {\n      //遍历文档中所有的表\n      foreach (Table table in document.Tables)\n      {\n          int row = 0, col = 0;\n          bool ok = false;\n          TableCell retCell = null;\n  \t\t//遍历表格中所有的单元格\n          table.ForEachCell((cell, rowIndex, columnIndex) =>\n                            {\n                                if (cell.Range.Contains(document.Bookmarks[\"table\"].Range.Start))\n                                {\n                                    row = rowIndex;\n                                    col = columnIndex;\n                                    retCell = cell;\n                                    ok = true;\n                                }\n                            });\n          if (ok)\n          {\n              return retCell;\n          }\n      }\n  ```\n\n  <font color=red>Table.ForEachCell(TableCellProcessorDelegate cellProcessor)</font>函数传入的是一个委托。这里使用的是匿名方法\n\n- 在指定单元格后新增行\n\n  可以使用<font color=red>Document.Tables[int index].Rows.Append()</font>函数在表的最后追加行，或使用<font color=red> Document.Tables[int index].Rows.InsertAfter(int rowIndex)</font>函数在指定行之后插入行。其中Document.Tables[int index].Rows.Append()中index（表的索引）可以通过<font color=red> Document.Tables.IndexOf(Table table)</font>函数获取，而table又可以同通过上一步查找到的TableCell对象retCell.Table属性获取。\n\n  ```c#\n  RichEditControl richEdit = new RichEditControl();\n  richEdit.LoadDocument(\"C:/a.doc\");\n  Document doc = rich.Document;\n  TableCell cell = GetTableCell(doc);\n  doc.BeginUpdate();\n  int index = doc.Tables.IndexOf(cell.Table);\n  doc.Tables[index].Rows.Append();//或者\n  //doc.Table[index].Rows.InsertAfter(cell.Row.Index - 1);\n  //获取指定单元格的占位符范围\n  DocumentRange range = doc.Tables[index].Rows[cell.Row.Index].Cells[cell.Index].ContentRange;\n  doc.Replace()\n  doc.EndUpdate();\n  ```\n\n  ","source":"_posts/【Dev】DevExpress应用.md","raw":"---\ntitle: 【Dev】DevExpress应用\npassword: \nabstract: \nmessage: \ndate: 2021-02-03 10:33:53\ntags: Dev\ncategories: 知识记录\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n## 一、大纲\n\n最近使用DevExpress做C/S开发碰到了一些问题，在解决问题的同时在这里做一下记录，下面列出涉及到技术点\n\n- **Dev框架下GridControl与GridView**\n- **使用模板列动态替换GridView的指定列**\n- **GridView分组并去掉列名的前缀**\n- **FPT服务器文件预览与下载**\n- **单元格添加按钮并添加自定义点击事件**\n- **GridView数据导出到Excel**\n- **向Word模板中写数据**\n\n<!--more-->\n\n## 二、Dev框架下的GridControl和GridView\n\n![](https://Goulandis.PicGo.com/img/Image_20201222193848.png)\n\n### 1.GridControl和GridView的关系\n\nDev框架下GridControl负责操作数据，GridView负责展示数据，GridControl是GridView的容器，一个GridControl可以容纳多个GridView，在GridView中的任何数据操作都不会影响到GridControl中的源数据，即当我们将GridControl中数据重新刷入GridView时，GridView中数据操作会被清除，所以如果我们有要在本地展示的数据则需要在GridControl刷数据进入GridView的时候重新再刷入一次本地数据。\n\n### 2.GridControl输入数据到GridView的原理\n\nGridControl的数据刷入GridView的操作由Dev框架执行，我们需要做的只是把数据绑定到GridControl.DataSource中即可。\n\n只有当GridView中存在与GridControl数据源对应列时，GridControl才能将对应列的数据刷入GridView的对应列中，这里的对应列指的是GridView中列的`FiledName`的值与GridControl数据源的列名相同，且大小写敏感。\n\n在GridView的列属性中有三个极为重要的属性：\n\n![](https://raw.githubusercontent.com/Goulandis/ImgLib/main/Snipaste_2020-12-17_19-20-19.png)\n\n![image-20210203152634176](https://raw.githubusercontent.com/Goulandis/ImgLib/main/image-20210203152634176.png)\n\n- Name：列在程序中操作的标识符，类似变量名，对列的操作都由它来引用，如：修改colfilename列的列宽\n\n  ```c#\n  colfilename.Width = 300;\n  ```\n\n- ColumnEdit：用于挂载模板列的属性，可以将列动态的替换为其他类型的控件，例子中是将列挂载了一个多行编辑框，这样就可以在单元格中显示多行内容\n\n  ![](【Dev】DevExpress应用\\Snipaste_2020-12-17_19-29-45.png)\n\n- FieldName：FieldName属性是列与GridControl数据源对应的标志，如果想要将GridControl数据源中某一列的数据刷入当前列，那么当前列的FieldName的取值必须和数据源中对应列的列名一致，并且FielName也是用来获取表格数据的标识，如：\n\n  ```C#\n  gridView_FileViewer.GetFocusedDataRow()[\"path\"]//取所选行的path列单元格的数据\n  ```\n\n  \n\n### 3.向GridView存在而GridControl中不存在的列刷入数据\n\n有的时候为了展示需要，我们需要在GridView中增加新列刷入自己的数据，而新增列在GridControl的数据源中没有与之对应的列，即在数据源中没有对应的字段（这里的数据源通常情况下指的就是数据库中的表），此时我们就需要在GridControl.Datasource中动态地添加一列来与新增列对应。\n\n为什么要要在GridControl.Datasource中动态地添加一列呢？\n\n这可能是由GridControl和GridView的内部机制影响的，当一列在GridView中存在而GridControl中不存在时，我们是无法向此列写入数据的，即使数据是来自本地而不是数据库，并且编译器会报错：\n\n![](【Dev】DevExpress应用\\Snipaste_2020-12-17_19-49-11.png)\n\n如果我们要向GridView存在而GridControl中不存在的列刷入数据，那么我们必须在GridControl的DataSource中动态的加列，下面是示例代码：\n\n```c#\nprivate void LoadFileNameColumn(object sender, EventArgs args)\n{\n\tGridColumn col = gridView_JobPlacement.Columns[\"xgwj\"];//取表格xgwj列的索引\n\n\t/*代码块说明：\n\t*   作用：向gridview的datasource动态添加filename列，使GridView中的filename列与DataSource中的filename字段对应\n\t*   说明：因为在GridView中添加了filename列如果在GridView的DataSource中没有与之对应的字段，\n\t*       则无法对filename列做任何操作\n\t*/\n\tDataTable gridViewTable = gridControl_JobPlacement.DataSource as DataTable;//取DataSource的引用并转换成DataTable\n\tif (!gridViewTable.Columns.Contains(\"filename\"))//判断DataSource中是否已存在filename列\n\t{\n\t\tDataColumn dsFileNameCol = new DataColumn();//创建新列\n\t\tdsFileNameCol.ColumnName = \"filename\";//将新列命名为filename\n         gridViewTable.Columns.Add(dsFileNameCol);//将新列添加到DataSource中\n\t}//至此，DataSource中就存在与GridView中的filename列对应的filename列了\n\n\t//遍历GridView所有行，对有文件组编码的行在filename列载入文件列表信息\n\t for (int rowIndex = 0; rowIndex < gridView_JobPlacement.RowCount; rowIndex++)\n\t{     \n\t\t DataRow row = gridView_JobPlacement.GetDataRow(rowIndex);//根据索引数据行\n\t\tif (row[\"xgwj\"].ToString() != \"\")//如果数据行中的xgwj列单元格不为空，则向单元格刷入指定数据\n\t\t{\n\t\t\tstring fileGroupTmp = gridView_JobPlacement.GetRowCellDisplayText(rowIndex, col);//取指定单元格显示的内容\n\t\t\tstring fileGroup = CodingTool.GetFileGroup(fileGroupTmp);//将单元格存储的文件组编码转换成数据库可用的编码\n\t\t\tDataTable table = bll.SelectFromFileTableByFileGroup(fileGroup);//根据编码到数据库查询文件列表\n\t\t\tforeach(DataRow tableRow in table.Rows)//遍历文件列表将文件名刷入新增列\n\t\t\t{\n\t\t\t\trow[\"filename\"] += tableRow[\"filename\"]+\"\\n\";//将数据刷入filename列单元格\n\t\t\t}\n         }\n     }\n}\n```\n\n## 三、使用模板列动态替换GridView中的指定列\n\n有的时候为了保密需要，在数据库中部分字段会用编码标识，如：人名使用编码标识，张三对应编码001，但是在表格中展示的时候应该显示人名而不是编码，此时我们就需要用到模板列的动态替换。\n\n直接上代码：\n\n```c#\nSecurity.BLL.userinfo ubll = new Security.BLL.userinfo();\n\nRepositoryItemGridLookUpEdit replaceRegistrant = new RepositoryItemGridLookUpEdit();\nreplaceRegistrant.DataSource = ubll.GetAllList().Tables[0];//绑定数据源到RepositoryItemGridLookUpEdit\nreplaceRegistrant.DisplayMember = \"fullname\";  //选择要替换显示的字段\nreplaceRegistrant.ValueMember = \"ID\";  //\nreplaceRegistrant.NullText = \"\";//字段为空时要显示的内容\ngridView_JobPlacement.Columns[\"djr\"].ColumnEdit = replaceRegistrant;//将RepositoryItemGridLookUpEdit绑定到GridView的“djr”列\n\nRepositoryItemGridLookUpEdit replacePricipal = new RepositoryItemGridLookUpEdit();\nreplacePricipal.DataSource = ubll.GetAllList().Tables[0];//绑定数据源到RepositoryItemGridLookUpEdit\nreplacePricipal.DisplayMember = \"fullname\";  //选择要替换显示的字段\nreplacePricipal.ValueMember = \"ID\";  //\nreplacePricipal.NullText = \"\";//字段为空时要显示的内容\ngridView_JobPlacement.Columns[\"fzr\"].ColumnEdit = replacePricipal;//将RepositoryItemGridLookUpEdit绑定到GridView的“djr”列\n```\n\n这是通过代码添加动态的添加模板列，同时我们也可以在列属性中的ColumnEdit属性中静态的添加模板列。\n\n## 四、GridView分组并去掉列名的前缀\n\n### 1.分组\n\nGridView分组只需要在需要分组的列的属性中将GroupIndex属性值由“-1”改为0即可，如果需要二级分组则在需要分组的列的属性中将GroupIndex属性值由“-1”改为1，以此类推需要三级分组则改为2。\n\n![](【Dev】DevExpress应用\\Snipaste_2021-01-07_20-38-53.png)\n\n### 2.去掉列名前缀\n\n分完组后如果不做修改我们加载数据之后表格是这样的：\n\n![](【Dev】DevExpress应用\\Snipaste_2021-01-07_20-43-04.png)\n\n有时我们不需要显示列名前缀，这时我们需要修改GridView的GroupFormat属性修改为{1}，GroupFormat属性的默认值是`{0}: [#image]{1} {2}`，其中\n\n- {0}显示列标题\n- [#image]显示图片\n- {1}显示列的内容值\n- {2}显示列的摘要\n\n![](【Dev】DevExpress应用\\Snipaste_2021-01-07_20-45-55.png)\n\n设置好之后，效果是这样的:\n\n![](【Dev】DevExpress应用\\Snipaste_2021-01-07_20-45-28.png)\n\n## 四、FTP文件预览与下载\n\n直接上代码，解释都放注释上了：\n\n```c#\nprivate void PreviewFile(object sender,EventArgs e)\n{\n    if (fileDic == null)\n    {\n        return;\n    }\n    //自定义函数，获取文件在服务器中的路径\n    string serverPath = ServerFTP.CreateFilePathInServerBySQLPath(gridView_FileViewer.GetFocusedDataRow()[\"path\"].ToString());\n    //获取文件名\n    string fileName = gridView_FileViewer.GetFocusedDataRow()[\"file\"].ToString();\n    //根据路径将文件下载到本地，并返回文件路径\n    string savePath = ServerFTP.currentMode.RequestFile(serverPath,fileName,GeneralLib.FTPDownloadStyle.CACHE);\n    if (savePath != \"\")\n    {\n        //调用系统软件打开文件\n        FileIO.OpenFileInWindows(savePath);\n    }  \n}\n```\n\n这里挑几个比较重要的函数讲解\n\n**RequestFile**\n\n```c#\npublic string RequestFile(string serverPath,string fileName, FTPDownloadStyle style)\n{\n    string savePath = \"\";\n    switch (style)\n    {\n        //下载文件到缓存临时文件夹，用于预览\n        case FTPDownloadStyle.CACHE:\n            savePath = Path.Combine(ServerFTP.cachePath, fileName);\n            break;\n        //下载文件到所选的文件夹，用于下载\n        case FTPDownloadStyle.CHOOSEDIC:\n            savePath = FileIO.ChooseSaveFile(fileName, \"\", ServerFTP.chooseTempDic);       \n            //保存所选的文件夹，以便下次打开直接进入相应目录\n            ServerFTP.chooseTempDic = Path.GetDirectoryName(savePath);\n            break;\n    }\n    if (savePath == null)\n    {\n        return \"\";\n    }\n\n    //判断目录是否存在\n    if (!Directory.Exists(Path.GetDirectoryName(savePath)))\n    {\n        //如果不存在则创建目录\n        Directory.CreateDirectory(Path.GetDirectoryName(savePath));\n    }\n\n\t//根据文件路径创建FPT连接实例\n    FtpWebRequest ftp = (FtpWebRequest)WebRequest.Create(serverPath);\n    //从配置文件中读取登录项\n    ICredentials credentials = new NetworkCredential(Config.Get[\"ftp_username\"], Config.Get[\"ftp_password\"]);\n    //配置FPT服务器登录项\n    ftp.Credentials = credentials；\n    //配置FPT操作为下载文件\n    ftp.Method = WebRequestMethods.Ftp.DownloadFile;\n\t//向FPT服务器发出操作请求\n    FtpWebResponse response = (FtpWebResponse)ftp.GetResponse();\n    //创建流缓冲区接收FPT服务器反馈的字节流\n    Stream responseStream = response.GetResponseStream();\n    //根据存储路径在本地创建文件\n    FileStream fs = File.Create(savePath);\n    //创建用于批量取缓冲区字节数据的数据\n    byte[] buffer = new byte[ConstLib.BUFFER_SIZE];\n    int read = 0;\n    do\n    {\n        //将缓冲区的字节数据读入字节数组\n        read = responseStream.Read(buffer, 0, buffer.Length);\n        //将字节数组的数据写入到文件中\n        fs.Write(buffer, 0, read);\n        //清楚fs的流缓冲区，这里fs的流缓冲区与responseStream流缓冲区不是同一个缓冲区，需要注意\n        fs.Flush();\n    }\n    while (read != 0)；\n        \n    fs.Flush();\n    //关闭文件\n    fs.Close();\n    \n    return savePath;\n}\n```\n\n**OpenFileInWindows**\n\n```C#\npublic static Process OpenFileInWindows(string filePath)\n{\n    //创建一个新的进程\n    ProcessStartInfo info = new ProcessStartInfo();\n    //设置进程要打开的文档，Windows会根据文件类型的默认开打应用来启动对应应用程序来打开文件\n    info.FileName = Path.GetFileName(filePath);\n    //设置启动进程的初始目录\n    info.WorkingDirectory = Path.GetDirectoryName(filePath);\n    //设置进程启动后，窗口的状态，可以设置为最大化，最小化和正常\n    info.WindowStyle = ProcessWindowStyle.Normal;\n    //启动进程\n    Process proc = Process.Start(info);\n\n    return proc;\n}\n```\n\n当关闭文件时清楚临时文件夹的内容\n\n```c#\npublic static void CleanCacheDirectory()\n{\n    //判断临时文件夹是否存在\n    if (!Directory.Exists(ServerFTP.cachePath))\n    {\n        return;\n    }\n    try\n    {\n        //等待系统将占用文件的进程杀死再清空临时文件夹\n        System.Threading.Thread.Sleep(500);\n        //获取临时文件夹目录信息\n        DirectoryInfo dicInfo = new DirectoryInfo(ServerFTP.cachePath);\n        //直接删除临时文件夹\n        dicInfo.Delete(true);\n    }\n    catch\n    {\n        //如果目录被其他进程占用，则暂时不清空临时文件夹\n        return;\n    }\n}\n```\n\n这里我使用的是最简单的直接删除临时文件夹的暴力删除法，这样做会有一个问题就是，在程序删除文件夹的时候，可能预览文件的进程还没有被系统杀死或有其他的进程占用了目录中文件，这都会导致目录删除失败而抛出异常，我的解决方案是在删除目录之前等待500ms，等待系统将预览文件的进程杀死后在删除文件夹，但是如果是其他的进程占用了目录，则需要手动结束进程才能继续删除临时文件夹，我的解决方案是，如果有其他进程占用了目录，则本次本次临时缓冲区先不删除，等下次有机会再删除。所以这里的try-catch不是用来抛出异常的，而是用来推出函数的。\n\n当然比较理想的删除方法是遍历整个目录中文件和子文件夹，依次删除目录下文件和子文件夹，有被其他进程占用的文件暂时不删除。这样就可以只留下被占用的文件，而不是整个目录。\n\n## 五、单元格添加按钮并添加自定义点击事件\n\n有时我们需要向某一列的单元格添加点击事件，甚至向某一个单元格添加点击事件，这时我们就需要向单元格添加按钮了。\n\n### 1.向单元格添加简单的点击事件\n\n如果我们只想在某一单元格添加简单的点击事件\n\n```C#\nprivate void gridView_JobPlacement_RowCellClick(object sender, RowCellClickEventArgs e)\n{\n    if (e.RowHandle == 1 && e.Column.FieldName == \"filename\")\n    {\n        if (e.Button == MouseButtons.Left)\n        {\n            //todo\n        }\n        if (e.Button == MouseButtons.Right)\n        {\n\t\t\t//todo\n        }\n        if(e.Button == MouseButtons.Moddle)\n        {\n            //todo\n        }\n    }\n}\n```\n\n这时我们需要用到RowCellClick事件，RowCellClick事件在鼠标点击单元格时触发，然后我们只需要判定鼠标点击是哪一行哪一列，就可以实现某一个单元格的点击事件了。当然我们也可以通过添加按钮来实现。\n\n### 2.向单元格添加复杂点击事件\n\n如果我们想向单元格添加一系列复杂的点击事件，如在某一单元格内做文件的上传，预览，下载，删除等操作，这时我们就需要借助模板列了，使用模板列是无法只向某一个单元添加点击事件的，因为模板列挂载的是一整列。\n\n我需要用到模板列`RepositoryItemButtonEdit`，我可以在列属性里静态挂载，也可以在代码中动态挂载，重要的是我们需要用到`RepositoryItemButtonEdit`属性里的`Buttons`属性，向Buttons属性里添加元素。\n\n![](【Dev】DevExpress应用\\Snipaste_2020-12-18_09-11-36.png)\n\n光是添加按钮单元中还是看不到按钮的，我们还需要将每个按钮的Kind属性设置为Glyph，这样我们才能在单元格中看到按钮\n\n![](【Dev】DevExpress应用\\Snipaste_2020-12-18_09-13-12.png)\n\n添加完按钮就可以向对应按钮添加点击事件了，我们可以发现在列属性里找不到事件，所以我们需要在代码中为按钮添加点击事件，这时我们需要用到`repositoryItemButtonEdit.Buttons[0].Click`，其中repositoryItemButtonEdit是模板列的名字，Buttons[0]是第一个按钮的引用，我们只需要向Click事件添加我们想要执行的函数即可。\n\n## 六、GridView数据导出到Excel\n\n GridView的数据要导出到Excel有很多种方法，可以最直接的就是遍历GridView，然后将数据写入Excel，这算是比较麻烦的做法了，事实上Dev已经提供了一些便捷的方法。\n\n### 1.GetAllFilteredAndSortedRows()方法\n\nDev提供了一个`GridView.DataController.GetAllFilteredAndSortedRows()`方法，可以用于提取GridView当前数据，在筛选排序等操作之后更改了的数据也可以提取。\n\n<font color=red> 但是，GridView类中的DataController对象在VS中被隐藏了，即通过提示器是找不到GDataController对象的的，只能通过手写调用。</font>\n\n![](【Dev】DevExpress应用\\Snipaste_2020-12-22_19-13-20.png)\n\nGetAllFilteredAndSortedRows()方法返回的是一个IList泛型列表，数据写入Excel一就要自己手动写入，写入方法：\n\n```C#\n//需要包含的引用\nusing DevExpress.XtraSpreadsheet;\nusing DevExpress.Spreadsheet;\n\nSpreadsheetControl ss = new SpreadsheetControl();\nvar book = ss.Document;\nWorksheet sheet = book.Worksheets[0];\nsheet.Import(table, true, 0, 0);//table是DataTable类型，也是要导出到Excel的数据\n```\n\n<font color=red> 其中有一点需要格外注意，在使用Import函数时需要引用`DevExpress.Docs`程序集，因为Import函数在这个程序集里，Dev在DevExpress.Docs程序集里给Worksheet的父类ExternalWorksheet写了扩展，也就是扩展了Import函数等，其中DevExpress.Docs程序集和DevExpress.Spreadsheet程序集的命名空间是一样的，如果没有搞清楚这一点很容易产生玄学问题🥴</font>\n\n### 2.GridView.Export()方法\n\n最简单的方法就是使用Dev官方提供的导出方法GridView.Export().\n\nDev已经在GridView中添加了官方的Export方法，支持多种导出格式：\n\n- Xls\n- Xlsx\n- Html\n- Mht\n- Pdf\n- Text\n- Rtf\n- Csv\n- Image\n- Docx\n\n同时提供三种重载：\n\n![](【Dev】DevExpress应用\\Image_20201222193848.png)\n\n使用方法也很简单：\n\n```C#\n/// <summary>\n/// 将GridView中的数据导出到Excel\n/// </summary>\n/// <param name=\"fileName\"></param>\n/// <param name=\"view\"></param>\npublic static void ExportExcel(string fileName, GridView view)\n{\n    SaveFileDialog sfd = new SaveFileDialog();\n    sfd.Title = \"另存为\";\n    sfd.InitialDirectory = \"C:\\\\\";\n    sfd.Filter = \"Excel文件(*.xlsx) | *.xlsx\";\n    sfd.FileName = fileName;//fileName文件名不需要包含后缀\n    if (sfd.ShowDialog() == DialogResult.OK)\n    {\n        view.Export(DevExpress.XtraPrinting.ExportTarget.Xlsx, sfd.FileName);\n    }\n}\n```\n\n- view.Export是dev自带的导出方法，在导出文件后dev会自动调用系统对此文件的默认打开应用来打开文件，当然dev也提供内置的预览方法，这在下一节导出word模板中使用。\n\n## 七、向Word模板中写入数据\n\n### 1.载入word模板文件\n\n向word模板中写入数据我这里主要使用的是<font color=red>RichEditControl</font>类，RichEditControl类提供海量的富文本API接口，这里主要讲解使用到的API。\n\n首先打开word文档，RichEditControl类提供RichEditControl.LoadDocument(string path)方法加载文档，RichEditControl类也提供多个LoadDocument函数的重载给予各种文件的加载形式，我这里使用的是直接通过文件路径加载文档。LoadDocument函数支持DOC、DOCX、RTP、HTM、HTML、MHT、XML和EPUB类型的文档，可以自动检测文档类型。\n\n```C#\nRichEditControl.LoadDocument(string path)\n```\n\n将文档载入内存之后就可以通过<font color=red>RichEditControl.Document.Text</font>属性查看文档内容了，也可以通过RichEditControl.Document.Text属性判断文档是否加载成功。\n\n```C#\nif(richEditControl.Document.Text == null)\n{\n\treturn;\n}\n```\n\n### 2.向word模板的指定位置写入数据\n\n向word模板的指定位置写入数据主要使用Word的书签和域，我这里使用的是书签，在word中想要插入数据的地方添加一个书签即可，如：\n\n![](【Dev】DevExpress应用\\Snipaste_2021-01-06_21-26-31.png)\n\n我想要在生产号、型号和图号后面的单元格写入数据，那么我只需要在这些单元中添加书签即可，添加书签的步骤：\n\n```mermaid\ngraph LR;\n将光标定位到要添加的书签的位置-->插入-->书签-->添加一个书签名-->添加\n```\n\n添加完书签时候在word上是看不到的，但是把光标定位到书签所在的位置处，插入书签时会自定定位到所插入的书签名。\n\n然后即可通过<font color=red> Document.Replace(DocumentRange range,string text)</font>函数来向书签所在位置插入数据了，其中DocumentRange类型的参数需要通过<font color=red>Document.Bookmarks[string bookmarks].Range</font>来将字符串类型的书签标志转换为DocumentRange类型的可用书签标志。\n\n如：我要在生产号、型号和图号后面的单元格写入数据，那么我需要分别在这些单元格中插入书签`sch`、`xh`、`th`，然后通过下面代码即可向word模板中写入数据\n\n```C#\nRichEditControl richEdit = new RichEditControl();\nrichEdit.LoadDocument(\"C:/a.doc\");\nDocument doc = rich.Document;\ndoc.Replace(doc.Bookmarks[\"sch\"].Range,\"01\");\ndoc.Replace(doc.Bookmarks[\"xh\"].Range,\"02\");\ndoc.Replace(doc.Bookmarks[\"th\"].Range,\"03\");\n```\n\n原理就是书签提供了一个占位符，而dev则通过搜索匹配的占位符，将指定数据替换掉占位符。\n\n### 3.向word模板中的表格插入新行并写入内容\n\n向word模板中的表格插入新行则稍微复杂一些。主要步骤如下：\n\n- 首先word文档中要有一个模板表格\n\n- 需要在要插入表的位置添加书签table\n\n- 遍历word文档中所有的表再遍历每一个表中所有的单元格，查找到书签所在的单元格\n\n  ```c#\n  public TableCell GetTableCell(Document document) \n  {\n      //遍历文档中所有的表\n      foreach (Table table in document.Tables)\n      {\n          int row = 0, col = 0;\n          bool ok = false;\n          TableCell retCell = null;\n  \t\t//遍历表格中所有的单元格\n          table.ForEachCell((cell, rowIndex, columnIndex) =>\n                            {\n                                if (cell.Range.Contains(document.Bookmarks[\"table\"].Range.Start))\n                                {\n                                    row = rowIndex;\n                                    col = columnIndex;\n                                    retCell = cell;\n                                    ok = true;\n                                }\n                            });\n          if (ok)\n          {\n              return retCell;\n          }\n      }\n  ```\n\n  <font color=red>Table.ForEachCell(TableCellProcessorDelegate cellProcessor)</font>函数传入的是一个委托。这里使用的是匿名方法\n\n- 在指定单元格后新增行\n\n  可以使用<font color=red>Document.Tables[int index].Rows.Append()</font>函数在表的最后追加行，或使用<font color=red> Document.Tables[int index].Rows.InsertAfter(int rowIndex)</font>函数在指定行之后插入行。其中Document.Tables[int index].Rows.Append()中index（表的索引）可以通过<font color=red> Document.Tables.IndexOf(Table table)</font>函数获取，而table又可以同通过上一步查找到的TableCell对象retCell.Table属性获取。\n\n  ```c#\n  RichEditControl richEdit = new RichEditControl();\n  richEdit.LoadDocument(\"C:/a.doc\");\n  Document doc = rich.Document;\n  TableCell cell = GetTableCell(doc);\n  doc.BeginUpdate();\n  int index = doc.Tables.IndexOf(cell.Table);\n  doc.Tables[index].Rows.Append();//或者\n  //doc.Table[index].Rows.InsertAfter(cell.Row.Index - 1);\n  //获取指定单元格的占位符范围\n  DocumentRange range = doc.Tables[index].Rows[cell.Row.Index].Cells[cell.Index].ContentRange;\n  doc.Replace()\n  doc.EndUpdate();\n  ```\n\n  ","slug":"【Dev】DevExpress应用","published":1,"updated":"2021-02-03T07:27:02.225Z","_id":"ckkou93hl0001ekr799tm2wkb","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、大纲\"><a href=\"#一、大纲\" class=\"headerlink\" title=\"一、大纲\"></a>一、大纲</h2><p>最近使用DevExpress做C/S开发碰到了一些问题，在解决问题的同时在这里做一下记录，下面列出涉及到技术点</p>\n<ul>\n<li><strong>Dev框架下GridControl与GridView</strong></li>\n<li><strong>使用模板列动态替换GridView的指定列</strong></li>\n<li><strong>GridView分组并去掉列名的前缀</strong></li>\n<li><strong>FPT服务器文件预览与下载</strong></li>\n<li><strong>单元格添加按钮并添加自定义点击事件</strong></li>\n<li><strong>GridView数据导出到Excel</strong></li>\n<li><strong>向Word模板中写数据</strong></li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"二、Dev框架下的GridControl和GridView\"><a href=\"#二、Dev框架下的GridControl和GridView\" class=\"headerlink\" title=\"二、Dev框架下的GridControl和GridView\"></a>二、Dev框架下的GridControl和GridView</h2><p><img src=\"https://goulandis.picgo.com/img/Image_20201222193848.png\"></p>\n<h3 id=\"1-GridControl和GridView的关系\"><a href=\"#1-GridControl和GridView的关系\" class=\"headerlink\" title=\"1.GridControl和GridView的关系\"></a>1.GridControl和GridView的关系</h3><p>Dev框架下GridControl负责操作数据，GridView负责展示数据，GridControl是GridView的容器，一个GridControl可以容纳多个GridView，在GridView中的任何数据操作都不会影响到GridControl中的源数据，即当我们将GridControl中数据重新刷入GridView时，GridView中数据操作会被清除，所以如果我们有要在本地展示的数据则需要在GridControl刷数据进入GridView的时候重新再刷入一次本地数据。</p>\n<h3 id=\"2-GridControl输入数据到GridView的原理\"><a href=\"#2-GridControl输入数据到GridView的原理\" class=\"headerlink\" title=\"2.GridControl输入数据到GridView的原理\"></a>2.GridControl输入数据到GridView的原理</h3><p>GridControl的数据刷入GridView的操作由Dev框架执行，我们需要做的只是把数据绑定到GridControl.DataSource中即可。</p>\n<p>只有当GridView中存在与GridControl数据源对应列时，GridControl才能将对应列的数据刷入GridView的对应列中，这里的对应列指的是GridView中列的<code>FiledName</code>的值与GridControl数据源的列名相同，且大小写敏感。</p>\n<p>在GridView的列属性中有三个极为重要的属性：</p>\n<p><img src=\"https://raw.githubusercontent.com/Goulandis/ImgLib/main/Snipaste_2020-12-17_19-20-19.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Goulandis/ImgLib/main/image-20210203152634176.png\" alt=\"image-20210203152634176\"></p>\n<ul>\n<li><p>Name：列在程序中操作的标识符，类似变量名，对列的操作都由它来引用，如：修改colfilename列的列宽</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\">colfilename.Width = <span class=\"hljs-number\">300</span>;<br></code></pre></td></tr></table></figure></li>\n<li><p>ColumnEdit：用于挂载模板列的属性，可以将列动态的替换为其他类型的控件，例子中是将列挂载了一个多行编辑框，这样就可以在单元格中显示多行内容</p>\n<p><img src=\"/2021/02/03/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8%5CSnipaste_2020-12-17_19-29-45.png\"></p>\n</li>\n<li><p>FieldName：FieldName属性是列与GridControl数据源对应的标志，如果想要将GridControl数据源中某一列的数据刷入当前列，那么当前列的FieldName的取值必须和数据源中对应列的列名一致，并且FielName也是用来获取表格数据的标识，如：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C#\">gridView_FileViewer.GetFocusedDataRow()[<span class=\"hljs-string\">&quot;path&quot;</span>]<span class=\"hljs-comment\">//取所选行的path列单元格的数据</span><br></code></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h3 id=\"3-向GridView存在而GridControl中不存在的列刷入数据\"><a href=\"#3-向GridView存在而GridControl中不存在的列刷入数据\" class=\"headerlink\" title=\"3.向GridView存在而GridControl中不存在的列刷入数据\"></a>3.向GridView存在而GridControl中不存在的列刷入数据</h3><p>有的时候为了展示需要，我们需要在GridView中增加新列刷入自己的数据，而新增列在GridControl的数据源中没有与之对应的列，即在数据源中没有对应的字段（这里的数据源通常情况下指的就是数据库中的表），此时我们就需要在GridControl.Datasource中动态地添加一列来与新增列对应。</p>\n<p>为什么要要在GridControl.Datasource中动态地添加一列呢？</p>\n<p>这可能是由GridControl和GridView的内部机制影响的，当一列在GridView中存在而GridControl中不存在时，我们是无法向此列写入数据的，即使数据是来自本地而不是数据库，并且编译器会报错：</p>\n<p><img src=\"/2021/02/03/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8%5CSnipaste_2020-12-17_19-49-11.png\"></p>\n<p>如果我们要向GridView存在而GridControl中不存在的列刷入数据，那么我们必须在GridControl的DataSource中动态的加列，下面是示例代码：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">LoadFileNameColumn</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span> sender, EventArgs args</span>)</span><br><span class=\"hljs-function\"></span>&#123;<br>\tGridColumn col = gridView_JobPlacement.Columns[<span class=\"hljs-string\">&quot;xgwj&quot;</span>];<span class=\"hljs-comment\">//取表格xgwj列的索引</span><br><br>\t<span class=\"hljs-comment\">/*代码块说明：</span><br><span class=\"hljs-comment\">\t*   作用：向gridview的datasource动态添加filename列，使GridView中的filename列与DataSource中的filename字段对应</span><br><span class=\"hljs-comment\">\t*   说明：因为在GridView中添加了filename列如果在GridView的DataSource中没有与之对应的字段，</span><br><span class=\"hljs-comment\">\t*       则无法对filename列做任何操作</span><br><span class=\"hljs-comment\">\t*/</span><br>\tDataTable gridViewTable = gridControl_JobPlacement.DataSource <span class=\"hljs-keyword\">as</span> DataTable;<span class=\"hljs-comment\">//取DataSource的引用并转换成DataTable</span><br>\t<span class=\"hljs-keyword\">if</span> (!gridViewTable.Columns.Contains(<span class=\"hljs-string\">&quot;filename&quot;</span>))<span class=\"hljs-comment\">//判断DataSource中是否已存在filename列</span><br>\t&#123;<br>\t\tDataColumn dsFileNameCol = <span class=\"hljs-keyword\">new</span> DataColumn();<span class=\"hljs-comment\">//创建新列</span><br>\t\tdsFileNameCol.ColumnName = <span class=\"hljs-string\">&quot;filename&quot;</span>;<span class=\"hljs-comment\">//将新列命名为filename</span><br>         gridViewTable.Columns.Add(dsFileNameCol);<span class=\"hljs-comment\">//将新列添加到DataSource中</span><br>\t&#125;<span class=\"hljs-comment\">//至此，DataSource中就存在与GridView中的filename列对应的filename列了</span><br><br>\t<span class=\"hljs-comment\">//遍历GridView所有行，对有文件组编码的行在filename列载入文件列表信息</span><br>\t <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> rowIndex = <span class=\"hljs-number\">0</span>; rowIndex &lt; gridView_JobPlacement.RowCount; rowIndex++)<br>\t&#123;     <br>\t\t DataRow row = gridView_JobPlacement.GetDataRow(rowIndex);<span class=\"hljs-comment\">//根据索引数据行</span><br>\t\t<span class=\"hljs-keyword\">if</span> (row[<span class=\"hljs-string\">&quot;xgwj&quot;</span>].ToString() != <span class=\"hljs-string\">&quot;&quot;</span>)<span class=\"hljs-comment\">//如果数据行中的xgwj列单元格不为空，则向单元格刷入指定数据</span><br>\t\t&#123;<br>\t\t\t<span class=\"hljs-built_in\">string</span> fileGroupTmp = gridView_JobPlacement.GetRowCellDisplayText(rowIndex, col);<span class=\"hljs-comment\">//取指定单元格显示的内容</span><br>\t\t\t<span class=\"hljs-built_in\">string</span> fileGroup = CodingTool.GetFileGroup(fileGroupTmp);<span class=\"hljs-comment\">//将单元格存储的文件组编码转换成数据库可用的编码</span><br>\t\t\tDataTable table = bll.SelectFromFileTableByFileGroup(fileGroup);<span class=\"hljs-comment\">//根据编码到数据库查询文件列表</span><br>\t\t\t<span class=\"hljs-keyword\">foreach</span>(DataRow tableRow <span class=\"hljs-keyword\">in</span> table.Rows)<span class=\"hljs-comment\">//遍历文件列表将文件名刷入新增列</span><br>\t\t\t&#123;<br>\t\t\t\trow[<span class=\"hljs-string\">&quot;filename&quot;</span>] += tableRow[<span class=\"hljs-string\">&quot;filename&quot;</span>]+<span class=\"hljs-string\">&quot;\\n&quot;</span>;<span class=\"hljs-comment\">//将数据刷入filename列单元格</span><br>\t\t\t&#125;<br>         &#125;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"三、使用模板列动态替换GridView中的指定列\"><a href=\"#三、使用模板列动态替换GridView中的指定列\" class=\"headerlink\" title=\"三、使用模板列动态替换GridView中的指定列\"></a>三、使用模板列动态替换GridView中的指定列</h2><p>有的时候为了保密需要，在数据库中部分字段会用编码标识，如：人名使用编码标识，张三对应编码001，但是在表格中展示的时候应该显示人名而不是编码，此时我们就需要用到模板列的动态替换。</p>\n<p>直接上代码：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\">Security.BLL.userinfo ubll = <span class=\"hljs-keyword\">new</span> Security.BLL.userinfo();<br><br>RepositoryItemGridLookUpEdit replaceRegistrant = <span class=\"hljs-keyword\">new</span> RepositoryItemGridLookUpEdit();<br>replaceRegistrant.DataSource = ubll.GetAllList().Tables[<span class=\"hljs-number\">0</span>];<span class=\"hljs-comment\">//绑定数据源到RepositoryItemGridLookUpEdit</span><br>replaceRegistrant.DisplayMember = <span class=\"hljs-string\">&quot;fullname&quot;</span>;  <span class=\"hljs-comment\">//选择要替换显示的字段</span><br>replaceRegistrant.ValueMember = <span class=\"hljs-string\">&quot;ID&quot;</span>;  <span class=\"hljs-comment\">//</span><br>replaceRegistrant.NullText = <span class=\"hljs-string\">&quot;&quot;</span>;<span class=\"hljs-comment\">//字段为空时要显示的内容</span><br>gridView_JobPlacement.Columns[<span class=\"hljs-string\">&quot;djr&quot;</span>].ColumnEdit = replaceRegistrant;<span class=\"hljs-comment\">//将RepositoryItemGridLookUpEdit绑定到GridView的“djr”列</span><br><br>RepositoryItemGridLookUpEdit replacePricipal = <span class=\"hljs-keyword\">new</span> RepositoryItemGridLookUpEdit();<br>replacePricipal.DataSource = ubll.GetAllList().Tables[<span class=\"hljs-number\">0</span>];<span class=\"hljs-comment\">//绑定数据源到RepositoryItemGridLookUpEdit</span><br>replacePricipal.DisplayMember = <span class=\"hljs-string\">&quot;fullname&quot;</span>;  <span class=\"hljs-comment\">//选择要替换显示的字段</span><br>replacePricipal.ValueMember = <span class=\"hljs-string\">&quot;ID&quot;</span>;  <span class=\"hljs-comment\">//</span><br>replacePricipal.NullText = <span class=\"hljs-string\">&quot;&quot;</span>;<span class=\"hljs-comment\">//字段为空时要显示的内容</span><br>gridView_JobPlacement.Columns[<span class=\"hljs-string\">&quot;fzr&quot;</span>].ColumnEdit = replacePricipal;<span class=\"hljs-comment\">//将RepositoryItemGridLookUpEdit绑定到GridView的“djr”列</span><br></code></pre></td></tr></table></figure>\n<p>这是通过代码添加动态的添加模板列，同时我们也可以在列属性中的ColumnEdit属性中静态的添加模板列。</p>\n<h2 id=\"四、GridView分组并去掉列名的前缀\"><a href=\"#四、GridView分组并去掉列名的前缀\" class=\"headerlink\" title=\"四、GridView分组并去掉列名的前缀\"></a>四、GridView分组并去掉列名的前缀</h2><h3 id=\"1-分组\"><a href=\"#1-分组\" class=\"headerlink\" title=\"1.分组\"></a>1.分组</h3><p>GridView分组只需要在需要分组的列的属性中将GroupIndex属性值由“-1”改为0即可，如果需要二级分组则在需要分组的列的属性中将GroupIndex属性值由“-1”改为1，以此类推需要三级分组则改为2。</p>\n<p><img src=\"/2021/02/03/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8%5CSnipaste_2021-01-07_20-38-53.png\"></p>\n<h3 id=\"2-去掉列名前缀\"><a href=\"#2-去掉列名前缀\" class=\"headerlink\" title=\"2.去掉列名前缀\"></a>2.去掉列名前缀</h3><p>分完组后如果不做修改我们加载数据之后表格是这样的：</p>\n<p><img src=\"/2021/02/03/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8%5CSnipaste_2021-01-07_20-43-04.png\"></p>\n<p>有时我们不需要显示列名前缀，这时我们需要修改GridView的GroupFormat属性修改为{1}，GroupFormat属性的默认值是<code>&#123;0&#125;: [#image]&#123;1&#125; &#123;2&#125;</code>，其中</p>\n<ul>\n<li>{0}显示列标题</li>\n<li>[#image]显示图片</li>\n<li>{1}显示列的内容值</li>\n<li>{2}显示列的摘要</li>\n</ul>\n<p><img src=\"/2021/02/03/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8%5CSnipaste_2021-01-07_20-45-55.png\"></p>\n<p>设置好之后，效果是这样的:</p>\n<p><img src=\"/2021/02/03/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8%5CSnipaste_2021-01-07_20-45-28.png\"></p>\n<h2 id=\"四、FTP文件预览与下载\"><a href=\"#四、FTP文件预览与下载\" class=\"headerlink\" title=\"四、FTP文件预览与下载\"></a>四、FTP文件预览与下载</h2><p>直接上代码，解释都放注释上了：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PreviewFile</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span> sender,EventArgs e</span>)</span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (fileDic == <span class=\"hljs-literal\">null</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    <span class=\"hljs-comment\">//自定义函数，获取文件在服务器中的路径</span><br>    <span class=\"hljs-built_in\">string</span> serverPath = ServerFTP.CreateFilePathInServerBySQLPath(gridView_FileViewer.GetFocusedDataRow()[<span class=\"hljs-string\">&quot;path&quot;</span>].ToString());<br>    <span class=\"hljs-comment\">//获取文件名</span><br>    <span class=\"hljs-built_in\">string</span> fileName = gridView_FileViewer.GetFocusedDataRow()[<span class=\"hljs-string\">&quot;file&quot;</span>].ToString();<br>    <span class=\"hljs-comment\">//根据路径将文件下载到本地，并返回文件路径</span><br>    <span class=\"hljs-built_in\">string</span> savePath = ServerFTP.currentMode.RequestFile(serverPath,fileName,GeneralLib.FTPDownloadStyle.CACHE);<br>    <span class=\"hljs-keyword\">if</span> (savePath != <span class=\"hljs-string\">&quot;&quot;</span>)<br>    &#123;<br>        <span class=\"hljs-comment\">//调用系统软件打开文件</span><br>        FileIO.OpenFileInWindows(savePath);<br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这里挑几个比较重要的函数讲解</p>\n<p><strong>RequestFile</strong></p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">RequestFile</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> serverPath,<span class=\"hljs-built_in\">string</span> fileName, FTPDownloadStyle style</span>)</span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-built_in\">string</span> savePath = <span class=\"hljs-string\">&quot;&quot;</span>;<br>    <span class=\"hljs-keyword\">switch</span> (style)<br>    &#123;<br>        <span class=\"hljs-comment\">//下载文件到缓存临时文件夹，用于预览</span><br>        <span class=\"hljs-keyword\">case</span> FTPDownloadStyle.CACHE:<br>            savePath = Path.Combine(ServerFTP.cachePath, fileName);<br>            <span class=\"hljs-keyword\">break</span>;<br>        <span class=\"hljs-comment\">//下载文件到所选的文件夹，用于下载</span><br>        <span class=\"hljs-keyword\">case</span> FTPDownloadStyle.CHOOSEDIC:<br>            savePath = FileIO.ChooseSaveFile(fileName, <span class=\"hljs-string\">&quot;&quot;</span>, ServerFTP.chooseTempDic);       <br>            <span class=\"hljs-comment\">//保存所选的文件夹，以便下次打开直接进入相应目录</span><br>            ServerFTP.chooseTempDic = Path.GetDirectoryName(savePath);<br>            <span class=\"hljs-keyword\">break</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (savePath == <span class=\"hljs-literal\">null</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//判断目录是否存在</span><br>    <span class=\"hljs-keyword\">if</span> (!Directory.Exists(Path.GetDirectoryName(savePath)))<br>    &#123;<br>        <span class=\"hljs-comment\">//如果不存在则创建目录</span><br>        Directory.CreateDirectory(Path.GetDirectoryName(savePath));<br>    &#125;<br><br>\t<span class=\"hljs-comment\">//根据文件路径创建FPT连接实例</span><br>    FtpWebRequest ftp = (FtpWebRequest)WebRequest.Create(serverPath);<br>    <span class=\"hljs-comment\">//从配置文件中读取登录项</span><br>    ICredentials credentials = <span class=\"hljs-keyword\">new</span> NetworkCredential(Config.Get[<span class=\"hljs-string\">&quot;ftp_username&quot;</span>], Config.Get[<span class=\"hljs-string\">&quot;ftp_password&quot;</span>]);<br>    <span class=\"hljs-comment\">//配置FPT服务器登录项</span><br>    ftp.Credentials = credentials；<br>    <span class=\"hljs-comment\">//配置FPT操作为下载文件</span><br>    ftp.Method = WebRequestMethods.Ftp.DownloadFile;<br>\t<span class=\"hljs-comment\">//向FPT服务器发出操作请求</span><br>    FtpWebResponse response = (FtpWebResponse)ftp.GetResponse();<br>    <span class=\"hljs-comment\">//创建流缓冲区接收FPT服务器反馈的字节流</span><br>    Stream responseStream = response.GetResponseStream();<br>    <span class=\"hljs-comment\">//根据存储路径在本地创建文件</span><br>    FileStream fs = File.Create(savePath);<br>    <span class=\"hljs-comment\">//创建用于批量取缓冲区字节数据的数据</span><br>    <span class=\"hljs-built_in\">byte</span>[] buffer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">byte</span>[ConstLib.BUFFER_SIZE];<br>    <span class=\"hljs-built_in\">int</span> read = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">do</span><br>    &#123;<br>        <span class=\"hljs-comment\">//将缓冲区的字节数据读入字节数组</span><br>        read = responseStream.Read(buffer, <span class=\"hljs-number\">0</span>, buffer.Length);<br>        <span class=\"hljs-comment\">//将字节数组的数据写入到文件中</span><br>        fs.Write(buffer, <span class=\"hljs-number\">0</span>, read);<br>        <span class=\"hljs-comment\">//清楚fs的流缓冲区，这里fs的流缓冲区与responseStream流缓冲区不是同一个缓冲区，需要注意</span><br>        fs.Flush();<br>    &#125;<br>    <span class=\"hljs-keyword\">while</span> (read != <span class=\"hljs-number\">0</span>)；<br>        <br>    fs.Flush();<br>    <span class=\"hljs-comment\">//关闭文件</span><br>    fs.Close();<br>    <br>    <span class=\"hljs-keyword\">return</span> savePath;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>OpenFileInWindows</strong></p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C#\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Process <span class=\"hljs-title\">OpenFileInWindows</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> filePath</span>)</span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//创建一个新的进程</span><br>    ProcessStartInfo info = <span class=\"hljs-keyword\">new</span> ProcessStartInfo();<br>    <span class=\"hljs-comment\">//设置进程要打开的文档，Windows会根据文件类型的默认开打应用来启动对应应用程序来打开文件</span><br>    info.FileName = Path.GetFileName(filePath);<br>    <span class=\"hljs-comment\">//设置启动进程的初始目录</span><br>    info.WorkingDirectory = Path.GetDirectoryName(filePath);<br>    <span class=\"hljs-comment\">//设置进程启动后，窗口的状态，可以设置为最大化，最小化和正常</span><br>    info.WindowStyle = ProcessWindowStyle.Normal;<br>    <span class=\"hljs-comment\">//启动进程</span><br>    Process proc = Process.Start(info);<br><br>    <span class=\"hljs-keyword\">return</span> proc;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>当关闭文件时清楚临时文件夹的内容</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">CleanCacheDirectory</span>(<span class=\"hljs-params\"></span>)</span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//判断临时文件夹是否存在</span><br>    <span class=\"hljs-keyword\">if</span> (!Directory.Exists(ServerFTP.cachePath))<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">try</span><br>    &#123;<br>        <span class=\"hljs-comment\">//等待系统将占用文件的进程杀死再清空临时文件夹</span><br>        System.Threading.Thread.Sleep(<span class=\"hljs-number\">500</span>);<br>        <span class=\"hljs-comment\">//获取临时文件夹目录信息</span><br>        DirectoryInfo dicInfo = <span class=\"hljs-keyword\">new</span> DirectoryInfo(ServerFTP.cachePath);<br>        <span class=\"hljs-comment\">//直接删除临时文件夹</span><br>        dicInfo.Delete(<span class=\"hljs-literal\">true</span>);<br>    &#125;<br>    catch<br>    &#123;<br>        <span class=\"hljs-comment\">//如果目录被其他进程占用，则暂时不清空临时文件夹</span><br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这里我使用的是最简单的直接删除临时文件夹的暴力删除法，这样做会有一个问题就是，在程序删除文件夹的时候，可能预览文件的进程还没有被系统杀死或有其他的进程占用了目录中文件，这都会导致目录删除失败而抛出异常，我的解决方案是在删除目录之前等待500ms，等待系统将预览文件的进程杀死后在删除文件夹，但是如果是其他的进程占用了目录，则需要手动结束进程才能继续删除临时文件夹，我的解决方案是，如果有其他进程占用了目录，则本次本次临时缓冲区先不删除，等下次有机会再删除。所以这里的try-catch不是用来抛出异常的，而是用来推出函数的。</p>\n<p>当然比较理想的删除方法是遍历整个目录中文件和子文件夹，依次删除目录下文件和子文件夹，有被其他进程占用的文件暂时不删除。这样就可以只留下被占用的文件，而不是整个目录。</p>\n<h2 id=\"五、单元格添加按钮并添加自定义点击事件\"><a href=\"#五、单元格添加按钮并添加自定义点击事件\" class=\"headerlink\" title=\"五、单元格添加按钮并添加自定义点击事件\"></a>五、单元格添加按钮并添加自定义点击事件</h2><p>有时我们需要向某一列的单元格添加点击事件，甚至向某一个单元格添加点击事件，这时我们就需要向单元格添加按钮了。</p>\n<h3 id=\"1-向单元格添加简单的点击事件\"><a href=\"#1-向单元格添加简单的点击事件\" class=\"headerlink\" title=\"1.向单元格添加简单的点击事件\"></a>1.向单元格添加简单的点击事件</h3><p>如果我们只想在某一单元格添加简单的点击事件</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C#\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">gridView_JobPlacement_RowCellClick</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span> sender, RowCellClickEventArgs e</span>)</span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (e.RowHandle == <span class=\"hljs-number\">1</span> &amp;&amp; e.Column.FieldName == <span class=\"hljs-string\">&quot;filename&quot;</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span> (e.Button == MouseButtons.Left)<br>        &#123;<br>            <span class=\"hljs-comment\">//todo</span><br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (e.Button == MouseButtons.Right)<br>        &#123;<br>\t\t\t<span class=\"hljs-comment\">//todo</span><br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(e.Button == MouseButtons.Moddle)<br>        &#123;<br>            <span class=\"hljs-comment\">//todo</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这时我们需要用到RowCellClick事件，RowCellClick事件在鼠标点击单元格时触发，然后我们只需要判定鼠标点击是哪一行哪一列，就可以实现某一个单元格的点击事件了。当然我们也可以通过添加按钮来实现。</p>\n<h3 id=\"2-向单元格添加复杂点击事件\"><a href=\"#2-向单元格添加复杂点击事件\" class=\"headerlink\" title=\"2.向单元格添加复杂点击事件\"></a>2.向单元格添加复杂点击事件</h3><p>如果我们想向单元格添加一系列复杂的点击事件，如在某一单元格内做文件的上传，预览，下载，删除等操作，这时我们就需要借助模板列了，使用模板列是无法只向某一个单元添加点击事件的，因为模板列挂载的是一整列。</p>\n<p>我需要用到模板列<code>RepositoryItemButtonEdit</code>，我可以在列属性里静态挂载，也可以在代码中动态挂载，重要的是我们需要用到<code>RepositoryItemButtonEdit</code>属性里的<code>Buttons</code>属性，向Buttons属性里添加元素。</p>\n<p><img src=\"/2021/02/03/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8%5CSnipaste_2020-12-18_09-11-36.png\"></p>\n<p>光是添加按钮单元中还是看不到按钮的，我们还需要将每个按钮的Kind属性设置为Glyph，这样我们才能在单元格中看到按钮</p>\n<p><img src=\"/2021/02/03/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8%5CSnipaste_2020-12-18_09-13-12.png\"></p>\n<p>添加完按钮就可以向对应按钮添加点击事件了，我们可以发现在列属性里找不到事件，所以我们需要在代码中为按钮添加点击事件，这时我们需要用到<code>repositoryItemButtonEdit.Buttons[0].Click</code>，其中repositoryItemButtonEdit是模板列的名字，Buttons[0]是第一个按钮的引用，我们只需要向Click事件添加我们想要执行的函数即可。</p>\n<h2 id=\"六、GridView数据导出到Excel\"><a href=\"#六、GridView数据导出到Excel\" class=\"headerlink\" title=\"六、GridView数据导出到Excel\"></a>六、GridView数据导出到Excel</h2><p> GridView的数据要导出到Excel有很多种方法，可以最直接的就是遍历GridView，然后将数据写入Excel，这算是比较麻烦的做法了，事实上Dev已经提供了一些便捷的方法。</p>\n<h3 id=\"1-GetAllFilteredAndSortedRows-方法\"><a href=\"#1-GetAllFilteredAndSortedRows-方法\" class=\"headerlink\" title=\"1.GetAllFilteredAndSortedRows()方法\"></a>1.GetAllFilteredAndSortedRows()方法</h3><p>Dev提供了一个<code>GridView.DataController.GetAllFilteredAndSortedRows()</code>方法，可以用于提取GridView当前数据，在筛选排序等操作之后更改了的数据也可以提取。</p>\n<p><font color=\"red\"> 但是，GridView类中的DataController对象在VS中被隐藏了，即通过提示器是找不到GDataController对象的的，只能通过手写调用。</font></p>\n<p><img src=\"/2021/02/03/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8%5CSnipaste_2020-12-22_19-13-20.png\"></p>\n<p>GetAllFilteredAndSortedRows()方法返回的是一个IList泛型列表，数据写入Excel一就要自己手动写入，写入方法：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C#\"><span class=\"hljs-comment\">//需要包含的引用</span><br><span class=\"hljs-keyword\">using</span> DevExpress.XtraSpreadsheet;<br><span class=\"hljs-keyword\">using</span> DevExpress.Spreadsheet;<br><br>SpreadsheetControl ss = <span class=\"hljs-keyword\">new</span> SpreadsheetControl();<br><span class=\"hljs-keyword\">var</span> book = ss.Document;<br>Worksheet sheet = book.Worksheets[<span class=\"hljs-number\">0</span>];<br>sheet.Import(table, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<span class=\"hljs-comment\">//table是DataTable类型，也是要导出到Excel的数据</span><br></code></pre></td></tr></table></figure>\n<p><font color=\"red\"> 其中有一点需要格外注意，在使用Import函数时需要引用<code>DevExpress.Docs</code>程序集，因为Import函数在这个程序集里，Dev在DevExpress.Docs程序集里给Worksheet的父类ExternalWorksheet写了扩展，也就是扩展了Import函数等，其中DevExpress.Docs程序集和DevExpress.Spreadsheet程序集的命名空间是一样的，如果没有搞清楚这一点很容易产生玄学问题🥴</font></p>\n<h3 id=\"2-GridView-Export-方法\"><a href=\"#2-GridView-Export-方法\" class=\"headerlink\" title=\"2.GridView.Export()方法\"></a>2.GridView.Export()方法</h3><p>最简单的方法就是使用Dev官方提供的导出方法GridView.Export().</p>\n<p>Dev已经在GridView中添加了官方的Export方法，支持多种导出格式：</p>\n<ul>\n<li>Xls</li>\n<li>Xlsx</li>\n<li>Html</li>\n<li>Mht</li>\n<li>Pdf</li>\n<li>Text</li>\n<li>Rtf</li>\n<li>Csv</li>\n<li>Image</li>\n<li>Docx</li>\n</ul>\n<p>同时提供三种重载：</p>\n<p><img src=\"/2021/02/03/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8%5CImage_20201222193848.png\"></p>\n<p>使用方法也很简单：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C#\"><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> 将GridView中的数据导出到Excel</span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;fileName&quot;&gt;</span><span class=\"hljs-doctag\">&lt;/param&gt;</span></span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;view&quot;&gt;</span><span class=\"hljs-doctag\">&lt;/param&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ExportExcel</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> fileName, GridView view</span>)</span><br><span class=\"hljs-function\"></span>&#123;<br>    SaveFileDialog sfd = <span class=\"hljs-keyword\">new</span> SaveFileDialog();<br>    sfd.Title = <span class=\"hljs-string\">&quot;另存为&quot;</span>;<br>    sfd.InitialDirectory = <span class=\"hljs-string\">&quot;C:\\\\&quot;</span>;<br>    sfd.Filter = <span class=\"hljs-string\">&quot;Excel文件(*.xlsx) | *.xlsx&quot;</span>;<br>    sfd.FileName = fileName;<span class=\"hljs-comment\">//fileName文件名不需要包含后缀</span><br>    <span class=\"hljs-keyword\">if</span> (sfd.ShowDialog() == DialogResult.OK)<br>    &#123;<br>        view.Export(DevExpress.XtraPrinting.ExportTarget.Xlsx, sfd.FileName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>view.Export是dev自带的导出方法，在导出文件后dev会自动调用系统对此文件的默认打开应用来打开文件，当然dev也提供内置的预览方法，这在下一节导出word模板中使用。</li>\n</ul>\n<h2 id=\"七、向Word模板中写入数据\"><a href=\"#七、向Word模板中写入数据\" class=\"headerlink\" title=\"七、向Word模板中写入数据\"></a>七、向Word模板中写入数据</h2><h3 id=\"1-载入word模板文件\"><a href=\"#1-载入word模板文件\" class=\"headerlink\" title=\"1.载入word模板文件\"></a>1.载入word模板文件</h3><p>向word模板中写入数据我这里主要使用的是<font color=\"red\">RichEditControl</font>类，RichEditControl类提供海量的富文本API接口，这里主要讲解使用到的API。</p>\n<p>首先打开word文档，RichEditControl类提供RichEditControl.LoadDocument(string path)方法加载文档，RichEditControl类也提供多个LoadDocument函数的重载给予各种文件的加载形式，我这里使用的是直接通过文件路径加载文档。LoadDocument函数支持DOC、DOCX、RTP、HTM、HTML、MHT、XML和EPUB类型的文档，可以自动检测文档类型。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C#\">RichEditControl.LoadDocument(<span class=\"hljs-built_in\">string</span> path)<br></code></pre></td></tr></table></figure>\n<p>将文档载入内存之后就可以通过<font color=\"red\">RichEditControl.Document.Text</font>属性查看文档内容了，也可以通过RichEditControl.Document.Text属性判断文档是否加载成功。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C#\"><span class=\"hljs-keyword\">if</span>(richEditControl.Document.Text == <span class=\"hljs-literal\">null</span>)<br>&#123;<br>\t<span class=\"hljs-keyword\">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-向word模板的指定位置写入数据\"><a href=\"#2-向word模板的指定位置写入数据\" class=\"headerlink\" title=\"2.向word模板的指定位置写入数据\"></a>2.向word模板的指定位置写入数据</h3><p>向word模板的指定位置写入数据主要使用Word的书签和域，我这里使用的是书签，在word中想要插入数据的地方添加一个书签即可，如：</p>\n<p><img src=\"/2021/02/03/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8%5CSnipaste_2021-01-06_21-26-31.png\"></p>\n<p>我想要在生产号、型号和图号后面的单元格写入数据，那么我只需要在这些单元中添加书签即可，添加书签的步骤：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mermaid\">graph LR;<br>将光标定位到要添加的书签的位置--&gt;插入--&gt;书签--&gt;添加一个书签名--&gt;添加<br></code></pre></td></tr></table></figure>\n<p>添加完书签时候在word上是看不到的，但是把光标定位到书签所在的位置处，插入书签时会自定定位到所插入的书签名。</p>\n<p>然后即可通过<font color=\"red\"> Document.Replace(DocumentRange range,string text)</font>函数来向书签所在位置插入数据了，其中DocumentRange类型的参数需要通过<font color=\"red\">Document.Bookmarks[string bookmarks].Range</font>来将字符串类型的书签标志转换为DocumentRange类型的可用书签标志。</p>\n<p>如：我要在生产号、型号和图号后面的单元格写入数据，那么我需要分别在这些单元格中插入书签<code>sch</code>、<code>xh</code>、<code>th</code>，然后通过下面代码即可向word模板中写入数据</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C#\">RichEditControl richEdit = <span class=\"hljs-keyword\">new</span> RichEditControl();<br>richEdit.LoadDocument(<span class=\"hljs-string\">&quot;C:/a.doc&quot;</span>);<br>Document doc = rich.Document;<br>doc.Replace(doc.Bookmarks[<span class=\"hljs-string\">&quot;sch&quot;</span>].Range,<span class=\"hljs-string\">&quot;01&quot;</span>);<br>doc.Replace(doc.Bookmarks[<span class=\"hljs-string\">&quot;xh&quot;</span>].Range,<span class=\"hljs-string\">&quot;02&quot;</span>);<br>doc.Replace(doc.Bookmarks[<span class=\"hljs-string\">&quot;th&quot;</span>].Range,<span class=\"hljs-string\">&quot;03&quot;</span>);<br></code></pre></td></tr></table></figure>\n<p>原理就是书签提供了一个占位符，而dev则通过搜索匹配的占位符，将指定数据替换掉占位符。</p>\n<h3 id=\"3-向word模板中的表格插入新行并写入内容\"><a href=\"#3-向word模板中的表格插入新行并写入内容\" class=\"headerlink\" title=\"3.向word模板中的表格插入新行并写入内容\"></a>3.向word模板中的表格插入新行并写入内容</h3><p>向word模板中的表格插入新行则稍微复杂一些。主要步骤如下：</p>\n<ul>\n<li><p>首先word文档中要有一个模板表格</p>\n</li>\n<li><p>需要在要插入表的位置添加书签table</p>\n</li>\n<li><p>遍历word文档中所有的表再遍历每一个表中所有的单元格，查找到书签所在的单元格</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> TableCell <span class=\"hljs-title\">GetTableCell</span>(<span class=\"hljs-params\">Document document</span>) </span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//遍历文档中所有的表</span><br>    <span class=\"hljs-keyword\">foreach</span> (Table table <span class=\"hljs-keyword\">in</span> document.Tables)<br>    &#123;<br>        <span class=\"hljs-built_in\">int</span> row = <span class=\"hljs-number\">0</span>, col = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">bool</span> ok = <span class=\"hljs-literal\">false</span>;<br>        TableCell retCell = <span class=\"hljs-literal\">null</span>;<br>\t\t<span class=\"hljs-comment\">//遍历表格中所有的单元格</span><br>        table.ForEachCell((cell, rowIndex, columnIndex) =&gt;<br>                          &#123;<br>                              <span class=\"hljs-keyword\">if</span> (cell.Range.Contains(document.Bookmarks[<span class=\"hljs-string\">&quot;table&quot;</span>].Range.Start))<br>                              &#123;<br>                                  row = rowIndex;<br>                                  col = columnIndex;<br>                                  retCell = cell;<br>                                  ok = <span class=\"hljs-literal\">true</span>;<br>                              &#125;<br>                          &#125;);<br>        <span class=\"hljs-keyword\">if</span> (ok)<br>        &#123;<br>            <span class=\"hljs-keyword\">return</span> retCell;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p><font color=\"red\">Table.ForEachCell(TableCellProcessorDelegate cellProcessor)</font>函数传入的是一个委托。这里使用的是匿名方法</p>\n</li>\n<li><p>在指定单元格后新增行</p>\n<p>可以使用<font color=\"red\">Document.Tables[int index].Rows.Append()</font>函数在表的最后追加行，或使用<font color=\"red\"> Document.Tables[int index].Rows.InsertAfter(int rowIndex)</font>函数在指定行之后插入行。其中Document.Tables[int index].Rows.Append()中index（表的索引）可以通过<font color=\"red\"> Document.Tables.IndexOf(Table table)</font>函数获取，而table又可以同通过上一步查找到的TableCell对象retCell.Table属性获取。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\">RichEditControl richEdit = <span class=\"hljs-keyword\">new</span> RichEditControl();<br>richEdit.LoadDocument(<span class=\"hljs-string\">&quot;C:/a.doc&quot;</span>);<br>Document doc = rich.Document;<br>TableCell cell = GetTableCell(doc);<br>doc.BeginUpdate();<br><span class=\"hljs-built_in\">int</span> index = doc.Tables.IndexOf(cell.Table);<br>doc.Tables[index].Rows.Append();<span class=\"hljs-comment\">//或者</span><br><span class=\"hljs-comment\">//doc.Table[index].Rows.InsertAfter(cell.Row.Index - 1);</span><br><span class=\"hljs-comment\">//获取指定单元格的占位符范围</span><br>DocumentRange range = doc.Tables[index].Rows[cell.Row.Index].Cells[cell.Index].ContentRange;<br>doc.Replace()<br>doc.EndUpdate();<br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h2 id=\"一、大纲\"><a href=\"#一、大纲\" class=\"headerlink\" title=\"一、大纲\"></a>一、大纲</h2><p>最近使用DevExpress做C/S开发碰到了一些问题，在解决问题的同时在这里做一下记录，下面列出涉及到技术点</p>\n<ul>\n<li><strong>Dev框架下GridControl与GridView</strong></li>\n<li><strong>使用模板列动态替换GridView的指定列</strong></li>\n<li><strong>GridView分组并去掉列名的前缀</strong></li>\n<li><strong>FPT服务器文件预览与下载</strong></li>\n<li><strong>单元格添加按钮并添加自定义点击事件</strong></li>\n<li><strong>GridView数据导出到Excel</strong></li>\n<li><strong>向Word模板中写数据</strong></li>\n</ul>","more":"<h2 id=\"二、Dev框架下的GridControl和GridView\"><a href=\"#二、Dev框架下的GridControl和GridView\" class=\"headerlink\" title=\"二、Dev框架下的GridControl和GridView\"></a>二、Dev框架下的GridControl和GridView</h2><p><img src=\"https://goulandis.picgo.com/img/Image_20201222193848.png\"></p>\n<h3 id=\"1-GridControl和GridView的关系\"><a href=\"#1-GridControl和GridView的关系\" class=\"headerlink\" title=\"1.GridControl和GridView的关系\"></a>1.GridControl和GridView的关系</h3><p>Dev框架下GridControl负责操作数据，GridView负责展示数据，GridControl是GridView的容器，一个GridControl可以容纳多个GridView，在GridView中的任何数据操作都不会影响到GridControl中的源数据，即当我们将GridControl中数据重新刷入GridView时，GridView中数据操作会被清除，所以如果我们有要在本地展示的数据则需要在GridControl刷数据进入GridView的时候重新再刷入一次本地数据。</p>\n<h3 id=\"2-GridControl输入数据到GridView的原理\"><a href=\"#2-GridControl输入数据到GridView的原理\" class=\"headerlink\" title=\"2.GridControl输入数据到GridView的原理\"></a>2.GridControl输入数据到GridView的原理</h3><p>GridControl的数据刷入GridView的操作由Dev框架执行，我们需要做的只是把数据绑定到GridControl.DataSource中即可。</p>\n<p>只有当GridView中存在与GridControl数据源对应列时，GridControl才能将对应列的数据刷入GridView的对应列中，这里的对应列指的是GridView中列的<code>FiledName</code>的值与GridControl数据源的列名相同，且大小写敏感。</p>\n<p>在GridView的列属性中有三个极为重要的属性：</p>\n<p><img src=\"https://raw.githubusercontent.com/Goulandis/ImgLib/main/Snipaste_2020-12-17_19-20-19.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Goulandis/ImgLib/main/image-20210203152634176.png\" alt=\"image-20210203152634176\"></p>\n<ul>\n<li><p>Name：列在程序中操作的标识符，类似变量名，对列的操作都由它来引用，如：修改colfilename列的列宽</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\">colfilename.Width = <span class=\"hljs-number\">300</span>;<br></code></pre></td></tr></table></figure></li>\n<li><p>ColumnEdit：用于挂载模板列的属性，可以将列动态的替换为其他类型的控件，例子中是将列挂载了一个多行编辑框，这样就可以在单元格中显示多行内容</p>\n<p><img src=\"/2021/02/03/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8%5CSnipaste_2020-12-17_19-29-45.png\"></p>\n</li>\n<li><p>FieldName：FieldName属性是列与GridControl数据源对应的标志，如果想要将GridControl数据源中某一列的数据刷入当前列，那么当前列的FieldName的取值必须和数据源中对应列的列名一致，并且FielName也是用来获取表格数据的标识，如：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C#\">gridView_FileViewer.GetFocusedDataRow()[<span class=\"hljs-string\">&quot;path&quot;</span>]<span class=\"hljs-comment\">//取所选行的path列单元格的数据</span><br></code></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h3 id=\"3-向GridView存在而GridControl中不存在的列刷入数据\"><a href=\"#3-向GridView存在而GridControl中不存在的列刷入数据\" class=\"headerlink\" title=\"3.向GridView存在而GridControl中不存在的列刷入数据\"></a>3.向GridView存在而GridControl中不存在的列刷入数据</h3><p>有的时候为了展示需要，我们需要在GridView中增加新列刷入自己的数据，而新增列在GridControl的数据源中没有与之对应的列，即在数据源中没有对应的字段（这里的数据源通常情况下指的就是数据库中的表），此时我们就需要在GridControl.Datasource中动态地添加一列来与新增列对应。</p>\n<p>为什么要要在GridControl.Datasource中动态地添加一列呢？</p>\n<p>这可能是由GridControl和GridView的内部机制影响的，当一列在GridView中存在而GridControl中不存在时，我们是无法向此列写入数据的，即使数据是来自本地而不是数据库，并且编译器会报错：</p>\n<p><img src=\"/2021/02/03/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8%5CSnipaste_2020-12-17_19-49-11.png\"></p>\n<p>如果我们要向GridView存在而GridControl中不存在的列刷入数据，那么我们必须在GridControl的DataSource中动态的加列，下面是示例代码：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">LoadFileNameColumn</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span> sender, EventArgs args</span>)</span><br><span class=\"hljs-function\"></span>&#123;<br>\tGridColumn col = gridView_JobPlacement.Columns[<span class=\"hljs-string\">&quot;xgwj&quot;</span>];<span class=\"hljs-comment\">//取表格xgwj列的索引</span><br><br>\t<span class=\"hljs-comment\">/*代码块说明：</span><br><span class=\"hljs-comment\">\t*   作用：向gridview的datasource动态添加filename列，使GridView中的filename列与DataSource中的filename字段对应</span><br><span class=\"hljs-comment\">\t*   说明：因为在GridView中添加了filename列如果在GridView的DataSource中没有与之对应的字段，</span><br><span class=\"hljs-comment\">\t*       则无法对filename列做任何操作</span><br><span class=\"hljs-comment\">\t*/</span><br>\tDataTable gridViewTable = gridControl_JobPlacement.DataSource <span class=\"hljs-keyword\">as</span> DataTable;<span class=\"hljs-comment\">//取DataSource的引用并转换成DataTable</span><br>\t<span class=\"hljs-keyword\">if</span> (!gridViewTable.Columns.Contains(<span class=\"hljs-string\">&quot;filename&quot;</span>))<span class=\"hljs-comment\">//判断DataSource中是否已存在filename列</span><br>\t&#123;<br>\t\tDataColumn dsFileNameCol = <span class=\"hljs-keyword\">new</span> DataColumn();<span class=\"hljs-comment\">//创建新列</span><br>\t\tdsFileNameCol.ColumnName = <span class=\"hljs-string\">&quot;filename&quot;</span>;<span class=\"hljs-comment\">//将新列命名为filename</span><br>         gridViewTable.Columns.Add(dsFileNameCol);<span class=\"hljs-comment\">//将新列添加到DataSource中</span><br>\t&#125;<span class=\"hljs-comment\">//至此，DataSource中就存在与GridView中的filename列对应的filename列了</span><br><br>\t<span class=\"hljs-comment\">//遍历GridView所有行，对有文件组编码的行在filename列载入文件列表信息</span><br>\t <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> rowIndex = <span class=\"hljs-number\">0</span>; rowIndex &lt; gridView_JobPlacement.RowCount; rowIndex++)<br>\t&#123;     <br>\t\t DataRow row = gridView_JobPlacement.GetDataRow(rowIndex);<span class=\"hljs-comment\">//根据索引数据行</span><br>\t\t<span class=\"hljs-keyword\">if</span> (row[<span class=\"hljs-string\">&quot;xgwj&quot;</span>].ToString() != <span class=\"hljs-string\">&quot;&quot;</span>)<span class=\"hljs-comment\">//如果数据行中的xgwj列单元格不为空，则向单元格刷入指定数据</span><br>\t\t&#123;<br>\t\t\t<span class=\"hljs-built_in\">string</span> fileGroupTmp = gridView_JobPlacement.GetRowCellDisplayText(rowIndex, col);<span class=\"hljs-comment\">//取指定单元格显示的内容</span><br>\t\t\t<span class=\"hljs-built_in\">string</span> fileGroup = CodingTool.GetFileGroup(fileGroupTmp);<span class=\"hljs-comment\">//将单元格存储的文件组编码转换成数据库可用的编码</span><br>\t\t\tDataTable table = bll.SelectFromFileTableByFileGroup(fileGroup);<span class=\"hljs-comment\">//根据编码到数据库查询文件列表</span><br>\t\t\t<span class=\"hljs-keyword\">foreach</span>(DataRow tableRow <span class=\"hljs-keyword\">in</span> table.Rows)<span class=\"hljs-comment\">//遍历文件列表将文件名刷入新增列</span><br>\t\t\t&#123;<br>\t\t\t\trow[<span class=\"hljs-string\">&quot;filename&quot;</span>] += tableRow[<span class=\"hljs-string\">&quot;filename&quot;</span>]+<span class=\"hljs-string\">&quot;\\n&quot;</span>;<span class=\"hljs-comment\">//将数据刷入filename列单元格</span><br>\t\t\t&#125;<br>         &#125;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"三、使用模板列动态替换GridView中的指定列\"><a href=\"#三、使用模板列动态替换GridView中的指定列\" class=\"headerlink\" title=\"三、使用模板列动态替换GridView中的指定列\"></a>三、使用模板列动态替换GridView中的指定列</h2><p>有的时候为了保密需要，在数据库中部分字段会用编码标识，如：人名使用编码标识，张三对应编码001，但是在表格中展示的时候应该显示人名而不是编码，此时我们就需要用到模板列的动态替换。</p>\n<p>直接上代码：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\">Security.BLL.userinfo ubll = <span class=\"hljs-keyword\">new</span> Security.BLL.userinfo();<br><br>RepositoryItemGridLookUpEdit replaceRegistrant = <span class=\"hljs-keyword\">new</span> RepositoryItemGridLookUpEdit();<br>replaceRegistrant.DataSource = ubll.GetAllList().Tables[<span class=\"hljs-number\">0</span>];<span class=\"hljs-comment\">//绑定数据源到RepositoryItemGridLookUpEdit</span><br>replaceRegistrant.DisplayMember = <span class=\"hljs-string\">&quot;fullname&quot;</span>;  <span class=\"hljs-comment\">//选择要替换显示的字段</span><br>replaceRegistrant.ValueMember = <span class=\"hljs-string\">&quot;ID&quot;</span>;  <span class=\"hljs-comment\">//</span><br>replaceRegistrant.NullText = <span class=\"hljs-string\">&quot;&quot;</span>;<span class=\"hljs-comment\">//字段为空时要显示的内容</span><br>gridView_JobPlacement.Columns[<span class=\"hljs-string\">&quot;djr&quot;</span>].ColumnEdit = replaceRegistrant;<span class=\"hljs-comment\">//将RepositoryItemGridLookUpEdit绑定到GridView的“djr”列</span><br><br>RepositoryItemGridLookUpEdit replacePricipal = <span class=\"hljs-keyword\">new</span> RepositoryItemGridLookUpEdit();<br>replacePricipal.DataSource = ubll.GetAllList().Tables[<span class=\"hljs-number\">0</span>];<span class=\"hljs-comment\">//绑定数据源到RepositoryItemGridLookUpEdit</span><br>replacePricipal.DisplayMember = <span class=\"hljs-string\">&quot;fullname&quot;</span>;  <span class=\"hljs-comment\">//选择要替换显示的字段</span><br>replacePricipal.ValueMember = <span class=\"hljs-string\">&quot;ID&quot;</span>;  <span class=\"hljs-comment\">//</span><br>replacePricipal.NullText = <span class=\"hljs-string\">&quot;&quot;</span>;<span class=\"hljs-comment\">//字段为空时要显示的内容</span><br>gridView_JobPlacement.Columns[<span class=\"hljs-string\">&quot;fzr&quot;</span>].ColumnEdit = replacePricipal;<span class=\"hljs-comment\">//将RepositoryItemGridLookUpEdit绑定到GridView的“djr”列</span><br></code></pre></td></tr></table></figure>\n<p>这是通过代码添加动态的添加模板列，同时我们也可以在列属性中的ColumnEdit属性中静态的添加模板列。</p>\n<h2 id=\"四、GridView分组并去掉列名的前缀\"><a href=\"#四、GridView分组并去掉列名的前缀\" class=\"headerlink\" title=\"四、GridView分组并去掉列名的前缀\"></a>四、GridView分组并去掉列名的前缀</h2><h3 id=\"1-分组\"><a href=\"#1-分组\" class=\"headerlink\" title=\"1.分组\"></a>1.分组</h3><p>GridView分组只需要在需要分组的列的属性中将GroupIndex属性值由“-1”改为0即可，如果需要二级分组则在需要分组的列的属性中将GroupIndex属性值由“-1”改为1，以此类推需要三级分组则改为2。</p>\n<p><img src=\"/2021/02/03/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8%5CSnipaste_2021-01-07_20-38-53.png\"></p>\n<h3 id=\"2-去掉列名前缀\"><a href=\"#2-去掉列名前缀\" class=\"headerlink\" title=\"2.去掉列名前缀\"></a>2.去掉列名前缀</h3><p>分完组后如果不做修改我们加载数据之后表格是这样的：</p>\n<p><img src=\"/2021/02/03/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8%5CSnipaste_2021-01-07_20-43-04.png\"></p>\n<p>有时我们不需要显示列名前缀，这时我们需要修改GridView的GroupFormat属性修改为{1}，GroupFormat属性的默认值是<code>&#123;0&#125;: [#image]&#123;1&#125; &#123;2&#125;</code>，其中</p>\n<ul>\n<li>{0}显示列标题</li>\n<li>[#image]显示图片</li>\n<li>{1}显示列的内容值</li>\n<li>{2}显示列的摘要</li>\n</ul>\n<p><img src=\"/2021/02/03/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8%5CSnipaste_2021-01-07_20-45-55.png\"></p>\n<p>设置好之后，效果是这样的:</p>\n<p><img src=\"/2021/02/03/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8%5CSnipaste_2021-01-07_20-45-28.png\"></p>\n<h2 id=\"四、FTP文件预览与下载\"><a href=\"#四、FTP文件预览与下载\" class=\"headerlink\" title=\"四、FTP文件预览与下载\"></a>四、FTP文件预览与下载</h2><p>直接上代码，解释都放注释上了：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PreviewFile</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span> sender,EventArgs e</span>)</span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (fileDic == <span class=\"hljs-literal\">null</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    <span class=\"hljs-comment\">//自定义函数，获取文件在服务器中的路径</span><br>    <span class=\"hljs-built_in\">string</span> serverPath = ServerFTP.CreateFilePathInServerBySQLPath(gridView_FileViewer.GetFocusedDataRow()[<span class=\"hljs-string\">&quot;path&quot;</span>].ToString());<br>    <span class=\"hljs-comment\">//获取文件名</span><br>    <span class=\"hljs-built_in\">string</span> fileName = gridView_FileViewer.GetFocusedDataRow()[<span class=\"hljs-string\">&quot;file&quot;</span>].ToString();<br>    <span class=\"hljs-comment\">//根据路径将文件下载到本地，并返回文件路径</span><br>    <span class=\"hljs-built_in\">string</span> savePath = ServerFTP.currentMode.RequestFile(serverPath,fileName,GeneralLib.FTPDownloadStyle.CACHE);<br>    <span class=\"hljs-keyword\">if</span> (savePath != <span class=\"hljs-string\">&quot;&quot;</span>)<br>    &#123;<br>        <span class=\"hljs-comment\">//调用系统软件打开文件</span><br>        FileIO.OpenFileInWindows(savePath);<br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这里挑几个比较重要的函数讲解</p>\n<p><strong>RequestFile</strong></p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">RequestFile</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> serverPath,<span class=\"hljs-built_in\">string</span> fileName, FTPDownloadStyle style</span>)</span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-built_in\">string</span> savePath = <span class=\"hljs-string\">&quot;&quot;</span>;<br>    <span class=\"hljs-keyword\">switch</span> (style)<br>    &#123;<br>        <span class=\"hljs-comment\">//下载文件到缓存临时文件夹，用于预览</span><br>        <span class=\"hljs-keyword\">case</span> FTPDownloadStyle.CACHE:<br>            savePath = Path.Combine(ServerFTP.cachePath, fileName);<br>            <span class=\"hljs-keyword\">break</span>;<br>        <span class=\"hljs-comment\">//下载文件到所选的文件夹，用于下载</span><br>        <span class=\"hljs-keyword\">case</span> FTPDownloadStyle.CHOOSEDIC:<br>            savePath = FileIO.ChooseSaveFile(fileName, <span class=\"hljs-string\">&quot;&quot;</span>, ServerFTP.chooseTempDic);       <br>            <span class=\"hljs-comment\">//保存所选的文件夹，以便下次打开直接进入相应目录</span><br>            ServerFTP.chooseTempDic = Path.GetDirectoryName(savePath);<br>            <span class=\"hljs-keyword\">break</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (savePath == <span class=\"hljs-literal\">null</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//判断目录是否存在</span><br>    <span class=\"hljs-keyword\">if</span> (!Directory.Exists(Path.GetDirectoryName(savePath)))<br>    &#123;<br>        <span class=\"hljs-comment\">//如果不存在则创建目录</span><br>        Directory.CreateDirectory(Path.GetDirectoryName(savePath));<br>    &#125;<br><br>\t<span class=\"hljs-comment\">//根据文件路径创建FPT连接实例</span><br>    FtpWebRequest ftp = (FtpWebRequest)WebRequest.Create(serverPath);<br>    <span class=\"hljs-comment\">//从配置文件中读取登录项</span><br>    ICredentials credentials = <span class=\"hljs-keyword\">new</span> NetworkCredential(Config.Get[<span class=\"hljs-string\">&quot;ftp_username&quot;</span>], Config.Get[<span class=\"hljs-string\">&quot;ftp_password&quot;</span>]);<br>    <span class=\"hljs-comment\">//配置FPT服务器登录项</span><br>    ftp.Credentials = credentials；<br>    <span class=\"hljs-comment\">//配置FPT操作为下载文件</span><br>    ftp.Method = WebRequestMethods.Ftp.DownloadFile;<br>\t<span class=\"hljs-comment\">//向FPT服务器发出操作请求</span><br>    FtpWebResponse response = (FtpWebResponse)ftp.GetResponse();<br>    <span class=\"hljs-comment\">//创建流缓冲区接收FPT服务器反馈的字节流</span><br>    Stream responseStream = response.GetResponseStream();<br>    <span class=\"hljs-comment\">//根据存储路径在本地创建文件</span><br>    FileStream fs = File.Create(savePath);<br>    <span class=\"hljs-comment\">//创建用于批量取缓冲区字节数据的数据</span><br>    <span class=\"hljs-built_in\">byte</span>[] buffer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">byte</span>[ConstLib.BUFFER_SIZE];<br>    <span class=\"hljs-built_in\">int</span> read = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">do</span><br>    &#123;<br>        <span class=\"hljs-comment\">//将缓冲区的字节数据读入字节数组</span><br>        read = responseStream.Read(buffer, <span class=\"hljs-number\">0</span>, buffer.Length);<br>        <span class=\"hljs-comment\">//将字节数组的数据写入到文件中</span><br>        fs.Write(buffer, <span class=\"hljs-number\">0</span>, read);<br>        <span class=\"hljs-comment\">//清楚fs的流缓冲区，这里fs的流缓冲区与responseStream流缓冲区不是同一个缓冲区，需要注意</span><br>        fs.Flush();<br>    &#125;<br>    <span class=\"hljs-keyword\">while</span> (read != <span class=\"hljs-number\">0</span>)；<br>        <br>    fs.Flush();<br>    <span class=\"hljs-comment\">//关闭文件</span><br>    fs.Close();<br>    <br>    <span class=\"hljs-keyword\">return</span> savePath;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>OpenFileInWindows</strong></p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C#\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Process <span class=\"hljs-title\">OpenFileInWindows</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> filePath</span>)</span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//创建一个新的进程</span><br>    ProcessStartInfo info = <span class=\"hljs-keyword\">new</span> ProcessStartInfo();<br>    <span class=\"hljs-comment\">//设置进程要打开的文档，Windows会根据文件类型的默认开打应用来启动对应应用程序来打开文件</span><br>    info.FileName = Path.GetFileName(filePath);<br>    <span class=\"hljs-comment\">//设置启动进程的初始目录</span><br>    info.WorkingDirectory = Path.GetDirectoryName(filePath);<br>    <span class=\"hljs-comment\">//设置进程启动后，窗口的状态，可以设置为最大化，最小化和正常</span><br>    info.WindowStyle = ProcessWindowStyle.Normal;<br>    <span class=\"hljs-comment\">//启动进程</span><br>    Process proc = Process.Start(info);<br><br>    <span class=\"hljs-keyword\">return</span> proc;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>当关闭文件时清楚临时文件夹的内容</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">CleanCacheDirectory</span>(<span class=\"hljs-params\"></span>)</span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//判断临时文件夹是否存在</span><br>    <span class=\"hljs-keyword\">if</span> (!Directory.Exists(ServerFTP.cachePath))<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">try</span><br>    &#123;<br>        <span class=\"hljs-comment\">//等待系统将占用文件的进程杀死再清空临时文件夹</span><br>        System.Threading.Thread.Sleep(<span class=\"hljs-number\">500</span>);<br>        <span class=\"hljs-comment\">//获取临时文件夹目录信息</span><br>        DirectoryInfo dicInfo = <span class=\"hljs-keyword\">new</span> DirectoryInfo(ServerFTP.cachePath);<br>        <span class=\"hljs-comment\">//直接删除临时文件夹</span><br>        dicInfo.Delete(<span class=\"hljs-literal\">true</span>);<br>    &#125;<br>    catch<br>    &#123;<br>        <span class=\"hljs-comment\">//如果目录被其他进程占用，则暂时不清空临时文件夹</span><br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这里我使用的是最简单的直接删除临时文件夹的暴力删除法，这样做会有一个问题就是，在程序删除文件夹的时候，可能预览文件的进程还没有被系统杀死或有其他的进程占用了目录中文件，这都会导致目录删除失败而抛出异常，我的解决方案是在删除目录之前等待500ms，等待系统将预览文件的进程杀死后在删除文件夹，但是如果是其他的进程占用了目录，则需要手动结束进程才能继续删除临时文件夹，我的解决方案是，如果有其他进程占用了目录，则本次本次临时缓冲区先不删除，等下次有机会再删除。所以这里的try-catch不是用来抛出异常的，而是用来推出函数的。</p>\n<p>当然比较理想的删除方法是遍历整个目录中文件和子文件夹，依次删除目录下文件和子文件夹，有被其他进程占用的文件暂时不删除。这样就可以只留下被占用的文件，而不是整个目录。</p>\n<h2 id=\"五、单元格添加按钮并添加自定义点击事件\"><a href=\"#五、单元格添加按钮并添加自定义点击事件\" class=\"headerlink\" title=\"五、单元格添加按钮并添加自定义点击事件\"></a>五、单元格添加按钮并添加自定义点击事件</h2><p>有时我们需要向某一列的单元格添加点击事件，甚至向某一个单元格添加点击事件，这时我们就需要向单元格添加按钮了。</p>\n<h3 id=\"1-向单元格添加简单的点击事件\"><a href=\"#1-向单元格添加简单的点击事件\" class=\"headerlink\" title=\"1.向单元格添加简单的点击事件\"></a>1.向单元格添加简单的点击事件</h3><p>如果我们只想在某一单元格添加简单的点击事件</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C#\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">gridView_JobPlacement_RowCellClick</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span> sender, RowCellClickEventArgs e</span>)</span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (e.RowHandle == <span class=\"hljs-number\">1</span> &amp;&amp; e.Column.FieldName == <span class=\"hljs-string\">&quot;filename&quot;</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span> (e.Button == MouseButtons.Left)<br>        &#123;<br>            <span class=\"hljs-comment\">//todo</span><br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (e.Button == MouseButtons.Right)<br>        &#123;<br>\t\t\t<span class=\"hljs-comment\">//todo</span><br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(e.Button == MouseButtons.Moddle)<br>        &#123;<br>            <span class=\"hljs-comment\">//todo</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这时我们需要用到RowCellClick事件，RowCellClick事件在鼠标点击单元格时触发，然后我们只需要判定鼠标点击是哪一行哪一列，就可以实现某一个单元格的点击事件了。当然我们也可以通过添加按钮来实现。</p>\n<h3 id=\"2-向单元格添加复杂点击事件\"><a href=\"#2-向单元格添加复杂点击事件\" class=\"headerlink\" title=\"2.向单元格添加复杂点击事件\"></a>2.向单元格添加复杂点击事件</h3><p>如果我们想向单元格添加一系列复杂的点击事件，如在某一单元格内做文件的上传，预览，下载，删除等操作，这时我们就需要借助模板列了，使用模板列是无法只向某一个单元添加点击事件的，因为模板列挂载的是一整列。</p>\n<p>我需要用到模板列<code>RepositoryItemButtonEdit</code>，我可以在列属性里静态挂载，也可以在代码中动态挂载，重要的是我们需要用到<code>RepositoryItemButtonEdit</code>属性里的<code>Buttons</code>属性，向Buttons属性里添加元素。</p>\n<p><img src=\"/2021/02/03/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8%5CSnipaste_2020-12-18_09-11-36.png\"></p>\n<p>光是添加按钮单元中还是看不到按钮的，我们还需要将每个按钮的Kind属性设置为Glyph，这样我们才能在单元格中看到按钮</p>\n<p><img src=\"/2021/02/03/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8%5CSnipaste_2020-12-18_09-13-12.png\"></p>\n<p>添加完按钮就可以向对应按钮添加点击事件了，我们可以发现在列属性里找不到事件，所以我们需要在代码中为按钮添加点击事件，这时我们需要用到<code>repositoryItemButtonEdit.Buttons[0].Click</code>，其中repositoryItemButtonEdit是模板列的名字，Buttons[0]是第一个按钮的引用，我们只需要向Click事件添加我们想要执行的函数即可。</p>\n<h2 id=\"六、GridView数据导出到Excel\"><a href=\"#六、GridView数据导出到Excel\" class=\"headerlink\" title=\"六、GridView数据导出到Excel\"></a>六、GridView数据导出到Excel</h2><p> GridView的数据要导出到Excel有很多种方法，可以最直接的就是遍历GridView，然后将数据写入Excel，这算是比较麻烦的做法了，事实上Dev已经提供了一些便捷的方法。</p>\n<h3 id=\"1-GetAllFilteredAndSortedRows-方法\"><a href=\"#1-GetAllFilteredAndSortedRows-方法\" class=\"headerlink\" title=\"1.GetAllFilteredAndSortedRows()方法\"></a>1.GetAllFilteredAndSortedRows()方法</h3><p>Dev提供了一个<code>GridView.DataController.GetAllFilteredAndSortedRows()</code>方法，可以用于提取GridView当前数据，在筛选排序等操作之后更改了的数据也可以提取。</p>\n<p><font color=\"red\"> 但是，GridView类中的DataController对象在VS中被隐藏了，即通过提示器是找不到GDataController对象的的，只能通过手写调用。</font></p>\n<p><img src=\"/2021/02/03/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8%5CSnipaste_2020-12-22_19-13-20.png\"></p>\n<p>GetAllFilteredAndSortedRows()方法返回的是一个IList泛型列表，数据写入Excel一就要自己手动写入，写入方法：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C#\"><span class=\"hljs-comment\">//需要包含的引用</span><br><span class=\"hljs-keyword\">using</span> DevExpress.XtraSpreadsheet;<br><span class=\"hljs-keyword\">using</span> DevExpress.Spreadsheet;<br><br>SpreadsheetControl ss = <span class=\"hljs-keyword\">new</span> SpreadsheetControl();<br><span class=\"hljs-keyword\">var</span> book = ss.Document;<br>Worksheet sheet = book.Worksheets[<span class=\"hljs-number\">0</span>];<br>sheet.Import(table, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<span class=\"hljs-comment\">//table是DataTable类型，也是要导出到Excel的数据</span><br></code></pre></td></tr></table></figure>\n<p><font color=\"red\"> 其中有一点需要格外注意，在使用Import函数时需要引用<code>DevExpress.Docs</code>程序集，因为Import函数在这个程序集里，Dev在DevExpress.Docs程序集里给Worksheet的父类ExternalWorksheet写了扩展，也就是扩展了Import函数等，其中DevExpress.Docs程序集和DevExpress.Spreadsheet程序集的命名空间是一样的，如果没有搞清楚这一点很容易产生玄学问题🥴</font></p>\n<h3 id=\"2-GridView-Export-方法\"><a href=\"#2-GridView-Export-方法\" class=\"headerlink\" title=\"2.GridView.Export()方法\"></a>2.GridView.Export()方法</h3><p>最简单的方法就是使用Dev官方提供的导出方法GridView.Export().</p>\n<p>Dev已经在GridView中添加了官方的Export方法，支持多种导出格式：</p>\n<ul>\n<li>Xls</li>\n<li>Xlsx</li>\n<li>Html</li>\n<li>Mht</li>\n<li>Pdf</li>\n<li>Text</li>\n<li>Rtf</li>\n<li>Csv</li>\n<li>Image</li>\n<li>Docx</li>\n</ul>\n<p>同时提供三种重载：</p>\n<p><img src=\"/2021/02/03/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8%5CImage_20201222193848.png\"></p>\n<p>使用方法也很简单：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C#\"><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> 将GridView中的数据导出到Excel</span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;fileName&quot;&gt;</span><span class=\"hljs-doctag\">&lt;/param&gt;</span></span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;view&quot;&gt;</span><span class=\"hljs-doctag\">&lt;/param&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ExportExcel</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> fileName, GridView view</span>)</span><br><span class=\"hljs-function\"></span>&#123;<br>    SaveFileDialog sfd = <span class=\"hljs-keyword\">new</span> SaveFileDialog();<br>    sfd.Title = <span class=\"hljs-string\">&quot;另存为&quot;</span>;<br>    sfd.InitialDirectory = <span class=\"hljs-string\">&quot;C:\\\\&quot;</span>;<br>    sfd.Filter = <span class=\"hljs-string\">&quot;Excel文件(*.xlsx) | *.xlsx&quot;</span>;<br>    sfd.FileName = fileName;<span class=\"hljs-comment\">//fileName文件名不需要包含后缀</span><br>    <span class=\"hljs-keyword\">if</span> (sfd.ShowDialog() == DialogResult.OK)<br>    &#123;<br>        view.Export(DevExpress.XtraPrinting.ExportTarget.Xlsx, sfd.FileName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>view.Export是dev自带的导出方法，在导出文件后dev会自动调用系统对此文件的默认打开应用来打开文件，当然dev也提供内置的预览方法，这在下一节导出word模板中使用。</li>\n</ul>\n<h2 id=\"七、向Word模板中写入数据\"><a href=\"#七、向Word模板中写入数据\" class=\"headerlink\" title=\"七、向Word模板中写入数据\"></a>七、向Word模板中写入数据</h2><h3 id=\"1-载入word模板文件\"><a href=\"#1-载入word模板文件\" class=\"headerlink\" title=\"1.载入word模板文件\"></a>1.载入word模板文件</h3><p>向word模板中写入数据我这里主要使用的是<font color=\"red\">RichEditControl</font>类，RichEditControl类提供海量的富文本API接口，这里主要讲解使用到的API。</p>\n<p>首先打开word文档，RichEditControl类提供RichEditControl.LoadDocument(string path)方法加载文档，RichEditControl类也提供多个LoadDocument函数的重载给予各种文件的加载形式，我这里使用的是直接通过文件路径加载文档。LoadDocument函数支持DOC、DOCX、RTP、HTM、HTML、MHT、XML和EPUB类型的文档，可以自动检测文档类型。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C#\">RichEditControl.LoadDocument(<span class=\"hljs-built_in\">string</span> path)<br></code></pre></td></tr></table></figure>\n<p>将文档载入内存之后就可以通过<font color=\"red\">RichEditControl.Document.Text</font>属性查看文档内容了，也可以通过RichEditControl.Document.Text属性判断文档是否加载成功。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C#\"><span class=\"hljs-keyword\">if</span>(richEditControl.Document.Text == <span class=\"hljs-literal\">null</span>)<br>&#123;<br>\t<span class=\"hljs-keyword\">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-向word模板的指定位置写入数据\"><a href=\"#2-向word模板的指定位置写入数据\" class=\"headerlink\" title=\"2.向word模板的指定位置写入数据\"></a>2.向word模板的指定位置写入数据</h3><p>向word模板的指定位置写入数据主要使用Word的书签和域，我这里使用的是书签，在word中想要插入数据的地方添加一个书签即可，如：</p>\n<p><img src=\"/2021/02/03/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8/%E3%80%90Dev%E3%80%91DevExpress%E5%BA%94%E7%94%A8%5CSnipaste_2021-01-06_21-26-31.png\"></p>\n<p>我想要在生产号、型号和图号后面的单元格写入数据，那么我只需要在这些单元中添加书签即可，添加书签的步骤：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mermaid\">graph LR;<br>将光标定位到要添加的书签的位置--&gt;插入--&gt;书签--&gt;添加一个书签名--&gt;添加<br></code></pre></td></tr></table></figure>\n<p>添加完书签时候在word上是看不到的，但是把光标定位到书签所在的位置处，插入书签时会自定定位到所插入的书签名。</p>\n<p>然后即可通过<font color=\"red\"> Document.Replace(DocumentRange range,string text)</font>函数来向书签所在位置插入数据了，其中DocumentRange类型的参数需要通过<font color=\"red\">Document.Bookmarks[string bookmarks].Range</font>来将字符串类型的书签标志转换为DocumentRange类型的可用书签标志。</p>\n<p>如：我要在生产号、型号和图号后面的单元格写入数据，那么我需要分别在这些单元格中插入书签<code>sch</code>、<code>xh</code>、<code>th</code>，然后通过下面代码即可向word模板中写入数据</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C#\">RichEditControl richEdit = <span class=\"hljs-keyword\">new</span> RichEditControl();<br>richEdit.LoadDocument(<span class=\"hljs-string\">&quot;C:/a.doc&quot;</span>);<br>Document doc = rich.Document;<br>doc.Replace(doc.Bookmarks[<span class=\"hljs-string\">&quot;sch&quot;</span>].Range,<span class=\"hljs-string\">&quot;01&quot;</span>);<br>doc.Replace(doc.Bookmarks[<span class=\"hljs-string\">&quot;xh&quot;</span>].Range,<span class=\"hljs-string\">&quot;02&quot;</span>);<br>doc.Replace(doc.Bookmarks[<span class=\"hljs-string\">&quot;th&quot;</span>].Range,<span class=\"hljs-string\">&quot;03&quot;</span>);<br></code></pre></td></tr></table></figure>\n<p>原理就是书签提供了一个占位符，而dev则通过搜索匹配的占位符，将指定数据替换掉占位符。</p>\n<h3 id=\"3-向word模板中的表格插入新行并写入内容\"><a href=\"#3-向word模板中的表格插入新行并写入内容\" class=\"headerlink\" title=\"3.向word模板中的表格插入新行并写入内容\"></a>3.向word模板中的表格插入新行并写入内容</h3><p>向word模板中的表格插入新行则稍微复杂一些。主要步骤如下：</p>\n<ul>\n<li><p>首先word文档中要有一个模板表格</p>\n</li>\n<li><p>需要在要插入表的位置添加书签table</p>\n</li>\n<li><p>遍历word文档中所有的表再遍历每一个表中所有的单元格，查找到书签所在的单元格</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> TableCell <span class=\"hljs-title\">GetTableCell</span>(<span class=\"hljs-params\">Document document</span>) </span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//遍历文档中所有的表</span><br>    <span class=\"hljs-keyword\">foreach</span> (Table table <span class=\"hljs-keyword\">in</span> document.Tables)<br>    &#123;<br>        <span class=\"hljs-built_in\">int</span> row = <span class=\"hljs-number\">0</span>, col = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">bool</span> ok = <span class=\"hljs-literal\">false</span>;<br>        TableCell retCell = <span class=\"hljs-literal\">null</span>;<br>\t\t<span class=\"hljs-comment\">//遍历表格中所有的单元格</span><br>        table.ForEachCell((cell, rowIndex, columnIndex) =&gt;<br>                          &#123;<br>                              <span class=\"hljs-keyword\">if</span> (cell.Range.Contains(document.Bookmarks[<span class=\"hljs-string\">&quot;table&quot;</span>].Range.Start))<br>                              &#123;<br>                                  row = rowIndex;<br>                                  col = columnIndex;<br>                                  retCell = cell;<br>                                  ok = <span class=\"hljs-literal\">true</span>;<br>                              &#125;<br>                          &#125;);<br>        <span class=\"hljs-keyword\">if</span> (ok)<br>        &#123;<br>            <span class=\"hljs-keyword\">return</span> retCell;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p><font color=\"red\">Table.ForEachCell(TableCellProcessorDelegate cellProcessor)</font>函数传入的是一个委托。这里使用的是匿名方法</p>\n</li>\n<li><p>在指定单元格后新增行</p>\n<p>可以使用<font color=\"red\">Document.Tables[int index].Rows.Append()</font>函数在表的最后追加行，或使用<font color=\"red\"> Document.Tables[int index].Rows.InsertAfter(int rowIndex)</font>函数在指定行之后插入行。其中Document.Tables[int index].Rows.Append()中index（表的索引）可以通过<font color=\"red\"> Document.Tables.IndexOf(Table table)</font>函数获取，而table又可以同通过上一步查找到的TableCell对象retCell.Table属性获取。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\">RichEditControl richEdit = <span class=\"hljs-keyword\">new</span> RichEditControl();<br>richEdit.LoadDocument(<span class=\"hljs-string\">&quot;C:/a.doc&quot;</span>);<br>Document doc = rich.Document;<br>TableCell cell = GetTableCell(doc);<br>doc.BeginUpdate();<br><span class=\"hljs-built_in\">int</span> index = doc.Tables.IndexOf(cell.Table);<br>doc.Tables[index].Rows.Append();<span class=\"hljs-comment\">//或者</span><br><span class=\"hljs-comment\">//doc.Table[index].Rows.InsertAfter(cell.Row.Index - 1);</span><br><span class=\"hljs-comment\">//获取指定单元格的占位符范围</span><br>DocumentRange range = doc.Tables[index].Rows[cell.Row.Index].Cells[cell.Index].ContentRange;<br>doc.Replace()<br>doc.EndUpdate();<br></code></pre></td></tr></table></figure>\n</li>\n</ul>"}],"PostAsset":[{"_id":"source/_posts/【C++】C++中的四种转换类型/Snipaste_2019-09-12_10-11-10.png","slug":"Snipaste_2019-09-12_10-11-10.png","post":"ckk9hocah0006dwr78y3x38ht","modified":0,"renderable":0},{"_id":"source/_posts/【C++】C++中的四种转换类型/Snipaste_2019-09-12_10-44-16.png","slug":"Snipaste_2019-09-12_10-44-16.png","post":"ckk9hocah0006dwr78y3x38ht","modified":0,"renderable":0},{"_id":"source/_posts/【C++】C++中的四种转换类型/Snipaste_2019-09-12_11-06-11.png","slug":"Snipaste_2019-09-12_11-06-11.png","post":"ckk9hocah0006dwr78y3x38ht","modified":0,"renderable":0},{"_id":"source/_posts/【C++】C++中的四种转换类型/Snipaste_2019-09-12_11-51-30.png","slug":"Snipaste_2019-09-12_11-51-30.png","post":"ckk9hocah0006dwr78y3x38ht","modified":0,"renderable":0},{"_id":"source/_posts/【C++】C++中的四种转换类型/Snipaste_2019-09-12_16-32-44.png","slug":"Snipaste_2019-09-12_16-32-44.png","post":"ckk9hocah0006dwr78y3x38ht","modified":0,"renderable":0},{"_id":"source/_posts/【C++】C++函数模板的实现机制剖析/Snipaste_2019-10-03_16-51-51.png","slug":"Snipaste_2019-10-03_16-51-51.png","post":"ckk9hocaj000adwr7ajrd7mo3","modified":0,"renderable":0},{"_id":"source/_posts/【C++】C++函数模板的实现机制剖析/Snipaste_2019-10-03_19-57-21.png","slug":"Snipaste_2019-10-03_19-57-21.png","post":"ckk9hocaj000adwr7ajrd7mo3","modified":0,"renderable":0},{"_id":"source/_posts/【C++】C++函数模板的实现机制剖析/Snipaste_2019-10-03_20-07-41.png","slug":"Snipaste_2019-10-03_20-07-41.png","post":"ckk9hocaj000adwr7ajrd7mo3","modified":0,"renderable":0},{"_id":"source/_posts/【C++】C++函数模板的实现机制剖析/Snipaste_2019-10-03_20-08-21.png","slug":"Snipaste_2019-10-03_20-08-21.png","post":"ckk9hocaj000adwr7ajrd7mo3","modified":0,"renderable":0},{"_id":"source/_posts/【C++】C++函数模板的实现机制剖析/Snipaste_2019-10-03_20-12-24.png","slug":"Snipaste_2019-10-03_20-12-24.png","post":"ckk9hocaj000adwr7ajrd7mo3","modified":0,"renderable":0},{"_id":"source/_posts/【C++】全局变量、静态全局变量、局部变量与静态局部变量/Snipaste_2019-09-11_21-35-55.png","slug":"Snipaste_2019-09-11_21-35-55.png","post":"ckk9hocal000gdwr7eaqfdjo9","modified":0,"renderable":0},{"_id":"source/_posts/【C++】全局变量、静态全局变量、局部变量与静态局部变量/Snipaste_2019-09-11_21-36-28.png","slug":"Snipaste_2019-09-11_21-36-28.png","post":"ckk9hocal000gdwr7eaqfdjo9","modified":0,"renderable":0},{"_id":"source/_posts/【C++】全局变量、静态全局变量、局部变量与静态局部变量/Snipaste_2019-09-11_21-36-38.png","slug":"Snipaste_2019-09-11_21-36-38.png","post":"ckk9hocal000gdwr7eaqfdjo9","modified":0,"renderable":0},{"_id":"source/_posts/【C++】C++面向对象模型初探/Snipaste_2019-10-02_09-07-09.png","slug":"Snipaste_2019-10-02_09-07-09.png","post":"ckk9hocak000bdwr746nx9ti7","modified":0,"renderable":0},{"_id":"source/_posts/【Linux】Linux基础/1.png","slug":"1.png","post":"ckk9hocao000mdwr79a1l3si1","modified":0,"renderable":0},{"_id":"source/_posts/【Linux】Linux基础/2.png","slug":"2.png","post":"ckk9hocao000mdwr79a1l3si1","modified":0,"renderable":0},{"_id":"source/_posts/【Linux】Linux基础/3.png","slug":"3.png","post":"ckk9hocao000mdwr79a1l3si1","modified":0,"renderable":0},{"_id":"source/_posts/【Linux】Linux基础/4.png","slug":"4.png","post":"ckk9hocao000mdwr79a1l3si1","modified":0,"renderable":0},{"_id":"source/_posts/【Linux】Linux基础/5.png","slug":"5.png","post":"ckk9hocao000mdwr79a1l3si1","modified":0,"renderable":0},{"_id":"source/_posts/【Linux】Linux基础/6.png","slug":"6.png","post":"ckk9hocao000mdwr79a1l3si1","modified":0,"renderable":0},{"_id":"source/_posts/【Linux】Linux基础/7.png","slug":"7.png","post":"ckk9hocao000mdwr79a1l3si1","modified":0,"renderable":0},{"_id":"source/_posts/【Linux】Linux基础/8.png","slug":"8.png","post":"ckk9hocao000mdwr79a1l3si1","modified":0,"renderable":0},{"_id":"source/_posts/【Linux】Linux基础/9.png","slug":"9.png","post":"ckk9hocao000mdwr79a1l3si1","modified":0,"renderable":0},{"_id":"source/_posts/【Lua】Lua基础/Lua基础1.png","slug":"Lua基础1.png","post":"ckk9hocaq000sdwr7hpbtfm78","modified":0,"renderable":0},{"_id":"source/_posts/【Lua】Lua基础/Lua基础2.png","slug":"Lua基础2.png","post":"ckk9hocaq000sdwr7hpbtfm78","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_10-33-38.png","slug":"Snipaste_2019-10-25_10-33-38.png","post":"ckk9hocas0011dwr7fpb7a6l9","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_10-53-07.png","slug":"Snipaste_2019-10-25_10-53-07.png","post":"ckk9hocas0011dwr7fpb7a6l9","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_10-57-11.png","slug":"Snipaste_2019-10-25_10-57-11.png","post":"ckk9hocas0011dwr7fpb7a6l9","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_11-02-10.png","slug":"Snipaste_2019-10-25_11-02-10.png","post":"ckk9hocas0011dwr7fpb7a6l9","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_11-10-28.png","slug":"Snipaste_2019-10-25_11-10-28.png","post":"ckk9hocas0011dwr7fpb7a6l9","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_11-17-59.png","slug":"Snipaste_2019-10-25_11-17-59.png","post":"ckk9hocas0011dwr7fpb7a6l9","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_11-21-18.png","slug":"Snipaste_2019-10-25_11-21-18.png","post":"ckk9hocas0011dwr7fpb7a6l9","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_11-26-07.png","slug":"Snipaste_2019-10-25_11-26-07.png","post":"ckk9hocas0011dwr7fpb7a6l9","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_11-30-52.png","slug":"Snipaste_2019-10-25_11-30-52.png","post":"ckk9hocas0011dwr7fpb7a6l9","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_11-39-53.png","slug":"Snipaste_2019-10-25_11-39-53.png","post":"ckk9hocas0011dwr7fpb7a6l9","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_11-42-14.png","slug":"Snipaste_2019-10-25_11-42-14.png","post":"ckk9hocas0011dwr7fpb7a6l9","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_11-46-47.png","slug":"Snipaste_2019-10-25_11-46-47.png","post":"ckk9hocas0011dwr7fpb7a6l9","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_11-50-37.png","slug":"Snipaste_2019-10-25_11-50-37.png","post":"ckk9hocas0011dwr7fpb7a6l9","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_11-53-42.png","slug":"Snipaste_2019-10-25_11-53-42.png","post":"ckk9hocas0011dwr7fpb7a6l9","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_11-56-15.png","slug":"Snipaste_2019-10-25_11-56-15.png","post":"ckk9hocas0011dwr7fpb7a6l9","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_13-12-40.png","slug":"Snipaste_2019-10-25_13-12-40.png","post":"ckk9hocas0011dwr7fpb7a6l9","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_13-19-47.png","slug":"Snipaste_2019-10-25_13-19-47.png","post":"ckk9hocas0011dwr7fpb7a6l9","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-25_13-32-38.png","slug":"Snipaste_2019-10-25_13-32-38.png","post":"ckk9hocas0011dwr7fpb7a6l9","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-28_17-04-19.png","slug":"Snipaste_2019-10-28_17-04-19.png","post":"ckk9hocas0011dwr7fpb7a6l9","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-28_17-26-35.png","slug":"Snipaste_2019-10-28_17-26-35.png","post":"ckk9hocas0011dwr7fpb7a6l9","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-28_17-28-37.png","slug":"Snipaste_2019-10-28_17-28-37.png","post":"ckk9hocas0011dwr7fpb7a6l9","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4组件/Snipaste_2019-10-29_09-09-05.png","slug":"Snipaste_2019-10-29_09-09-05.png","post":"ckk9hocas0011dwr7fpb7a6l9","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4连接MySQL/Snipaste_2019-10-23_10-36-25.png","slug":"Snipaste_2019-10-23_10-36-25.png","post":"ckk9hocau001adwr74wos09iu","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4连接MySQL/Snipaste_2019-11-05_17-54-58.png","slug":"Snipaste_2019-11-05_17-54-58.png","post":"ckk9hocau001adwr74wos09iu","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-02-53.png","slug":"Snipaste_2019-11-05_18-02-53.png","post":"ckk9hocau001adwr74wos09iu","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-14-47.png","slug":"Snipaste_2019-11-05_18-14-47.png","post":"ckk9hocau001adwr74wos09iu","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-17-44.png","slug":"Snipaste_2019-11-05_18-17-44.png","post":"ckk9hocau001adwr74wos09iu","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-26-48.png","slug":"Snipaste_2019-11-05_18-26-48.png","post":"ckk9hocau001adwr74wos09iu","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-27-48.png","slug":"Snipaste_2019-11-05_18-27-48.png","post":"ckk9hocau001adwr74wos09iu","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4连接MySQL/Snipaste_2019-11-05_18-34-52.png","slug":"Snipaste_2019-11-05_18-34-52.png","post":"ckk9hocau001adwr74wos09iu","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4连接MySQL/Snipaste_2019-11-05_19-12-00.png","slug":"Snipaste_2019-11-05_19-12-00.png","post":"ckk9hocau001adwr74wos09iu","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4连接MySQL/Snipaste_2019-11-05_19-14-07.png","slug":"Snipaste_2019-11-05_19-14-07.png","post":"ckk9hocau001adwr74wos09iu","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_09-41-14.png","slug":"Snipaste_2019-11-14_09-41-14.png","post":"ckk9hocat0014dwr7cr2d29ag","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_10-14-27.png","slug":"Snipaste_2019-11-14_10-14-27.png","post":"ckk9hocat0014dwr7cr2d29ag","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_10-25-52.png","slug":"Snipaste_2019-11-14_10-25-52.png","post":"ckk9hocat0014dwr7cr2d29ag","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_10-51-44.png","slug":"Snipaste_2019-11-14_10-51-44.png","post":"ckk9hocat0014dwr7cr2d29ag","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_10-58-31.png","slug":"Snipaste_2019-11-14_10-58-31.png","post":"ckk9hocat0014dwr7cr2d29ag","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_11-03-35.png","slug":"Snipaste_2019-11-14_11-03-35.png","post":"ckk9hocat0014dwr7cr2d29ag","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_11-10-41.png","slug":"Snipaste_2019-11-14_11-10-41.png","post":"ckk9hocat0014dwr7cr2d29ag","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_11-14-32.png","slug":"Snipaste_2019-11-14_11-14-32.png","post":"ckk9hocat0014dwr7cr2d29ag","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_11-50-46.png","slug":"Snipaste_2019-11-14_11-50-46.png","post":"ckk9hocat0014dwr7cr2d29ag","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_19-47-55.png","slug":"Snipaste_2019-11-14_19-47-55.png","post":"ckk9hocat0014dwr7cr2d29ag","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4联级粒子系统/Snipaste_2019-11-14_19-48-16.png","slug":"Snipaste_2019-11-14_19-48-16.png","post":"ckk9hocat0014dwr7cr2d29ag","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4联级粒子系统/Snipaste_2019-11-15_15-05-48.png","slug":"Snipaste_2019-11-15_15-05-48.png","post":"ckk9hocat0014dwr7cr2d29ag","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4联级粒子系统/Snipaste_2019-11-15_15-41-29.png","slug":"Snipaste_2019-11-15_15-41-29.png","post":"ckk9hocat0014dwr7cr2d29ag","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-14_11-46-45.png","slug":"Snipaste_2019-10-14_11-46-45.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-14_14-17-41.png","slug":"Snipaste_2019-10-14_14-17-41.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-14_14-17-46.png","slug":"Snipaste_2019-10-14_14-17-46.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-14_14-17-49.png","slug":"Snipaste_2019-10-14_14-17-49.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_10-16-42.png","slug":"Snipaste_2019-10-15_10-16-42.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_10-23-17.png","slug":"Snipaste_2019-10-15_10-23-17.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_10-23-36.png","slug":"Snipaste_2019-10-15_10-23-36.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_10-31-54.png","slug":"Snipaste_2019-10-15_10-31-54.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_10-36-15.png","slug":"Snipaste_2019-10-15_10-36-15.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_10-39-37.png","slug":"Snipaste_2019-10-15_10-39-37.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_10-42-21.png","slug":"Snipaste_2019-10-15_10-42-21.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_10-45-14.png","slug":"Snipaste_2019-10-15_10-45-14.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_10-47-10.png","slug":"Snipaste_2019-10-15_10-47-10.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_10-49-05.png","slug":"Snipaste_2019-10-15_10-49-05.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_10-50-02.png","slug":"Snipaste_2019-10-15_10-50-02.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_10-50-54.png","slug":"Snipaste_2019-10-15_10-50-54.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_10-59-58.png","slug":"Snipaste_2019-10-15_10-59-58.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_11-04-47.png","slug":"Snipaste_2019-10-15_11-04-47.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_11-04-58.png","slug":"Snipaste_2019-10-15_11-04-58.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_11-05-09.png","slug":"Snipaste_2019-10-15_11-05-09.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_11-06-57.png","slug":"Snipaste_2019-10-15_11-06-57.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_11-11-01.png","slug":"Snipaste_2019-10-15_11-11-01.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_11-11-16.png","slug":"Snipaste_2019-10-15_11-11-16.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_11-11-34.png","slug":"Snipaste_2019-10-15_11-11-34.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_11-11-45.png","slug":"Snipaste_2019-10-15_11-11-45.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_11-11-59.png","slug":"Snipaste_2019-10-15_11-11-59.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_11-12-10.png","slug":"Snipaste_2019-10-15_11-12-10.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_11-12-21.png","slug":"Snipaste_2019-10-15_11-12-21.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_11-12-31.png","slug":"Snipaste_2019-10-15_11-12-31.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_11-15-27.png","slug":"Snipaste_2019-10-15_11-15-27.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_17-55-17.png","slug":"Snipaste_2019-10-15_17-55-17.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_17-56-02.png","slug":"Snipaste_2019-10-15_17-56-02.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-15_18-02-03.png","slug":"Snipaste_2019-10-15_18-02-03.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-16_10-05-42.png","slug":"Snipaste_2019-10-16_10-05-42.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-16_10-06-10.png","slug":"Snipaste_2019-10-16_10-06-10.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-16_10-06-16.png","slug":"Snipaste_2019-10-16_10-06-16.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-16_10-07-00.png","slug":"Snipaste_2019-10-16_10-07-00.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-16_10-40-52.png","slug":"Snipaste_2019-10-16_10-40-52.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-16_17-06-01.png","slug":"Snipaste_2019-10-16_17-06-01.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-16_17-10-46.png","slug":"Snipaste_2019-10-16_17-10-46.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-16_17-13-58.png","slug":"Snipaste_2019-10-16_17-13-58.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-16_17-15-33.png","slug":"Snipaste_2019-10-16_17-15-33.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-16_21-27-20.png","slug":"Snipaste_2019-10-16_21-27-20.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-17_13-30-29.png","slug":"Snipaste_2019-10-17_13-30-29.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-17_13-30-49.png","slug":"Snipaste_2019-10-17_13-30-49.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-17_13-46-52.png","slug":"Snipaste_2019-10-17_13-46-52.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-17_21-18-55.png","slug":"Snipaste_2019-10-17_21-18-55.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-23_17-24-52.png","slug":"Snipaste_2019-10-23_17-24-52.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-23_17-38-23.png","slug":"Snipaste_2019-10-23_17-38-23.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4基础/Snipaste_2019-10-23_17-41-13.png","slug":"Snipaste_2019-10-23_17-41-13.png","post":"ckk9hocar000ydwr77gjk8z3l","modified":0,"renderable":0},{"_id":"source/_posts/【Unity3d】Lightmap/Unity_Lightmap.png","slug":"Unity_Lightmap.png","post":"ckk9hocaw001gdwr7gjee96ri","modified":0,"renderable":0},{"_id":"source/_posts/【Unity3d】Space/Unity3d_Space.png","slug":"Unity3d_Space.png","post":"ckk9hocax001jdwr7fgmhft5u","modified":0,"renderable":0},{"_id":"source/_posts/【Unity3d】Unity常用技巧笔记/Snipaste_2019-08-27_11-35-00.png","slug":"Snipaste_2019-08-27_11-35-00.png","post":"ckk9hocay001mdwr78pvk8fc4","modified":0,"renderable":0},{"_id":"source/_posts/【程序编程】程序编程高级/程序编程高级.png","slug":"程序编程高级.png","post":"ckk9hocb30024dwr7gbbne02d","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190414.jpg","slug":"QQ图片20191012190414.jpg","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190444.jpg","slug":"QQ图片20191012190444.jpg","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190448.jpg","slug":"QQ图片20191012190448.jpg","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190452.jpg","slug":"QQ图片20191012190452.jpg","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190456.jpg","slug":"QQ图片20191012190456.jpg","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190500.jpg","slug":"QQ图片20191012190500.jpg","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190504.jpg","slug":"QQ图片20191012190504.jpg","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190513.jpg","slug":"QQ图片20191012190513.jpg","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190518.jpg","slug":"QQ图片20191012190518.jpg","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190532.jpg","slug":"QQ图片20191012190532.jpg","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190538.jpg","slug":"QQ图片20191012190538.jpg","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190542.jpg","slug":"QQ图片20191012190542.jpg","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190547.jpg","slug":"QQ图片20191012190547.jpg","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190552.jpg","slug":"QQ图片20191012190552.jpg","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190556.jpg","slug":"QQ图片20191012190556.jpg","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190600.jpg","slug":"QQ图片20191012190600.jpg","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190604.jpg","slug":"QQ图片20191012190604.jpg","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190607.jpg","slug":"QQ图片20191012190607.jpg","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190612.jpg","slug":"QQ图片20191012190612.jpg","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190616.jpg","slug":"QQ图片20191012190616.jpg","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190622.jpg","slug":"QQ图片20191012190622.jpg","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190626.jpg","slug":"QQ图片20191012190626.jpg","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190630.jpg","slug":"QQ图片20191012190630.jpg","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190634.jpg","slug":"QQ图片20191012190634.jpg","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190638.jpg","slug":"QQ图片20191012190638.jpg","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/QQ图片20191012190641.jpg","slug":"QQ图片20191012190641.jpg","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/Snipaste_2019-09-08_09-15-55.png","slug":"Snipaste_2019-09-08_09-15-55.png","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/Snipaste_2019-09-08_09-23-19.png","slug":"Snipaste_2019-09-08_09-23-19.png","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/Snipaste_2019-09-08_09-28-22.png","slug":"Snipaste_2019-09-08_09-28-22.png","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在武汉跑秋招的日子/Snipaste_2019-09-08_09-34-22.png","slug":"Snipaste_2019-09-08_09-34-22.png","post":"ckk9hocb20021dwr72cg209tu","modified":0,"renderable":0},{"_id":"source/_posts/【网络游戏】网络游戏基础/网络游戏基础.jpg","slug":"网络游戏基础.jpg","post":"ckk9hocbf0039dwr7083oboaf","modified":0,"renderable":0},{"_id":"source/_posts/【网络通信】物联网通信基础/物联网通信技术基础.png","slug":"物联网通信技术基础.png","post":"ckk9hocbg003bdwr7diksgnby","modified":0,"renderable":0},{"_id":"source/_posts/【C++】C++STL标准模板库/Snipaste_2019-10-06_10-41-56.png","slug":"Snipaste_2019-10-06_10-41-56.png","post":"ckk9hocbh003edwr73uj5h7zl","modified":0,"renderable":0},{"_id":"source/_posts/【C++】C++STL标准模板库/Snipaste_2019-10-06_14-36-13.png","slug":"Snipaste_2019-10-06_14-36-13.png","post":"ckk9hocbh003edwr73uj5h7zl","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-24_09-41-27.png","slug":"Snipaste_2019-10-24_09-41-27.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-24_09-51-55.png","slug":"Snipaste_2019-10-24_09-51-55.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-24_10-45-29.png","slug":"Snipaste_2019-10-24_10-45-29.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-24_10-53-06.png","slug":"Snipaste_2019-10-24_10-53-06.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-24_10-53-34.png","slug":"Snipaste_2019-10-24_10-53-34.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-24_11-09-34.png","slug":"Snipaste_2019-10-24_11-09-34.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-24_11-12-38.png","slug":"Snipaste_2019-10-24_11-12-38.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-24_14-55-47.png","slug":"Snipaste_2019-10-24_14-55-47.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-24_15-11-12.png","slug":"Snipaste_2019-10-24_15-11-12.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_17-18-23.png","slug":"Snipaste_2019-10-25_17-18-23.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_17-23-07.png","slug":"Snipaste_2019-10-25_17-23-07.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_17-23-27.png","slug":"Snipaste_2019-10-25_17-23-27.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_17-36-36.png","slug":"Snipaste_2019-10-25_17-36-36.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-31-16.png","slug":"Snipaste_2019-10-25_18-31-16.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-31-23.png","slug":"Snipaste_2019-10-25_18-31-23.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-31-36.png","slug":"Snipaste_2019-10-25_18-31-36.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-31-47.png","slug":"Snipaste_2019-10-25_18-31-47.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-39-15.png","slug":"Snipaste_2019-10-25_18-39-15.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-39-35.png","slug":"Snipaste_2019-10-25_18-39-35.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-39-52.png","slug":"Snipaste_2019-10-25_18-39-52.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-40-45.png","slug":"Snipaste_2019-10-25_18-40-45.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-40-54.png","slug":"Snipaste_2019-10-25_18-40-54.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_18-40-59.png","slug":"Snipaste_2019-10-25_18-40-59.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_19-04-57.png","slug":"Snipaste_2019-10-25_19-04-57.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-25_19-14-34.png","slug":"Snipaste_2019-10-25_19-14-34.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_10-58-33.png","slug":"Snipaste_2019-10-26_10-58-33.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-02-54.png","slug":"Snipaste_2019-10-26_11-02-54.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-21-48.png","slug":"Snipaste_2019-10-26_11-21-48.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-24-33.png","slug":"Snipaste_2019-10-26_11-24-33.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-37-55.png","slug":"Snipaste_2019-10-26_11-37-55.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-42-24.png","slug":"Snipaste_2019-10-26_11-42-24.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-46-46.png","slug":"Snipaste_2019-10-26_11-46-46.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-50-31.png","slug":"Snipaste_2019-10-26_11-50-31.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-53-49.png","slug":"Snipaste_2019-10-26_11-53-49.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_11-59-54.png","slug":"Snipaste_2019-10-26_11-59-54.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-07-44.png","slug":"Snipaste_2019-10-26_12-07-44.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-07-50.png","slug":"Snipaste_2019-10-26_12-07-50.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-12-59.png","slug":"Snipaste_2019-10-26_12-12-59.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-21-30.png","slug":"Snipaste_2019-10-26_12-21-30.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-25-34.png","slug":"Snipaste_2019-10-26_12-25-34.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-29-34.png","slug":"Snipaste_2019-10-26_12-29-34.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_12-30-00.png","slug":"Snipaste_2019-10-26_12-30-00.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_17-38-54.png","slug":"Snipaste_2019-10-26_17-38-54.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-26_19-59-29.png","slug":"Snipaste_2019-10-26_19-59-29.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-27_10-32-38.png","slug":"Snipaste_2019-10-27_10-32-38.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-27_10-35-51.png","slug":"Snipaste_2019-10-27_10-35-51.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-27_10-38-13.png","slug":"Snipaste_2019-10-27_10-38-13.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-27_11-01-39.png","slug":"Snipaste_2019-10-27_11-01-39.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-27_11-04-21.png","slug":"Snipaste_2019-10-27_11-04-21.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-27_11-28-43.png","slug":"Snipaste_2019-10-27_11-28-43.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-27_11-31-04.png","slug":"Snipaste_2019-10-27_11-31-04.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-28_15-51-30.png","slug":"Snipaste_2019-10-28_15-51-30.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-28_16-45-41.png","slug":"Snipaste_2019-10-28_16-45-41.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【UE4】UE4蓝图基础/Snipaste_2019-10-28_17-00-10.png","slug":"Snipaste_2019-10-28_17-00-10.png","post":"ckk9hocbj003ldwr7e8jt77cw","modified":0,"renderable":0},{"_id":"source/_posts/【C++】C++高级/Snipaste_2019-09-14_09-39-52.png","slug":"Snipaste_2019-09-14_09-39-52.png","post":"ckk9hocbm003xdwr7encjdct0","modified":0,"renderable":0},{"_id":"source/_posts/【C++】C++高级/Snipaste_2019-09-14_16-29-43.png","slug":"Snipaste_2019-09-14_16-29-43.png","post":"ckk9hocbm003xdwr7encjdct0","modified":0,"renderable":0},{"_id":"source/_posts/【C++】C++高级/Snipaste_2019-10-01_16-21-15.png","slug":"Snipaste_2019-10-01_16-21-15.png","post":"ckk9hocbm003xdwr7encjdct0","modified":0,"renderable":0},{"_id":"source/_posts/【C++】C++高级/Snipaste_2019-10-01_16-52-53.png","slug":"Snipaste_2019-10-01_16-52-53.png","post":"ckk9hocbm003xdwr7encjdct0","modified":0,"renderable":0},{"_id":"source/_posts/【C++】C++高级/Snipaste_2019-10-02_15-50-39.png","slug":"Snipaste_2019-10-02_15-50-39.png","post":"ckk9hocbm003xdwr7encjdct0","modified":0,"renderable":0},{"_id":"source/_posts/【C++】C++高级/Snipaste_2019-10-02_16-10-55.png","slug":"Snipaste_2019-10-02_16-10-55.png","post":"ckk9hocbm003xdwr7encjdct0","modified":0,"renderable":0},{"_id":"source/_posts/【C++】C++高级/Snipaste_2019-10-06_10-03-47.png","slug":"Snipaste_2019-10-06_10-03-47.png","post":"ckk9hocbm003xdwr7encjdct0","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在衡变的日子/QQ图片20210202211250.jpg","slug":"QQ图片20210202211250.jpg","post":"ckko29br50000pwr7hthl4tkw","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在衡变的日子/QQ图片20210202211257.jpg","slug":"QQ图片20210202211257.jpg","post":"ckko29br50000pwr7hthl4tkw","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在衡变的日子/QQ图片20210202211300.jpg","slug":"QQ图片20210202211300.jpg","post":"ckko29br50000pwr7hthl4tkw","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在衡变的日子/QQ图片20210202211306.jpg","slug":"QQ图片20210202211306.jpg","post":"ckko29br50000pwr7hthl4tkw","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在衡变的日子/QQ图片20210202211319.jpg","slug":"QQ图片20210202211319.jpg","post":"ckko29br50000pwr7hthl4tkw","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在衡变的日子/QQ图片20210202211323.jpg","slug":"QQ图片20210202211323.jpg","post":"ckko29br50000pwr7hthl4tkw","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在衡变的日子/QQ图片20210202211325.jpg","slug":"QQ图片20210202211325.jpg","post":"ckko29br50000pwr7hthl4tkw","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在衡变的日子/QQ图片20210202211328.jpg","slug":"QQ图片20210202211328.jpg","post":"ckko29br50000pwr7hthl4tkw","modified":0,"renderable":0},{"_id":"source/_posts/【日记】在衡变的日子/QQ图片20210202211910.jpg","slug":"QQ图片20210202211910.jpg","post":"ckko29br50000pwr7hthl4tkw","modified":0,"renderable":0},{"_id":"source/_posts/【Dev】DevExpress应用/Image_20201222193848.png","slug":"Image_20201222193848.png","post":"ckkou93hl0001ekr799tm2wkb","modified":0,"renderable":0},{"_id":"source/_posts/【Dev】DevExpress应用/Snipaste_2020-12-17_19-20-19.png","slug":"Snipaste_2020-12-17_19-20-19.png","post":"ckkou93hl0001ekr799tm2wkb","modified":0,"renderable":0},{"_id":"source/_posts/【Dev】DevExpress应用/Snipaste_2020-12-17_19-29-45.png","slug":"Snipaste_2020-12-17_19-29-45.png","post":"ckkou93hl0001ekr799tm2wkb","modified":0,"renderable":0},{"_id":"source/_posts/【Dev】DevExpress应用/Snipaste_2020-12-17_19-49-11.png","slug":"Snipaste_2020-12-17_19-49-11.png","post":"ckkou93hl0001ekr799tm2wkb","modified":0,"renderable":0},{"_id":"source/_posts/【Dev】DevExpress应用/Snipaste_2020-12-18_09-11-36.png","slug":"Snipaste_2020-12-18_09-11-36.png","post":"ckkou93hl0001ekr799tm2wkb","modified":0,"renderable":0},{"_id":"source/_posts/【Dev】DevExpress应用/Snipaste_2020-12-18_09-13-12.png","slug":"Snipaste_2020-12-18_09-13-12.png","post":"ckkou93hl0001ekr799tm2wkb","modified":0,"renderable":0},{"_id":"source/_posts/【Dev】DevExpress应用/Snipaste_2020-12-22_19-13-20.png","slug":"Snipaste_2020-12-22_19-13-20.png","post":"ckkou93hl0001ekr799tm2wkb","modified":0,"renderable":0},{"_id":"source/_posts/【Dev】DevExpress应用/Snipaste_2021-01-06_21-26-31.png","slug":"Snipaste_2021-01-06_21-26-31.png","post":"ckkou93hl0001ekr799tm2wkb","modified":0,"renderable":0},{"_id":"source/_posts/【Dev】DevExpress应用/Snipaste_2021-01-07_20-38-53.png","slug":"Snipaste_2021-01-07_20-38-53.png","post":"ckkou93hl0001ekr799tm2wkb","modified":0,"renderable":0},{"_id":"source/_posts/【Dev】DevExpress应用/Snipaste_2021-01-07_20-43-04.png","slug":"Snipaste_2021-01-07_20-43-04.png","post":"ckkou93hl0001ekr799tm2wkb","modified":0,"renderable":0},{"_id":"source/_posts/【Dev】DevExpress应用/Snipaste_2021-01-07_20-45-28.png","slug":"Snipaste_2021-01-07_20-45-28.png","post":"ckkou93hl0001ekr799tm2wkb","modified":0,"renderable":0},{"_id":"source/_posts/【Dev】DevExpress应用/Snipaste_2021-01-07_20-45-55.png","slug":"Snipaste_2021-01-07_20-45-55.png","post":"ckkou93hl0001ekr799tm2wkb","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckk9hoca90000dwr79kkt1xys","category_id":"ckk9hocae0002dwr72kfc6kt2","_id":"ckk9hocak000cdwr7bqr1aaef"},{"post_id":"ckk9hocaj000adwr7ajrd7mo3","category_id":"ckk9hocah0007dwr747zbhgqj","_id":"ckk9hocan000idwr709b94bv2"},{"post_id":"ckk9hocac0001dwr7gfqlepzz","category_id":"ckk9hocah0007dwr747zbhgqj","_id":"ckk9hocao000ndwr7gsqi5d75"},{"post_id":"ckk9hocak000bdwr746nx9ti7","category_id":"ckk9hocah0007dwr747zbhgqj","_id":"ckk9hocap000pdwr71w4z2c6s"},{"post_id":"ckk9hocal000gdwr7eaqfdjo9","category_id":"ckk9hocah0007dwr747zbhgqj","_id":"ckk9hocaq000tdwr7bg0pd13k"},{"post_id":"ckk9hocaf0004dwr7c2d95mo6","category_id":"ckk9hocae0002dwr72kfc6kt2","_id":"ckk9hocar000wdwr72yytgdxy"},{"post_id":"ckk9hocam000hdwr7ht7n3pz9","category_id":"ckk9hocah0007dwr747zbhgqj","_id":"ckk9hocas000zdwr71a832z0z"},{"post_id":"ckk9hocao000mdwr79a1l3si1","category_id":"ckk9hocae0002dwr72kfc6kt2","_id":"ckk9hocas0012dwr76fpqaj6r"},{"post_id":"ckk9hocag0005dwr7b9b63nqp","category_id":"ckk9hocah0007dwr747zbhgqj","_id":"ckk9hocat0015dwr73pyb9hq3"},{"post_id":"ckk9hocao000odwr7743od9tg","category_id":"ckk9hocah0007dwr747zbhgqj","_id":"ckk9hocau0018dwr79prndvwv"},{"post_id":"ckk9hocaq000sdwr7hpbtfm78","category_id":"ckk9hocae0002dwr72kfc6kt2","_id":"ckk9hocav001bdwr70rjs8vb8"},{"post_id":"ckk9hocah0006dwr78y3x38ht","category_id":"ckk9hocah0007dwr747zbhgqj","_id":"ckk9hocaw001edwr78nqm6sxi"},{"post_id":"ckk9hocaq000vdwr77ko3d286","category_id":"ckk9hocae0002dwr72kfc6kt2","_id":"ckk9hocaw001hdwr7fsf09b7u"},{"post_id":"ckk9hocas0011dwr7fpb7a6l9","category_id":"ckk9hocae0002dwr72kfc6kt2","_id":"ckk9hocax001kdwr7bc6v1fog"},{"post_id":"ckk9hocat0014dwr7cr2d29ag","category_id":"ckk9hocae0002dwr72kfc6kt2","_id":"ckk9hocay001ndwr73i0dbj8e"},{"post_id":"ckk9hocau0017dwr75lwb8vmf","category_id":"ckk9hocah0007dwr747zbhgqj","_id":"ckk9hocaz001qdwr7f5tcdw6a"},{"post_id":"ckk9hocau001adwr74wos09iu","category_id":"ckk9hocah0007dwr747zbhgqj","_id":"ckk9hocb0001tdwr7fvic4pgm"},{"post_id":"ckk9hocav001ddwr74z0y3xk5","category_id":"ckk9hocae0002dwr72kfc6kt2","_id":"ckk9hocb1001wdwr7dp0n61u2"},{"post_id":"ckk9hocaw001gdwr7gjee96ri","category_id":"ckk9hocae0002dwr72kfc6kt2","_id":"ckk9hocb1001ydwr7eiu970iu"},{"post_id":"ckk9hocax001jdwr7fgmhft5u","category_id":"ckk9hocae0002dwr72kfc6kt2","_id":"ckk9hocb20022dwr7djfd4kyd"},{"post_id":"ckk9hocay001mdwr78pvk8fc4","category_id":"ckk9hocae0002dwr72kfc6kt2","_id":"ckk9hocb50025dwr708gx0627"},{"post_id":"ckk9hocay001pdwr79y3y9y8t","category_id":"ckk9hocae0002dwr72kfc6kt2","_id":"ckk9hocb60027dwr7gv4i3ipb"},{"post_id":"ckk9hocaz001sdwr73i2j20dm","category_id":"ckk9hocae0002dwr72kfc6kt2","_id":"ckk9hocb6002adwr7bf50f1vl"},{"post_id":"ckk9hocb0001vdwr79ntm2hb7","category_id":"ckk9hocae0002dwr72kfc6kt2","_id":"ckk9hocb6002cdwr7dlme6nlz"},{"post_id":"ckk9hocb30024dwr7gbbne02d","category_id":"ckk9hocae0002dwr72kfc6kt2","_id":"ckk9hocb6002edwr79p611sok"},{"post_id":"ckk9hocb1001xdwr744r64o2j","category_id":"ckk9hocb30023dwr71fa3gojs","_id":"ckk9hocb7002gdwr7evvp0or1"},{"post_id":"ckk9hocb20021dwr72cg209tu","category_id":"ckk9hocb60029dwr73v0w6kmf","_id":"ckk9hocb7002idwr7bftwbmxf"},{"post_id":"ckk9hocbe0038dwr7g7g7hmyk","category_id":"ckk9hocah0007dwr747zbhgqj","_id":"ckk9hocbh003ddwr71uz7hb4g"},{"post_id":"ckk9hocbf0039dwr7083oboaf","category_id":"ckk9hocae0002dwr72kfc6kt2","_id":"ckk9hocbi003fdwr77jj39mv9"},{"post_id":"ckk9hocbg003bdwr7diksgnby","category_id":"ckk9hocae0002dwr72kfc6kt2","_id":"ckk9hocbj003jdwr76pbt7kbu"},{"post_id":"ckk9hocbh003cdwr70i2k320s","category_id":"ckk9hocae0002dwr72kfc6kt2","_id":"ckk9hocbk003mdwr7886t032d"},{"post_id":"ckk9hocbh003edwr73uj5h7zl","category_id":"ckk9hocae0002dwr72kfc6kt2","_id":"ckk9hocbk003pdwr76ocped16"},{"post_id":"ckk9hocbi003idwr74vw2g9xb","category_id":"ckk9hocae0002dwr72kfc6kt2","_id":"ckk9hocbk003rdwr7hiiv1u4e"},{"post_id":"ckk9hocbj003ldwr7e8jt77cw","category_id":"ckk9hocae0002dwr72kfc6kt2","_id":"ckk9hocbl003udwr780kjc6in"},{"post_id":"ckk9hocbm003xdwr7encjdct0","category_id":"ckk9hocae0002dwr72kfc6kt2","_id":"ckk9hocbm003zdwr7ent1gmj1"},{"post_id":"ckko29br50000pwr7hthl4tkw","category_id":"ckk9hocb60029dwr73v0w6kmf","_id":"ckko29bt70002pwr73ycc1tkt"},{"post_id":"ckkou93hl0001ekr799tm2wkb","category_id":"ckk9hocah0007dwr747zbhgqj","_id":"ckkou93ht0003ekr70zwjg8x7"},{"post_id":"ckkou93gg0000ekr70u00eitq","category_id":"ckk9hocae0002dwr72kfc6kt2","_id":"ckkoua5ub0001c0r78n1d1jjl"}],"PostTag":[{"post_id":"ckk9hoca90000dwr79kkt1xys","tag_id":"ckk9hocaf0003dwr782wmgvg8","_id":"ckk9hocaj0009dwr7fk6m0c9j"},{"post_id":"ckk9hocac0001dwr7gfqlepzz","tag_id":"ckk9hocaf0003dwr782wmgvg8","_id":"ckk9hocal000fdwr71fv3g6ep"},{"post_id":"ckk9hocaf0004dwr7c2d95mo6","tag_id":"ckk9hocaf0003dwr782wmgvg8","_id":"ckk9hocao000ldwr7drl30u0b"},{"post_id":"ckk9hocag0005dwr7b9b63nqp","tag_id":"ckk9hocan000jdwr7e12h3gq1","_id":"ckk9hocaq000udwr7hhix30lf"},{"post_id":"ckk9hocah0006dwr78y3x38ht","tag_id":"ckk9hocan000jdwr7e12h3gq1","_id":"ckk9hocas0010dwr7788m56ik"},{"post_id":"ckk9hocaj000adwr7ajrd7mo3","tag_id":"ckk9hocan000jdwr7e12h3gq1","_id":"ckk9hocat0016dwr7014be7iw"},{"post_id":"ckk9hocak000bdwr746nx9ti7","tag_id":"ckk9hocan000jdwr7e12h3gq1","_id":"ckk9hocav001cdwr7fchxc2iy"},{"post_id":"ckk9hocal000gdwr7eaqfdjo9","tag_id":"ckk9hocan000jdwr7e12h3gq1","_id":"ckk9hocaw001idwr7a87w2yx5"},{"post_id":"ckk9hocam000hdwr7ht7n3pz9","tag_id":"ckk9hocaw001fdwr77ukob2zq","_id":"ckk9hocay001odwr778g66w0h"},{"post_id":"ckk9hocao000mdwr79a1l3si1","tag_id":"ckk9hocax001ldwr73ncael3d","_id":"ckk9hocb0001udwr7cp80dee2"},{"post_id":"ckk9hocao000odwr7743od9tg","tag_id":"ckk9hocaz001rdwr79gf07c4s","_id":"ckk9hocb20020dwr7hozu8maa"},{"post_id":"ckk9hocaq000sdwr7hpbtfm78","tag_id":"ckk9hocb1001zdwr7g7oh9e5q","_id":"ckk9hocb60028dwr7bnebew87"},{"post_id":"ckk9hocaq000vdwr77ko3d286","tag_id":"ckk9hocb50026dwr70ythcz35","_id":"ckk9hocb6002ddwr706hp4m5z"},{"post_id":"ckk9hocas0011dwr7fpb7a6l9","tag_id":"ckk9hocb6002bdwr7d5jf3gz2","_id":"ckk9hocb7002hdwr7gdb37ppi"},{"post_id":"ckk9hocat0014dwr7cr2d29ag","tag_id":"ckk9hocb6002bdwr7d5jf3gz2","_id":"ckk9hocb7002kdwr7d4np192p"},{"post_id":"ckk9hocau0017dwr75lwb8vmf","tag_id":"ckk9hocb6002bdwr7d5jf3gz2","_id":"ckk9hocb8002mdwr76r50hyby"},{"post_id":"ckk9hocau001adwr74wos09iu","tag_id":"ckk9hocb6002bdwr7d5jf3gz2","_id":"ckk9hocb8002odwr7fniwbpc0"},{"post_id":"ckk9hocav001ddwr74z0y3xk5","tag_id":"ckk9hocb8002ndwr74ymegvv0","_id":"ckk9hocb8002qdwr7fifrd2jp"},{"post_id":"ckk9hocaw001gdwr7gjee96ri","tag_id":"ckk9hocb8002ndwr74ymegvv0","_id":"ckk9hocb9002sdwr7d5lp14lu"},{"post_id":"ckk9hocax001jdwr7fgmhft5u","tag_id":"ckk9hocb8002ndwr74ymegvv0","_id":"ckk9hocb9002udwr76y7j6942"},{"post_id":"ckk9hocay001mdwr78pvk8fc4","tag_id":"ckk9hocb8002ndwr74ymegvv0","_id":"ckk9hocb9002wdwr73yy81kqc"},{"post_id":"ckk9hocay001pdwr79y3y9y8t","tag_id":"ckk9hocb8002ndwr74ymegvv0","_id":"ckk9hocba002ydwr72pfpaf97"},{"post_id":"ckk9hocaz001sdwr73i2j20dm","tag_id":"ckk9hocb8002ndwr74ymegvv0","_id":"ckk9hocba0030dwr7an5kcsro"},{"post_id":"ckk9hocb0001vdwr79ntm2hb7","tag_id":"ckk9hocba002zdwr74m8kgqes","_id":"ckk9hocba0032dwr7ggcshwua"},{"post_id":"ckk9hocb1001xdwr744r64o2j","tag_id":"ckk9hocba0031dwr7czki697q","_id":"ckk9hocbb0034dwr7dlx03lnl"},{"post_id":"ckk9hocb20021dwr72cg209tu","tag_id":"ckk9hocbb0033dwr7257wdbmv","_id":"ckk9hocbb0036dwr730cs3f4c"},{"post_id":"ckk9hocb30024dwr7gbbne02d","tag_id":"ckk9hocbb0035dwr78nu43x33","_id":"ckk9hocbb0037dwr73frxhy91"},{"post_id":"ckk9hocbe0038dwr7g7g7hmyk","tag_id":"ckk9hocbg003adwr79dsr6kwx","_id":"ckk9hocbi003hdwr73c1p1pmc"},{"post_id":"ckk9hocbh003edwr73uj5h7zl","tag_id":"ckk9hocan000jdwr7e12h3gq1","_id":"ckk9hocbj003kdwr772kz71q5"},{"post_id":"ckk9hocbi003idwr74vw2g9xb","tag_id":"ckk9hocan000jdwr7e12h3gq1","_id":"ckk9hocbk003odwr738oyezqj"},{"post_id":"ckk9hocbf0039dwr7083oboaf","tag_id":"ckk9hocbi003gdwr7awnl0blu","_id":"ckk9hocbk003qdwr747gk2vgo"},{"post_id":"ckk9hocbj003ldwr7e8jt77cw","tag_id":"ckk9hocb6002bdwr7d5jf3gz2","_id":"ckk9hocbl003tdwr7dox20fdv"},{"post_id":"ckk9hocbg003bdwr7diksgnby","tag_id":"ckk9hocbk003ndwr71amh70fy","_id":"ckk9hocbl003vdwr72fjy5f41"},{"post_id":"ckk9hocbh003cdwr70i2k320s","tag_id":"ckk9hocbk003sdwr7ec2meaor","_id":"ckk9hocbl003wdwr779pv0qrc"},{"post_id":"ckk9hocbm003xdwr7encjdct0","tag_id":"ckk9hocan000jdwr7e12h3gq1","_id":"ckk9hocbm003ydwr78xxzfvkh"},{"post_id":"ckko29br50000pwr7hthl4tkw","tag_id":"ckk9hocbb0033dwr7257wdbmv","_id":"ckko29bt60001pwr7hgkab2kp"},{"post_id":"ckkou93hl0001ekr799tm2wkb","tag_id":"ckkou93hm0002ekr7euc6ad59","_id":"ckkou93ht0004ekr79fyg9mu8"},{"post_id":"ckkou93gg0000ekr70u00eitq","tag_id":"ckk9hocan000jdwr7e12h3gq1","_id":"ckkoua5ua0000c0r7erc39hf8"}],"Tag":[{"name":"C#","_id":"ckk9hocaf0003dwr782wmgvg8"},{"name":"C++","_id":"ckk9hocan000jdwr7e12h3gq1"},{"name":"C","_id":"ckk9hocaw001fdwr77ukob2zq"},{"name":"Linux","_id":"ckk9hocax001ldwr73ncael3d"},{"name":"MySQL","_id":"ckk9hocaz001rdwr79gf07c4s"},{"name":"Lua","_id":"ckk9hocb1001zdwr7g7oh9e5q"},{"name":"Qt","_id":"ckk9hocb50026dwr70ythcz35"},{"name":"UE4","_id":"ckk9hocb6002bdwr7d5jf3gz2"},{"name":"Unity3d","_id":"ckk9hocb8002ndwr74ymegvv0"},{"name":"shell","_id":"ckk9hocba002zdwr74m8kgqes"},{"name":"程序问题","_id":"ckk9hocba0031dwr7czki697q"},{"name":"大事件","_id":"ckk9hocbb0033dwr7257wdbmv"},{"name":"程序编程原理","_id":"ckk9hocbb0035dwr78nu43x33"},{"name":"算法","_id":"ckk9hocbg003adwr79dsr6kwx"},{"name":"游戏网络","_id":"ckk9hocbi003gdwr7awnl0blu"},{"name":"网络通信","_id":"ckk9hocbk003ndwr71amh70fy"},{"name":"图形学","_id":"ckk9hocbk003sdwr7ec2meaor"},{"name":"Dev","_id":"ckkou93hm0002ekr7euc6ad59"}]}}